<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Solidity语法</title>
      <link href="2021/11/29/solidity_1/"/>
      <url>2021/11/29/solidity_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/057.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a><blockquote><p>疑问：读书时不太懂的。</p></blockquote><h2 id="一、编程基础"><a href="#一、编程基础" class="headerlink" title="一、编程基础"></a>一、编程基础</h2><h3 id="1-基本"><a href="#1-基本" class="headerlink" title="1 基本"></a>1 基本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">// 版本控制</span></span><br><span class="line">pragma solidity &gt;= ^<span class="number">0.4</span><span class="number">.0</span> &lt; <span class="number">0.8</span>;</span><br><span class="line"><span class="comment">/** 多行注释 -- 类似ts **/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aliceName <span class="keyword">from</span> <span class="string">"filename"</span></span><br></pre></td></tr></table></figure><h3 id="2-库"><a href="#2-库" class="headerlink" title="2 库"></a>2 库</h3><ol><li>库<strong>不</strong>能有：<code>fallback函数</code>、<code>paybale</code>关键字、<code>storage</code>变量、日志；</li><li>库可以：修改和他们相联的合约的storage变量；<strong>分发事件</strong></li></ol><blockquote><p>类比：函数传入C指针 – 库处理合约storage</p></blockquote><p>web3库开发dapp监听eventemittercontract.emit 收到<em>库函数<em>触发事件，但是监听eventemitterLib.emit事件，</em>什么也收不到。</em></p><h3 id="3-合约文件结构"><a href="#3-合约文件结构" class="headerlink" title="3 合约文件结构"></a>3 合约文件结构</h3><ol><li>状态变量：state variables</li><li>结构定义：structure definitions</li><li>修饰符定义：modifier definitions </li><li>事件声明：event definitions</li><li>枚举定义：enumeration definitions</li><li>函数定义：function definitions</li></ol><h3 id="4-变量类型"><a href="#4-变量类型" class="headerlink" title="4. 变量类型"></a>4. 变量类型</h3><ol><li>基础类型（int、uint、struct）、数组类型、映射</li><li>固定变量static、动态变量dynamic</li></ol><h5 id="4-1-值类型"><a href="#4-1-值类型" class="headerlink" title="4.1 值类型"></a>4.1 值类型</h5><ol><li>布尔类型：true\false; <em>不能和整数隐式转换</em></li><li>整型：int\uint；默认256；包含uint8\16\24\32..;默认为<em>十进制</em></li><li>地址：长度20B、160bit,<em>可以用uint160编码</em></li><li>定长字节数组：<em>？？</em> 疑问；</li><li>有理数和整型字面量：literal 本身是<em>值</em> 疑问；</li><li>枚举类型：enums <em>不能和整数隐式转换</em></li><li>函数：可以将函数赋值给变量；函数作为参数；返回函数；</li></ol><h5 id="4-2-引用类型"><a href="#4-2-引用类型" class="headerlink" title="4.2 引用类型"></a>4.2 引用类型</h5><p>为了避免空间占用太大，采用引用类型：</p><ol><li>不定长字节数组：bytes;</li><li>字符串：string； 没有\0结尾，”test”就是<em>4个字节</em></li><li>数组：array: memory不可以更改数组长度，storage可以根据.lengthg更改</li><li>结构体：struct： 自定义数据结构</li></ol><h5 id="4-3-字典、映射"><a href="#4-3-字典、映射" class="headerlink" title="4.3 字典、映射"></a>4.3 字典、映射</h5><p><strong>key的类型允许除【字典】以外的所有类型，数组、合约、枚举、结构体</strong></p><p>mapping(keyType -&gt;valueType) </p><h5 id="4-4-特殊情况"><a href="#4-4-特殊情况" class="headerlink" title="4.4 特殊情况"></a>4.4 特殊情况</h5><p>变量放在<em>栈</em>上，只能容纳<em>16层</em></p><h3 id="5-操作符"><a href="#5-操作符" class="headerlink" title="5 操作符"></a>5 操作符</h3><p>用到再说吧</p><h3 id="6-语句"><a href="#6-语句" class="headerlink" title="6 语句"></a>6 语句</h3><blockquote><p>不支持switch goto<br>单行语句中的大括号可以删除</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>: 跳出循环</span><br><span class="line"><span class="keyword">continue</span>: 继续下次</span><br><span class="line"><span class="keyword">return</span>: 返回</span><br><span class="line">？：：:三元</span><br></pre></td></tr></table></figure><h3 id="7-修饰符"><a href="#7-修饰符" class="headerlink" title="7 修饰符"></a>7 修饰符</h3><ol><li>函数修饰符：external、internal&lt;默认&gt;、public&lt;默认&gt;、private</li><li>针对状态变量：constant、view、pure、paybale</li></ol><ul><li>internal<ol><li>internal 不能从外部访问，不是接口的一部分</li><li>只能内部调用、或继承的合约中调用；</li><li>不能加this, this代表以外部形式调用</li></ol></li><li>external<ol><li>外部函数是合约的一部分，可以从其他合约或通过交易发起调用</li><li>this.f()</li></ol></li><li>public<ol><li>公开函数为合约接口的一部分</li><li>public 的状态变量，会自动创建一个访问器</li></ol></li><li>private<ol><li>函数和变量仅仅在当前合约可以访问</li><li><em>继承中不能访问</em></li><li>是接口的一部分</li></ol></li><li>constant<ol><li>不能改变状态，只能获取状态返回</li><li><em>似乎没啥用</em></li></ol></li><li>view <ol><li>不能修改状态变量，等同 constant</li></ol></li><li>pure<ol><li>更多的限制；</li><li>不能读写状态量，函数不能读写当前的状态和交易变量</li></ol></li><li><strong>paybale</strong><ol><li>声明的函数可以从调用者那里接受ether;</li><li>一个函数如果声明了payable，说明只能接受ether；</li><li>如果调用者没有eth就报错</li></ol></li></ul><h4 id="external-amp-public-🚩🚩"><a href="#external-amp-public-🚩🚩" class="headerlink" title="external &amp; public 🚩🚩"></a>external &amp; public 🚩🚩</h4><ol><li>可见度：都可以被其他合约通过调用、交易的方式调用</li><li>不同<ol><li>internal <em>消耗最少</em>，用jump命令，参数是以内存指针传递</li><li>public因为不知道调用者是 external ｜ internal； public就会像处理internal一样将<em>参数复制到memory</em>，这样操作很贵</li><li><em>如果可以确信函数只能外部调用，则用external</em></li><li>大多数情况，this.f() 调用方式<em>没有意义</em>，他会调用<code>call()</code></li></ol></li></ol><h4 id="internal-amp-external"><a href="#internal-amp-external" class="headerlink" title="internal &amp; external"></a>internal &amp; external</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity &gt;=<span class="number">0.8</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line">contract TestFun &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">internalFunc</span>(<span class="params"></span>) <span class="title">internal</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">externalFunc</span>(<span class="params"></span>) <span class="title">external</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callFunc</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 直接使用内部的方式调用</span></span><br><span class="line">        internalFunc();</span><br><span class="line">        <span class="comment">// ❌ 不能内部调用一个外部函数</span></span><br><span class="line">        <span class="comment">// DeclarationError: Undeclared identifier. Did you mean "internalFunc" or "externalFunc"?</span></span><br><span class="line">        <span class="comment">// externalFunc();</span></span><br><span class="line">        <span class="comment">// ❌ 不能通过external的方式调用internal</span></span><br><span class="line">        <span class="comment">// TypeError: Member "internalFunc" not found or not visible after argument-dependent lookup in contract TestFun.</span></span><br><span class="line">        <span class="comment">// this.internalFunc();</span></span><br><span class="line">        <span class="keyword">this</span>.externalFunc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TestFun1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">externalCall</span>(<span class="params">TestFun tf</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用另一个函数的外部函数</span></span><br><span class="line">       tf.externalFunc();</span><br><span class="line">       <span class="comment">// ❌ 不能调用另外一个合约的内部函数</span></span><br><span class="line">       <span class="comment">// TypeError: Member "internalFunc" not found or not visible after argument-dependent lookup in contract TestFun.</span></span><br><span class="line">    <span class="comment">//    tf.internalFunc();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-自定义修饰符"><a href="#8-自定义修饰符" class="headerlink" title="8 自定义修饰符"></a>8 自定义修饰符</h3><p>修饰符可以改变函数的行为，类似装饰器。</p><ol><li>执行函数前检查条件</li><li>修饰符可以继承</li><li>可以被派生合约重载</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line"><span class="keyword">constructor</span>() public &#123;</span><br><span class="line">owner = msg.sender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">address payable owner;</span><br><span class="line">    <span class="comment">// 合约定义了个 【修饰符】在派生合约里使用</span></span><br><span class="line">    <span class="comment">// 函数体会加入到修饰符定义里的特殊符号 _ 之后</span></span><br><span class="line">modifier onlyOwner() &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == owner, <span class="string">'Only owner can call this function'</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract mortal is owned &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">        self.destruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract priced &#123;</span><br><span class="line">    modifier consts(uint price) &#123;</span><br><span class="line">        <span class="keyword">if</span>(msg.value &gt;= price) &#123;</span><br><span class="line">            <span class="comment">// 表示函数体</span></span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Register is priced, owned &#123;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span>=&gt;</span>bool) registeredAddresses;</span><br><span class="line"></span><br><span class="line">    uint price;</span><br><span class="line">    <span class="keyword">constructor</span> (uint initialPrice) public &#123;</span><br><span class="line">        price = initialPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> <span class="title">costs</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">        registeredAddresses[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changePrice</span>(<span class="params">uint _price</span>) <span class="title">public</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">        price = _price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Mutex &#123;</span><br><span class="line">    bool locked;</span><br><span class="line">    modifier noReentrancy ()&#123;</span><br><span class="line">        <span class="built_in">require</span>(!locked, <span class="string">'Reentrant call'</span>);</span><br><span class="line">        locked = <span class="literal">true</span>;</span><br><span class="line">        _;</span><br><span class="line">        locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">noReentrancy</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        (bool, success,) = msg.sender.call(<span class="string">''</span>);</span><br><span class="line">        <span class="built_in">require</span>(succeess);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-数据位置"><a href="#9-数据位置" class="headerlink" title="9 数据位置"></a>9 数据位置</h3><blockquote><p>evm提供四种数据结构来存储变量；</p></blockquote><ul><li>storage<ol><li><em>链上</em>永久存储；</li><li>可以被所有函数访问的<em>全局变量</em></li></ol></li><li>memory<ol><li><em>合约<em>本地</em>内存变量</em></li><li>生命周期很短，函数执行结束就销毁</li></ol></li><li>calldata<ol><li>所有函数调用你的数据，包含函数参数的保存位置</li><li><em>不可修改</em>的内存位置</li></ol></li><li>stack<ol><li>EVM 维护了个1024级的栈，用来导入变量和以太坊的机器、汇编指令代码交互；</li></ol></li></ul><h4 id="数据结构-总结"><a href="#数据结构-总结" class="headerlink" title="数据结构-总结"></a>数据结构-总结</h4><ol><li>memory：默认的函数参数、返回的参数</li><li>storage: 默认的局部变量、默认的状态变量&lt;合约声明的公有变量&gt;</li><li><strong>外部函数的参数&lt;不包含返回参数&gt;</strong> 被强制指定为<em>calldata</em></li></ol>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链基本概念</title>
      <link href="2021/07/27/black_1/"/>
      <url>2021/07/27/black_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/057.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a><h3 id="以太坊是什么"><a href="#以太坊是什么" class="headerlink" title="以太坊是什么"></a>以太坊是什么</h3><blockquote><p><strong>以太坊</strong>（Ethereum）是一个建立在区块链技术之上， 去中心化应用<strong>平台</strong>。它允许任何人在平台中建立和使用通过区块链技术运行的去中心化应用。</p></blockquote><p>对这句话不理解的同学，姑且可以理解为以太坊是区块链里的Android，它是一个开发平台，让我们就可以像基于Android Framework一样基于区块链技术写应用。</p><p>在没有以太坊之前，写区块链应用是这样的：拷贝一份比特币代码，然后去改底层代码如加密算法，共识机制，网络协议等等（很多山寨币就是这样，改改就出来一个新币）。</p><p>以太坊平台对底层区块链技术进行了<strong>封装</strong>，让区块链应用开发者可以直接<strong>基于以太坊平台进行开发</strong>，只要专注于开发应用本身逻辑的智能合约，这样就可以大大降低开发难度。</p><p>目前围绕以太坊已经形成了一个最为完善的开发生态：有很多经过测试和验证的开发库、有完善的开发者文档（中文的也很多）及开发测试工具。</p><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><p>那么什么是智能合约呢？以太坊网络上<strong>运行程序</strong>就称之为智能合约， 它和其他的程序一样，也是代码和数据(状态)的集合。</p><p>智能合约（Smart Contract）和人工智能（Artificial Intelligence ）的智能没有关系，智能合约最早尼克萨博在95年就提出，它的概念很简单，就是将法律条文写成可执行代码。让法律条文的执行中立化，这个理念和区块链上的程序可以不被篡改、不被干预（只有有人触发交易，它将自动执行）的执行不谋而合，因此区块链引入了这个概念。</p><p>在前面介绍比特币脚本的时候，我们讲到过比特币的交易也是可以编程的，但是比特币脚本有很多的限制，能够编写的程序也有限，而以太坊程序则是“图灵完备的”，因此理论上让我们可以来编写可以做任何事情的程序。</p><p>智能合约非常适合对信任、安全和持久性要求较高的应用场景，比如：数字货币、数字资产、投票、保险、金融应用、预测市场、产权所有权管理、物联网、点对点交易等等。<br>目前除数字货币之外，真正落地的应用还不多（就像移动平台刚开始出来一样），相信1到3年内，各种杀手级会慢慢出现。</p><p>进一步了解智能合约，可以阅读完全了解<a href="https://learnblockchain.cn/2018/01/04/understanding-smart-contracts/" target="_blank" rel="noopener">智能合约运行原理</a>。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://learnblockchain.cn/2017/11/20/whatiseth/" target="_blank" rel="noopener">以太坊是什么 - 以太坊开发入门指南</a><br><a href="https://cloud.tencent.com/developer/article/1328286" target="_blank" rel="noopener">深入以太坊智能合约 ABI</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS系列一</title>
      <link href="2021/03/13/css_1/"/>
      <url>2021/03/13/css_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/007.jpg" width=80% /><span class='geyan'><p>You can’t play God without being acquainted with the Devil.<br /><br>想要扮演上帝，你就不能不去了解魔鬼。</p></span><a id="more"></a><h2 id="第一部分-基础"><a href="#第一部分-基础" class="headerlink" title="第一部分 基础"></a>第一部分 基础</h2><h3 id="渲染过程"><a href="#渲染过程" class="headerlink" title="渲染过程"></a>渲染过程</h3><div class="note danger"><p><strong>解析文件</strong></p><ol><li>将html文件转换为DOM树</li><li>将css文件转换为CSSOM树</li><li>将DOM树和CSSOM树合并生成<em>渲染树</em></li></ol><p><strong>绘制图层</strong></p><ol><li>根据渲染树生成布局渲染树<code>(回流)</code></li><li>根据布局渲染树生成绘制渲染树<code>(重绘)</code></li></ol><p><strong>合成图层</strong></p><ol><li>根据绘制渲染树合成图层显示在屏幕上</li></ol></div><h3 id="回流-amp-重绘"><a href="#回流-amp-重绘" class="headerlink" title="回流&amp;重绘"></a>回流&amp;重绘</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><em>回流又名重排</em>，指<strong>几何属性需改变的渲染</strong>： <code>将整个网页填白，对内容重新渲染一次</code>。</li><li><strong>重绘</strong>指<code>更改外观</code>属性而<code>不影响几何属性</code>的渲染;</li><li>回流对浏览器性能的消耗是高于重绘的，而且回流一定会伴随重绘，重绘却不一定伴随回流。</li></ol><h4 id="属性分类"><a href="#属性分类" class="headerlink" title="属性分类"></a>属性分类</h4><div class="note danger"><div class="note success"><p>几何属性：包括<code>布局</code>、<code>尺寸</code>等可用<code>数学几何</code>衡量的属性</p><ol><li>布局：<em>display、float、position、list、table、flex、columns、grid</em></li><li>尺寸：<em>margin、padding、border、width、height</em></li></ol></div><div class="note default"><p>外观属性：包括<code>界面</code>、<code>文字</code>等可用状态向量描述的属性</p><ol><li>界面：<em>appearance、outline、background、mask、box-shadow、box-reflect、filter、opacity、clip</em></li><li>文字：<em>text、font、word</em></li></ol></div><div class="note primary"><p>简单理解：</p><ol><li>回流就是一个队伍重新排队</li><li>重绘就是整个队伍中。其中的两个人调换位置</li></ol></div></div><h3 id="属性分类-1"><a href="#属性分类-1" class="headerlink" title="属性分类"></a>属性分类</h3><div class="note danger"><p><strong>布局属性</strong></p><p>显示：display visibility<br>溢出：overflow overflow-x overflow-y<br>浮动：float clear<br>定位：position left right top bottom z-index<br>列表：list-style list-style-type list-style-position list-style-image<br>表格：table-layout border-collapse border-spacing caption-side empty-cells<br>弹性：flex-flow flex-direction flex-wrap justify-content align-content align-items align-self flex flex-grow flex-shrink flex-basis order<br>多列：columns column-width column-count column-gap column-rule column-rule-width column-rule-style column-rule-color column-span column-fill column-break-before column-break-after column-break-inside<br>格栅：grid-columns grid-rows</p><p><strong>尺寸属性</strong></p><p>模型：box-sizing<br>边距：margin margin-left margin-right margin-top margin-bottom<br>填充：padding padding-left padding-right padding-top padding-bottom<br>边框：border border-width border-style border-color border-colors border-[direction]-<param><br>圆角：border-radius border-top-left-radius border-top-right-radius border-bottom-left-radius border-bottom-right-radius<br>框图：border-image border-image-source border-image-slice border-image-width border-image-outset border-image-repeat<br>大小：width min-width max-width height min-height max-height</p><p><strong>界面属性</strong></p><p>外观：appearance<br>轮廓：outline outline-width outline-style outline-color outline-offset outline-radius outline-radius-[direction]<br>背景：background background-color background-image background-repeat background-repeat-x background-repeat-y background-position background-position-x background-position-y background-size background-origin background-clip background-attachment bakground-composite<br>遮罩：mask mask-mode mask-image mask-repeat mask-repeat-x mask-repeat-y mask-position mask-position-x mask-position-y mask-size mask-origin mask-clip mask-attachment mask-composite mask-box-image mask-box-image-source mask-box-image-width mask-box-image-outset mask-box-image-repeat mask-box-image-slice<br>滤镜：box-shadow box-reflect filter mix-blend-mode opacity,<br>裁剪：object-fit clip<br>事件：resize zoom cursor pointer-events touch-callout user-modify user-focus user-input user-select user-drag</p><p><strong>文字属性</strong></p><p>模式：line-height line-clamp vertical-align direction unicode-bidi writing-mode ime-mode<br>文本：text-overflow text-decoration text-decoration-line text-decoration-style text-decoration-color text-decoration-skip text-underline-position text-align text-align-last text-justify text-indent text-stroke text-stroke-width text-stroke-color text-shadow text-transform text-size-adjust<br>字体：src font font-family font-style font-stretch font-weight font-variant font-size font-size-adjust color<br>内容：overflow-wrap word-wrap word-break word-spacing letter-spacing white-space caret-color tab-size content counter-increment counter-reset quotes page page-break-before page-break-after page-break-inside</p><p><strong>交互属性</strong></p><p>模式：will-change perspective perspective-origin backface-visibility<br>变换：transform transform-origin transform-style<br>过渡：transition transition-property transition-duration transition-timing-function transition-delay<br>动画：animation animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-play-state animation-fill-mode</p></div><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>盒模型又名框模型，是一种网页设计思维模型，它把文档节点看成一个盒子。</p><p>盒模型由以下属性组成，由外到内用公式表示就是：<strong>box = margin + border + padding + content</strong>。除了content(不是属性，作为盒模型扩展理解使用)，其余属性都包含<code>left、right、top和bottom</code>等扩展属性。</p><ol><li>margin：边距，外部透明区域，负责隔离相邻盒子</li><li>border：边框，内部着色区域，负责隔离边距和填充，包含width、style、color三个扩展属性</li><li>padding：填充，内部着色区域，负责扩展盒子内部尺寸</li><li>content：内容，以文本或节点存在的占用位置</li></ol><img data-src='004.png' width='80%' /><div class="note danger"><p>两个快递包裹间的<code>距离</code>就是<strong>margin</strong>，快递包裹的<code>纸皮</code>就是<code>border</code>，打开快递包裹，<code>填充物料</code>就是<code>padding</code>，把填充物料打开看到了你的<code>物品</code>，那就是<code>content</code></p></div><h3 id="视觉格式化模型"><a href="#视觉格式化模型" class="headerlink" title="视觉格式化模型"></a>视觉格式化模型</h3><p><strong>视觉格式化模型</strong>指在视觉媒体上处理和显示文档而使用的计算规则。它是一种CSS机制，由大量CSS规范组成，规定了节点在页面中的排版。</p><p>若使用<code>display</code>对这个简单盒模型稍微加工则会进化到<code>视觉格式化模型</code>。</p><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>当节点的<code>display</code>声明为<code>block</code>、<code>list-item</code>、<code>table</code>、<code>flex</code>或<code>grid</code>时，该节点被标记为<code>块级元素</code>。<br>块级元素默认<code>宽</code>度为<code>100%</code>，在垂直方向上按<code>顺序放置</code>，同时参与块格式化上下文。</p><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>当节点的display声明为<code>inline、inline-block、inline-table、inline-flex或inline-grid</code>时，该节点被标记为<code>行内元素</code>。行内元素默认<code>宽度为auto</code>，在水平方向上按顺序放置，同时参与行内格式化上下文。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><strong>互相转换</strong></p><ol><li>块级元素转换行内元素：<code>display:inline</code></li><li>行内元素转换块级元素：<code>display:block</code></li></ol><p><strong>占位表现</strong></p><ol><li>块级元素默认独占一行，默认宽度为父节点的100%，可声明边距、填充和宽高</li><li>行内元素默认不独占一行(一行可多个)，默认宽度随内容自动撑开，可声明水平边距和填充，不可声明垂直边距和宽高</li></ol><p><strong>包含关系</strong></p><ol><li>块级元素可包含块级元素和行内元素</li><li>行内元素可包含行内元素，<code>不能包含块级元素</code></li></ol><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><div class="note danger"><ul><li>浮动布局：float:left/right</li><li>定位布局：position:relative/absolute/fixed、left/right/top/bottom/z-index</li><li>弹性布局：display:flex/inline-flex、flex系列属性<a href="https://juejin.im/post/6844904116141948936" target="_blank" rel="noopener">《深度解析CSS弹性布局》</a></li></ul><p>普通布局：display:block/inline<br>表格布局：table系列属性<br>多列布局：column系列属性<br>格栅布局：display:grid/inline-grid、grid系列属性<br>响应式布局：em/rem/vw/vh/vmin/vmax、媒体查询</p></div><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p><a href="https://juejin.im/post/6844904116141948936" target="_blank" rel="noopener">《深度解析CSS弹性布局》</a></p><p>flex 的值可以是下边几种：</p><ol><li>指定一个数字 - 例如flex: 1，就等同于是flex: 1 1 0，即自动缩放，比例为 1，flex-basis 为 0。</li><li>auto - 等同于flex: 1 1 auto。</li><li>指定两个数字 - 第一个为flex-grow，第二个，如果是数字则认为是 flex-shrink，如果是宽度，则是flex-basis。</li><li>指定三个值 - 分别为flex-grow，flex-shrink 和 flex-basis。</li></ol><ul><li>flex-grow，这个属性是说 flex 容器在有剩余空间的时候，子元素占据剩余空间的占比</li><li>flex-shrink子元素的收缩是说：当它们的宽度超过 flex 容器之后，该如何进行收缩。通过 flex-shrink 来设置一个数值，数值越大，收缩程度也越大，比如flex-shrink: 2的元素会比flex-shrink:1收缩的值大 2 倍</li><li>所以说，通过flex属性可以方便的同时设置flex-grow、flex-shrink 和 flex-basis 这三个值。</li></ul><h3 id="布局实例"><a href="#布局实例" class="headerlink" title="布局实例"></a>布局实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bruce flex-ct-x"</span> <span class="attr">data-title</span>=<span class="string">"使用flexbox排版各种布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-box"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fullscreen-layout"</span> <span class="attr">title</span>=<span class="string">"全屏布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two-column-layout"</span> <span class="attr">title</span>=<span class="string">"多列布局-两列布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three-column-layout"</span> <span class="attr">title</span>=<span class="string">"多列布局-三列布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grail-layout"</span> <span class="attr">title</span>=<span class="string">"多列布局-圣杯布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"average-layout"</span> <span class="attr">title</span>=<span class="string">"多列布局-均分布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"four"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-layout"</span> <span class="attr">title</span>=<span class="string">"居中布局"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout-box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">overflow-x</span>: auto;</span><br><span class="line"><span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">&gt; div &#123;</span><br><span class="line"><span class="selector-tag">flex-shrink</span>: 0;</span><br><span class="line"><span class="selector-tag">flex-basis</span>: 400<span class="selector-tag">px</span>;</span><br><span class="line">&amp; + <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fullscreen-layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f69</span>;</span><br><span class="line">  header &#123;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f66</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 50<span class="selector-tag">px</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3c9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two-column-layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3c9</span>;</span><br><span class="line">  .left &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f66</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#66f</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.three-column-layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  .left &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f66</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66f</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3c9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grail-layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  .left &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 80<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f66</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3c9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.average-layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  div &#123;</span><br><span class="line">    <span class="selector-tag">flex</span>: 1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f66</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#66f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f90</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.four</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#09f</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center-layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f66</span>;</span><br><span class="line">  div &#123;</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">    <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#66f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h4><div class="note danger"><div class="note success"><p><strong>水平居中</strong></p><ul><li>margin:0 auto + width:fit-content：全部元素</li><li>块级元素 + margin:0 auto + width：块级元素<ul><li>若节点不是块级元素需声明display:block</li><li>若节点宽度已隐式声明则无需显式声明width</li></ul></li><li>行内元素 + text-aligin:center：行内元素<ul><li>父节点上声明text-align</li><li>若节点不是行内元素需声明display:inline/inline-block</li></ul></li><li>position + left/right + margin-left/right + width：全部元素</li><li>position + left/right + transform:translateX(-50%)：全部元素</li><li>display:flex + justify-content:center：全部元素<ul><li>父节点上声明display和justify-content</li></ul></li></ul></div><div class="note info"><p><strong>垂直居中</strong></p><ul><li>块级元素 + padding-top/bottom：块级元素<ul><li>父节点高度未声明或自适应</li><li>若节点不是块级元素需声明display:block</li></ul></li><li>行内元素 + line-height：行内元素<ul><li>父节点上声明line-height</li><li>若节点不是行内元素需声明display:inline/inline-block</li></ul></li><li>display:table + display:table-cell + vertical-align:middle：全部元素<ul><li>父节点上声明display:table</li></ul></li><li>display:table-cell + vertical-align:middle：全部元素<ul><li>父节点上声明display和vertical-align</li></ul></li><li>position + top/bottom + margin-top/bottom + height：全部元素</li><li>position + top/bottom + transform:translateY(-50%)：全部元素</li><li>display:flex + align-items:center：全部元素<ul><li>父节点上声明display和align-items</li></ul></li><li>display:flex + margin:auto 0：全部元素<ul><li>父节点上声明display</li></ul></li></ul></div></div><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/6844904116141948936" target="_blank" rel="noopener">《深度解析CSS弹性布局》</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021/03/test/html</title>
      <link href="2021/03/13/index/"/>
      <url>2021/03/13/index/</url>
      
        <content type="html"><![CDATA[<html>    <div class="fullscreen-layout">        <header></header>        <main></main>        <footer></footer>    </div></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>V8系列三</title>
      <link href="2021/01/11/v8_3/"/>
      <url>2021/01/11/v8_3/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/006.jpg" width=80% /><span class='geyan'>生存还是毁灭，这是个问题。<br>To be or not to be, that is the question.</span><a id="more"></a><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><blockquote><p>函数作为参数传给<code>宿主</code>环境，然后在<code>宿主环境</code>被调用，称为 <strong>回调函数</strong>;</p></blockquote><ol><li>同步回调: 在函数内部执行；</li><li>异步回调：在函数外部执行；</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="string">"water"</span>, <span class="string">"goods"</span>, <span class="string">"123"</span>, <span class="string">"like"</span>]; <span class="function"><span class="keyword">function</span> <span class="title">handlerArray</span>(<span class="params">indexName,index</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="number">1</span> + <span class="string">". "</span> + indexName); </span><br><span class="line">&#125; </span><br><span class="line">myArray.forEach(handlerArray)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遇到setTimeout立刻返回，扔到任务队列，之后V8执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="string">"Hello"</span>); </span><br><span class="line">&#125;</span><br><span class="line">setTimeout(foo, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="UI线程架构"><a href="#UI线程架构" class="headerlink" title="UI线程架构"></a>UI线程架构</h3><p>早期浏览器的页面是运行在一个单独的 UI 线程中的，所以要在页面中引入 JavaScript，那 么 JavaScript 也必须要运行在和页面相同的线程上，这样才能方便使用 JavaScript 来操纵 DOM，<strong>所以从一开始，JavaScript 就被设计成了运行在 UI 线程中。</strong></p><blockquote><p>UI 线程，是指运行窗口的线程.</p></blockquote><p>使用操作页面时由UI线程处理，由于任务由先后，所以引入<code>消息队列</code>,UI线程将事件放入<code>消息队列</code>; 然后UI线程不停的从消息队列中取出来事件执行。</p><blockquote><p>任务： UI 线程每次从消息队列中取出、执行事件的过程</p></blockquote><img data-src='004.png' width='80%' /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="string">"Hello"</span>); </span><br><span class="line">&#125;</span><br><span class="line">setTimeout(foo, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><img data-src='005.png' width='80%' /><ol><li>宿主将foo函数封装成一个<code>事件</code>；添加到消息队列，然后<code>setTimeout</code>执行结束；</li><li>主线程不断从消息队列取任务，<strong>等到时机成熟？</strong>，就执行foo函数。</li></ol><blockquote><p>什么时候才时机成熟？怎么判断时机成熟？</p></blockquote><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><p><strong>宏任务</strong>很简单，就是指<code>消息队列中的等待被主线程执行的事件</code>。每个宏任务在执行时，V8 都会<code>重新创建栈</code>，然后随着宏任务中函数调用，栈也随之变化，最终，当该宏任务执行结束时，整个栈又会被清空，接着主线程继续执行下一个宏任务。</p><p><strong>微任务</strong>稍微复杂一点，其实你可以把微任务看成是一个需要<strong>异步执行的函数</strong>，执行时机是在<code>主函数执行结束之后、当前宏任务结束之前</code>。</p><blockquote><p>任务是指：UI 线程每次从消息队列中取出、执行事件的过程<br>有了任务为啥还需微任务？？</p></blockquote><ol><li>由于主线程执行消息队列中宏任务的时间颗粒度太粗</li><li>可以使用同步形式的代码来编写异步调用</li></ol><img data-src='006.png' width='80%' /><img data-src='007.png' width='80%' /><h4 id="主线程、调用栈、消息队列"><a href="#主线程、调用栈、消息队列" class="headerlink" title="主线程、调用栈、消息队列"></a>主线程、调用栈、消息队列</h4><p><strong>调用栈</strong>是一种数据结构，用来管理在<code>主线程</code>上执行<code>的函数的调用关系</code>;</p><img data-src='008.png' width='80%' /><blockquote><p>问题一：针对栈溢出，解决方案：可以将函数封装成<strong>宏任务</strong>， 如 timeout<br>问题二：如果宏任务时间过长，会影响后续任务。<code>不可控任务的时间长短</code>；解决方案： 引入微任务。</p></blockquote><p><strong>微任务执行时机</strong>： 会在当前的任务快要执行结束时执行，你就能比较精准地控制你的回调函数的执行时机。</p><div class="note danger"><p>通俗地理解，V8 会为每个<code>宏任务</code>维护一个<code>微任务队列</code>。当 V8 执行一段 JavaScript 时，会为这段代码创建一个环境对象，微任务队列就是<code>存放在该环境对象</code>中的。<br>当你通过 <code>Promise.resolve 生成一个微任务</code>，该微任务会被 V8 自动添加进微任务队列，等整段代码 <code>快要执行结束</code>时，该环境对象也随之被销毁，但是在销毁之前，<strong>V8 会先处理微任务队列中 的微任务。</strong></p><blockquote><p>微任务是处于宏任务之前执行的.</p></blockquote></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bar-1"</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"micro-bar-2"</span>));</span><br><span class="line">    setTimeout(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"macro-bar-3"</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo-1"</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"micro-foo-2"</span>));</span><br><span class="line">    setTimeout(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"macro-foo-3"</span>), <span class="number">0</span>);</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"global-1"</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"micro-global-2"</span>));</span><br><span class="line">setTimeout(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"macro-global-3"</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">foo-1</span></span><br><span class="line"><span class="comment">bar-1</span></span><br><span class="line"><span class="comment">global-1</span></span><br><span class="line"><span class="comment">micro-foo-2</span></span><br><span class="line"><span class="comment">micro-bar-2</span></span><br><span class="line"><span class="comment">micro-global-2</span></span><br><span class="line"><span class="comment">macro-foo-3</span></span><br><span class="line"><span class="comment">macro-bar-3</span></span><br><span class="line"><span class="comment">macro-global-3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><img data-src='009.png' width='80%' /><img data-src='010.png' width='80%' /><img data-src='011.png' width='80%' /><img data-src='012.png' width='80%' /><blockquote><p>从微任务中一次性取出，顺序执行。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(foo) </span><br><span class="line">&#125; </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><blockquote><p>为何会卡死？</p></blockquote><ol><li>当执行 foo 函数时，由于 foo 函数中调用了 Promise.resolve()，这会触发一个<strong>微任务，</strong></li><li>退出当前 foo 函数的执行；</li><li>V8 在准备退出当前的宏任务之前，会检查微任务队列，发现微任务队列中有一个微任务，于是先执行微任务。</li><li>由于这个微任务就是调用 foo 函数本身，又会执行第一步，<strong>进入死循环</strong></li><li>导致 <strong>消息队列中的事件无法执行</strong>，<code>页面卡死</code>。</li></ol><h2 id="await-async"><a href="#await-async" class="headerlink" title="await / async"></a>await / async</h2><img data-src='013.png' title='回调地狱' width='80%' /><p>JavaScript 社区探索并推出了一系列的方案，从“Promise 加 then”到“generator 加 <strong>“co”方案，再到最近推出“终极”的 async/await 方案</strong>，完美地解决了回调地狱所造成的问题。</p><div class="note danger"><p>使用 Promise 可以解决回调地狱中编码<strong>不线性的问题</strong>，但这种方式充满了 Promise 的 then() 方法，如果处理流程比较复杂的话，那么整段代码将充斥着<strong>大量的 then</strong>，异步逻辑之间依然被 then 方法打断了，因此这种方式的语义化不明显，<strong>代码不能很好地表示执行流程</strong>。</p><div class="note default"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">let</span> id = getUserID() </span><br><span class="line">    <span class="keyword">let</span> name = getUserName(id) </span><br><span class="line">    <span class="keyword">return</span> name </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Generator 函数实现更加线性化逻辑; <strong>执行到异步请求的时候，暂停当前函数，等异步请求返回了结果，再恢复该函数</strong>。</p><img data-src='014.png' width='80%' /><p>这个模型的关键就是<strong>实现函数暂停执行和函数恢复执行</strong>，而生成器就是为了 实现暂停函数和恢复函数而设计的。</p><blockquote><p>生成器函数是一个带星号函数，配合 yield 就可以实现函数的暂停和恢复</p><p>V8 是怎么实现生成器函数的暂停执行和恢复执行的呢？</p><blockquote><p>背后的魔法就是<strong>协程</strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程;</span><br><span class="line">2. 协程是一种比线程更加轻量级的存在;</span><br><span class="line">3. 可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程</span><br><span class="line">4. 如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。</span><br></pre></td></tr></table></figure></div></div><p>正如一个进程可以拥有多个线程一样，<code>一个线程也可以拥有多个协程</code>。每一时刻，该线程只能执行其中某一个协程。最重要的是，<code>协程不是被操作系统内核所管理</code>，而完全是<code>由程序所控制（也就是在用户态执行）</code>。这样带来的好处就是<code>性能</code>得到了很大的<strong>提升</strong>，不会像线程切换那样消耗资源。</p><p>为了让你更好地理解协程是怎么执行的，我结合上面那段代码的执行过程，画出了下面 的“协程执行流程图”，你可以对照着代码来分析：</p><img data-src='015.png' width='80%' /><blockquote><p>async/await：异步编程的“终极”方案</p></blockquote><p>由于生成器函数可以暂停，因此我们可以在生成器内部编写完整的异步逻辑代码，不过生成 器依然需要使用额外的 co 函数来驱动生成器函数的执行，这一点非常不友好。</p><p>基于这个原因，<strong>ES7 引入了 async/await，这是 JavaScript 异步编程的一个重大改进， 它改进了生成器的缺点，提供了在不阻塞主线程的情况下使用同步代码实现异步访问资源的 能力</strong>。你可以参考下面这段使用 async/await 改造后的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> id_res = <span class="keyword">await</span> fetch(id_url);</span><br><span class="line">        <span class="keyword">let</span> id_text = <span class="keyword">await</span> id_res.text();</span><br><span class="line">        <span class="built_in">console</span>.log(id_text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> new_name_url = name_url + <span class="string">"?id="</span> + id_text;</span><br><span class="line">        <span class="built_in">console</span>.log(new_name_url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> name_res = <span class="keyword">await</span> fetch(new_name_url);</span><br><span class="line">        <span class="keyword">let</span> name_text = <span class="keyword">await</span> name_res.text();</span><br><span class="line">        <span class="built_in">console</span>.log(name_text);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getResult();</span><br></pre></td></tr></table></figure><p>虽然这种方式看起来<strong>像是同步代码</strong>，但是实际上它又是<strong>异步执行</strong>的，也就是说，在执行到 await fetch 的时候，整个函数会暂停等待 fetch 的执行结果，等到函数返回时，再恢复该函数，然后继续往下执行。</p><p>其实 async/await 技术背后的秘密就是 <strong>Promise 和生成器应用</strong>，往底层说，就是 <strong>微任务和 协程</strong>应用。要搞清楚 async 和 await 的工作原理，我们就得对 async 和 await 分开分析。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NoResolvePromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">100</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// promise 对象</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">await</span> NoResolvePromise();</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">getResult();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">✗ node test.js</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><img data-src='016.png' width='80%' /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果后边是 非promise对象</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line"><span class="comment">// 转化为：</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;resolve(<span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><blockquote><p>垃圾回收是怎么实现过程</p></blockquote><ol><li>通过 GC Root 标记空间中活动对象和非活动对象。</li><li>回收非活动对象所占据的内存</li><li>做内存整理。</li></ol><p>V8 采用了两个垃圾回收器，<strong>主垃圾回收器-Major GC</strong> 和<strong>副垃圾回收器 -Minor GC (Scavenger)</strong>。V8 之所以使用了两个垃圾回收器，主要 是受到了<strong>代际假说（The Generational Hypothesis）</strong>的影响。</p><div class="note danger"><p><strong>代际假说</strong>是垃圾回收领域中一个<strong>重要的术语</strong>，它有以下两个特点：</p><ol><li><p>第一个是大部分对象都是 <strong>“朝生夕死”</strong>的，也就是说大部分对象在内存中存活的时间很短，比如函数内部声明的变量，或者块级作用域中的变量，当函数或者代码块执行结束 时，作用域中定义的变量就会被销毁。因此这一类对象一经分配内存，很快就变得不可 访问；</p></li><li><p>第二个是<strong>不死的对象，会活得更久</strong>，比如全局的 window、DOM、Web API 等对象。</p></li></ol><p>其实这两个特点不仅仅适用于 JavaScript，同样适用于大多数的动态语言，如 Java、 Python 等。</p></div><img data-src='017.png' width='80%' /><p>副垃圾回收器采用了 <strong>Scavenge 算法</strong>，是把新生代空间对半划分为两个区域，一半是<code>对象区域</code>，一半是<code>空闲区域</code>。新的数据都分配在对象区域，等待对象区域快分配满的时候，垃圾回收器便执行垃圾回收操作，之后将存活的对象从对象区域拷贝到空闲区域，并将<code>两个区域互换</code>。</p><p>主垃圾回收器回收器主要负责老生代中的垃圾数据的回收操作，会经历<strong>标记、清除和整理</strong>过程。</p><h3 id="优化效率"><a href="#优化效率" class="headerlink" title="优化效率"></a>优化效率</h3><p>由于 JavaScript 是运行在<code>主线程</code>之上的，因此，一旦<code>执行垃圾回收算法</code>，都需要将正在执 行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做 <strong>全停顿（Stop-The-World）</strong></p><img data-src='018.png' width='80%' /><p>避免卡顿主要从两个方面考虑：</p><ol><li>第一，将一个完整的垃圾回收的任务拆<strong>分成多个小的任务</strong>，这样就消灭了单个长的垃圾 回收任务；</li><li>第二，<strong>将标记对象、移动对象等任务转移到后台线程进行</strong>，这会大大减少主线程暂停的 时间，改善页面卡顿的问题，让动画、滚动和用户交互更加流畅。</li></ol><h4 id="并行回收"><a href="#并行回收" class="headerlink" title="并行回收"></a>并行回收</h4><p>所谓并行回收，是指垃圾回收器在主线程上执行的过程中，还会<strong>开启多个协助线程</strong>，同时执行同样的回收工作，其工作模式如下图所示：</p><img data-src='019.png' width='80%' /><p>V8 的<strong>副垃圾回收器</strong>所采用的就是<code>并行策略</code>，它在执行垃圾回收的过程中，启动了多个线程来负责新生代中的垃圾清理操作，这些线程同时将对象空间中的数据移动到空闲区域。<code>由于数据的地址发生了改变，所以还需要同步更新引用这些对象的指针。</code></p><h4 id="增量回收"><a href="#增量回收" class="headerlink" title="增量回收"></a>增量回收</h4><p>虽然<code>并行策略</code>能增加垃圾回收的<code>效率</code>，能够很好地优化副垃圾回收器，<strong>但是</strong>这仍然是一种<strong>全停顿的垃圾回收方式</strong>，</p><p>所谓<strong>增量式垃圾回收</strong>，是指垃圾收集器将标记工作分解为<code>更小的块</code>，并且穿插在主线程<code>不同的任务之间</code>执行。</p><img data-src='020.png' width='80%' /><p>要实现增量，需要满足两个条件</p><ol><li>垃圾回收可以被<strong>随时暂停和重启</strong>，暂停时需要保存当时的扫描结果，等下一波垃圾回收 来了之后，才能继续启动。</li><li>在<strong>暂停期间</strong>，被标记好的垃圾数据如果被 JavaScript 代码修改了，那么垃圾回收器需要能够正确地处理。</li></ol><blockquote><p>垃圾回收器的暂停与恢复</p></blockquote><p>在<code>没有采用增量算法之前</code>，V8 使用<strong>黑色和白色</strong>来标记数据。在执行一 次完整的垃圾回收之前，垃圾回收器会将所有的数据设置为<strong>白色</strong>，用来表示这些数据还<code>没有被标记</code>，然后垃圾回收器在会从 <code>GC Roots 出发</code>，将所有能访问到的数据标记为<code>黑</code>色。遍历结束之后，被标记为黑色的数据就是<code>活动数据</code>，那些<strong>白色数据就是垃圾数据</strong>。如下图所示：</p><img data-src='021.png' width='80%' /><blockquote><p>为了解决，重启时找到启动点，引入了 灰色。<br>三色标记法</p></blockquote><ol><li>黑色：节点被引用，该节点的字节点都已经标记完成</li><li>灰色：节点被引用，但是子节点没有被垃圾回收器标记处理，<strong>目前正在处理的节点</strong></li><li>白色：节点没有被引用，如果本轮结束还是白色，就会被回收。</li><li><em>黑色节点如果引用白色节点，则将白色变为黑色</em></li></ol><h4 id="并发回收"><a href="#并发回收" class="headerlink" title="并发回收"></a>并发回收</h4><blockquote><p>以上的回收仍旧会阻塞主线程，有没有办法在不阻塞主线程的情况下，执行垃圾回收操作呢？</p><blockquote><p>并发回收机制<br>所谓并发回收，是指主线程在执行 JavaScript 的过程中，辅助线程能够在后台完成执行垃 圾回收的操作。</p></blockquote></blockquote><ol><li>由于主线程随时都又可能更改标记过的内容，会使得辅助线程工作无效</li><li>主线程和辅助线程极有可能在同一时间去更改同一个对象，这就需要额外实现读 写锁的一些功能了。</li></ol><img data-src='022.png' width='80%' /><img data-src='023.png' width='80%' /><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/intro/296" target="_blank" rel="noopener">图解 Google V8</a></p>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql系列三</title>
      <link href="2021/01/10/mysql_3-/"/>
      <url>2021/01/10/mysql_3-/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/009.jpg" width=80% /><span class='geyan'>没有比正直更富的遗产。<br>No more than just rich heritage.</span><a id="more"></a><h2 id="高效使用Mysql"><a href="#高效使用Mysql" class="headerlink" title="高效使用Mysql"></a>高效使用Mysql</h2><h3 id="uuid-VS-数字"><a href="#uuid-VS-数字" class="headerlink" title="uuid VS 数字"></a>uuid VS 数字</h3><blockquote><p>uuid 通用唯一识别码的缩写。</p></blockquote><img data-src="004.png" width=80% /><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UUID</span>(); </span><br><span class="line"><span class="comment">-- a57bce9d-530b-11eb-adfb-005056347897</span></span><br></pre></td></tr></table></figure><div class="note danger"><p><strong>UUID优点</strong></p><ol><li>节点即可生成UUID，降低全局节点压力</li><li><code>全局</code>唯一</li><li>跨服务器合并数据很方便；</li></ol><p><strong>UUID缺点</strong></p><ol><li>占用<code>16个字节</code>,比<code>4字节</code>的INT和<code>8字节</code>的bgint更<strong>占内存</strong>；</li><li>UUID是字符串，<strong>查找速度慢</strong></li><li>UUID 不是顺序增长，数据写入ID因为随机ID<code>需要判断写入哪儿</code>,所以写入数据IO变大。</li></ol><p><strong>主键自动增长的优点</strong></p><ol><li>占用内存小；</li><li>检索数字快于字符串</li><li>自动增长，IO写入连续性更好。</li></ol></div><blockquote><p>总结</p></blockquote><ul><li>ORM [Mycat] 可以生成唯一的连续的数字主键。</li><li>优先考虑子增长，得研究下node&amp;Mycat</li></ul><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><ol><li>在线修改表结构，很可能造成重大事故；</li><li>常规做法：业务停机，维护表结构；</li><li>不影响正常业务的表结构可以在线修改。</li></ol><blockquote><p>ALTER Table 修改表结构的弊病</p></blockquote><ol><li>修改表结构是 <strong>表级锁</strong>，更改表结构时，影响写入操作；</li><li>如果修改表结构失败，必须还原，<strong>耗时很长</strong>；</li><li>大数据表记录多，锁表时间长。</li></ol><blockquote><p>对应方案<br>PerconaTookit 工具包</p></blockquote><p>Percona公司提供<strong>免费</strong>的维护mysql的PerconaTookit工具包</p><p><strong>pt-online-schema-change</strong>实现：<code>不锁表，修改表结构</code></p><ol><li>拷贝表结构： <code>t_order</code> =&gt; <code>t_order_new</code>;</li><li>建<code>触发器</code>，如有新数据写入<code>t_order</code>，就copy到<code>t_order_new</code>;</li><li>数据同步结束 &amp;&amp; 没有数据写入，就删除<code>t_order</code>；</li><li>更改<code>t_order_new</code> =&gt; <code>t_order</code>；</li></ol><p>【使用Percona-Toolkit工具】</p><ul><li><p>安装第三方依赖包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install  -y perl-DBI</span><br><span class="line">yum install  -y perl-DBD-mysql</span><br><span class="line">yum install  -y perl-IO-Socket-SSL</span><br><span class="line">yum install  -y perl-Digest-MD5</span><br><span class="line">yum install  -y perl-TermReadKey</span><br></pre></td></tr></table></figure></li><li><p>安装Percona-Toolkit</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入到Percona-Tookit离线文件所在的目录</span></span><br><span class="line">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure></li><li><p>把客户收货地址表中的name字段改成VARCHAR(20)</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pt-online-schema-change --host=192.168.99.202 --port=3306 --user=root --password=abc123456 --alter "MODIFY name VARCHAR(20) NOT NULL COMMENT '收货人'" D=neti, t=t_customer_address --print --execute</span><br></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1533505" target="_blank" rel="noopener">Percona Toolkit工具简介</a></p><h3 id="订单号-VS-流水号"><a href="#订单号-VS-流水号" class="headerlink" title="订单号 VS 流水号"></a>订单号 VS 流水号</h3><ul><li>订单号既是订单的唯一编号，而且经常被用来检索，所以<strong>应当是数字类型的主键</strong></li><li>流水号是打印在购物单据上的字符串，便于阅读，但是不用做查询</li></ul><img data-src="005.png" width=80% /><h3 id="物理删除-VS-逻辑删除"><a href="#物理删除-VS-逻辑删除" class="headerlink" title="物理删除 VS 逻辑删除"></a>物理删除 VS 逻辑删除</h3><blockquote><p>物理删除的代价：</p></blockquote><ol><li>恢复麻烦</li><li>主键不连续，分页查询变慢</li><li></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">LIMIT</span> <span class="number">1000</span>, <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt;= <span class="number">1000</span> <span class="keyword">AND</span> <span class="keyword">id</span> &lt;= <span class="number">1020</span>;</span><br></pre></td></tr></table></figure><blockquote><p>什么样的数据不合适物理删除</p></blockquote><ol><li>核心业务，如：订单表、账户表、优惠券表等</li><li></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://coding.imooc.com/class/353.html" target="_blank" rel="noopener">阿里新零售数据库设计与实战</a><br><a href="https://cloud.tencent.com/developer/article/1533505" target="_blank" rel="noopener">Percona Toolkit工具简介</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8系列二</title>
      <link href="2021/01/06/v8_2/"/>
      <url>2021/01/06/v8_2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/005.jpg" width=80% /><span class='geyan'>生存还是毁灭，这是个问题。<br>To be or not to be, that is the question.</span><a id="more"></a><h2 id="运行时环境"><a href="#运行时环境" class="headerlink" title="运行时环境"></a>运行时环境</h2><blockquote><p>什么是运行是运行时环境？</p></blockquote><p>代码执行时所需的<code>堆空间和栈空间、全局执行上下文、全局作用域、内置的内建函数、*宿主环境*提供的扩展函数和对象，还有消息循环系统</code>; 有了这些环境V8才可以执行JS代码。执行代码时，又包含了<code>解析源码、生成字节码、解释执行或者编译执行这一系列操作</code></p><img data-src='004.png' width='80%' /><h3 id="宿主环境-vs-V8"><a href="#宿主环境-vs-V8" class="headerlink" title="宿主环境 vs V8"></a>宿主环境 vs V8</h3><p><strong>V8和浏览器</strong> 类比与 <strong>病毒🦠与细胞的</strong>，这个类比必须满分💯！</p><div class="note danger"><p><strong>宿主</strong>是指为病毒等寄生物提供<strong>生存环境</strong>的<strong>生物</strong>，宿主有的自己的完整的代谢系统，而<code>病毒则没有自己的代谢系统</code>，也没有自己的酶系统，它只是由核酸长链和蛋白质外壳构成。</p><p>当病毒离开了宿主细胞，就成了没有任何生命活动，也不能独立自我繁殖的化学物质。同时，如果病毒利用了太 多的宿主细胞资源，也会影响到细胞的正常活动。</p></div><blockquote><p>Nodejs、浏览器都是V8的宿主</p></blockquote><img data-src='005.png' width='80%' /><p>V8 只提供了 ECMAScript 定义的一些对象和一些<strong>核心的函数</strong>，这包括了 <code>Object、Function、String</code>。除此之外，V8 还提供了<code>垃圾回收器</code>、<code>协程</code>等基础内容，不过这些功能依然需要宿主环境的配合才能完整执行。</p><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><blockquote><p>宿主在启动 V8 的过程中，会同时创建堆空间和栈空间,再继续往下执行，产生的新数据都 会存放在这两个空间中。</p></blockquote><p><strong>栈空间</strong>主要是用来管理 <strong>JavaScript 函数</strong>调用的，栈是内存中连续的一块空间，同时栈结构是<code>“先进后出”</code>的策略;</p><p><strong>堆空间</strong>是一种树形的存储结构，用来存储<strong>对象类型</strong>的离散的数据;</p><h3 id="全局执行上下文和全局作用域"><a href="#全局执行上下文和全局作用域" class="headerlink" title="全局执行上下文和全局作用域"></a>全局执行上下文和全局作用域</h3><p>V8 用执行上下文来维护执行当前代码所需要的<code>变量声明</code>、<code>this 指向</code>等。执行上下文中主要包含了三部分，<code>变量环境</code>、<code>词法环境</code>、和 <code>this 关键字</code>; <em>全局作用域和全局执行上下文</em>的关系，其实你可以把作用域看成是一个抽象的概念，比如在 ES6 中，<strong>同一个全局执行上下文中，都能存在多个作用域</strong>;</p><img data-src='006.png' width='80%' /><img data-src='007.png' width='80%' /><h3 id="构造事件循环系统"><a href="#构造事件循环系统" class="headerlink" title="构造事件循环系统"></a>构造事件循环系统</h3><blockquote><p>有了堆空间和栈空间，生成了全局执行上下文和全局作用域，接下来就可以执行 JavaScript 代码了吗？</p></blockquote><p>答案是<strong>不行</strong>，因为 V8 还需要有一个<em>主线程</em>，用来执行 JavaScript 和执行垃圾回收等工作。<strong>V8</strong> 是寄生在宿主环境中的，它并<strong>没有自己的主线程</strong>，而是使用宿主所提供的主线程， <strong>V8所执行的代码都是在宿主的主线程上执行的。</strong></p><blockquote><p>只有一个线程还不够，执行完就退出了，所以还需要一个事件循环机制。</p><blockquote><p>但是<br>多任务的需求就需要引入消息队列机制，排队执行。</p></blockquote></blockquote><h2 id="机器代码"><a href="#机器代码" class="headerlink" title="机器代码"></a>机器代码</h2><blockquote><p>急需一本《计算机编译原理》</p></blockquote><p>有了<strong>运行时环境</strong>，V8就可以执行JS代码。V8 首先需要将 JavaScript<strong>编译</strong>成字节码或者二进制代码，然后再<strong>执行。</strong></p><img data-src='008.png' width='80%' /><h3 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">int main() &#123; </span><br><span class="line">    int x = <span class="number">1</span>; </span><br><span class="line">    int y = <span class="number">2</span>; </span><br><span class="line">    int z = x + y; </span><br><span class="line">    <span class="keyword">return</span> z; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src='009.png' width='80%' /><h3 id="CPU执行程序"><a href="#CPU执行程序" class="headerlink" title="CPU执行程序"></a>CPU执行程序</h3><img data-src='010.png' width='80%' /><p>分析程序到底是怎么被执行。</p><ol><li>首先，在程序执行之前，我们的程序需要被装进内存。<ol><li><code>快递柜</code>、快递柜中的每个<code>单元格的编号</code>、<code>操作快递柜的人</code>， 你可以把它们对比成点算机中的<code>内存</code>、<code>内存地址</code>和 <code>CPU</code>。</li></ol></li><li>CPU 便可以从内存中<code>取出一条指令</code>，然后<code>分析该指令</code>，最后<code>执行该指令</code>。<ol><li><code>取出指令、分析指令、执行指令</code>这三个过程称为一个 <code>CPU 时钟周期</code>;</li></ol></li><li><strong>指令</strong>保存位置：<em>PC寄存器</em>，<ol><li><strong>通用寄存器</strong>比喻成是你身上的口袋，<em>内存</em>就是你的背包，而<code>硬盘</code>则是你的行李箱;</li><li><code>通用寄存器</code>通常用来存放数据或者内存中某块数据的<code>地址</code>，我们把这个地址又称为指针，通 常情况下寄存器对存放的数据是没有特别的限制的，比如某个通用寄存器既可以存储数据， 也可以存储指针。</li><li>通用寄存器容量小，读写速度快，内存容量 大，读写速度慢。</li></ol></li></ol><h4 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h4><div class="note danger"><p>第一种是<strong>加载的指令</strong>，其作用是从内存中复制指定长度的内容到通用寄存器中，并覆盖寄存器中原来的内容。你可以参看下图：</p><img data-src='011.png' width='80%' /><p>比如上图使用了 <code>movl 指令</code>，指令后面跟着的第一个参数是要拷贝<code>数据的内存的位置</code>，第二个参数是要<code>拷贝到 ecx 这个寄存器</code>。</p><p>第二种<strong>存储的指令</strong>，和加载类型的指令相反，其作用是将寄存器中的内容复制内存某个位 置，并覆盖掉内存中的这个位置上原来的内容。你可以参看下图：<br><img data-src='012.png' width='80%' /></p><p>上图也是使用 movl 指令，movl 指令后面的 %ecx 就是寄存器地址，-8(%rbp) 是内存中 的地址，这条指令的作用是将寄存器中的值拷贝到内存中。</p><p>第三种是<strong>更新指令</strong>，其作用是复制两个寄存器中的内容到 ALU 中，也可以是一块寄存器和 一块内存中的内容到 ALU 中，ALU 将两个字相加，并将结果存放在其中的一个寄存器中， 并覆盖该寄存器中的内容。具体流程如下图所示：<br><img data-src='013.png' width='80%' /></p><p>观察上图，上图是通过 jmp 来实现的，jmp 后面跟着要跳转的内存中的指令地址。</p><p>除了以上指令之外，还有 IO 读 / 写指令，这些指令可以从一个 IO 设备中复制指定长度的 数据到寄存器中，也可以将一个寄存器中的数据复制到指定的 IO 设备。</p><p>以上就是一些基础的指令类型，这些指令像积木，利用它们可以搭建我们现在复杂的软件大厦。</p></div><h2 id="堆栈：函数调用是如何影响到内存布局的？"><a href="#堆栈：函数调用是如何影响到内存布局的？" class="headerlink" title="堆栈：函数调用是如何影响到内存布局的？"></a>堆栈：函数调用是如何影响到内存布局的？</h2><blockquote><p>为何会有：栈溢出的错误？<br>JS执行时的内存布局是怎么样的？</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    foo() <span class="comment">// 是否存在堆栈溢出错误? </span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// Uncaught RangeError: Maximum call stack size exceeded</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    setTimeout(foo, <span class="number">0</span>) <span class="comment">// 是否存在堆栈溢出错误? </span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(foo) </span><br><span class="line">&#125; </span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// 没有栈溢出 的错误，却会造成页面的卡死呢？</span></span><br></pre></td></tr></table></figure><img data-src='014.png' width='80%' /><h3 id="为何用栈管理函数调用？"><a href="#为何用栈管理函数调用？" class="headerlink" title="为何用栈管理函数调用？"></a>为何用栈管理函数调用？</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getZ</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = getZ();</span><br><span class="line">    <span class="keyword">return</span> x + y + z; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = add(x, y); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数调用者的生命周期</strong>总是长于被调用者（后进），并且被调用者的生命周期总是先于调用者的生命周期结束 (先出)。</p><p><strong>函数资源分配和回收</strong>角度来看，被调用函数的资源分配总是晚于调用函数 (后进)，而函数资源的 释放则总是先于调用函数 (先出);</p><img data-src='015.png' width='80%' /><img data-src='016.png' width='80%' /><blockquote><p>正好 栈的特性–后进先出【LIFO】满足函数的特性。<br>满足特性，但如何管理函数调用呢？</p></blockquote><h3 id="栈管理函数调用"><a href="#栈管理函数调用" class="headerlink" title="栈管理函数调用"></a>栈管理函数调用</h3><img data-src='017.png' width='80%' /><p><strong>控制权</strong>从<code>main</code>函数转移到<code>add函数</code>；那么如何归还控制权，回到main函数执行的现场呢？</p><div class="note danger"><p>寄存器中保存一个永远指向当前<code>栈顶的指针</code>, 通常存放在 <strong>esp</strong> 寄存器中, <strong>作用</strong>: 告诉你应该往哪个位置添加新元素.</p><p><strong>ebp 寄存器</strong>，用来保存<code>当前函数</code>的<strong>起始位置</strong>;，我们把<em>一个函数的起始位置也称为栈帧指针</em>，ebp 寄存器中保存的就是<strong>当前函数</strong>的<code>栈帧指针</code>;</p><blockquote><p>每个函数都有自己的栈帧指针</p></blockquote><div class="note success"><p>栈帧: 每个栈帧对应着一个<code>未运行完的函数</code>，栈帧中保存了该函数的<code>返回地址</code>和<code>局部变量</code>。</p></div><img data-src='018.png' width='80%' /><ol><li>入栈：esp记录栈顶指针，移动esp指针；</li><li>出栈：esp向下移动，&amp;&amp; 从ebp中找到函数的起始指针。</div></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自己调用自己，导致栈无限增长，超出限制！</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    foo() </span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout将foo放入消息队列，不影响当前栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(foo, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 涉及微任务，之后学习</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(foo) </span><br><span class="line">&#125; </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>栈的最大的优点<code>结构性质</code>[快]导致了最大的缺点：获取连续空间<strong>很难</strong>。</p><p>堆不要求存连续内存，堆内存没有固定模式，可以随意分配和释放。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>; </span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> *z = <span class="keyword">new</span> <span class="keyword">int</span>; </span><br><span class="line">    *z = <span class="number">20</span>;</span><br><span class="line">    Point p; </span><br><span class="line">    p.x = <span class="number">100</span>; </span><br><span class="line">    p.y = <span class="number">200</span>;</span><br><span class="line">    Point *pp = <span class="keyword">new</span> Point(); </span><br><span class="line">    pp-&gt;y = <span class="number">400</span>; </span><br><span class="line">    pp-&gt;x = <span class="number">500</span>; </span><br><span class="line">    <span class="keyword">delete</span> z; </span><br><span class="line">    <span class="keyword">delete</span> pp; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src='019.png' width='80%' /><h2 id="延迟解析-amp-amp-闭包"><a href="#延迟解析-amp-amp-闭包" class="headerlink" title="延迟解析 &amp;&amp; 闭包"></a>延迟解析 &amp;&amp; 闭包</h2><p>V8执行JS代码分为两步</p><ol><li>编译：V8将js代码转为字节码||二进制机器码</li><li>执行: 解释器解释执行字节码。</li></ol><blockquote><p>V8<strong>不一次性</strong>将js解析为中间代码。采用 <strong>惰性解析</strong>。</p><blockquote><p>过多的代码会增加编译时间；<br>机器码会放在内存中。</p></blockquote></blockquote><p><strong>惰性解析： 遇到函数声明，将之转换为函数对象，但不解析和编译函数内部的代码，也不会为函数的内部代码生成抽象的语法树。</strong></p><img data-src='020.png' width='80%' /><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包的大三特性</p><ol><li>JavaScript 语言允许在<code>函数</code>内部<code>定义新的函数</code></li><li>内部函数中访问父函数中定义的变量</li><li>因为函数是一等公民，所以<strong>函数可以作为返回值</strong></li></ol><blockquote><p>闭包给惰性解析解析带来的问题—-因为惰性解析时遇到函数只会转为对象，并不知道内部引用函数是否引用外部变量。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">20</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> c = a + b + d </span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = foo()</span><br></pre></td></tr></table></figure><img data-src='021.gif' width='80%' /><img data-src='022.png' width='80%' /><ol><li><p>当调用 foo 函数时，foo 函数会将它的<code>内部函数 inner</code> 返回给<code>全局变量 f</code>；</p></li><li><p>然后 <code>foo 函数</code>执行结束，执行上下文被 <code>V8 销毁</code>了；</p></li><li><p>虽然 foo 函数的执行上下文被销毁了，<strong>但是依然存活的 inner 函数引用了 foo 函数作用 域中的变量 d。</strong></p></li></ol><blockquote><p>当 foo 执行结束时，变量 d 该不该被销毁？<br>如果不应该被销毁，那么应该采用什么策略？</p></blockquote><div class="note danger"><p>如果采用了<code>惰性解析</code>，那么当执行到 foo 函数时，<strong>V8 只会解析 foo 函数</strong>，并<code>不会解析内部的 inner 函数</code>，那么这时候 ``V8 就不知道` inner 函数中是否引用了 foo 函数的变量 d。</p><blockquote><p>如何判断inner函数是否引用外部函数变量？</p></blockquote><p>负责这个模块的就是—-<strong>预解析器</strong></p></div><h3 id="预解析器解决闭包问题"><a href="#预解析器解决闭包问题" class="headerlink" title="预解析器解决闭包问题"></a>预解析器解决闭包问题</h3><p>惰性解析遇到函数声明，并不解析函数内部，导致闭包引用不释放问题。V8引入<strong>预解析器</strong>会对函数<strong>做一次快速的预解析</strong>，目的有两个：</p><ol><li>判断当前函数是否存在语法的错误；</li><li>检查函数内部是否引用了<code>外部变量</code>，如果引用了外部的变量，预解析器会将栈中的变量复制到<strong>堆中</strong>，在下次执行到 该函数的时候，直接使用堆中的引用，这样就解决了闭包所带来的问题。</li></ol><blockquote><p>a 分别保存在栈还是堆？</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有外部引用，当执行到var a； 会分配在【栈】上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span> </span><br><span class="line">    <span class="comment">// 因为内部函数引用，所以在【预解析】阶段copy到【堆】上</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> a++ </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节码-机器码"><a href="#字节码-机器码" class="headerlink" title="字节码 机器码"></a>字节码 机器码</h2><p><strong>早期</strong>的 V8 为了提升代码的执行速度，<code>直接</code>将 JavaScript 源代码编译成了没有优化的二进制的<code>机器代码</code>; 存在两个问题：</p><ol><li>时间问题：编译时间过久，影响代码启动速度；</li><li>空间问题：缓存编译后的二进制代码占用更多的内存。</li></ol><p>后期引入 <strong>字节码</strong>，有三个优势</p><ol><li>解决启动问题：生成字节码的时间很短</li><li>解决空间问题：字节码占用内存不多，缓存字节码会大大降低内存的使用；</li><li>代码架构清晰：采用字节码，可以简化程序的复杂度，使得 V8 移植到不同的 CPU 架构 平台更加容易。</li></ol><blockquote><p>字节码 VS 机器码</p></blockquote><p>字节码是由V8虚拟机解释执行，是模拟物理CPU的执行过程<br>机器码是直接在物理CPU上执行，速度更快。</p><p>V8 在<strong>执行</strong>一段 JS 代码<strong>之前</strong>，需要将其<code>编译为字节码</code>，然后再<code>解释执行字节码</code>或者<code>将字节码编译为二进制代码</code>然后再执行。</p><img data-src='023.png' width='80%' /><img data-src='024.png' width='80%' /><h3 id="如何生成字节码"><a href="#如何生成字节码" class="headerlink" title="如何生成字节码"></a>如何生成字节码</h3><p>V8 执行一段 JavaScript 代码时；</p><ol><li>先对 JavaScript 代码进行解析 (Parser)， 并生成为 AST 和作用域信息</li><li>AST 和作用域信息被输入到一个称为 <strong>Ignition 的解释器</strong>中</li><li>将其<strong>转化为字节码，</strong></li><li>字节码再由 Ignition 解释器来解释执行。</li></ol><blockquote><p>Ignition解释器生成&amp;执行字节码.</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> z = x+y </span><br><span class="line">    <span class="keyword">return</span> z </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><img data-src='025.png' width='80%' /><ol><li>参数的声明 (PARAMS):参数声明中包括了所有的参数，在这里主要是参数 x 和参数 y，你可以在函数体中使用 arguments 来使用对应的参数</li><li>变量声明节点 (DECLS):参数部分你可以使用 arguments 来调用</li><li>是 x+y 的<strong>表达式节点</strong></li><li>RETURN 节点，它指向了 z 的值，在这里是 local[0]。</li></ol><img data-src='026.png' width='80%' /><h3 id="解释器的分类"><a href="#解释器的分类" class="headerlink" title="解释器的分类"></a>解释器的分类</h3><p>解释器就是模拟物理机器来执行字节码的，通常有两种类型的解释器，<code>基于栈 (Stack-based)</code>和<code>基于寄存器 (Register-based)</code>，</p><ol><li><strong>基于栈</strong>的解释器使用栈来保存函数参数、中间运算结果、变量等，如：Java、.net、早起的V8</li><li><strong>基于寄存器</strong>的虚拟机则支持寄存器的指令操作，使用寄存器来保存参数、中间计算结果。<strong>现在的V8</strong></li></ol><img data-src='027.png' width='80%' /><h3 id="分析字节码"><a href="#分析字节码" class="headerlink" title="分析字节码"></a>分析字节码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StackCheck</span><br><span class="line">Ldar a1 </span><br><span class="line">Add a0, [0] </span><br><span class="line">Star r0 </span><br><span class="line">LdaSmi [2] </span><br><span class="line">Star r1 </span><br><span class="line">Ldar r0 </span><br><span class="line">Return</span><br></pre></td></tr></table></figure><h2 id="隐藏类"><a href="#隐藏类" class="headerlink" title="隐藏类"></a>隐藏类</h2><h3 id="静态语言-VS-动态语言-的效率"><a href="#静态语言-VS-动态语言-的效率" class="headerlink" title="静态语言 VS 动态语言 的效率"></a>静态语言 VS 动态语言 的效率</h3><blockquote><p>静态语言比动态语言的执行效率更高.</p></blockquote><ol><li>静态语言，可以直接通过<code>偏移量</code>来查询对象的属性值; 因为静态语言需要定义好对象的结构【形状】，先编译后执行，编译的时候，每个对象的形状是固定的；</li><li>动态语言，运行时对象的属性可以被修改，先查找再更改，涉及【快慢属性的问题】；</li><li>对比查找速度，静态语言的执行效率高于动态语言。</li></ol><h3 id="隐藏类-1"><a href="#隐藏类-1" class="headerlink" title="隐藏类"></a>隐藏类</h3><p>为了提升代码的执行效率，V8将JS的<code>对象静态化</code>,即：运行JS时默认对象是静态的，包括</p><ol><li>对象创建好后，不会添加新的属性；</li><li>对象创建好后，不会删除属性；</li></ol><p>然后为每个对象，创建<code>隐藏类</code>记录对象的布局信息，如：包含的属性、偏移量。<strong>像不像静态语言中形状</strong>。</p><blockquote><p>V8 中，把隐藏类又称为 map，每个对象都有一个 map 属性，其值指向内存中的隐藏类。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> point = &#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><img data-src='028.png' width='80%' /><h3 id="多对象公用隐藏类"><a href="#多对象公用隐藏类" class="headerlink" title="多对象公用隐藏类"></a>多对象公用隐藏类</h3><p>每个对象都有一个隐藏类，那么<code>对象相同</code>是否可以公用？<strong>可以</strong></p><p>那么什么才算是<code>对象相同</code>？</p><ol><li>相同的属性名称</li><li>相同的属性个数</li><li>顺序也需要相同</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> point = &#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;; </span><br><span class="line"><span class="comment">// 执行到建map时候，发现已经有了就公用</span></span><br><span class="line"><span class="keyword">let</span> point2 = &#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>因此，属性的增删，会重新建隐藏类。</p></blockquote><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol><li>使用字面量初始化对象时，要保证属性的顺序是一致的</li><li>尽量使用字面量一次性初始化完整对象属性</li><li>尽量避免使用 delete 方法</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadX</span>(<span class="params">o</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> o.x </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>:<span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>:<span class="number">6</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">90000</span>; i++) &#123;</span><br><span class="line">    loadX(o)</span><br><span class="line">    loadX(o1) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 V8 调用 loadX 的时候，会先查找参数 o 的隐藏类，然后利用隐藏类中的 x 属性的偏移量查找到 x 的属性值，虽然利用<code>隐藏类能够快速提升对象属性的查找速度</code>，但是依然有一 个查找隐藏类和查找隐藏类中的偏移量两个操作，如果 loadX 在代码中会被重复执行，依然影响到了属性的查找效率。</p><h2 id="内联缓存"><a href="#内联缓存" class="headerlink" title="内联缓存"></a>内联缓存</h2><p>通常 V8 获取 o.x 的流程是这样的：<strong>查找对象 o 的隐藏类，再通过隐藏类查找 x 属性偏移 量，然后根据偏移量获取属性值，</strong></p><blockquote><p>内联缓存 (Inline Cache)，简称为 IC， 是为了优化查找效率。</p></blockquote><p>V8 引入了 <strong>IC</strong>，IC 会监听每个函数的<code>执行过程</code>，并在一些关键的地方埋下<code>监听点</code>， 这些包括了<strong>加载对象属性 (Load)</strong>、给对象属性<strong>赋值 (Store)</strong>、还有函数<strong>调用 (Call)</strong>，V8 会 将监听到的数据写入一个称为<strong>反馈向量 (FeedBack Vector)</strong> 的结构中，同时 V8 会为每个执行的函数维护一个反馈向量。有了反馈向量缓存的临时数据，V8 就可以缩短对象属性的查找路径，从而提升执行效率。</p><img data-src='029.png' width='80%' /><div class="note danger"><p>如果一个插槽中只包含 1 个隐藏类，那么我们称这种状态为<strong>单态 (monomorphic)</strong>；<br>如果一个插槽中包含了 2～4 个隐藏类，那我们称这种状态为<strong>多态 (polymorphic)</strong>；<br>如果一个插槽中超过 4 个隐藏类，那我们称这种状态为<strong>超态 (magamorphic)</strong>。</p></div><img data-src='030.png' width='80%' /><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/intro/296" target="_blank" rel="noopener">图解 Google V8</a></p>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8系列一</title>
      <link href="2021/01/04/v8_1/"/>
      <url>2021/01/04/v8_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/004.jpg" width=80% /><span class='geyan'>女人，你的名字是弱者。<br>Woman, your name is weak.</span><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>V8</strong>是由 Google 开发的开源 JavaScript <code>引擎</code>，也被称为<code>虚拟机</code>，模拟实际计算机各种功能来<code>实现代码的编译和执行</code>。那么，要想搞清楚 V8 内部的工作流程和原理，我们可以从分析计算机对语言的<code>编译和执行</code>过程入手。</p><p>V8采用<code>混合编译执行和解释执行</code>这两种手段，我们把这种混合使用编译器和解释器的技术称为 <code>JIT（Just In Time）</code>技术。</p><ol><li>解释执行启动速度快，但是执行时速度慢，</li><li>编译执行启动速度慢，但是执行速度快。</li></ol><img data-src="004.png" width=80% /><h2 id="快慢属性"><a href="#快慢属性" class="headerlink" title="快慢属性"></a>快慢属性</h2><blockquote><p>JS中经常操作离不开对象，那么V8是以什么样的方式存取的对象呢</p></blockquote><h3 id="属性存储方式"><a href="#属性存储方式" class="headerlink" title="属性存储方式"></a>属性存储方式</h3><p>JavaScript 中的对象是由一 组组属性和值组成的，所以最简单的方式是使用一个字典来保存属性和值，但是由于字典是 非线性结构，所以如果使用字典，读取效率会大大降低。</p><p>V8 在对象中添加了两个隐藏属性分为：<code>常规属性 (properties)</code> 和<code>排序属性 (element)</code>；</p><p>ECMAScript 规范中定义了<code>数字属性</code>应该按照<strong>索引值</strong><code>大小</code>升序排列<code>，</code>字符串属性<code>根据**创建时**的顺序</code>升序排列`。</p><p>对象中的数字属性称为<strong>排序属性</strong>，V8 中被称为 elements；<br>字符串属性就被称为<strong>常规属性</strong>，V8中被称为 properties。</p><img data-src="005.png" width=80% /><img data-src="006.png" width=80% /><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><blockquote><p>不建议使用 delete 来删除属性，你能结合文中介绍的快属性和慢属性，给出不 建议使用 delete 的原因吗？</p></blockquote><ol><li>删除常规属性，查找开销较大,可能需要将慢属性重排到快属性。</li><li>删除排序属性，先查找在删除，删除后线性结构会出现间隙，要重新进行排序; </li></ol><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>函数声明·与·函数表达式的差异：<strong>为何二执行报错？</strong></p><img data-src="007.png" width=80% /><img data-src="008.png" width=80% /><ol><li>解析到函数声明，V8将<code>函数声明</code>转换为<code>内存中的函数对象</code>， 并将其放到<code>作用域</code>中, <strong>编译阶段放入堆内存</strong>；</li><li>解析到了某个<code>变量声明</code>，也会将其放到作用域中，但是会将其值设置为<code>undefined</code>，表示该变量还未被使用。</li><li>编译阶段将所有变量提升到作用域的过程，叫做：<strong>变量提升</strong>;</li></ol><h4 id="表达式-VS-语句"><a href="#表达式-VS-语句" class="headerlink" title="表达式 VS 语句"></a>表达式 VS 语句</h4><div class="note danger"><ol><li>表达式：表示值的式子；有返回值；</li><li>语句：操作值的式子；可以操作表达式；</li></ol></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表达式</span></span><br><span class="line">x = <span class="number">5</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 语句</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题</strong>：V8 执行<code>var x = 5</code>这段代码的执行过程？</p><p>两段代码，一段是定义变量的语句，一段是赋值的表达式， 如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译阶段完成</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 执行阶段完成</span></span><br><span class="line">x = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><img data-src="009.png" width=80% /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo()</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** =====V8编译 **/</span></span><br><span class="line"><span class="comment">// 声明语句，undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 函数表达式，编译阶段V8不会处理【函数表达式】，不会将函数表达式提示到作用域中。</span></span><br><span class="line"><span class="comment">// 该行执行阶段才会完成，所以先调用foo()，输出undefined</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译阶段决定是否提升到作用域，执行阶段才赋值。</p></blockquote><p>JS中有<code>()</code>运算符，中间可以放一个<code>表达式</code>；</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(a = <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果放一个函数, V8会认为是【函数表达式】而不是【函数声明】</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>小括号之间存放的必须是表达式</code>，所以如果在小阔号里面定义一个<code>函数</code>，那么 V8 就会把这个函数看成是<strong>函数表达式</strong>，执行时它会返回一个<em>函数对象。</em></p><p>存放在括号里面的函数便是一个<code>函数表达式</code>，它会返回一个函数对象，如果我直接在表达式后面加上调用的括号，这就称<strong>立即调用函数表达式（IIFE）</strong>，比如下面代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>)(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><div class="note default"><p><strong>函数立即表达式</strong>也是一个<strong>表达式</strong>，所以 V8 在<code>编译阶段</code>，并<strong>不会</strong>为该表达式创建函数对象。</p><p>这样的一个好处就是不会污染环境，<strong>函数和函数内部的变量</strong>都不会被其他部分的代码访问到。</p></div><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    n = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br></pre></td></tr></table></figure><ol><li>编译阶段，先在全局作用域内声明变量 n 的值为undefined，然后声明函数表达式；</li><li>执行阶段，将 1 赋值给 n，函数表达式“立即执行”，</li><li>想要将 100 赋值给变量n，</li><li>但在当前作用域内没有找到 n 的声明，沿着作用域链向上查找，在全局作用域内找到了变量 n，将 100 赋给它，</li><li>接着执行立即函数调用表达式中的 打印语句，输出 n，为100</li><li>接着执行后面的打印语句，输出 n，为100；</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    n = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><ol><li>编译阶段：<ol><li>声明变量 n 的值为undefined，</li><li><strong>函数声明</strong>提升到作用域</li></ol></li><li>执行阶段<ol><li>执行倒数第二行，输出1；</li><li>执行foo() –赋值【n=100–打印100】</li></ol></li></ol><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>不同的语言实现继承的方式是不同的，其中最典型的两种方式是<strong>基于类的设计和基于原型继承的设计。</strong></p><p><strong>继承</strong>就是一个对象可以访问另外一个对象中的属性和方法，在 JavaScript 中，我们通过<code>原型和原型链</code>的方式来<code>实现了继承</code>特性。</p><ol><li>C++、Java、C# 这些语言都是基于经典的类继承的设计模式</li><li>ES2015/ES6 中引入了 class 关键字，但那<strong>只是语法糖</strong>，JavaScript 的继承依然和基于类的继承没有一点关系。<strong>不要以为 JavaScript 也是面向对象语言了</strong></li></ol><img data-src="010.png" width=80% /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">    type: <span class="string">"Default"</span>, </span><br><span class="line">    color: <span class="string">"Default"</span>, </span><br><span class="line">    getInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Type is: <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span>，color is <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>.`</span> </span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">    type: <span class="string">"Dog"</span>,</span><br><span class="line">    color: <span class="string">"Black"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">dog.__proto__ = animal</span><br></pre></td></tr></table></figure><div class="note danger"><p>但是<code>__proto__</code>是隐藏属性，不是标准定义，使用该属性会造成严重的性能问题，所以不应该使用。</p></div><h3 id="采用构造函数创建对象"><a href="#采用构造函数创建对象" class="headerlink" title="采用构造函数创建对象"></a>采用构造函数创建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DogFactory</span>(<span class="params">type,color</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.type = type </span><br><span class="line">    <span class="keyword">this</span>.color = color </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> DogFactory(<span class="string">'Dog'</span>,<span class="string">'Black'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**--V8背后执行--**/</span></span><br><span class="line"><span class="keyword">var</span> dog = &#123;&#125; </span><br><span class="line">dog.__proto__ = DogFactory.prototype </span><br><span class="line">DogFactory.call(dog,<span class="string">'Dog'</span>,<span class="string">'Black'</span>)</span><br></pre></td></tr></table></figure><img data-src="011.png" width=80% /><ol><li>创建了一个空白对象 dog；</li><li>将 DogFactory 的 <code>prototype</code> 属性设置为 dog 的原型对象</li><li>再使用 dog 来调用 DogFactory，这时候 DogFactory 函数中的 this 就指向了对象 dog，然后在 DogFactory 函数中，利用 this 对对象 dog 执行属性填充操作，最终 就创建了对象 dog。</li></ol><h3 id="apply-和-call"><a href="#apply-和-call" class="headerlink" title="apply 和 call"></a>apply 和 call</h3><p>apply 和 call 作用一模一样，只是传参的形式有区别而已。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>apply 方法传入两个参数：<ol><li>函数上下文的对象，</li><li>函数参数所组成的<code>数组</code>。</li></ol></li><li>call 方法传入两个参数：<ol><li>函数上下文的对象，</li><li>一个参数列表，而<strong>不是单个数组</strong>。</li></ol></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'狂徒张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">firstName, lastName</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + <span class="keyword">this</span>.name + <span class="string">' '</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line">func.apply(obj, [<span class="string">'A'</span>, <span class="string">'B'</span>]);    <span class="comment">// A 狂徒张三 B</span></span><br><span class="line">func.call(obj, <span class="string">'A'</span>, <span class="string">'B'</span>);    <span class="comment">// A 狂徒张三 B</span></span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><h5 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'狂徒张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时func中的this指向上下文</span></span><br><span class="line">func.call(obj); <span class="comment">// 狂徒张三</span></span><br></pre></td></tr></table></figure><h5 id="借用别的对象的方法"><a href="#借用别的对象的方法" class="headerlink" title="借用别的对象的方法"></a>借用别的对象的方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Person1  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'狂徒张三'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getname = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    Person1.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person2();</span><br><span class="line">person.getname(); <span class="comment">// 狂徒张三</span></span><br></pre></td></tr></table></figure><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'狂徒张三'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply、call 方法都会使函数立即执行，因此它们也可以用来调用函数。</span></span><br><span class="line">func.call();<span class="comment">// 狂徒张三</span></span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>JavaScript 的继承是基于原型链的，<strong>原型链</strong>将一个个原型对象串起来， 从而实现<code>对象属性的查找</code>，</p><p><strong>作用域链</strong>就是将一个个作用域串起来，实现<code>变量查找</code>的路径。</p><img data-src="012.png" width=80% /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'极客时间'</span> </span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'global'</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">'function'</span> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(type) </span><br><span class="line">    &#125; </span><br><span class="line">    foo()</span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p><a href="http://pythontutor.com/live.html#mode=edit" target="_blank" rel="noopener">在线执行</a></p><img data-src="013.png" width=80% /><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>参考之前的文章 <a href="https://simuty.github.io/2020/04/12/dataType/" target="_blank" rel="noopener">ES系列-数据类型&lt;1&gt; </a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844903837623386126" target="_blank" rel="noopener">用自己的方式（图）理解constructor、prototype、<strong>proto</strong>和原型链 </a><br><a href="https://github.com/lin-xin/blog/issues/7" target="_blank" rel="noopener">JavaScript 中 apply 、call 的详解 #7</a></p>]]></content>
      
      
      <categories>
          
          <category> V8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql系列一 你可能不知道的 CRUD</title>
      <link href="2021/01/01/mysql_1-crud/"/>
      <url>2021/01/01/mysql_1-crud/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/002.jpg" width=80% /><span class='geyan'>凡是过去，皆为序曲。<br>All the past, all is overture.</span><a id="more"></a><p>本系列旨在系统学习提升Mysql技能，更完整内容可以参考<a href="https://coding.imooc.com/class/353.html" target="_blank" rel="noopener">阿里新零售数据库设计与实战</a></p><h2 id="DB引擎"><a href="#DB引擎" class="headerlink" title="DB引擎"></a>DB引擎</h2><h2 id="你可能不知道的CRUD"><a href="#你可能不知道的CRUD" class="headerlink" title="你可能不知道的CRUD"></a>你可能不知道的CRUD</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><h4 id="情况一-Duplicate-key"><a href="#情况一-Duplicate-key" class="headerlink" title="情况一 Duplicate key"></a>情况一 Duplicate key</h4><p>当批量更新，如果有重复的primary key,如果有一条失败，则全部失败。</p><div class="note danger">更新时忽略错误行，继续执行该如何处理？<p>如： <code>t_dept</code> 表中已经存在 <code>deptno = 40</code> 的数据；</p></div><h5 id="步骤一-直接插入"><a href="#步骤一-直接插入" class="headerlink" title="步骤一 直接插入"></a>步骤一 直接插入</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_dept (deptno, dname, loc) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">40</span>, <span class="string">'企划部'</span>, <span class="string">'北京'</span>),</span><br><span class="line">(<span class="number">50</span>, <span class="string">'培训部'</span>, <span class="string">'上海'</span>),</span><br></pre></td></tr></table></figure><p>错误信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Error occurred during SQL query execution</span><br><span class="line">Reason:</span><br><span class="line">SQL Error [1062] [23000]: Duplicate entry '40' for key 't_dept.PRIMARY'</span><br></pre></td></tr></table></figure><h5 id="步骤二-关键字–IGNORE"><a href="#步骤二-关键字–IGNORE" class="headerlink" title="步骤二 关键字–IGNORE"></a>步骤二 关键字–<strong>IGNORE</strong></h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span>  <span class="keyword">INTO</span> t_dept (deptno, dname, loc) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">40</span>, <span class="string">'企划部'</span>, <span class="string">'北京'</span>),</span><br><span class="line">(<span class="number">50</span>, <span class="string">'培训部'</span>, <span class="string">'上海'</span>)</span><br></pre></td></tr></table></figure><h4 id="情况二-upsert操作"><a href="#情况二-upsert操作" class="headerlink" title="情况二 upsert操作"></a>情况二 upsert操作</h4><blockquote><p>目标：存在则更新，不存在则创建。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_emp_ip`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`empno`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ip`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`empno`</span>(<span class="string">`empno`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`ip`</span>(<span class="string">`ip`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 原有数据</span></span><br><span class="line"><span class="comment">-- empno字段为： 唯一性约束</span></span><br><span class="line">id|empno|ip         |</span><br><span class="line"><span class="comment">--|-----|-----------|</span></span><br><span class="line"> 1|  100|192.168.0.1|</span><br><span class="line"> 2|  101|192.168.0.2|</span><br></pre></td></tr></table></figure><div class="note success"><p>目标</p><ol><li>插入102、103两条数据</li><li>更新101对应的IP</div></li></ol><h5 id="步骤一：-错误示范"><a href="#步骤一：-错误示范" class="headerlink" title="步骤一： 错误示范"></a>步骤一： 错误示范</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_emp_ip(<span class="keyword">id</span>, empno, ip) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>, <span class="number">102</span>, <span class="string">'192.168.0.100'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">103</span>, <span class="string">'192.168.0.150'</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="number">101</span>, <span class="string">'192.168.0.200'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Error occurred during SQL query execution</span><br><span class="line">Reason:</span><br><span class="line">SQL Error [1062] [23000]: Duplicate entry '101' for key 't_emp_ip.empno'</span><br></pre></td></tr></table></figure><h5 id="步骤二-正确操作"><a href="#步骤二-正确操作" class="headerlink" title="步骤二 正确操作"></a>步骤二 正确操作</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_emp_ip(<span class="keyword">id</span>, empno, ip) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>, <span class="number">102</span>, <span class="string">'192.168.0.100'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">103</span>, <span class="string">'192.168.0.150'</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="number">101</span>, <span class="string">'192.168.0.200'</span>)</span><br><span class="line"><span class="comment">-- 子句更新｜｜插入</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">duplicate</span> <span class="keyword">UPDATE</span> ip=<span class="keyword">VALUES</span>(ip);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id|empno|ip           |</span><br><span class="line"><span class="comment">--|-----|-------------|</span></span><br><span class="line"> 1|  100|192.168.0.1  |</span><br><span class="line"> 2|  101|192.168.0.200| <span class="comment">-- update</span></span><br><span class="line"> 4|  102|192.168.0.100| <span class="comment">-- insert</span></span><br><span class="line"> 5|  103|192.168.0.150| <span class="comment">-- insert</span></span><br></pre></td></tr></table></figure><h5 id="步骤三-测试其他表"><a href="#步骤三-测试其他表" class="headerlink" title="步骤三 测试其他表"></a>步骤三 测试其他表</h5><p>如果需要更新多个字段，则字句中需要罗列完整的字段。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">8000</span>, <span class="string">'MILLER'</span>, <span class="string">'CLERK'</span>, <span class="number">7782</span>, <span class="string">'1982-01-23'</span>, <span class="number">1300.00</span>, <span class="number">0.9</span> ,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">8000</span>, <span class="string">'MILLER'</span>, <span class="string">'CLERK'</span>, <span class="number">7782</span>, <span class="string">'1982-01-23'</span>, <span class="number">300.00</span>, <span class="number">100</span> ,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">duplicate</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> comm=<span class="keyword">VALUES</span>(comm);</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><div class="note danger"><p>相关子查询就是要循环执行多次的子查询。</p><div class="note success"><ol><li>子查询：<code>独立于外部查询的子查询</code>，子查询总共执行一次，执行完毕后将值传递给外部查询；</li><li>相关子查询：相关子查询的执行依赖于外部查询的数据，外部查询执行一行，子查询就执行一次；</li></ol></div><p><strong>注：</strong></p><ol><li>mysql默认关闭了缓存，所以每个<code>子查询</code>都是<code>相关子查询</code>。</li><li>一般ORM开启了缓存。</li></ol></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno, ename</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  t_emp</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  sal &gt; (</span><br><span class="line">    <span class="comment">-- WHERE语句每过滤一条数据，子查询就会执行一次</span></span><br><span class="line">    <span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> empno = <span class="number">7499</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">AND</span> empno != <span class="number">7499</span>;</span><br></pre></td></tr></table></figure><h4 id="代替子查询"><a href="#代替子查询" class="headerlink" title="代替子查询"></a>代替子查询</h4><div class="note success">使用FROM子查询，代替WHERE子查询<ol><li>FROM子查询<code>只会执行一次</code>，优先执行数据来源，所以不是相关子查询</li></ol></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 相关子查询代替方案</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">SELECT</span> empno, ename</span><br><span class="line"><span class="keyword">FROM</span> t_emp e </span><br><span class="line">    <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> empno = <span class="number">7499</span>) t</span><br><span class="line"><span class="keyword">ON</span> e.sal &gt; t.sal <span class="keyword">AND</span> e.empno != <span class="number">7499</span>;</span><br></pre></td></tr></table></figure><h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接里，<code>查询条件写在ON子句或where子句，效果相同</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.ename, e.dname </span><br><span class="line"><span class="keyword">FROM</span> t_emp e</span><br><span class="line"><span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno = d.deptno <span class="keyword">AND</span> d.deptno = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.ename, d.name </span><br><span class="line"><span class="keyword">FROM</span> t_emp e</span><br><span class="line"><span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno = d.deptno</span><br><span class="line"><span class="keyword">WHERE</span> d.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>内连接里，查询条件写在<strong>ON子句</strong>或<strong>where子句</strong>，<code>效果相差很大</code>.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 保留左表所有数据和右表关联</span></span><br><span class="line"><span class="keyword">SELECT</span> e.ename, e.ename </span><br><span class="line"><span class="keyword">FROM</span> t_emp e</span><br><span class="line"><span class="comment">-- ON 条件如果符合则返回，否则返回null</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno = d.deptno</span><br><span class="line"><span class="comment">-- 不强求连接条件，会返回部门ID不等10的部门</span></span><br><span class="line"><span class="keyword">AND</span> d.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>返回结果</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ename |ename |deptno|</span><br><span class="line"><span class="comment">------|------|------|</span></span><br><span class="line">SMITH |SMITH |    20|</span><br><span class="line">ALLEN |ALLEN |    30|</span><br><span class="line">WARD  |WARD  |    30|</span><br><span class="line">JONES |JONES |    20|</span><br><span class="line">MARTIN|MARTIN|    30|</span><br><span class="line">BLAKE |BLAKE |    30|</span><br><span class="line">CLARK |CLARK |    10|</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左表数据必须满足 where 条件才会返回。</span></span><br><span class="line"><span class="keyword">SELECT</span> e.ename, d.name </span><br><span class="line"><span class="keyword">FROM</span> t_emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno = d.deptno</span><br><span class="line"><span class="keyword">WHERE</span> d.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>返回结果</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ename |ename |deptno|</span><br><span class="line"><span class="comment">------|------|------|</span></span><br><span class="line">CLARK |CLARK |    10|</span><br><span class="line">KING  |KING  |    10|</span><br><span class="line">MILLER|MILLER|    10|</span><br><span class="line">MILLER|MILLER|    10|</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ol><li>where子句：需要满足条件才可以返回；</li><li>on子句：完全以左表为主，</li></ol><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><h4 id="表连接修改"><a href="#表连接修改" class="headerlink" title="表连接修改"></a>表连接修改</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_emp <span class="keyword">SET</span> sal = <span class="number">10000</span></span><br><span class="line"><span class="keyword">WHERE</span> deptno = (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> t_dept <span class="keyword">WHERE</span> dname = <span class="string">'SALES'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> t_emp e </span><br><span class="line"><span class="comment">-- 内连接，条件写在on || where 效果一样。</span></span><br><span class="line"><span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno = d.deptno <span class="keyword">AND</span> d.dname = <span class="string">'SALES'</span></span><br><span class="line"><span class="comment">-- 更改多个表的字段</span></span><br><span class="line"><span class="keyword">SET</span> e.sal = <span class="number">10000</span>, d.dname = <span class="string">'销售部'</span>;</span><br></pre></td></tr></table></figure><h3 id="表连接删除"><a href="#表连接删除" class="headerlink" title="表连接删除"></a>表连接删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除t_emp、t_dept表符合条件的数据</span></span><br><span class="line"><span class="comment">-- 写谁删谁，不写不删除</span></span><br><span class="line"><span class="keyword">DELETE</span> e, d <span class="keyword">FROM</span> t_emp e <span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno = d.deptno <span class="keyword">AND</span> d.dname = <span class="string">'销售部'</span>;</span><br></pre></td></tr></table></figure><h2 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h2><blockquote><p>为啥数据库需要有事务机制？</p><blockquote><p>类比，操作重要代码，可能先要新建一个分之，避免混乱。</p></blockquote></blockquote><div class="note danger"><p>同理：如果数据的写入直接操作数据文件是<strong>非常危险的事情</strong></p><p>如：给员工工资普普涨，但中途失败了，怎么确认那些成功，哪些失败。</p><p><strong>就需要引入事务机制。</strong></p></div><blockquote><p>日志文件相当于数据副本</p></blockquote><h3 id="undo-amp-redo"><a href="#undo-amp-redo" class="headerlink" title="undo &amp; redo"></a>undo &amp; redo</h3><h4 id="数据库日志分类"><a href="#数据库日志分类" class="headerlink" title="数据库日志分类"></a>数据库日志分类</h4><ol><li>重做日志（redo log）</li><li>回滚日志（undo log）</li><li>二进制日志（binlog）</li><li>错误日志（errorlog）</li><li>慢查询日志（slow query log）</li><li>一般查询日志（general log）</li><li>中继日志（relay log）</li></ol><div class="note danger"><ol><li><code>SQL</code>操作的<code>记录</code>会被复制<code>undo日志</code>中；</li><li>CRUD的<code>结果</code>会记录在<code>redo日志</code>中；</li><li>如果CRUD没问题，将redo日志中的数据同步到<code>SQL文件</code>中;</li><li>如果同步过程中出现问题，则之后再次同步即可。</li></ol><blockquote><p>undo &amp; redo 对于事务机制的重要性不言而喻。</p></blockquote></div><h3 id="事务机制-1"><a href="#事务机制-1" class="headerlink" title="事务机制"></a>事务机制</h3><p>事务是一个或多个SQL语句组成的整体，要么全部执行成功，要么全部执行失败。</p><img data-src="005.png" width=80% /><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><ol><li>原子性：要么成功要么失败；</li><li>一致性：不论并发多少，必须保证结果一致性；事务隔离，不能读写其他事务的临时日志；</li><li>隔离性：事务相互之间隔离；</li><li>持久性：一旦提交，结果便是永久性的，宕机可以恢复事务日志完成数据的持久化。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://coding.imooc.com/class/353.html" target="_blank" rel="noopener">阿里新零售数据库设计与实战</a><br><a href="http://www.bubuko.com/infodetail-2945382.html" target="_blank" rel="noopener">Mysql-innoDB存储引擎(事物，锁，MVCC)</a><br><a href="https://my.oschina.net/leejun2005/blog/288533" target="_blank" rel="noopener">浅谈 MySQL 子查询及其优化</a><br><a href="https://www.cnblogs.com/ggjucheng/archive/2012/11/11/2765237.html" target="_blank" rel="noopener">Explain语法</a><br><a href="https://www.cnblogs.com/annsshadow/p/5037667.html" target="_blank" rel="noopener">步步深入：MySQL架构总览-&gt;查询执行流程-&gt;SQL解析顺序</a><br><a href="https://cloud.tencent.com/developer/article/1181844" target="_blank" rel="noopener">MySQL到底有多少种日志类型需要我们记住的！</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql系列二 新零售</title>
      <link href="2021/01/01/mysql_2-sku/"/>
      <url>2021/01/01/mysql_2-sku/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/003.jpg" width=80% /><span class='geyan'>没有比正直更富的遗产。<br>No more than just rich heritage.</span><a id="more"></a><h2 id="新零售"><a href="#新零售" class="headerlink" title="新零售"></a>新零售</h2><img data-src='004.png' width='80%' /><blockquote><p>一个产品包含多个商品</p></blockquote><h3 id="SPU-SKU"><a href="#SPU-SKU" class="headerlink" title="SPU SKU"></a>SPU SKU</h3><div class="note danger">SPU<Standard Product Unit> 标准**产品**单位，SPU描述一个产品的各种特征。</div><div class="note danger"><p>SKU<Stock Keeping Unit> 是库存进出计量的单位，SKU是物理上不可分割的最小存货单元。</p><img data-src='005.png' width='80%' /><p><strong>SKU与权重</strong></p><ol><li>B2C：修改SKU对权重影响不大，如：新零售、苏宁易购；</li><li>B2B：修改SKU对商品权重影响很大，如：淘宝；</li></ol><p><strong>SPU SKU关系图</strong></p><img data-src='006.png' width='80%' /></div><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><h3 id="品类参数表"><a href="#品类参数表" class="headerlink" title="品类参数表"></a>品类参数表</h3><img data-src='007.png' width='80%' /><div class="note danger"><p>注：</p><ol><li>级连结构表结构，如评论、分类等；</li><li>VARCHAR不添加索引，通常采用中文分词技术；</li><li>精确的浮点数：<strong>DECIMAL(10, 2)</strong><ol><li>10代表：整数位+小数位 = 10</li><li>2精确到小数点后两位</li></ol></li><li><strong>商品价格是一个字段还是两个字段？</strong><ol><li>一个字段就够了，然后在用户相关的等级表中定义打折力度即可。</li></ol></li><li></div></li></ol><h3 id="SKU-amp-amp-SPU"><a href="#SKU-amp-amp-SPU" class="headerlink" title="SKU &amp;&amp; SPU"></a>SKU &amp;&amp; SPU</h3><p>SKU: 产品表，如手机；<br>SPU: 商品表，如iPhone12</p><img data-src='008.png' width='80%' /><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"t_spu"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"title"</span> : <span class="string">"小米"</span>,</span><br><span class="line"><span class="attr">"sub_title"</span> : <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"category_id"</span> : <span class="number">3</span>,</span><br><span class="line"><span class="attr">"brand_id"</span> : <span class="number">3</span>,</span><br><span class="line"><span class="attr">"spg_id"</span> : <span class="number">10001</span>,</span><br><span class="line"><span class="attr">"saleable"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"valid"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"create_time"</span> : <span class="string">"2021-01-03 03:56:45"</span>,</span><br><span class="line"><span class="attr">"last_update_time"</span> : <span class="string">"2021-01-03 03:56:45"</span></span><br><span class="line">&#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"t_sku"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span> : <span class="number">2</span>,</span><br><span class="line"><span class="attr">"spu_id"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"title"</span> : <span class="string">"Xiaomi\/小米 小米9 8GB+128GB 全息幻彩蓝 移动联通电信全网通4G手机"</span>,</span><br><span class="line"><span class="attr">"images"</span> : <span class="string">"&#123;\"desc\": [\"http:\/\/127.0.0.1\/3.jpg\", \"http:\/\/127.0.0.1\/4.jpg\"], \"facade\": [\"http:\/\/127.0.0.1\/1.jpg\", \"http:\/\/127.0.0.1\/2.jpg\"]&#125;"</span>,</span><br><span class="line"><span class="attr">"price"</span> : <span class="number">3299.00</span>,</span><br><span class="line"><span class="attr">"param"</span> : <span class="string">"&#123;\"CPU\": \"骁龙855\", \"内存\": 128, \"电池\": 4000, \"运存\": 8, \"屏幕尺寸\": 6.39&#125;"</span>,</span><br><span class="line"><span class="attr">"saleable"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"valid"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"create_time"</span> : <span class="string">"2021-01-03 03:57:45"</span>,</span><br><span class="line"><span class="attr">"last_update_time"</span> : <span class="string">"2021-01-03 03:57:45"</span>,</span><br><span class="line"><span class="attr">"is_deleted"</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure><p><strong>param</strong>为json类型，来源<code>品类表对应的--参数表</code>。</p><h3 id="库存表"><a href="#库存表" class="headerlink" title="库存表"></a>库存表</h3><img data-src='009.png' width='80%' /><img data-src='010.png' width='80%' /><img data-src='011.png' width='80%' /><h4 id="商品与库存"><a href="#商品与库存" class="headerlink" title="商品与库存"></a>商品与库存</h4><img data-src='012.png' width='80%' /><h4 id="零售店与库存"><a href="#零售店与库存" class="headerlink" title="零售店与库存"></a>零售店与库存</h4><img data-src='013.png' width='80%' /><h3 id="用户表-amp-收货表"><a href="#用户表-amp-收货表" class="headerlink" title="用户表 &amp; 收货表"></a>用户表 &amp; 收货表</h3><p>没有用户&amp;收货地址就没法下单；会员制度存在于各行各业。</p><p>用户加密可以采用：AES，对称加密；可以采用用户相关字段作为<code>加密参数</code>;增加破解难度。</p><img data-src='014.png' width='80%' /><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试加密</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_ENCRYPT</span>(<span class="string">'hello'</span>, <span class="string">'new'</span>); <span class="comment">-- 二进制</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HEX</span>(<span class="keyword">AES_ENCRYPT</span>(<span class="string">'hello'</span>, <span class="string">'new'</span>)) <span class="comment">-- 转为十六禁止</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_DECRYPT</span>(<span class="keyword">UNHEX</span>(<span class="string">'B18CC45526AF3CC0F4874D03EE5183E1'</span>), <span class="string">'new'</span>); <span class="comment">-- 解密</span></span><br></pre></td></tr></table></figure><div class="note danger"><p>关于密码存储问题</p><ul><li>加密解密时机</li></ul><ol><li>代码层面加密解密存储</li><li>SQL自带加密解密</li></ol><ul><li>加密解密方式</li></ul><ol><li>对称加密<ol><li>全表一个加密key</li><li>每个用户都有一个key; <ol><li><strong>如何选择这个key,如果是nick，后续可能更改</strong> </li></ol></li><li>破解难易程度，感觉有规律就差不多。也可能2&gt;1</li></ol></li></ol></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  <span class="string">`t_customer`</span>(username, <span class="string">`password`</span>, wechat, tel) <span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">'xiaoming'</span>,</span><br><span class="line">    <span class="keyword">HEX</span>(<span class="keyword">AES_ENCRYPT</span>(<span class="string">'123456+1s'</span>, <span class="string">'xiao'</span>)),</span><br><span class="line">    <span class="string">'xiaoming_wechat'</span>,</span><br><span class="line">    <span class="string">'1333333333'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="购物券"><a href="#购物券" class="headerlink" title="购物券"></a>购物券</h3><p>购物券有使用期限，一个订单只能使用一张购物券；</p><p>购物券和客户记录需要关联; </p><blockquote><p>关联表不采用复合主键的原因是，一个用户可以领取多个购物券。</p></blockquote><img data-src='015.png' width='80%' /><h3 id="订单表"><a href="#订单表" class="headerlink" title="订单表"></a>订单表</h3><blockquote><p>订单需要两个表的原因，如果存进JSON不适合检索。一个订单可能包含N个商品</p></blockquote><ol><li>有ID还有<code>订单流水号code</code>的原因？<ol><li>code可以包含商品属性分类；如a:吃的b:用的c:喝的</li><li>可以加入时间</li><li>根据自己的需求加入即可</li></ol></li><li>type: 销售不同的渠道</li><li>shop_id、customer_id都可以为空，因为网络销售、线下销售情况不一样；</li></ol><img data-src='015.png' width='80%' /><h3 id="进销存"><a href="#进销存" class="headerlink" title="进销存"></a>进销存</h3><ol><li>新零售需要明确记录，进货、发货、退货等</li><li>因此需要先有<strong>员工表</strong>,员工又有所属的<strong>部门表</strong>、<strong>职位表</strong>;</li><li>是否有权限操作新零售，又需要 <strong>用户表</strong></li><li>用户可能有多个角色，故需要 <strong>角色表</strong></li><li>为简单选择<code>一对一</code>的 <strong>【用户–角色】</strong></li><li>进销存需要 <strong>快递表</strong>，<ol><li><code>一个定单可能有多个快递,但是sku不一样</code></li><li>订单表中记录的是总的<code>邮费</code>;快递表中记录的是单个快递的邮费</li><li><code>sku</code>–需要保存订单对应的所有的sku,如果两个同样的商品[3]，就记录: [3,3]</li></ol></li><li>有发货就有 <strong>退货表</strong><ol><li>同一个订单可以包含多个sku,那么orderId就不可以设置唯一性约束；</li><li><code>payment</code> 退货分：全额、部分，所以和sku的<code>价格不一致</code>, 退货人员自己判断;</li></ol></li><li>购买结束，即需要评价<ol><li>评价可以只对订单中的其中一个或多个SKU进行评价；</li><li>img 可以包含多个图片、视频，json保存URL；</li></ol></li><li>供货商相关<ol><li>商品都卖出去了，肯定有人提供货源</li><li><code>供货表</code> <code>供货-商品表</code></li></ol></li><li>当发生的采购与入库<ol><li><code>采购表</code>、<code>入库表</code>、<code>关联表</code></li><li>参考下图：018</li></ol></li></ol><blockquote><p>【员工】与【用户】的关系是什么？</p><blockquote></blockquote></blockquote><img data-src='016.png' width='80%' /><img data-src='017.png' width='80%' /><img data-src='018.png' title='018' width='80%' /><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://coding.imooc.com/class/353.html" target="_blank" rel="noopener">阿里新零售数据库设计与实战</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg-elk &amp; 日志规范</title>
      <link href="2021/01/01/logs/"/>
      <url>2021/01/01/logs/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2021/001.jpg" width=80% /><span class='geyan'>- You can't play God without being acquainted with the Devil.<br>想要扮演上帝，你就不能不去了解魔鬼。</span><a id="more"></a><h2 id="第一部分-简述ELK"><a href="#第一部分-简述ELK" class="headerlink" title="第一部分 简述ELK"></a>第一部分 简述ELK</h2><p>ELK 是三个开源项目的首字母缩写，这三个项目分别是：Elasticsearch、Logstash 和 Kibana。</p><ol><li>Elasticsearch 是一个<code>搜索和分析引擎</code>。</li><li>Logstash 是服务器端<code>数据处理管道</code>，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等存储库中。</li><li>Kibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行<code>可视化</code>。</li></ol><p>ELK Stack</p><img data-src='004.png' width='80%' /><p>Elasticsearch 的核心是<code>搜索引擎</code>，所以用户开始将其用于日志用例，并希望能够轻松地对日志进行采集和可视化。有鉴于此，Elastic 引入了强大的采集管道 <code>Logstash</code> 和灵活的<code>可视化工具 Kibana</code>。</p><p>ELK日志系统数据流图如下：</p><img data-src='005.png' width='80%' /><h2 id="第二部分-日志的重要性"><a href="#第二部分-日志的重要性" class="headerlink" title="第二部分 日志的重要性"></a>第二部分 日志的重要性</h2><h2 id="第三部分-egg-日志扩展"><a href="#第三部分-egg-日志扩展" class="headerlink" title="第三部分 egg 日志扩展"></a>第三部分 egg 日志扩展</h2><h3 id="Async-Local-Storage"><a href="#Async-Local-Storage" class="headerlink" title="Async Local Storage"></a>Async Local Storage</h3><p>思考问题</p><p><strong>Now what if you want to persist specific data with that specific user whenever the asynchronous code specific to them is being called?</strong></p><p>单线程的性质&amp;事件处理机制就不赘述，直接对比下侧代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> idSeq = <span class="number">0</span>;</span><br><span class="line">http.createServer(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// some synchronous operation (save state)</span></span><br><span class="line">    <span class="comment">// some asynchronous operation</span></span><br><span class="line">    <span class="keyword">await</span> test()</span><br><span class="line">    res.end();</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> fun test() &#123;</span><br><span class="line">    <span class="comment">// 如何判断该函数是具体谁发起的？</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发起该异步函数的是？'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; AsyncLocalStorage &#125; = <span class="built_in">require</span>(<span class="string">'async_hooks'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> asyncLocalStorage = <span class="keyword">new</span> AsyncLocalStorage();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logWithId</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = asyncLocalStorage.getStore();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;id !== <span class="literal">undefined</span> ? id : <span class="string">'-'</span>&#125;</span>:`</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> idSeq = <span class="number">0</span>;</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  asyncLocalStorage.run(idSeq++, () =&gt; &#123;</span><br><span class="line">    logWithId(<span class="string">'start'</span>);</span><br><span class="line">    <span class="comment">// Imagine any chain of async operations here</span></span><br><span class="line">    setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      logWithId(<span class="string">'finish'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line">http.get(<span class="string">'http://localhost:8080'</span>);</span><br><span class="line">http.get(<span class="string">'http://localhost:8080'</span>);</span><br><span class="line"><span class="comment">// Prints:</span></span><br><span class="line"><span class="comment">//   0: start</span></span><br><span class="line"><span class="comment">//   1: start</span></span><br><span class="line"><span class="comment">//   0: finish</span></span><br><span class="line"><span class="comment">//   1: finish</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/27363484" target="_blank" rel="noopener">最佳日志实践（v2.0）</a><br><a href="https://juejin.cn/post/6844903848696348685" target="_blank" rel="noopener"> Node.js + ELK 日志规范 </a><br><a href="https://segmentfault.com/a/1190000021850365" target="_blank" rel="noopener"> 手把手教你搭建 ELK 实时日志分析平台 </a><br><a href="https://github.com/eggjs/egg/issues/2006" target="_blank" rel="noopener"> 如何更优雅的使用egg的日志体系？ #2006 </a><br><a href="https://www.freecodecamp.org/news/async-local-storage-nodejs/" target="_blank" rel="noopener">What’s Async Local Storage in Node.js v14?</a></p>]]></content>
      
      
      <categories>
          
          <category> 必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事</title>
      <link href="2020/12/27/tool_mac/"/>
      <url>2020/12/27/tool_mac/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/062.jpg" width=80% /><span class='geyan'>- 劳谦君子，万民服也。（《周易·䷎谦》）</span><a id="more"></a><h1 id="MacTool"><a href="#MacTool" class="headerlink" title="MacTool"></a>MacTool</h1><p>Mac 开源免费工具汇总, 只罗列开源好用的。<br>更全列表请参考<a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="noopener">awesome-mac</a></p><h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul><li><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> - 体验通过命令行安装 Mac 软件的工具(大部分是命令行工具)。Open-Source Software Freeware</li><li><a href="http://caskroom.github.io/" target="_blank" rel="noopener">Homebrew Cask</a> - 基于Homebrew扩展的，通过命令行安装 Mac GUI 软件的工具。Open-Source Software Freeware</li><li><a href="https://formulae.brew.sh/" target="_blank" rel="noopener">Homebrew search software </a></li><li><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大换源</a></li><li><a href="https://my.vmware.com/group/vmware/evalcenter?p=fusion-player-personal&source=dwnp" target="_blank" rel="noopener">VMware Fusion</a>–虚拟机个人用户免费</li></ul><h2 id="安全工具"><a href="#安全工具" class="headerlink" title="安全工具"></a>安全工具</h2><ul><li><a href="https://objective-see.com/products/lulu.html" target="_blank" rel="noopener">LuLu</a> - 免费的macOS防火墙，旨在阻止未经授权（传出）的网络流量。</li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li><a href="https://ftp.mozilla.org/pub/firefox/releases/84.0b7/mac/en-US/" target="_blank" rel="noopener">Firefox 国际版 建议FTP下载</a></li><li><a href="https://brave.com/" target="_blank" rel="noopener">Brave</a> 用 Brave 浏览更快更安全</li><li><a href="http://www.google.cn/chrome/browser/" target="_blank" rel="noopener">Chrome</a> google chrome</li></ul><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><ul><li><strong>强烈建议用自带的</strong></li></ul><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><ul><li><a href="https://itunes.apple.com/cn/app/amphetamine/id937984704" target="_blank" rel="noopener">Amphetamine</a> - 覆盖您的节能设置并让您的Mac保持清醒状态。 </li><li><a href="https://www.omnigroup.com/more/" target="_blank" rel="noopener">🚩OmniDiskSweeper</a> — 分析文件大小</li><li><a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noopener">SwitchHosts</a> — 切换hosts</li></ul><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><ul><li><a href="https://wiki.archlinux.org/index.php/tmux" target="_blank" rel="noopener">🚩Tmux</a>—Tmux和Vim一样属于字符终端软件，不需要任何GUI的支持，在远程登录时尤其有用。<ul><li><a href="https://houdunren.gitee.io/note/soft/tmux.html#tmux" target="_blank" rel="noopener">📖博文： tmux使用说明</a></li></ul></li><li><a href="https://iterm2.com/" target="_blank" rel="noopener">iTerm2</a> — iTerm是一个GUI软件,简单好用。</li></ul><h3 id="菜单栏工具"><a href="#菜单栏工具" class="headerlink" title="菜单栏工具"></a>菜单栏工具</h3><ul><li><a href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener">HiddenBar</a> - 隐藏菜单栏图标。Freeware Open-Source Software</li></ul><h3 id="剪贴板工具"><a href="#剪贴板工具" class="headerlink" title="剪贴板工具"></a>剪贴板工具</h3><ul><li><a href="http://pasteapp.me/" target="_blank" rel="noopener">Paste</a> - 智能剪贴板历史片段管理</li><li><a href="https://github.com/hluk/CopyQ" target="_blank" rel="noopener">CopyQ</a> - 高级功能剪贴板管理工具</li></ul><h3 id="窗口工具"><a href="#窗口工具" class="headerlink" title="窗口工具"></a>窗口工具</h3><ul><li><a href="https://github.com/fikovnik/ShiftIt" target="_blank" rel="noopener">ShiftIt</a> - 窗口位置和大小管理软件。</li><li><a href="https://www.spectacleapp.com/" target="_blank" rel="noopener">Spectacle</a> - 简单的移动和调整大小的窗口，和可定制的键盘快捷键</li></ul><h3 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h3><ul><li><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a> - 一个简单但强大的截图工具。Freeware</li></ul><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><ul><li><a href="https://motrix.app/" target="_blank" rel="noopener">Motrix</a> - Motrix 是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链、百度网盘等资源。 Open-Source Software Freeware</li><li><a href="https://www.qbittorrent.org/" target="_blank" rel="noopener">qBittorrent</a> - 一个替代 μTorrent 的开源软件。 Open-Source Software Freeware</li><li><a href="https://www.transmissionbt.com/" target="_blank" rel="noopener">Transmission</a> - 免费的 BitTorrent 客户端 Open-Source Software Freeware</li><li><a href="https://you-get.org/" target="_blank" rel="noopener">You-Get</a> - 网络富媒体命令行下载工具。Open-Source Software Freeware</li></ul><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><p><a href="https://simuty.github.io/2019/06/15/useChrome/" target="_blank" rel="noopener">整理了一份全面的–chrome使用指南</a></p><ul><li><a href="https://saladict.crimx.com/" target="_blank" rel="noopener">Saladict 沙拉查词</a></li><li><a href="https://www.octotree.io/" target="_blank" rel="noopener">Octotree – github侧边栏</a></li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ol><li><a href="https://github.com/microsoft/vscode" target="_blank" rel="noopener">🚩VSCode–不要太好用</a><ol><li><a href="https://snippet-generator.app/" target="_blank" rel="noopener">snippet生成工具🔧</a></li><li>插件<ol><li><a href="https://ohmyz.sh/" target="_blank" rel="noopener">ohmyz–vscode终端颜色配置</a></li></ol></li></ol></li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><a href="https://github.com/dbeaver/dbeaver" target="_blank" rel="noopener">DBeaver-多种数据库客户端</a></li><li><a href="https://github.com/luin/medis" target="_blank" rel="noopener">medis-redis客户端</a><ul><li>需要自行编译。<strong>没有成功-还是用终端吧</strong></li></ul></li><li><a href="https://github.com/qishibo/AnotherRedisDesktopManager/" target="_blank" rel="noopener">AnotherRedisDesktopManager</a></li></ul><h3 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h3><table><thead><tr><th>工具</th><th>说明</th><th>下载</th></tr></thead><tbody><tr><td>virtualbox</td><td>虚拟机</td><td>brew install –cask virtualbox</td></tr><tr><td>vscode</td><td>编辑器</td><td>brew install –cask visual-studio-code</td></tr><tr><td>postman</td><td>调试工具</td><td>brew install –cask postman</td></tr><tr><td>shiftit</td><td>窗口布局</td><td>brew install –cask shiftit</td></tr><tr><td>dbeaver</td><td>数据库工具</td><td>brew install –cask dbeaver-community</td></tr><tr><td>redis-desktop</td><td>redis工具</td><td>brew install –cask another-redis-desktop-manager</td></tr><tr><td>snipaste</td><td>截图工具</td><td>brew install –cask snipaste</td></tr></tbody></table><table><thead><tr><th>工具</th><th>说明</th><th>下载</th></tr></thead><tbody><tr><td>vmware-fusion</td><td>虚拟机</td><td>brew install –cask vmware-fusion</td></tr><tr><td>ncdu</td><td>系统扫描</td><td>brew install ncdu</td></tr><tr><td>htop</td><td>网络</td><td>brew install htop</td></tr></tbody></table><h3 id="鹅厂推荐"><a href="#鹅厂推荐" class="headerlink" title="鹅厂推荐"></a><a href="https://www.zhihu.com/question/22867411/answer/911161400" target="_blank" rel="noopener">鹅厂推荐</a></h3>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最强Tmux</title>
      <link href="2020/12/27/tool_tmux/"/>
      <url>2020/12/27/tool_tmux/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/063.jpg" width=80% /><span class='geyan'>夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。（《周易·䷀乾·文言》）</span><a id="more"></a><h3 id="iTerm2-VS-Tmux"><a href="#iTerm2-VS-Tmux" class="headerlink" title="iTerm2 VS Tmux"></a>iTerm2 VS Tmux</h3><ol><li>iTerm是一个GUI软件，它的窗格只是窗格而已;</li><li>Tmux是终端复用，在一个命令行窗口中不仅可以显示多个Shell的内容，而且可以保持多个会话;</li><li>Tmux和Vim一样属于字符终端软件，不需要任何GUI的支持，在远程登录时尤其有用</li></ol><div class="note danger">tmux (opens new window) 是linux中一种管理窗口的程序，它提供了一个Session随时存储和恢复的功能。<div class="note success"><p>tmux 包括<code>会话 session</code>、<code>窗口 window</code>、<code>面板 pane</code>三个角色，依次为包含关系。</p></div></div><img data-src='004.png' width='80%' /><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install tmux       <span class="comment"># OSX</span></span><br><span class="line">pacman -S tmux          <span class="comment"># archlinux</span></span><br><span class="line">apt-get install tmux    <span class="comment"># Ubuntu</span></span><br><span class="line">yum install tmux        <span class="comment"># Centos</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建会话</span></span><br><span class="line">tmux new -s &lt;session-name&gt;</span><br><span class="line"><span class="comment"># 分离回话</span></span><br><span class="line">tmux detach</span><br><span class="line"><span class="comment"># ls 所有回话</span></span><br><span class="line">tmux ls</span><br><span class="line"><span class="comment"># 进入session</span></span><br><span class="line">tmux a -t &lt;session-name&gt;</span><br><span class="line"><span class="comment"># 切换会话</span></span><br><span class="line">$ tmux switch -t &lt;session-name&gt; || 编号</span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">$ tmux <span class="built_in">kill</span>-session -t &lt;session-name&gt; || 编号</span><br></pre></td></tr></table></figure><p>问题</p><ol><li>新建session： work &amp; centos;</li><li>进入work,</li><li>切换到centos</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现</span></span><br><span class="line"><span class="comment"># 新建</span></span><br><span class="line">$ tmux new -s work</span><br><span class="line">$ tmux new -s centos</span><br><span class="line">$ tmux ls</span><br><span class="line"><span class="comment"># 进入work</span></span><br><span class="line">$ tmux a -t work</span><br><span class="line"><span class="comment"># 切换1</span></span><br><span class="line">ctrl+b w 上下键选中centos，enter进入</span><br><span class="line"><span class="comment"># 切换2 输入命令切换</span></span><br><span class="line">ctrl+b : switch -t centos</span><br><span class="line"><span class="comment"># 重命名当前会话</span></span><br><span class="line">ctrl+b $：重命名当前会话。</span><br></pre></td></tr></table></figure><img data-src='004.png' width='80%' /><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><p>在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># window</span></span><br><span class="line">,  重命名当前窗口</span><br><span class="line">n  后一个窗口</span><br><span class="line">p  前一个窗口</span><br><span class="line">c  新建窗口</span><br><span class="line">&amp;  关闭当前窗口</span><br></pre></td></tr></table></figure><h4 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pane</span></span><br><span class="line">%  垂直分割</span><br><span class="line"><span class="string">"  水平分割</span></span><br><span class="line"><span class="string">箭头 切换不同的pane</span></span><br><span class="line"><span class="string">x  关闭窗格</span></span><br></pre></td></tr></table></figure><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">d  退出 tmux（tmux 仍在后台运行）</span><br><span class="line">t  窗口中央显示一个数字时钟</span><br><span class="line">?  列出所有快捷键</span><br><span class="line">:  命令提示符</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>鼠标滚轮</li></ol><p>问题：当满屏幕数据的时候，无法滚动查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 进入命令行=》 ctrl+b :</span><br><span class="line">2. <span class="built_in">set</span> -g mouse on</span><br></pre></td></tr></table></figure><p><strong>更多命令请参考如下列表</strong></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://harttle.land/2015/11/06/tmux-startup.htmlhttps://harttle.land/2015/11/06/tmux-startup.html" target="_blank" rel="noopener">优雅地使用命令行：Tmux 终端复用 </a><br><a href="https://www.cnblogs.com/kaiye/p/6275207.html" target="_blank" rel="noopener">十分钟学会 tmux</a><br><a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html" target="_blank" rel="noopener">Tmux 使用教程</a><br><a href="https://houdunren.gitee.io/note/soft/tmux.html#tmux" target="_blank" rel="noopener">向军大叔-tmux</a><br><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="noopener">Tmux 快捷键 &amp; 速查表 &amp; 简明教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全攻防系列一 安全基础概念</title>
      <link href="2020/12/23/safe_base/"/>
      <url>2020/12/23/safe_base/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/061.jpg" width=80% /><span class='geyan'>劳而不伐，有功而不德，厚之至也。（《周易·系辞上》）</span><a id="more"></a><h3 id="该系列记录学习极客时间–安全攻防技能30讲相关内容"><a href="#该系列记录学习极客时间–安全攻防技能30讲相关内容" class="headerlink" title="该系列记录学习极客时间–安全攻防技能30讲相关内容"></a>该系列记录学习<a href="https://time.geekbang.org/column/intro/100041701" target="_blank" rel="noopener">极客时间–安全攻防技能30讲</a>相关内容</h3><img data-src='004.png' width='80%' /><h2 id="安全的本质"><a href="#安全的本质" class="headerlink" title="安全的本质"></a>安全的本质</h2><div class="note success"><p><strong>安全的本质就是保护数据被合法地使用。</strong></p><ol><li>数据：应用最核心的东西；如用户信息、订单信息等等</li><li>合法：大到法律法规、业务规定；小到业务流程、字段类型；</li><li>使用：访问<code>能</code>访问的，更改<code>可以</code>更改的</li></ol><div class="note danger"><p>此处的<strong>CIA</strong>非美国中央情报局，而是<a href="https://baike.baidu.com/item/CIA/4314547" target="_blank" rel="noopener">信息系统的安全等级三个性质-百度百科</a></p><ol><li>机密性（Confidentiality）指只有授权用户可以获取信息。</li><li>完整性（Integrity）指信息在输入和传输的过程中，不被非法授权修改和破坏，保证数据的一致性。</li><li>可用性（Availability）指保证合法用户对信息和资源的使用不会被不正当地拒绝。</li></ol></div></div><h3 id="机密性【不可见】"><a href="#机密性【不可见】" class="headerlink" title="机密性【不可见】"></a>机密性【不可见】</h3><p>定义：机密性（Confidentiality）指<strong>只有授权</strong>用户可以<strong>获取</strong>信息。</p><p>举例子：读大学时，一般情况，作为学生的你是<em>无法获取</em>教师薪酬的。</p><p>凡是数据都有一定等级的访问限制，FBI探员无法访问最高机密一个道理。</p><h3 id="完整性【不可改】"><a href="#完整性【不可改】" class="headerlink" title="完整性【不可改】"></a>完整性【不可改】</h3><p>定义：完整性（Integrity）指信息在<code>输入和传输</code>的过程中，<strong>不被非法授权修改和破坏</strong>，保证数据的一致性。</p><p>举例子：大学期间，不幸运的你挂科了，恰巧你的专业是计算机相关，恰巧想改成绩，<strong>即便你非法获取到了更改权限</strong>，<code>你改了成绩</code>;<br>不幸的是完整性会<strong>记录修改日志</strong>，如果你恰巧不懂<code>完整性</code>，那么等待你的是啥自己该有点数。。。</p><h3 id="可用性【可读】"><a href="#可用性【可读】" class="headerlink" title="可用性【可读】"></a>可用性【可读】</h3><p>定义：可用性（Availability）指保证<code>合法用户</code>对信息和资源的使用<code>不会被不正当地拒绝</code>。</p><p>举例子：大学期间你可以<code>正常</code>访问的<code>成绩管理系统</code>,否则你就会骂：<code>垃圾系统</code>,你口中的垃圾系统，大概了就是可用性太差。</p><h2 id="安全的解决方案"><a href="#安全的解决方案" class="headerlink" title="安全的解决方案"></a>安全的解决方案</h2><img data-src='005.png' width='80%' /><h3 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证 Authentication"></a>认证 Authentication</h3><blockquote><p>认证就是我要输入帐号和密码来证明我是我</p></blockquote><div class="note danger"><ol><li>定义：确认身份，强调身份的合法性</li><li>分类：对内、对外</li><li>威胁来源：无认证、弱密码、认证信息泄漏</li></ol></div><p>相信输入过用户密码的用户都明白<strong>登陆了才可以购买商品</strong>，这就是第一步，你被认为是合法用户。</p><p>下图很直观的展示了对内对外的区别，就不用赘述了。<br><img data-src='006.png' width='80%' /></p><h4 id="威胁"><a href="#威胁" class="headerlink" title="威胁"></a>威胁</h4><p><strong>无认证</strong></p><ol><li>对内来说：数据库、服务器配置等等，如果没有界限划分，<code>删库跑路</code>也算是恰当的例子</li><li>对外来说：不同的路由根据业务来判定是否需要认证，比如首页、订单页，两个完全不同认证范畴，是不一样的。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注：</span></span><br><span class="line">有种言论说：当代人根本就是透明人，无所谓。</span><br><span class="line"><span class="number">1.</span> 逻辑上不太通顺；同理可以得出很多，如：男女可以裸奔的，无需穿衣服的，抛开冷暖来说。</span><br><span class="line"><span class="number">2.</span> 认证还是必须的，注意安全何时何地都不过时。</span><br></pre></td></tr></table></figure><h4 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h4><p>密码强度，指一个密码对抗猜测或是暴力破解的有效程度。</p><p><strong>弱密码举例子</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">admin——太容易猜出</span><br><span class="line"><span class="number">123</span>——同上</span><br><span class="line">abcde——同上</span><br><span class="line">abc123——同上</span><br><span class="line"><span class="number">123456</span>——由于文化因素极其常用</span><br><span class="line"><span class="number">1234</span>——同上</span><br></pre></td></tr></table></figure><blockquote><p>有点新意可行？》？</p></blockquote><ol><li>FLZX3000cY4yhx9day (飞流直下三千尺，疑似银河下九天）</li><li>hanshansi.location()!∈[gusucity]（姑苏城外寒山寺）</li><li>hold?fish:palm（鱼和熊掌不可兼得）</li><li>Tree_0f0=sprintf(“2_Bird_ff0/a”)（两个黄鹂鸣翠柳)</li><li>csbt34.ydhl12s（池上碧苔三四点，叶底黄鹂一两声）；</li><li>for_$n(@ RenSheng)_$n+=”die”（人生自古谁无死）</li><li>ppnn13%dkstFeb.1st。中文解析：娉娉袅袅十三余，豆蔻梢头二月初。</li></ol><p><strong>建议</strong></p><ol><li>设置强密码</li><li>定期修改</li><li>如：短信验证；<code>对于人脸验证，持保留态度</code></li></ol><h4 id="单点登陆"><a href="#单点登陆" class="headerlink" title="单点登陆"></a>单点登陆</h4><p>单点登录的概念很简单：用户只需要进行一次认证，就可以访问所有的网页、应用和其他产品了。</p><h5 id="CAS（Central-Authentication-Service，集中式认证服务）"><a href="#CAS（Central-Authentication-Service，集中式认证服务）" class="headerlink" title="CAS（Central Authentication Service，集中式认证服务）"></a>CAS（Central Authentication Service，集中式认证服务）</h5><img data-src='007.png' width='80%' /><h5 id="JWT（JSON-Web-Token"><a href="#JWT（JSON-Web-Token" class="headerlink" title="JWT（JSON Web Token)"></a>JWT（JSON Web Token)</h5><p>JWT（JSON Web Token）是一种非常轻量级的单点登录流程。它会<code>在客户端保存一个凭证信息</code>，之后在你每一次登录的请求中都带上这个凭证，将其作为登录状态的依据。<br>JWT 的<code>好处</code>在于，<strong>不需要应用服务端去额外维护</strong> Cookie 或者 Session 了。<br>但是，正是因为它将登录状态落到了客户端，所以我们<strong>无法进行注销</strong>等操作了。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><h4 id="对外授权"><a href="#对外授权" class="headerlink" title="对外授权"></a>对外授权</h4><p>摘录–<a href="https://learnku.com/articles/20082" target="_blank" rel="noopener">[简易图解]『 OAuth2.0』 『进阶』 授权模式总结</a></p><blockquote><p>授权就是并非通过帐号和密码来把我的东西借给其他人</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分类</span></span><br><span class="line">授权码模式</span><br><span class="line">简化模式</span><br><span class="line">密码模式</span><br><span class="line">客户端模式</span><br><span class="line">刷新令牌</span><br></pre></td></tr></table></figure><img data-src='010.png' width='80%' title='值得仔细看看' /><h5 id="OAuth（Open-Authorization）"><a href="#OAuth（Open-Authorization）" class="headerlink" title="OAuth（Open Authorization）"></a>OAuth（Open Authorization）</h5><p>比如：微博采用第三方的登录-QQ登录，用户QQ授权之后，微博可以通过OAuth判断是否却是授权。<br>应用想要维护这个状态，就需要维护自己的登录凭证，也就是后期要输入手机号注册。</p><img data-src='008.png' width='80%' /><p>强烈建议可以仔细看看这个博主的介绍—<a href="https://learnku.com/articles/20082" target="_blank" rel="noopener">[简易图解]『 OAuth2.0』 『进阶』 授权模式总结</a></p><h5 id="OpenID（Open-Identity-Document）"><a href="#OpenID（Open-Identity-Document）" class="headerlink" title="OpenID（Open Identity Document）"></a>OpenID（Open Identity Document）</h5><p>OpenID（Open Identity Document）和 OAuth 的功能基本一致。但是，<strong>OpenID 不提供授权的功能</strong>。最常见的，当我们需要在应用中使用<code>微信支付</code>的时候，应用<code>只需要收集支付相关</code>的信息即可，并<code>不需要获取用户的微信头像</code>。</p><p>在实际情况中，基于各种业务需求的考虑，<strong>很多公司都倾向于自己去实现一套 SSO 的认证体系</strong>，它的认证流程如下图所示：</p><img data-src='009.png' width='80%' /><h4 id="对内授权"><a href="#对内授权" class="headerlink" title="对内授权"></a>对内授权</h4><img data-src='012.png' width='80%' title='访问控制' /><h3 id="审计-amp-amp-问责"><a href="#审计-amp-amp-问责" class="headerlink" title="审计 &amp;&amp; 问责"></a>审计 &amp;&amp; 问责</h3><p>当你在授权下完成操作后，安全需要检查一下“你做了什么”，这个检查的过程就是<strong>审计</strong>。 当发现你做了某些异常操作时，安全还会提供你做了这些操作的“证据”，让你无法抵赖， 这个过程就是<strong>问责</strong>。</p><ol><li>审计 &amp;&amp; 问责 的<code>基础</code>: <strong>日志</strong></li><li>问责，是对审计结果的一个保障，有的时候我们也称之为<code>“不可否认性”</code>。<ol><li>一方面，它保证了黑客<code>无法通过篡改</code>日志或者仿造身份，来隐藏自己的行为；</li><li>一方面它也保证了，当审计中发现了恶意的行为，需要寻求法律保护时，我们能够<code>提供充分的证据</code>。</li></ol></li></ol><h3 id="授权-VS-认证"><a href="#授权-VS-认证" class="headerlink" title="授权 VS 认证"></a>授权 VS 认证</h3><ol><li><strong>认证</strong>就是我要输入帐号和密码来证明我是我</li><li><strong>授权</strong>就是并非通过帐号和密码来<code>把我的东西借给其他人</code></li><li>这其中的关键就是，是否需要输入帐号密码。记住，OAuth 不需要输入帐号和密码，你要做的只是授权。</li></ol><img data-src='011.png' width='80%' /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>大部分情况下，事前防御属于认证，事中防御属于授权，事后防御属于审计。</p></blockquote><h2 id="密码学基础"><a href="#密码学基础" class="headerlink" title="密码学基础"></a>密码学基础</h2><img data-src='013.png' width='80%' /><img data-src='015.png' width='50%' /><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>原理请网上参考相关资源-<a href="https://www.jianshu.com/p/436e82a3a91a" target="_blank" rel="noopener">AES加密算法和RSA加密算法</a></p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>原理请网上参考相关资源-<a href="https://www.jianshu.com/p/436e82a3a91a" target="_blank" rel="noopener">AES加密算法和RSA加密算法</a></p><h3 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h3><h4 id="MD5（消息摘要算法，Message-Digest-Algorithm-5）"><a href="#MD5（消息摘要算法，Message-Digest-Algorithm-5）" class="headerlink" title="MD5（消息摘要算法，Message-Digest Algorithm 5）"></a>MD5（消息摘要算法，Message-Digest Algorithm 5）</h4><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于<strong>确保信息传输完整一致。</strong>是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。</p><blockquote><p>已经被破解。</p></blockquote><p>情况一：你将某文件发给别人，MD5得到128位的信息摘要，如果别人更改，则对比一摘要即可。防止篡改。</p><h4 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h4><p>SHA（安全散列算法，Secure Hash Algorithm）。<br>虽然 SHA 的唯一性也被破解了，但是这也不会构成 大的安全问题。目前，SHA-256 普遍被认为是相对安全的散列算法，也是我最推荐你使用 的散列算法。</p><h4 id="国密-SM3"><a href="#国密-SM3" class="headerlink" title="国密 SM3"></a>国密 SM3</h4><img data-src='016.png' width='50%' /><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://learnku.com/articles/20082" target="_blank" rel="noopener">[简易图解]『 OAuth2.0』 『进阶』 授权模式总结</a><br><a href="https://time.geekbang.org/column/intro/100041701" target="_blank" rel="noopener">极客时间–安全攻防技能30讲</a><br><a href="https://www.jianshu.com/p/436e82a3a91a" target="_blank" rel="noopener">AES加密算法和RSA加密算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> safe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全攻防系列二 Web安全</title>
      <link href="2020/12/23/safe_web/"/>
      <url>2020/12/23/safe_web/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/061.jpg" width=80% /><span class='geyan'>劳而不伐，有功而不德，厚之至也。（《周易·系辞上》）</span><a id="more"></a><h3 id="该系列记录学习极客时间–安全攻防技能30讲相关内容"><a href="#该系列记录学习极客时间–安全攻防技能30讲相关内容" class="headerlink" title="该系列记录学习极客时间–安全攻防技能30讲相关内容"></a>该系列记录学习<a href="https://time.geekbang.org/column/intro/100041701" target="_blank" rel="noopener">极客时间–安全攻防技能30讲</a>相关内容</h3><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS 攻击（Cross-Site Scripting，跨站脚本攻击）浏览器中插入恶意的js脚本，从而窃取或仿冒用户进行操作。因为和CSS重叠，所以叫XSS😄。</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p> 数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。</p><p>网页篡改：通过操作数据库对特定网页进行篡改。</p><p>网站被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</p><p>数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。</p><p>服务器被远程控制，被安装后门：经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</p><p>破坏硬盘数据，瘫痪全系统。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/100041701" target="_blank" rel="noopener">极客时间–安全攻防技能30讲</a><br><a href="https://zhuanlan.zhihu.com/p/258032596" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      <categories>
          
          <category> 安全攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> safe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node&amp;RabbitMQ系列六 保证消费</title>
      <link href="2020/12/22/mq_5/"/>
      <url>2020/12/22/mq_5/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/060.jpg" width=80% /><span class='geyan'>夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。（《周易·䷀乾·文言》）</span><a id="more"></a><p>上篇文章主要以<code>生产者角度：确保消息发出去了</code>，这篇文章主要以<code>消费者的角度：确保处理了对应的消息</code></p><div class="note danger"><p><strong>处理</strong>包含几层含义</p><ol><li>成功<code>ack</code>;</li><li>失败<code>nack</code>-requeue: <code>true</code> or <code>false</code>;</li><li>扔到<code>死信队列</code></li></ol><div class="note success"><p>试想以下场景</p><blockquote><p>消费者收到消息，业务执行<code>异常</code>, <code>重试N次</code>，如果N次内成功–[ack]; 否则<code>丢弃</code>或扔到<code>死信队列</code>;</p></blockquote><div class="note info"><p><a href="https://github.com/squaremo/amqp.node/issues?q=is%3Aissue+author%3A%40me+is%3Aclosed" target="_blank" rel="noopener">github上问了该问题,博主的回答</a></p><ol><li>Use a quorum queue (requires RabbitMQ 3.8.0 or higher) and specify a <a href="https://www.rabbitmq.com/quorum-queues.html#poison-message-handling" target="_blank" rel="noopener">redelivery limit</a></li><li>Count message redeliveries in an external store (you need a unique way to identify the message if you do this)</li><li>Instead of nacking the message, re-publish it with a new header which counts the number of redeliveries, then acknowledge the original. This can lead to duplicate messages if you application crashes between the publish and the acknowledgment however</li></ol><hr><ol><li>quorum-queue: 设置delivery-limit;</li><li>重新publish;<ol><li>生成header头retrynumbuer;</li><li>发布到原来的交换机</li><li>丢弃消息</li></ol></li><li>比如采用redis记录重试次数，</li></ol></div></div></div><h2 id="Quonum-Queue"><a href="#Quonum-Queue" class="headerlink" title="Quonum Queue"></a>Quonum Queue</h2><p><a href="https://www.rabbitmq.com/quorum-queues.html#motivation" target="_blank" rel="noopener">RabbitMQ–Quorum Queues</a></p><p>Quorum Queues 也是RabbitMQ的队列类型，自RabbitMQ 3.8.0起可用。默认生成的queue type 是 Classic; </p><ul><li>宗旨为： 将数据安全放在首位</li><li>Classic VS Quorum</li></ul><table><thead><tr><th>Feature</th><th>Classic Mirrored</th><th>Quorum</th></tr></thead><tbody><tr><td>Non-durable queues &lt;可以非持久&gt;</td><td>yes</td><td>no</td></tr><tr><td>Exclusivity</td><td>yes</td><td>no</td></tr><tr><td>Per message persistence</td><td>per message</td><td>always</td></tr><tr><td>Membership changes</td><td>automatic</td><td>manual</td></tr><tr><td>TTL<time to live></td><td>yes</td><td>no</td></tr><tr><td>Queue length limits</td><td>yes</td><td>partial (drop-head strategy only)</td></tr><tr><td>Lazy behaviour</td><td>yes</td><td>partial (see Memory Limit)</td></tr><tr><td>Message priority&lt;优先级&gt;</td><td>yes</td><td>no</td></tr><tr><td>Consumer priority&lt;优先级&gt;</td><td>yes</td><td>no</td></tr><tr><td><strong>Dead letter exchanges</strong></td><td>yes</td><td>yes</td></tr><tr><td>Adheres to policies&lt;策略&gt;</td><td>yes</td><td>partial (dlx, queue length limits)</td></tr><tr><td>Reacts to memory alarms</td><td>yes</td><td>partial (truncates log)</td></tr><tr><td><strong>Poison message handling</strong></td><td>no</td><td>yes</td></tr><tr><td>Global QoS Prefetch</td><td>yes</td><td>no</td></tr></tbody></table><p><strong>Poison message handling</strong>: 翻译成<strong>异常消息处理</strong>，估计没啥问题。</p><h3 id="不适用场景"><a href="#不适用场景" class="headerlink" title="不适用场景"></a>不适用场景</h3><ol><li><p>临时队列；</p></li><li><p>低延迟；</p></li><li><p>数据安全性没那么高的</p></li><li><p>非常长的队列—因为quonum一直将数据存储在内存，如可以最大的消息数量、限制消息体的大小。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3></li><li><p>对数据安全性要求高的， 例如销售系统中的接收订单或选举系统中的投票，其中可能丢失的消息将对系统的正确性和功能产生重大影响。</p></li><li><p>发布者确认收到，消费者手动ack, 配合quonum保证数据安全性。</p></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// send.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span>;</span><br><span class="line">    <span class="comment">// 默认交换机-队列-路由</span></span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'6.delivery.limit.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> queueExName = <span class="string">'6.delivery.limit.queue'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'6.delivery.limit.routerkey'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="comment">// 默认交换机</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    channel.publish(exchange, routingKey, Buffer.from(<span class="string">'hello world'</span>), &#123;</span><br><span class="line">        expiration: <span class="number">3000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> connect.close();</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, time*<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 消费者 确认消息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 消费者重试3次，《采用quonum queue + delivery-limit: 3》</span></span><br><span class="line"><span class="comment"> * 2. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">consumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机-路由</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span>;</span><br><span class="line">    <span class="comment">// 死信交换机-路由</span></span><br><span class="line">    <span class="keyword">const</span> deadLetterExchange = <span class="string">'6.dlx.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> deadLetterRoutingKey = <span class="string">'6.dlx.routingkey'</span> </span><br><span class="line">    <span class="keyword">const</span> deadLetterQueue = <span class="string">'6.dlx.queue'</span> </span><br><span class="line">    <span class="comment">// 默认交换机-队列-路由</span></span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'6.delivery.limit.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> queueExName = <span class="string">'6.delivery.limit.queue'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'6.delivery.limit.routerkey'</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 死信队列相关，为了web ui 展示数据</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(deadLetterExchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> queueDL = <span class="keyword">await</span> channel.assertQueue(deadLetterQueue)</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueDL.queue, deadLetterExchange, deadLetterRoutingKey);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queueEX = <span class="keyword">await</span> channel.assertQueue(queueExName, &#123;</span><br><span class="line">        exclusive: <span class="literal">false</span>,</span><br><span class="line">        deadLetterExchange,</span><br><span class="line">        deadLetterRoutingKey,</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            <span class="string">'x-queue-type'</span>: <span class="string">'quorum'</span>,</span><br><span class="line">            <span class="string">'x-delivery-limit'</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueEX.queue, exchange, routingKey);</span><br><span class="line">    <span class="keyword">await</span> channel.consume(queueEX.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"消费队列"</span>, msg);</span><br><span class="line">        channel.nack(msg, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  6Consumer git:(main) ✗ ts-node receive.ts</span><br><span class="line">消费队列 &#123; fields:</span><br><span class="line">   &#123; consumerTag: <span class="string">'amq.ctag-EKH-xj09f47rsz3EqX8e7Q'</span>,</span><br><span class="line">     deliveryTag: 1,</span><br><span class="line">     redelivered: <span class="literal">false</span>,</span><br><span class="line">     exchange: <span class="string">'6.delivery.limit.exchange'</span>,</span><br><span class="line">     routingKey: <span class="string">'6.delivery.limit.routerkey'</span> &#125;,</span><br><span class="line">  properties:</span><br><span class="line">   &#123; contentType: undefined,</span><br><span class="line">     contentEncoding: undefined,</span><br><span class="line"><span class="comment"># 这里</span></span><br><span class="line">     headers: &#123;&#125;,</span><br><span class="line">     deliveryMode: undefined,</span><br><span class="line">     priority: undefined,</span><br><span class="line">     correlationId: undefined,</span><br><span class="line">     replyTo: undefined,</span><br><span class="line">     expiration: <span class="string">'3000'</span>,</span><br><span class="line">     messageId: undefined,</span><br><span class="line">     timestamp: undefined,</span><br><span class="line">     <span class="built_in">type</span>: undefined,</span><br><span class="line">     userId: undefined,</span><br><span class="line">     appId: undefined,</span><br><span class="line">     clusterId: undefined &#125;,</span><br><span class="line">  content: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt; &#125;</span><br><span class="line">消费队列 &#123; fields:</span><br><span class="line">   &#123; consumerTag: <span class="string">'amq.ctag-EKH-xj09f47rsz3EqX8e7Q'</span>,</span><br><span class="line"><span class="comment"># 看这里</span></span><br><span class="line">     deliveryTag: 2,</span><br><span class="line">     redelivered: <span class="literal">true</span>,</span><br><span class="line">     exchange: <span class="string">'6.delivery.limit.exchange'</span>,</span><br><span class="line">     routingKey: <span class="string">'6.delivery.limit.routerkey'</span> &#125;,</span><br><span class="line">  properties:</span><br><span class="line">   &#123; contentType: undefined,</span><br><span class="line">     contentEncoding: undefined,</span><br><span class="line"><span class="comment"># 这里</span></span><br><span class="line">     headers: &#123; <span class="string">'x-delivery-count'</span>: 1 &#125;,</span><br><span class="line">     deliveryMode: undefined,</span><br><span class="line">     priority: undefined,</span><br><span class="line">     correlationId: undefined,</span><br><span class="line">     replyTo: undefined,</span><br><span class="line">     expiration: <span class="string">'3000'</span>,</span><br><span class="line">     messageId: undefined,</span><br><span class="line">     timestamp: undefined,</span><br><span class="line">     <span class="built_in">type</span>: undefined,</span><br><span class="line">     userId: undefined,</span><br><span class="line">     appId: undefined,</span><br><span class="line">     clusterId: undefined &#125;,</span><br><span class="line">  content: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt; &#125;</span><br><span class="line">消费队列 &#123; fields:</span><br><span class="line">   &#123; consumerTag: <span class="string">'amq.ctag-EKH-xj09f47rsz3EqX8e7Q'</span>,</span><br><span class="line">     deliveryTag: 3,</span><br><span class="line">     redelivered: <span class="literal">true</span>,</span><br><span class="line">     exchange: <span class="string">'6.delivery.limit.exchange'</span>,</span><br><span class="line">     routingKey: <span class="string">'6.delivery.limit.routerkey'</span> &#125;,</span><br><span class="line">  properties:</span><br><span class="line">   &#123; contentType: undefined,</span><br><span class="line">     contentEncoding: undefined,</span><br><span class="line">     headers: &#123; <span class="string">'x-delivery-count'</span>: 2 &#125;,</span><br><span class="line">     deliveryMode: undefined,</span><br><span class="line">     priority: undefined,</span><br><span class="line">     correlationId: undefined,</span><br><span class="line">     replyTo: undefined,</span><br><span class="line">     expiration: <span class="string">'3000'</span>,</span><br><span class="line">     messageId: undefined,</span><br><span class="line">     timestamp: undefined,</span><br><span class="line">     <span class="built_in">type</span>: undefined,</span><br><span class="line">     userId: undefined,</span><br><span class="line">     appId: undefined,</span><br><span class="line">     clusterId: undefined &#125;,</span><br><span class="line">  content: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt; &#125;</span><br></pre></td></tr></table></figure><img data-src='004.png' width='60%' /><img data-src='005.png' width='60%' /><img data-src='006.png' width='60%' /><img data-src='007.png' width='60%' /><h2 id="RePublish"><a href="#RePublish" class="headerlink" title="RePublish"></a>RePublish</h2>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building and publishing an NPM Typescript package</title>
      <link href="2020/12/18/npm/"/>
      <url>2020/12/18/npm/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/059.jpg" width=80% /><span class='geyan'>劳而不伐，有功而不德，厚之至也。（《周易·系辞上》）</span><a id="more"></a><p><a href="https://itnext.io/step-by-step-building-and-publishing-an-npm-typescript-package-44fe7164964c" target="_blank" rel="noopener">原文链接–Step by step: Building and publishing an NPM Typescript package.</a></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this guide, we will build a reusable module in <code>Typescript</code> and publish it as a <strong>Node.js</strong> package. I’ve seen it being done in many different ways so I want to show you how you can use the best practices and tools out there to create your <code>own package</code>, step by step using <code>Typescript</code>, <code>Tslin</code>t, <code>Prettier</code> and <code>Jest</code>.<br>This is what we are going to build:</p><p><a href="https://www.npmjs.com/package/my-awesome-greeter" target="_blank" rel="noopener">https://www.npmjs.com/package/my-awesome-greeter</a><br><a href="https://github.com/caki0915/my-awesome-greeter" target="_blank" rel="noopener">https://github.com/caki0915/my-awesome-greeter</a></p><h3 id="What-is-NPM"><a href="#What-is-NPM" class="headerlink" title="What is NPM?"></a>What is NPM?</h3><p>Npm is the package manager for Javascript and the world biggest library of reusable software code. It’s also a great as build tool itself as I will show later on.</p><h3 id="Why-Typescript"><a href="#Why-Typescript" class="headerlink" title="Why Typescript?"></a>Why Typescript?</h3><p>As a superset to Javascript, Typescript provides optional typing and deep intellisense [智能]. When it comes to package development, this is my personal opinion:</p><blockquote><p>I believe that all packages should be built in Typescript</p></blockquote><div class="note success"><p>Some of you might feel that strong typing decreases [减少-dɪˈkriːs] productivity[生产效率-prɒdʌkˈtɪvəti] and it’s not worth the effort [努力-ˈefət] to use. I can agree when it comes to small-scale projects, however, when it comes to package-development, Typescript has some serious advantages:</p><ol><li>More robust[强大的rəʊˈbʌst] code and easier to maintain[保持-维持meɪnˈteɪn].</li><li>The package can be used both for Typescript and Javascript users! If your library becomes popular there will sooner or later be a demand for type-definitions, and to write those manually is time-consuming, error-prone and harder to update.</li><li>With type-definitions in the package, the user doesn’t have to download the types from another package.</li><li>Strong typings are more self-documenting and makes the code more understandable.</li><li>Even if the one using your package doesn’t use Typescript, some editors, like Visual Studio Code will still use the type-definitions to give the user better intellisense.</li></ol></div><h3 id="Alright-Let’s-get-started"><a href="#Alright-Let’s-get-started" class="headerlink" title="Alright. Let’s get started!"></a>Alright. Let’s get started!</h3><p>Make sure you have the latest version of node and npm.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="number">10.0</span><span class="number">.0</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="number">6.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="Pick-a-great-name"><a href="#Pick-a-great-name" class="headerlink" title="Pick a great name"></a>Pick a great name</h3><p><strong>This might be harder than it sounds</strong>. Package names has to be in pascal-case and in lowercase. Since there are 700k+ packages, make a quick search on <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> to make sure your awesome name is not already taken. For the sake[目的、清酒-seɪk] of this guide, I will choose the name <code>my-awesome-greeter</code>, but use a unique name so you can publish your package to npm later on 😉.</p><h3 id="Basic-Setup"><a href="#Basic-Setup" class="headerlink" title="Basic Setup"></a>Basic Setup</h3><p>Create your package folder with a suitable name</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mkdir my-awesome-greeter &amp;&amp; <span class="built_in">cd</span> my-awesome-greeter</span><br></pre></td></tr></table></figure><h3 id="Create-a-git-repository"><a href="#Create-a-git-repository" class="headerlink" title="Create a git repository"></a>Create a git repository</h3><p>First thing first. You need a remote git repository for your package so it can be downloaded. Creating a remote git repository is out of scope for this article but once you have done it you can use the following lines to initialize your local repository and set your remote origin.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">echo <span class="string">"# My Awesome Greeter"</span> &gt;&gt; README.md</span><br><span class="line">git add . &amp;&amp; git commit -m <span class="string">"Initial commit"</span></span><br><span class="line">Replace &lt;Git Repository Url&gt; with the URL to your remote repository.</span><br><span class="line">git remote add origin &lt;Git Repository Url&gt;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="Init-your-Package"><a href="#Init-your-Package" class="headerlink" title="Init your Package"></a>Init your Package</h3><p>Let’s create a <code>package.json</code> file with all default values.</p><p>We’re going to modify this one later on.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>As the last step, we’re going to add a <code>.gitignore</code> file to the root. There’s a lot <code>.gitignore templates</code> out there but I like to keep it simple and <strong>don’t add more than you need</strong>. At the moment, we only need to ignore the <code>node_modules</code> folder.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"node_modules"</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure><p>Awesome! We got the basics 😃 This is how it looks like when I open the project in Visual Studio Code. From now on I will continue adding files from vscode from now on rather than using the console, but choose a style that suits you 😉<br>Image for post</p><img data-src='004.png' width='80%' /><img data-src='005.png' width='80%' /><h3 id="Add-Typescript-as-a-DevDependency"><a href="#Add-Typescript-as-a-DevDependency" class="headerlink" title="Add Typescript as a DevDependency"></a>Add Typescript as a DevDependency</h3><p>Let’s start with typescript as a dependency</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev typescript</span><br></pre></td></tr></table></figure><p>The flag <code>--save-dev</code> will tell NPM to install Typescript as a <code>devDependency</code>. The difference between a <strong>devDependency</strong> and a <strong>dependency</strong> is that <em>devDependencies will only be installed when you run npm install, but not when the end-user installs the package.</em></p><p>For example, Typescript is only needed when developing the package, but it’s not needed while using the package.</p><p>Good! Now you will see a <code>node_modules</code> folder and a <code>package-lock.json</code> in your root as well.</p><p>In order to compile Typescript we also need a tsconfig.json file so let’s add it to the project root:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="string">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./lib"</span>,</span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"include"</span>: [<span class="string">"src"</span>],</span><br><span class="line">  <span class="string">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"**/__tests__/*"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src='006' width='80%' /><p>A lot of things is going on here, so let’s explain our config file:</p><ul><li><strong>target</strong>: We want to compile to es5 since we want to build a package with browser compatibility.</li><li><strong>module</strong>: Use commonjs for compatibility[兼容性-kəmˌpætəˈbɪləti].</li><li><strong>declaration</strong>: When you building packages, this should be true. Typescript will then also export type definitions together with the compiled javascript code so the package can be used with both Typescript and Javascript.</li><li><strong>outDir</strong>: The javascript will be compiled to the lib folder.</li><li><strong>include</strong>: All source files in the src folder</li><li><strong>exclude</strong>: We don’t want to transpile node_modules, neither tests since these are only used during development.</li></ul><h3 id="Your-first-code"><a href="#Your-first-code" class="headerlink" title="Your first code!"></a>Your first code!</h3><p>Now when we have the compilation set up, we can add our first line of code.<br>Let’s create a src folder in the root and add an index.ts file:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Greeter = <span class="function">(<span class="params">name: string</span>) =&gt;</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>Ok, it’s a good start. Next step is to add a build script to package.json:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"build"</span> : <span class="string">"tsc"</span></span><br></pre></td></tr></table></figure><img data-src='008.png' width='80%' /><p>Now you can run the build command in the console:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>And violá!<br>You will see a new <strong>lib</strong> folder in the root with your compiled code and type definitions!</p><img data-src='009.png' width='80%' /><h3 id="Ignore-compiled-code-in-git"><a href="#Ignore-compiled-code-in-git" class="headerlink" title="Ignore compiled code in git"></a>Ignore compiled code in git</h3><p>Except for <strong>package-lock.json</strong>, you normally don’t want to have auto-generated files under source control. It can cause unnecessary conflicts, every time it’s is autogenerated. Let’s add the lib folder to <code>.gitignore</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">/lib</span><br></pre></td></tr></table></figure><p>The slash before lib means “Ignore only the lib folder in the top of the root” This is what we want in this case.</p><h3 id="Formatting-and-Linting"><a href="#Formatting-and-Linting" class="headerlink" title="Formatting and Linting"></a>Formatting and Linting</h3><p>An awesome package should include strict rules for linting and formatting. Especially if you want more collaborators later on. Let’s add <em>Prettier and TsLint</em>!</p><p>Like Typescript, these are tools used only for the development of the package. They should be added as devDependencies:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev prettier tslint tslint-config-prettier</span><br></pre></td></tr></table></figure><p><code>tslint-config-prettier</code> is a preset we need since it prevents conflicts between tslint and prettiers formatting rules.<br>In the root, add a <code>tslint.json</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-config-prettier"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And a <code>.prettierrc</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;printWidth&quot;: 120,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;all&quot;,</span><br><span class="line">  &quot;singleQuote&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, add the lint- and format scripts to package.json</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;format&quot;: &quot;prettier --write \&quot;src&#x2F;**&#x2F;*.ts\&quot; \&quot;src&#x2F;**&#x2F;*.js\&quot;&quot;,</span><br><span class="line">&quot;lint&quot;: &quot;tslint -p tsconfig.json&quot;</span><br></pre></td></tr></table></figure><p>Your package.json should now look something like this:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"w-toolkit"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.1"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Node 工具包"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"lib/index.js"</span>,</span><br><span class="line">  <span class="string">"types"</span>: <span class="string">"lib/index.d.ts"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="string">"format"</span>: <span class="string">"prettier --write \"src/**/*.ts\" \"src/**/*.js\""</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"tslint -p tsconfig.json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/simuty/toolkit.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"工具包"</span>,</span><br><span class="line">    <span class="string">"toolkit"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"simuty"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"bugs"</span>: &#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/simuty/toolkit/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/simuty/toolkit#readme"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="string">"jest"</span>: <span class="string">"^24.9.0"</span>,</span><br><span class="line">    <span class="string">"prettier"</span>: <span class="string">"^1.18.2"</span>,</span><br><span class="line">    <span class="string">"ts-jest"</span>: <span class="string">"^24.3.0"</span>,</span><br><span class="line">    <span class="string">"tslint"</span>: <span class="string">"^5.18.0"</span>,</span><br><span class="line">    <span class="string">"tslint-config-prettier"</span>: <span class="string">"^1.18.0"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^3.5.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"lib/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can run npm run lint and npm run format in the console:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run lint</span><br><span class="line">npm run format</span><br></pre></td></tr></table></figure><img data-src='010.png' width='80%' /><h3 id="Don’t-include-more-than-you-need-in-your-package"><a href="#Don’t-include-more-than-you-need-in-your-package" class="headerlink" title="Don’t include more than you need in your package!"></a>Don’t include more than you need in your package!</h3><p>In our <code>.gitignore</code> file, we added /lib since we don’t want the build-files in our git repository. The opposite goes for a published package. <strong>We don’t want the source code, only the build-files</strong>!<br>This can be solved in <em>two</em> ways. One way is to blacklist files/folders in a <code>.npmignore</code> file. Should have looked something like this in our case:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">tsconfig.json</span><br><span class="line">tslint.json</span><br><span class="line">.prettierrc</span><br></pre></td></tr></table></figure><p>However, blacklisting files is <strong>not a good practice</strong>. Every new file/folder added to the root, needs to be added to the .npmignore file as well! Instead, you should whitelist the files /folders you want to publish. This can be done by adding the files property in package.json:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"files"</span>: [<span class="string">"lib/**/*"</span>]</span><br></pre></td></tr></table></figure><p>That’s it! Easy 😃 Only the lib folder will be included in the published package! (<code>README.md</code> and <code>package.json</code> are added by default).<br>For more information about whitelisting vs blacklisting in NPM packages see this <a href="https://blog.npmjs.org/post/165769683050/publishing-what-you-mean-to-publish" target="_blank" rel="noopener">post from the NPM blog</a>. (Thank you Tibor Blénessy for the reference)</p><h3 id="Setup-Testing-with-Jest"><a href="#Setup-Testing-with-Jest" class="headerlink" title="Setup Testing with Jest"></a>Setup Testing with Jest</h3><p>An awesome package should include <code>unit tests</code>! Let’s add <strong>Jest</strong>: An awesome testing framework by Facebook.</p><img data-src='011' width='80%' /><p>Since we will be writing tests against our typescript source-files, we also need to add ts-jest and @types/jest. The test suite is only used during development so let’s add them as devDependencies</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest ts-jest @types&#x2F;jest</span><br></pre></td></tr></table></figure><p>Cool! Now we need to configure Jest. You can choose to write a jest section to package.json or to create a separate config file. We are going to add it in a separate file, so it will not be included when we publish the package.<br>Create a new file in the root and name it <code>jestconfig.json</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;transform&quot;: &#123;</span><br><span class="line">    &quot;^.+\\.(t|j)sx?$&quot;: &quot;ts-jest&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;testRegex&quot;: &quot;(&#x2F;__tests__&#x2F;.*|(\\.|&#x2F;)(test|spec))\\.(jsx?|tsx?)$&quot;,</span><br><span class="line">  &quot;moduleFileExtensions&quot;: [&quot;ts&quot;, &quot;tsx&quot;, &quot;js&quot;, &quot;jsx&quot;, &quot;json&quot;, &quot;node&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Remove the old test script in package.json and change it to:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"test"</span>: <span class="string">"jest --config jestconfig.json"</span>,</span><br></pre></td></tr></table></figure><p>The package.json should look something like this:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"w-toolkit"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.1"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Node 工具包"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"lib/index.js"</span>,</span><br><span class="line">  <span class="string">"types"</span>: <span class="string">"lib/index.d.ts"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"jest --config jestconfig.json"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="string">"format"</span>: <span class="string">"prettier --write \"src/**/*.ts\" \"src/**/*.js\""</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"tslint -p tsconfig.json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/simuty/toolkit.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"工具包"</span>,</span><br><span class="line">    <span class="string">"toolkit"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"simuty"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"bugs"</span>: &#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/simuty/toolkit/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/simuty/toolkit#readme"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="string">"jest"</span>: <span class="string">"^24.9.0"</span>,</span><br><span class="line">    <span class="string">"prettier"</span>: <span class="string">"^1.18.2"</span>,</span><br><span class="line">    <span class="string">"ts-jest"</span>: <span class="string">"^24.3.0"</span>,</span><br><span class="line">    <span class="string">"tslint"</span>: <span class="string">"^5.18.0"</span>,</span><br><span class="line">    <span class="string">"tslint-config-prettier"</span>: <span class="string">"^1.18.0"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^3.5.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"lib/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Write-a-basic-test"><a href="#Write-a-basic-test" class="headerlink" title="Write a basic test"></a>Write a basic test</h3><p>It’s time to write our first test! 😃<br>In the src folder, add a new folder called <code>__tests__</code> and inside, add a new file with a name you like, but it has to end with test.ts, for example Greeter.test.ts</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Greeter &#125; <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br><span class="line">test(<span class="string">'My Greeter'</span>, () =&gt; &#123;</span><br><span class="line">  expect(Greeter(<span class="string">'Carl'</span>)).toBe(<span class="string">'Hello Carl'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Ok, so the only thing we are doing here is to verify that Our method Greeter will return Hello Carl if the input is Carl.<br>Now, Try to run</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><img data-src='012.png' width='80%'><p>Cool it works! As you can see we passed one test.</p><h3 id="Use-the-magic-scripts-in-NPM"><a href="#Use-the-magic-scripts-in-NPM" class="headerlink" title="Use the magic scripts in NPM"></a>Use the magic scripts in NPM</h3><p>For an awesome package, we should of course automate as much as possible. We’re about to dig into some scripts in npm: <strong>prepare, prepublishOnly, preversion, version and postversion</strong></p><div class="note danger">]<ol><li><strong>prepare</strong> will run both <strong>BEFORE</strong> the package is packed and published, and on local npm install. Perfect for running building the code. Add this script to package.json <code>&quot;prepare&quot; : &quot;npm run build&quot;</code></li><li><strong>prepublishOnly</strong> will run <strong>BEFORE</strong> prepare and <strong>ONLY</strong> on npm publish. Here we will run our test and lint to make sure we don’t publish bad code: <code>&quot;prepublishOnly&quot; : &quot;npm test &amp;&amp; npm run lint&quot;</code></li><li><strong>preversion</strong> will run before bumping a new package version. To be extra sure that we’re not bumping a version with bad code, why not run lint here as well? 😃 <code>&quot;preversion&quot; : &quot;npm run lint&quot;</code></li><li><strong>Version</strong> will run after a new version has been bumped. If your package has a git repository, like in our case, a commit and a new version-tag will be made every time you bump a new version. This command will run BEFORE the commit is made. One idea is to run the formatter here and so no ugly code will pass into the new version: <code>&quot;version&quot; : &quot;npm run format &amp;&amp; git add -A src&quot;</code></li><li><strong>postversion</strong> will run after the commit has been made. A perfect place for pushing the commit as well as the tag. <code>&quot;postversion&quot; : &quot;git push &amp;&amp; git push --tags&quot;</code></li></ol></div><p>This is how my scripts section in <code>package.json</code> looks like:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"test"</span>: <span class="string">"jest --config jestconfig.json"</span>,</span><br><span class="line">   <span class="string">"build"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">   <span class="string">"format"</span>: <span class="string">"prettier --write \"src/**/*.ts\" \"src/**/*.js\""</span>,</span><br><span class="line">   <span class="string">"lint"</span>: <span class="string">"tslint -p tsconfig.json"</span>,</span><br><span class="line">   <span class="string">"prepare"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">   <span class="string">"prepublishOnly"</span>: <span class="string">"npm test &amp;&amp; npm run lint"</span>,</span><br><span class="line">   <span class="string">"preversion"</span>: <span class="string">"npm run lint"</span>,</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"npm run format &amp;&amp; git add -A src"</span>,</span><br><span class="line">   <span class="string">"postversion"</span>: <span class="string">"git push &amp;&amp; git push --tags"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Finishing-up-package-json"><a href="#Finishing-up-package-json" class="headerlink" title="Finishing up package.json"></a>Finishing up package.json</h3><p>It’s finally time to finish up our awesome package! First, we need to make some changes to our package.json again:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"w-toolkit"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.1"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Node 工具包"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"lib/index.js"</span>,</span><br><span class="line">  <span class="string">"types"</span>: <span class="string">"lib/index.d.ts"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"jest --config jestconfig.json"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="string">"format"</span>: <span class="string">"prettier --write \"src/**/*.ts\" \"src/**/*.js\""</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"tslint -p tsconfig.json"</span>,</span><br><span class="line">    <span class="string">"prepare"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="string">"prepublishOnly"</span>: <span class="string">"npm run test &amp;&amp; npm run lint"</span>,</span><br><span class="line">    <span class="string">"preversion"</span>: <span class="string">"npm run lint"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"npm run format &amp;&amp; git add -A src"</span>,</span><br><span class="line">    <span class="string">"postversion"</span>: <span class="string">"git push &amp;&amp; git push --tags"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/simuty/toolkit.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"工具包"</span>,</span><br><span class="line">    <span class="string">"toolkit"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"simuty"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"bugs"</span>: &#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/simuty/toolkit/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/simuty/toolkit#readme"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="string">"jest"</span>: <span class="string">"^24.9.0"</span>,</span><br><span class="line">    <span class="string">"prettier"</span>: <span class="string">"^1.18.2"</span>,</span><br><span class="line">    <span class="string">"ts-jest"</span>: <span class="string">"^24.3.0"</span>,</span><br><span class="line">    <span class="string">"tslint"</span>: <span class="string">"^5.18.0"</span>,</span><br><span class="line">    <span class="string">"tslint-config-prettier"</span>: <span class="string">"^1.18.0"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^3.5.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"lib/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Se here we are adding a nice description, an author and some relevant keywords. The key main is important here since it will tell npm where it can import the modules from.<br>The key <code>types</code> will tell Typescript and Code-editors where we can find the type definitions!</p><h3 id="Commit-and-push-your-code-to-git"><a href="#Commit-and-push-your-code-to-git" class="headerlink" title="Commit and push your code to git"></a>Commit and push your code to git</h3><p>Time to push all your work to your remote repository! If you haven’t committed your latest code already, now it is the time to do it. 😉</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git add -A &amp;&amp; git commit -m <span class="string">"Setup Package"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="Publish-you-package-to-NPM"><a href="#Publish-you-package-to-NPM" class="headerlink" title="Publish you package to NPM!"></a>Publish you package to NPM!</h3><p>In order to publish your package, you need to create an NPM account.<br>If you don’t have an account you can do so on <a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">https://www.npmjs.com/signup</a>or run the command: <code>npm adduser</code></p><p>If you already have an account, run npm login to login to you NPM account.</p><p>Logging in to my existing NPM account<br>Alright! Now run publish.</p><p>As you can see the package will first be built by the prepare script, then test and lint will run by the prepublishOnly script before the package is published.</p><img data-src='013.png' width='80%'><p>###View your package</p><p>Now browse your package on npmjs. The url is <a href="https://npmjs.com/package/" target="_blank" rel="noopener">https://npmjs.com/package/</a><your-package-name> in my case it is<br><a href="https://npmjs.com/package/my-awesome-greeter" target="_blank" rel="noopener">https://npmjs.com/package/my-awesome-greeter</a></p><img data-src='014.png' width='80%'><p>Nice! We got a package 😎 📦 looking good so far!</p><h3 id="Bumping-a-new-version"><a href="#Bumping-a-new-version" class="headerlink" title="Bumping a new version"></a>Bumping a new version</h3><p>Let’s bump a new patch version of the package:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm version patch</span><br></pre></td></tr></table></figure><p>Our <code>preversion</code>, <code>version</code>, and <code>postversion</code> will run, create a new tag in git and push it to our remote repository. Now publish again:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>And now you have a new version</p><img data-src='015.png' width='80%'><img data-src='016.png' width='80%'><h3 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h3><p>For the scope of this tutorial, I would like to stop here for now on something I would call a “minimum setup for an NPM Package”. However, when your package grows I would recommend:</p><ol><li>Setup automated build with <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis</a></li><li>Analyze code-coverage with <a href="https://codecov.io/" target="_blank" rel="noopener">Codecov</a></li><li>Add badges to your readme with <a href="http://shields.io/" target="_blank" rel="noopener">Shields</a>. Everyone loves badges 😎</li></ol><p>But let’s leave that for another tutorial.</p><h2 id="Good-luck-building-your-awesome-package-😃"><a href="#Good-luck-building-your-awesome-package-😃" class="headerlink" title="Good luck building your awesome package! 😃"></a>Good luck building your awesome package! 😃</h2>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node&amp;RabbitMQ系列五 保证投递</title>
      <link href="2020/12/15/mq_5/"/>
      <url>2020/12/15/mq_5/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/058.jpg" width=80% /><span class='geyan'>夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。（《周易·䷀乾·文言》）</span><a id="more"></a><p>网上有很多确保消息100%投递相关的文章，但总的来说还是分为几种情况的</p><ol><li>发送端如何确保发送到了交换机</li><li>消费端针对不同情况处理消息–后续再说</li></ol><p>本文围绕<strong>发布者100%投递</strong>相关内容，主要包含</p><ul><li><input checked="" disabled="" type="checkbox"> 发布消息的附带信息-properties；</li><li><input checked="" disabled="" type="checkbox"> ConfirmChannel： 监听publish回调函数；</li><li><input checked="" disabled="" type="checkbox"> Mandatory：监听channel回调函数；</li><li><input checked="" disabled="" type="checkbox"> 备份交换机：路由不到队列则发到备份交换机</li></ul><h2 id="消息属性详解"><a href="#消息属性详解" class="headerlink" title="消息属性详解"></a>消息属性详解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123; fields:</span><br><span class="line">   &#123; consumerTag: <span class="string">'amq.ctag-_zo-n-crGPvrunQmICBoqA'</span>,</span><br><span class="line">     deliveryTag: <span class="number">1</span>,</span><br><span class="line">     redelivered: <span class="keyword">false</span>,</span><br><span class="line">     exchange: <span class="string">'delayed-exchange'</span>,</span><br><span class="line">     routingKey: <span class="string">'delayed-routingKey'</span> &#125;,</span><br><span class="line">  properties:</span><br><span class="line">   &#123; contentType: undefined,</span><br><span class="line">     contentEncoding: undefined,</span><br><span class="line">     headers: &#123; <span class="string">'x-delay'</span>: <span class="number">1000</span>, <span class="string">'x-death'</span>: [Array] &#125;,</span><br><span class="line">     deliveryMode: undefined,</span><br><span class="line">     priority: undefined,</span><br><span class="line">     correlationId: undefined,</span><br><span class="line">     replyTo: undefined,</span><br><span class="line">     expiration: undefined,</span><br><span class="line">     messageId: undefined,</span><br><span class="line">     timestamp: undefined,</span><br><span class="line">     type: undefined,</span><br><span class="line">     userId: undefined,</span><br><span class="line">     appId: undefined,</span><br><span class="line">     clusterId: undefined &#125;,</span><br><span class="line">  content:</span><br><span class="line">   &lt;Buffer <span class="number">7</span>b <span class="number">22</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">67</span> <span class="number">22</span> <span class="number">3</span>a <span class="number">32</span> <span class="number">2</span>c <span class="number">22</span> <span class="number">74</span> <span class="number">74</span> <span class="number">6</span>c <span class="number">22</span> <span class="number">3</span>a <span class="number">31</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">7</span>d&gt; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src='004.png' width='80%' /><img data-src='005.png' width='80%' /><table><thead><tr><th>字段</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>content-type</td><td>消息体类型HIMI类型</td><td>如：application/ json</td></tr><tr><td>content-encodeing</td><td>压缩消息</td><td>如：utf8</td></tr><tr><td>message-id</td><td><code>应用级别</code>，跟踪消息的流动情况</td><td>如销售订单或支持类请; 允许255个字节的utf8</td></tr><tr><td>correlation-id</td><td><code>应用级别</code>，跟踪消息的流动情况</td><td>如：传送关联消息的事务ID或其他类似数据；允许255个字节的utf8</td></tr><tr><td><strong>timestamp</strong></td><td><code>应用级别</code></td><td>如：诊断消息发生意外、性能、是否处理-丢弃、监控报警等</td></tr><tr><td><strong>expiration</strong></td><td>消息自动过期, <code>整数或整数时间戳</code>的 <strong>字符串</strong></td><td>注意<br/>过期的消息会被直接丢弃 <br/></td></tr><tr><td><strong>delivery-mode</strong></td><td>是否持久化</td><td>1 表示非持久化消息， 2 表示持久化消息</td></tr><tr><td>app-id</td><td>收集统计数据，如校验版本、平台</td><td>如<strong>追踪恶意消息</strong></td></tr><tr><td>user-id</td><td>识别用户，根据业务判断是否使用</td><td></td></tr><tr><td><strong>type</strong></td><td>消息类型名称</td><td>如：不采用json,采用protobuf,就可以不必自行设置type，在次设置传输即可</td></tr><tr><td>reply-to</td><td>使用 reply-to 可以构建一个用来回复消息的私有响应队列</td><td><strong>“在请 求消息中使用私有响应队列时 ， 它可以保存私有响应队 列的名称” 。 这个定义中 有太 多的不明确性，所以应该谨慎使用这个属性。</strong></td></tr><tr><td>headers</td><td>自定义头</td><td>根据需要设置key-value即可</td></tr><tr><td><strong>priority</strong></td><td>优先级</td><td>0-9之间的整数</td></tr></tbody></table><img data-src='008.png' width='80%' /><h3 id="消息持久化-VS-队列持久化"><a href="#消息持久化-VS-队列持久化" class="headerlink" title="消息持久化 VS 队列持久化"></a>消息持久化 VS 队列持久化</h3><ol><li>消息的 delivery-mode 才 会向 RabbitMQ 指定消息是否应该被持久化</li><li>队列的持久性属性告诉 RabbitMQ 队列的定 义在 重新启 动 RabbitMQ 服务器或群集之后是否仍然有效</li><li>队列可能包含<strong>持久化</strong>和<strong>未持久化</strong>的消息；</li></ol><p>delivery-mode 指定为 1 将会尽可能降低消息投递的延迟性。<strong>侧重：速度，即便丢失不影响业务</strong><br>delivery-mode 指定为 2 专注于保证消息的可靠投递而不是消息吞吐量。<strong>侧重：可靠，非速度</strong></p><img data-src='006.png' width='80%' /><img data-src='007.png' width='80%' /><h2 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h2><h3 id="投递速度-VS-可靠性"><a href="#投递速度-VS-可靠性" class="headerlink" title="投递速度 VS 可靠性"></a>投递速度 VS 可靠性</h3><img data-src='011.png' width='80%' /><div class="note danger"><div class="note success"><p>说实在的，真的没有考虑这么多种情况。。。</p><div class="note info"><p>主要元凶</p><ol><li>网络</li><li>硬件</li><li>系统</li></ol></div></div><ol><li>消费发布时保证消息进入队列的<strong>重要性</strong>有多高？</li><li>如果消息<code>无法路由</code>，是否应将消息<code>返回</code>给发布者？</li><li>如果消息<code>无法路由</code>，是否应该将其发送到其他地方稍后进行<code>重新路由</code>？</li><li>如果 RabbitMQ 服务器<strong>崩溃</strong>，可以接受信息<code>丢失</code>吗？</li><li>RabbitMQ 在处理新消息时是否应该<strong>确认</strong>它已经为发布者执行了所有请求的路由和<code>持久化</code>任务？</li><li>消息发布者是否可以批量投递消息，然后从 RabbitMQ <code>收到</code>一个<code>确认</code>用于表明所有请求的路由和持久化任务己经批量应用到所有的消息中？ </li><li>如果你要批量发布消息，而这些消息需要确认路由和持久化，那么对每一条消息是否需要对目标队列实现真正意义上的<code>原子提交</code>？ </li><li>在可靠投递方面是否有可接受的<code>平衡性</code>，你的发布者可以使用它来实现更高的性能和消息吞吐量吗 ？ </li><li>消息发布还有哪些方面会<code>影响消息吞吐量和性能</code>？</li></ol></div><h3 id="ConfirmChannel-回调"><a href="#ConfirmChannel-回调" class="headerlink" title="ConfirmChannel 回调"></a>ConfirmChannel 回调</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testConfirmChannel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`amqp://localhost`</span>;</span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url)</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 1. 发布4条消息</span></span><br><span class="line"><span class="comment">     * 2. 如果成功则打印成功的消息</span></span><br><span class="line"><span class="comment">     * 3. 如果因为某种原因失败，则重试发布3次，最终记录失败消息</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 失败原因</span></span><br><span class="line"><span class="comment">     * 1. 网络，connect.close、channel.close</span></span><br><span class="line"><span class="comment">     * 2. 其他故障</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">await</span> retryTest(index, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 发送的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>retryTime 单个消息的 重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">retryTest</span>(<span class="params">index: number, retryTime: number</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`发送消息<span class="subst">$&#123;index&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">await</span> publish(<span class="string">`发送消息<span class="subst">$&#123;index&#125;</span>`</span>, connect);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (retryTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">await</span> sleep(<span class="number">3</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>重试, 次数为<span class="subst">$&#123;retryTime&#125;</span>`</span>)</span><br><span class="line">                <span class="keyword">await</span> retryTest(index, retryTime - <span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// ! 如果单条消息重试后仍旧失败，则记录📝特殊处理</span></span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">`🚩🚩🚩 <span class="subst">$&#123;index&#125;</span> 需要特殊处理`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内容：发布【确认】</span></span><br><span class="line"><span class="comment"> * 1. 问题：如何确保消息发送到了交换机？</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. createConfirmChannel</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>msg 发布的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>connect rabbitmq connect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">msg: string, connect: amqp.Connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'5.confirm.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeType = <span class="string">'direct'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'5.confirm.routingKey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受确认的channel</span></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createConfirmChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(&#123; msg &#125;);</span><br><span class="line">    <span class="keyword">const</span> random = <span class="built_in">Math</span>.random() &lt; <span class="number">0.4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'随机出现❌'</span>, random);</span><br><span class="line">    <span class="keyword">if</span> (random) &#123;</span><br><span class="line">        <span class="comment">// 为了演示发送不到交换机</span></span><br><span class="line">        channel.close()</span><br><span class="line">        <span class="comment">// connect.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">    channel.publish(exchange, routingKey, Buffer.from(content), &#123;&#125;, (err, ok) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-失败'</span>, err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-确认'</span>, err, ok, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.waitForConfirms()</span><br><span class="line">    <span class="keyword">await</span> channel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#结果 全部成功</span></span><br><span class="line">➜  git:(main) ✗ ts-node send.ts</span><br><span class="line">发送消息1</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息1"</span>&#125;</span><br><span class="line">发送消息2</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息2"</span>&#125;</span><br><span class="line">发送消息3</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息3"</span>&#125;</span><br><span class="line">发送消息4</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息4"</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  6test git:(main) ✗ ts-node send.ts</span><br><span class="line">发送消息1</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息1"</span>&#125;</span><br><span class="line">发送消息2</span><br><span class="line">随机出现❌ <span class="literal">true</span></span><br><span class="line">发布消息-交换机-失败 Error: channel closed</span><br><span class="line">    at ConfirmChannel.&lt;anonymous&gt; (/Users/mw/Desktop/Github/Integration/Rabbitmq/node_modules/amqplib/lib/channel.js:39:18)</span><br><span class="line">    ...</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:63:19)</span><br><span class="line">2重试, 次数为3</span><br><span class="line">发送消息2</span><br><span class="line">随机出现❌ <span class="literal">true</span></span><br><span class="line">发布消息-交换机-失败 Error: channel closed</span><br><span class="line">    at ConfirmChannel.&lt;anonymous&gt; (/Users/mw/Desktop/Github/Integration/Rabbitmq/node_modules/amqplib/lib/channel.js:39:18)</span><br><span class="line">    ...</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:63:19)</span><br><span class="line">2重试, 次数为2</span><br><span class="line">发送消息2</span><br><span class="line">随机出现❌ <span class="literal">true</span></span><br><span class="line">发布消息-交换机-失败 Error: channel closed</span><br><span class="line">    at ConfirmChannel.&lt;anonymous&gt; (/Users/mw/Desktop/Github/Integration/Rabbitmq/node_modules/amqplib/lib/channel.js:39:18)</span><br><span class="line">    ...</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:63:19)</span><br><span class="line">2重试, 次数为1</span><br><span class="line">发送消息2</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息2"</span>&#125;</span><br><span class="line">发送消息3</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息3"</span>&#125;</span><br><span class="line">发送消息4</span><br><span class="line">随机出现❌ <span class="literal">false</span></span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息4"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Mandatory"><a href="#Mandatory" class="headerlink" title="Mandatory"></a>Mandatory</h3><p>当<strong>mandatory</strong>标志位设置为true时，如果exchange根据自身类型和消息routeKey无法找到一个符合条件的queue，那么会调用basic.return方法将消息返回给生产者（Basic.Return + Content-Header + Content-Body）；当mandatory设置为false时，出现上述情形broker会直接将消息扔掉。</p><div class="note danger"><p>The immediate and mandatory fields are part of the AMQP specification, and are also covered in the RabbitMQ FAQ to clarify how its implementers interpreted their meaning:</p><p><strong>Mandatory</strong></p><blockquote><p>This flag tells the server how to react if a message cannot be routed to a queue. Specifically, if mandatory is set and after running the bindings the message was placed on zero queues then the message is returned to the sender (with a basic.return). If mandatory had not been set under the same circumstances the server would silently drop the message.</p></blockquote><p><code>Or in my words, &quot;Put this message on at least one queue. If you can&#39;t, send it back to me.&quot;</code></p></div><h4 id="CODE-发布失败"><a href="#CODE-发布失败" class="headerlink" title="CODE-发布失败"></a>CODE-发布失败</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">msg: string, connect: amqp.Connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'5.mandatory.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeType = <span class="string">'direct'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'5.mandatory.routingKey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createConfirmChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(&#123; msg &#125;);</span><br><span class="line">    <span class="comment">// mandatory</span></span><br><span class="line">    channel.publish(exchange, <span class="string">''</span>, Buffer.from(content), &#123; <span class="attr">mandatory</span>: <span class="literal">true</span> &#125;, (err, ok) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-失败'</span>, err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-确认'</span>, err, ok, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 监听回调函数</span></span><br><span class="line">    channel.on(<span class="string">'return'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"return: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    channel.on(<span class="string">'error'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    channel.on(<span class="string">'close'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"close: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> channel.waitForConfirms()</span><br><span class="line">    <span class="keyword">await</span> channel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// return 回调函数返回数据</span></span><br><span class="line"><span class="keyword">return</span>:  &#123; <span class="attr">fields</span>:</span><br><span class="line">   &#123; <span class="attr">replyCode</span>: <span class="number">312</span>,</span><br><span class="line">     replyText: <span class="string">'NO_ROUTE'</span>,</span><br><span class="line">     exchange: <span class="string">'5.mandatory.exchange'</span>,</span><br><span class="line">     routingKey: <span class="string">''</span> &#125;,</span><br><span class="line">  properties:</span><br><span class="line">   &#123; <span class="attr">contentType</span>: <span class="literal">undefined</span>,</span><br><span class="line">     contentEncoding: <span class="literal">undefined</span>,</span><br><span class="line">     headers: &#123;&#125;,</span><br><span class="line">     deliveryMode: <span class="literal">undefined</span>,</span><br><span class="line">     priority: <span class="literal">undefined</span>,</span><br><span class="line">     correlationId: <span class="literal">undefined</span>,</span><br><span class="line">     replyTo: <span class="literal">undefined</span>,</span><br><span class="line">     expiration: <span class="literal">undefined</span>,</span><br><span class="line">     messageId: <span class="literal">undefined</span>,</span><br><span class="line">     timestamp: <span class="literal">undefined</span>,</span><br><span class="line">     type: <span class="literal">undefined</span>,</span><br><span class="line">     userId: <span class="literal">undefined</span>,</span><br><span class="line">     appId: <span class="literal">undefined</span>,</span><br><span class="line">     clusterId: <span class="literal">undefined</span> &#125;,</span><br><span class="line">  content:</span><br><span class="line">   &lt;Buffer <span class="number">7</span>b <span class="number">22</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">67</span> <span class="number">22</span> <span class="number">3</span>a <span class="number">22</span> e5 <span class="number">8</span>f <span class="number">91</span> e9 <span class="number">80</span> <span class="number">81</span> e6 b6 <span class="number">88</span> e6 <span class="number">81</span> af <span class="number">2</span>d <span class="number">2</span>d <span class="number">22</span> <span class="number">7</span>d&gt; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createConfirmChannel回调函数</span></span><br><span class="line">发布消息-交换机-确认 <span class="literal">null</span> <span class="literal">undefined</span> &#123;<span class="string">"msg"</span>:<span class="string">"发送消息--"</span>&#125;</span><br><span class="line"><span class="comment">// close channel断开回调函数</span></span><br><span class="line">close:  <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><img data-src='012.png' width='80%' /><h4 id="CODE-发布成功"><a href="#CODE-发布成功" class="headerlink" title="CODE-发布成功"></a>CODE-发布成功</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">msg: string, connect: amqp.Connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'5.mandatory.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeType = <span class="string">'direct'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'5.mandatory.routingKey'</span>;</span><br><span class="line">    <span class="keyword">const</span> queueName = <span class="string">'5.topic.queue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受确认的channel</span></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createConfirmChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(&#123; msg &#125;);</span><br><span class="line">    channel.publish(exchange, routingKey, Buffer.from(content), &#123; <span class="attr">mandatory</span>: <span class="literal">true</span> &#125;, (err, ok) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-失败'</span>, err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-确认'</span>, err, ok, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定queue</span></span><br><span class="line">    <span class="keyword">const</span> queueA = <span class="keyword">await</span> channel.assertQueue(queueName);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueA.queue, exchange, routingKey);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    channel.on(<span class="string">'return'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"return: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    channel.on(<span class="string">'error'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    channel.on(<span class="string">'close'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"close: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> channel.waitForConfirms()</span><br><span class="line">    <span class="keyword">await</span> channel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">✗ ts-node 2mandatory.ts </span><br><span class="line">发布消息-交换机-确认 null undefined &#123;<span class="string">"msg"</span>:<span class="string">"发送消息--"</span>&#125;</span><br><span class="line">close:  undefined</span><br></pre></td></tr></table></figure><div class="note danger"><p>想模拟错误❌真的难，终于复现错误解决问题，Nice!</p></div><img data-src='013.png' width='80%' /><h3 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内容：发布【确认】</span></span><br><span class="line"><span class="comment"> * 备份交换机</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * !注：如果同时设置 alternateExchange &amp;&amp; mandatory 以备份交换机为主</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>msg 发布的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>connect rabbitmq connect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">msg: string, connect: amqp.Connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'5.alternate.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeType = <span class="string">'direct'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'5.alternate.routingKey'</span>;</span><br><span class="line">    <span class="keyword">const</span> queueName = <span class="string">'5.alternate.queue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备份交换机</span></span><br><span class="line">    <span class="keyword">const</span> exchangeBak = <span class="string">'5.alternate.bak.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeBakType = <span class="string">'fanout'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeBakQueue = <span class="string">'5.alternate.bak.queue'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeBakRouter = <span class="string">'5.bak'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受确认的channel</span></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createConfirmChannel();</span><br><span class="line">    <span class="comment">// 设置备份交换机</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">alternateExchange</span>: exchangeBak &#125;)</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(&#123; msg &#125;);</span><br><span class="line">    channel.publish(exchange, routingKey, Buffer.from(content), &#123; <span class="attr">mandatory</span>: <span class="literal">true</span> &#125;, (err, ok) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-失败'</span>, err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发布消息-交换机-确认'</span>, err, ok, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备份交换机</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchangeBak, exchangeBakType);</span><br><span class="line">    <span class="keyword">const</span> queueBak = <span class="keyword">await</span> channel.assertQueue(exchangeBakQueue)</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueBak.queue, exchangeBak, exchangeBakRouter);</span><br><span class="line"></span><br><span class="line">    channel.on(<span class="string">'return'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"return: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    channel.on(<span class="string">'error'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    channel.on(<span class="string">'close'</span>, (args)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"close: "</span>, args);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> channel.waitForConfirms()</span><br><span class="line">    <span class="keyword">await</span> channel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM 配置</title>
      <link href="2020/12/14/nvm_config/"/>
      <url>2020/12/14/nvm_config/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/057.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a><p>本文涉及使用nvm时候 常见的三个问题</p><ol><li>zsh: command not found: npm</li><li>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</li><li>complete:13: command not found: compdef</li></ol><div class="note success"><p>为啥会有这篇博客？</p><p>因为vscode打开后感觉特别慢，访问了<a href="https://code.visualstudio.com/docs/supporting/faq#_resolving-shell-environment-is-slow-error-warning" target="_blank" rel="noopener">vscode对应的说明</a>,改了环境变量，然后nvm不能用了。</p><p>也挺好，前两个问题，也是经常遇到的，记录下挺好的。</p></div><h3 id="终端-command-not-found-npm"><a href="#终端-command-not-found-npm" class="headerlink" title="终端 command not found: npm"></a>终端 command not found: npm</h3><p>今天又遇到这样的问题，因为vscode配置了<a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a>, 加载环境变量是：<code>~/.zshrc</code>;<br>如果安装过直接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 来源[github--nvm](https://github.com/nvm-sh/nvm)</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><p>新开终端试试？如果不可以，接着看第二节</p><h3 id="终端-安装被拒"><a href="#终端-安装被拒" class="headerlink" title="终端 安装被拒"></a>终端 安装被拒</h3><p>第一步配置后，<strong>不行</strong>，那就重新安装吧，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash</span><br><span class="line"><span class="comment"># 提示被拒绝</span></span><br><span class="line">&gt; curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><h4 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h4><ol><li>访问<a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh</a>,保存到本地命名: <code>nvm.sh</code>, 命名随意，自己开心就行了。</li><li>source nvm.sh</li><li>等待结束，新开终端，可以正常使用<code>nvm 命令</code></li><li>但是新终端中：<code>complete:13: command not found: compdef</code></li></ol><h4 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h4><p>以下内容载录：<a href="https://github.com/hawtim/blog/issues/10" target="_blank" rel="noopener">如何解决类似 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused 的问题https://github.com/hawtim/blog/issues/10</a></p><p>笔者最近发现 github 的用户头像和自己文章中的图片显示不出来了。然后今天发现安装 homeBrew 和 nvm 出现了标题的报错信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash</span><br><span class="line"><span class="comment"># 提示被拒绝</span></span><br><span class="line">&gt; curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><div class="note danger"><p>以上是安装 npm 的报错信息，可以发现，脚本需要到 <code>raw.githubusercontent.com</code> 上拉取代码。</p><p>网上搜索了一下，发现是 <strong>github 的一些域名的 DNS 解析被污染</strong>，导致DNS 解析过程无法通过域名取得正确的IP地址。</p><div class="note success"><p>DNS 污染<br>感兴趣的朋友可以去了解一下。<a href="https://zhuanlan.zhihu.com/p/101908711" target="_blank" rel="noopener">DNS 污染</a></p></div><div class="note info"><p>解决方案</p><p>打开 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 输入访问不了的域名</p><img data-src='004.png' width='80%'><p>查询之后可以获得正确的 IP 地址</p><p>在本机的 host 文件中添加，建议使用 <a href="https://github.com/oldj/SwitchHosts/releases" target="_blank" rel="noopener">switchhosts</a> 方便 host 管理</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">199.232.68.133 raw.githubusercontent.com</span><br><span class="line">199.232.68.133 user-images.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars2.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars1.githubusercontent.com</span><br></pre></td></tr></table></figure><p>添加以上几条 host 配置，页面的图片展示就正常了，homebrew 也能装了，nvm 也行动灵活了。</p></div></div><h3 id="终端-complete-13-command-not-found-compdef"><a href="#终端-complete-13-command-not-found-compdef" class="headerlink" title="终端 complete:13: command not found: compdef"></a>终端 complete:13: command not found: compdef</h3><p><a href="https://github.com/ohmyzsh/ohmyzsh/issues/7171" target="_blank" rel="noopener">complete:13: command not found: compdef</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 来源[github--nvm](https://github.com/nvm-sh/nvm)</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line"><span class="comment"># 把这个注释了就行了</span></span><br><span class="line"><span class="comment"># [ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>回想大学，因为配置环境基本被劝退学编程，真的挺可笑的。</p><blockquote><p>感觉：基本配置应该是开箱即用，其他可选自行看文档</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列十 抽奖</title>
      <link href="2020/12/11/redis_10/"/>
      <url>2020/12/11/redis_10/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/057.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a><p>其实不论上层的抽奖方案是什么（例如，大转盘，刮刮乐，扎气球、砸金蛋等），都只是展示层的提现形式不一样，底层都可以使用同一个抽奖算法。</p><p>想想，如果是线下举办抽奖，一般会有哪些方案？</p><pre><code>可预估奖品数主动式，抽奖券500份，其中有奖品的只有10份，然后给用户抽，抽中就是你的。例如：买汽水的瓶盖抽奖，刮刮乐。被动式，带ID的抽奖券500份，给用户抽，然后系统随机抽取10个ID发放奖品。例如：发布会入场券抽奖不可预估奖品数用户自己填信息的抽奖券，到时候由系统随机生成一个数，比对一致的就即为中奖者。例如：彩票。</code></pre><p>其实线上的抽奖算法，基本上也是基于模拟线下场景方案来模拟的。但绝大多数场景都是黑盒操作，执行抽奖，中间的过程用户是无法获知的。<br>算法</p><p>1、随机区间法<br>这个方法随机度高，根据概率论来计算，每个用户的单次中奖概率为中奖概率=奖品数/预估抽奖用户人数</p><img data-src='004.png' width='80%'  /><p>如图所示，上面是一个奖品的分配区间，例如预计抽奖100W人，1等级1个，2等奖3个，3等奖5个，4等奖10个，其余999981都是谢谢惠顾。用户抽奖的时候，获得一个随机数，判断是否在中奖区间即可。发放奖品，则区间内的奖品剩余数-1；回收奖品，则区间内的奖品+1。</p><img data-src='005.png' width='80%'  /><p>当一个奖品被抽完之后，从奖品区间移除（谢谢惠顾一般不算奖品），其余继续抽奖，例如上图的10个4等奖被抽光了。而当所有奖品都抽光了，就会只剩下一个谢谢惠顾的区间，这样用户不论怎么抽，都只会是谢谢惠顾，直到活动日结束。如果需要限制总抽奖次数，则将谢谢惠顾的部分也纳入库存，最终库存全部消耗完，随即提示用户抽奖结束即可。</p><p>需要注意的是，评估预计抽奖的人数比较重要（影响到随即数生成区间），我们可以根据历史数据评估，如果不是很清楚，建议评估人数大一些，这样奖品不至于很快被抽完。</p><p>存在问题</p><pre><code>总数N快速膨胀概率通过数量来体现在各个奖品概率较大的情况下，总数n可以较小。但如果在精度很高的情况下，总数必须按比例成倍扩大。例如，所有奖品概率都是10%，那么n只需要取10就可以。但是如果某个奖品概率是0.01%，按照这种算法，总数要扩大到100*100。平衡性影响在Java中，Math.random()方法本身基本可以保证大量测试的情况下避免高重复，且概率分布比较平均。但是需要注意的是，该方法默认返回0-1之间的数据。在当前算法中，必须扩大指定倍数并且强制使用int进行类型转换。在这样的扩大和转换过程中，必然会对数据精度进行修改，转换后的数据也不能保证概率分布平均。因此，该算法实际可能达不到预期的概率要求。算法复杂度数据准备阶段，为每个奖品确定编号与奖品信息的关系集合需要O(n);产生随机数阶段并转换，O(1);从集合中查找，不同的数据结构实现不同，最差需要O(n);</code></pre><p>2、自增匹配法</p><img data-src='006.png' width='80%'  /><p>此方法简单至极，先设一个全局自增数，然后每个奖品我们设一个数字，有几个奖品设几个数，每次用户抽奖，自增数加一返回，如果自增数此时与奖品的数字一致，则中奖。<br>好处是，不用记录奖品的剩余数，只用记录自增数。<br>缺点是，由于不用记录奖品的剩余数，是因为提前进行了分布，所以奖品多的情况不适用。<br>库存操作</p><p>曾经使用mysql的时候，需要使用事务、消息队列，来保证并发导致的数据一致性问题。直到后来改为使用redis。<br>得益于redis的原子性操作和极高的性能，在高并发情况下也能很快的处理相应的库存增减操作（redis同样适用于秒杀场景）。</p><ol start="3"><li>离散法<br>算法思想<br>（高中数学里几何概形的思想）<br>将奖品集合的概率划分区段放入数组中。概率区段通过该概率累计相加确定。利用随机数产生随机概率，加入数组并排序，该数据的下标，就是对应奖品集合中奖品的索引。例如，奖品的集合有X1,X2,X3,X4，对应概率为P1=0.2,P2=0.2,P3=0.3,P4=0.3。<br>那么，产生的概率区段数组为[0.2，0.4，0.7，1.0]。</li><li>2以下代表X1，0.2<del>0.4代表X2，0.4</del>0.7代表X3，0.7<del>1代表X4。<br>这样，如果产生一个随机概率为0.5，加入数组排序后，0.4</del>0.7之间，是X3相加所在的概率区间，返回index=2。<br>由于区间分布的确定是按照X集合顺序的，所以该索引也正是X3在原集合中的索引。<img data-src='007.png' width='80%'  /></li></ol><p>特点</p><pre><code>利用几何概形，概率数组分布在0到1之间，不再需要扩大倍数和取整操作，基本可以保证概率平均分布，避免大量重复的情况概率分配的排序过程，可以使用java默认的排序工具类，也可以自己实现。保证时间复杂度最小。复杂度准备阶段，O(m)。m远小于n，因为概率只有几个，不会大量膨胀。产生随机数，O(1)排序取下标，根据排序算法，O(logn)即可实现取值，根据下标，O(1)；</code></pre><p>参考 </p><p><a href="http://www.ivan95.cn/?p=549" target="_blank" rel="noopener">Java实现游戏抽奖算法</a><br><a href="https://www.jianshu.com/p/24f367d75218" target="_blank" rel="noopener">概率算法</a><br><a href="https://blog.csdn.net/haolexiao/article/details/65157026" target="_blank" rel="noopener">时间复杂度O(1)的离散采样算法</a><br><a href="https://zhuanlan.zhihu.com/p/67348665" target="_blank" rel="noopener">如何优雅的满足“精确到抽几次能中”的游戏审核新规</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列十 抽奖</title>
      <link href="2020/12/11/redis_10/"/>
      <url>2020/12/11/redis_10/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/057.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列九 推荐系统-布隆过滤器</title>
      <link href="2020/12/10/redis_9/"/>
      <url>2020/12/10/redis_9/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/056.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>布隆过滤器是一种空间利用率较高的概率型数据结构，用来测试一个<strong>元素是否在集合</strong>中。但是存在一定可能，导致结果<strong>误判</strong>。<em>当布隆过滤器说某个值存在时，这个值可能不存在</em>；<code>当它说不存在时，那就肯定不存在</code>.</p><p>特性：</p><ol><li>与哈希表不同，布隆过滤器是一个<strong>大小固定的过滤器</strong>；</li><li>随着元素的增多，错误率逐渐上升；</li><li>不能删除其中的元素。</li></ol><p>更多内容看–原理部分。</p><h3 id="Mac-配置"><a href="#Mac-配置" class="headerlink" title="Mac 配置"></a>Mac 配置</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>下载布隆过滤器：<a href="https://github.com/RedisBloom/RedisBloom" target="_blank" rel="noopener"><a href="git@github.com:RedisBloom/RedisBloom.git">地址</a></a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone</span></span><br><span class="line">➜  tmp git <span class="built_in">clone</span> git@github.com:RedisBloom/RedisBloom.git</span><br><span class="line">Cloning into <span class="string">'RedisBloom'</span>...</span><br><span class="line">remote: Enumerating objects: 16, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (16/16), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (14/14), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 2258 (delta 5), reused 5 (delta 2), pack-reused 2242</span><br><span class="line">Receiving objects: 100% (2258/2258), 627.74 KiB | 139.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (1480/1480), <span class="keyword">done</span>.</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">➜  tmp <span class="built_in">cd</span> RedisBloom</span><br><span class="line">➜  RedisBloom git:(master) ls</span><br><span class="line">Dockerfile  Makefile    changelog   contrib     mkdocs.yml  ramp.yml    src</span><br><span class="line">LICENSE     README.md   codecov.yml docs        opt         rmutil      tests</span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">➜  RedisBloom git:(master) make</span><br><span class="line"><span class="comment"># 将redisbloom.so文件放入指定目录</span></span><br><span class="line">➜  RedisBloom git:(master) ls</span><br><span class="line">Dockerfile    README.md     contrib       opt           rmutil</span><br><span class="line">LICENSE       changelog     docs          ramp.yml      src</span><br><span class="line">Makefile      codecov.yml   mkdocs.yml    redisbloom.so tests</span><br></pre></td></tr></table></figure><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>更改 redis 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brew 查看redis相关配置</span></span><br><span class="line">➜  redis brew info redis</span><br><span class="line">redis: stable 6.0.8 (bottled), HEAD</span><br><span class="line">Persistent key-value database, with built-in net interface</span><br><span class="line">https://redis.io/</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/redis/5.0.5 (13 files, 3.1MB) *</span><br><span class="line">  Poured from bottle on 2019-09-20 at 13:21:23</span><br><span class="line">From: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git/Formula/redis.rb</span><br><span class="line">License: BSD-3-Clause</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Required: openssl@1.1 ✔</span><br><span class="line">==&gt; Options</span><br><span class="line">--HEAD</span><br><span class="line">        Install HEAD version</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To have launchd start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string"># 配置文件</span></span><br><span class="line"><span class="string">  redis-server /usr/local/etc/redis.conf</span></span><br><span class="line"><span class="string">==&gt; Analytics</span></span><br><span class="line"><span class="string">install: 46,064 (30 days), 146,808 (90 days), 583,167 (365 days)</span></span><br><span class="line"><span class="string">install-on-request: 44,935 (30 days), 141,581 (90 days), 553,766 (365 days)</span></span><br><span class="line"><span class="string">build-error: 0 (30 days)</span></span><br></pre></td></tr></table></figure><p>配置文件地址：<code>/usr/local/etc/redis.conf</code>;</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">################################## MODULES #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load modules at startup. If the server is not able to load modules</span></span><br><span class="line"><span class="comment"># it will abort. It is possible to use multiple loadmodule directives.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/my_module.so</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/other_module.so</span></span><br><span class="line"></span><br><span class="line">loadmodule /usr/<span class="built_in">local</span>/Cellar/redis/redisbloom.so <span class="comment"># 加载module，写入对应的path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br></pre></td></tr></table></figure><p>重启 redis</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启reis</span></span><br><span class="line">➜  Integration git:(main) brew services restart redis</span><br><span class="line">Stopping `redis`... (might take a <span class="keyword">while</span>)</span><br><span class="line">==&gt; Successfully stopped `redis` (label: homebrew.mxcl.</span><br><span class="line">==&gt; Successfully started `redis` (label: homebrew.mxcl.</span><br><span class="line"><span class="comment"># 连接服务</span></span><br><span class="line">➜  Integration git:(main) redis-cli</span><br><span class="line"><span class="comment"># nice work</span></span><br><span class="line">127.0.0.1:6379&gt; BF.ADD nice work</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>命令</td><td>功能</td><td>参数</td></tr><tr><td>BF.RESERVE</td><td>创建一个大小为 capacity，错误率为 error_rate 的空的 Bloom</td><td>BF.RESERVE {key} {error_rate} {capacity} [EXPANSION expansion 满后默认扩容2倍] [NONSCALING 不扩容抛异常]</td></tr><tr><td><strong>BF.ADD</strong></td><td>向 key 指定的 Bloom 中添加一个元素 item</td><td>BF.ADD {key} {item}</td></tr><tr><td><strong>BF.MADD</strong></td><td>向 key 指定的 Bloom 中添加多个元素</td><td>BF.MADD {key} {item} [item…]</td></tr><tr><td><strong>BF.INSERT</strong></td><td>向 key 指定的 Bloom 中添加多个元素，添加时可以指定大小和错误率，且可以控制在 Bloom 不存在的时候是否自动创建</td><td>BF.INSERT {key} [CAPACITY {cap}] [ERROR {error}] [EXPANSION expansion] [NOCREATE] [NONSCALING] ITEMS {item…}</td></tr><tr><td>BF.EXISTS</td><td>检查一个元素是否可能存在于 key 指定的 Bloom 中</td><td>BF.EXISTS {key} {item}</td></tr><tr><td>BF.MEXISTS</td><td>同时检查多个元素是否可能存在于 key 指定的 Bloom 中</td><td>BF.MEXISTS {key} {item} [item…]</td></tr><tr><td>BF.SCANDUMP</td><td>对 Bloom 进行增量持久化操作</td><td>BF.SCANDUMP {key} {iter}</td></tr><tr><td>BF.LOADCHUNK</td><td>加载 SCANDUMP 持久化的 Bloom 数据</td><td>BF.LOADCHUNK {key} {iter} {data}</td></tr><tr><td>BF.INFO</td><td>查询 key 指定的 Bloom 的信息</td><td>BF.INFO {key}</td></tr><tr><td>BF.DEBUG</td><td>查看 BloomFilter 的内部详细信息（如每层的元素个数、错误率等）</td><td>BF.DEBUG {key}</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化一个 错误率为 0.1 容量为 5 不自动扩容的</span></span><br><span class="line">127.0.0.1:6379&gt; BF.RESERVE bf:1 0.1 5 NONSCALING</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 批量添加</span></span><br><span class="line">127.0.0.1:6379&gt; BF.MADD bf:1 1 2 3 4 5</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 1</span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">4) (<span class="built_in">integer</span>) 1</span><br><span class="line">5) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 溢出报错</span></span><br><span class="line">127.0.0.1:6379&gt; BF.MADD bf:1 6 7 </span><br><span class="line">1) (error) ERR non scaling filter is full</span><br><span class="line"><span class="comment"># 打印信息</span></span><br><span class="line">127.0.0.1:6379&gt; BF.INFO bf:1</span><br><span class="line"> 1) Capacity</span><br><span class="line"> 2) (<span class="built_in">integer</span>) 5</span><br><span class="line"> 3) Size</span><br><span class="line"> 4) (<span class="built_in">integer</span>) 160</span><br><span class="line"> 5) Number of filters</span><br><span class="line"> 6) (<span class="built_in">integer</span>) 1</span><br><span class="line"> 7) Number of items inserted</span><br><span class="line"> 8) (<span class="built_in">integer</span>) 5</span><br><span class="line"> 9) Expansion rate</span><br><span class="line">10) (nil)</span><br><span class="line"><span class="comment"># 是否存在某个字段</span></span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS bf:1 4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><div class="note danger"><div class="note default"><p>布隆过滤器是由一个<code>长度为m</code>比特的<code>位数组</code>与<code>k个哈希函数</code>组成的数据结构。比特数组均初始化为0，所有哈希函数都可以分别把输入数据尽量均匀地散列。</p></div><ol><li>当<strong>插入</strong>一个元素时，将其数据<code>通过k个哈希函</code>数转换成<code>k个哈希值</code>，这k个哈希值将作为比特数组的<strong>下标</strong>，并将数组中的对应下标的值<strong>置为1</strong>。</li><li>当<strong>查询</strong>一个元素时，同样会将其数据通过k个哈希函数转换成k个哈希值（数组下标），查询数组中对应下标的值，如果有一个下标的值为<strong>0表明该元素一定不在集合中</strong>，如果全部下标的值都为1，表明该元素有可能在集合中。<code>至于为什么有可能在集合中？</code> 因为有可能某个或者多个下标的值为 1 是受到其他元素的影响，这就是所谓的<strong>假阳性</strong>，下文会详细讲述。</li><li><strong>无法删除</strong>一个元素，为什么呢？因为你删除的元素的哈希值可能和集合中的某个元素的哈希值有相同的，一旦删除了这个元素会导致<code>其他的元素也被删除</code>。</li></ol><p>下图示出一个m=18, k=3的布隆过滤器示例。集合中的 x、y、z 三个元素通过 3 个不同的哈希函数散列到位数组中。当查询元素 w 时，因为有一个比特为 0，因此 w 不在该集合中。</p><img data-src='008.png' width=80% /></div><div class="note success"><p>假阳性相关更多参考： <a href="https://chenjiabing666.github.io/2020/04/26/%E5%A4%A7%E7%99%BD%E8%AF%9D%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%8C%E5%8F%88%E8%83%BD%E5%92%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E6%89%AF%E7%9A%AE%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81/" target="_blank" rel="noopener">大白话布隆过滤器，又能和面试官扯皮了！！！</a></p><p>简单来说，当位数组中1的个数越多，也就是存的数据越多，最后查询的时候返回存在的概率越大。</p></div><div class="note warning"><p>注意⚠️：仅此标记hash过后的位置，而不是存真实的数据。所以才节省空间。</p></div><img data-src='010.png' width=80% /><h4 id="空间占用估计"><a href="#空间占用估计" class="headerlink" title="空间占用估计"></a>空间占用估计</h4><p><a href="https://krisives.github.io/bloom-calculator/" target="_blank" rel="noopener">布隆计算器在线版</a>。</p><p>布隆过滤器有两个参数</p><ol><li>预计元素的数量 n</li><li>错误率 f。</li></ol><p>公式根据这两个输入得到两个输出，第一个输出是位数组的长度 l，也就是需要的存储空间大小 (bit)，第二个输出是 hash 函数的最佳数量 k。hash 函数的数量也会直接影响到错误率，最佳的数量会有最低的错误率。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k&#x3D;0.7*(l&#x2F;n)  # 约等于</span><br><span class="line">f&#x3D;0.6185^(l&#x2F;n)  # ^ 表示次方计算，也就是 math.pow</span><br></pre></td></tr></table></figure><p>从公式中可以看出</p><ol><li>位数组相对越长 (l/n)，错误率 f 越低，这个和直观上理解是一致的</li><li>位数组相对越长 (l/n)，hash 函数需要的最佳数量也越多，影响计算效率</li><li>当一个元素平均需要 1 个字节 (8bit) 的指纹空间时 (l/n=8)，错误率大约为 2%</li><li>错误率为 10%，一个元素需要的平均指纹空间为 4.792 个 bit，大约为 5bit</li><li>错误率为 1%，一个元素需要的平均指纹空间为 9.585 个 bit，大约为 10bit</li><li>错误率为 0.1%，一个元素需要的平均指纹空间为 14.377 个 bit，大约为 15bit</li></ol><div class="note success"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>错误率{error_rate}</td><td>元素数量{capacity}</td><td>占用内存（单位M）</td></tr><tr><td>0.001</td><td>10万</td><td>0.19</td></tr><tr><td>0.001</td><td>1百万</td><td>1.89</td></tr><tr><td>0.001</td><td>1千万</td><td>18.9</td></tr><tr><td>0.001</td><td>1亿</td><td>188.6</td></tr><tr><td>0.0001</td><td>10万</td><td>0.25</td></tr><tr><td>0.0001</td><td>1百万</td><td>2.5</td></tr><tr><td>0.0001</td><td>1千万</td><td>24.6</td></tr><tr><td>0.0001</td><td>1亿</td><td>245.7</td></tr><tr><td>0.00001</td><td>10万</td><td>0.3</td></tr><tr><td>0.00001</td><td>1百万</td><td>3.01</td></tr><tr><td>0.00001</td><td>1千万3</td><td>0.1</td></tr><tr><td>0.00001</td><td>1亿</td><td>302.9</td></tr></tbody></table><blockquote><p>占用内存（单位M） = bytes值/1024/1024。</p></blockquote><p>从上述对比分析可以看出，<strong>错误率{error_rate}越小，所需的存储空间越大； 初始化设置的元素数量{capacity}越大，所需的存储空间越大</strong>，当然如果实际远多于预设时，准确率就会降低。</p><p>在1千万数据场景下，error_rate为0.001、0.0001、0.00001实际占用内存都是<strong>30M以下</strong>，此时如果对准确性要求高，初始化时将错误率设置低一点是完全无伤大雅的。</p><p>RedisBloom官方默认的error_rate是 0.01，默认的capacity是 100</p></div><p>在线计算相互关系—<a href="https://hur.st/bloomfilter/?n=10000000&p=1.0E-7&m=&k=" target="_blank" rel="noopener">https://hur.st/bloomfilter/?n=10000000&amp;p=1.0E-7&amp;m=&amp;k=</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一百万</span></span><br><span class="line">n = 10000000</span><br><span class="line"><span class="comment"># 错误率</span></span><br><span class="line">p = 0.0000001 (1 <span class="keyword">in</span> 9994080)</span><br><span class="line"><span class="comment"># 内存大小</span></span><br><span class="line">m = 335477044 (39.99MiB)</span><br><span class="line"><span class="comment"># hash函数个数</span></span><br><span class="line">k = 23</span><br></pre></td></tr></table></figure><img data-src='013.png' width='50%'><p><strong>公式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n = ceil(m / (-k / <span class="built_in">log</span>(1 - exp(<span class="built_in">log</span>(p) / k))))</span><br><span class="line">p = pow(1 - exp(-k / (m / n)), k)</span><br><span class="line">m = ceil((n * <span class="built_in">log</span>(p)) / <span class="built_in">log</span>(1 / pow(2, <span class="built_in">log</span>(2))));</span><br><span class="line">k = round((m / n) * <span class="built_in">log</span>(2));</span><br></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><blockquote><p>主要特征：<code>某元素是否在集合中。</code></p></blockquote><ol><li>校验用户名是否已经存在，</li><li>推荐系统，如过滤已读新闻、抖音推荐；</li><li>爬虫过滤URL是否重复</li><li>缓存穿透，请求不存在的数据，redis中没有就每次从db中取</li><li>缓存击穿：最通俗的例子：新浪微博热搜，某个热点 5 分钟后 Redis 里面数据过期，然后该新闻不属于热搜，所以缓存失效</li></ol><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><div class="note success"><p>选择合适的工具🔧，才能事半功倍。</p><div class="note success"><ol><li>往容器插入数据；</li><li>判断是否存在</li></ol><p>注意事项：bigkey问题，如何设计key</p></div></div><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><div class="note danger"><p>试想一下：</p><ol><li>某人通过抓包拿到页面详情参数，然后jmeter帮你线上测试；</li><li>某人行为不存在鱼你的某个正常的集合里，频繁的帮你线上测试。</li></ol><blockquote><p>你应该会感谢他八辈祖宗吧！</p></blockquote><ol><li>平时是否只把redis当作kv缓存，甚至都么有考虑过缓存穿透？</li><li>一图胜千言，看下图，图片来源<a href="https://chenjiabing666.github.io/2020/04/26/%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BF%9D%E8%AF%81%E4%BD%A0%E8%83%BD%E5%92%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BA%92%E6%89%AF%EF%BC%81%EF%BC%81%EF%BC%81/" target="_blank" rel="noopener">看完这篇缓存穿透的文章，保证你能和面试官互扯！！！</a></li></ol></div><img data-src='011.png' width=80% /><img data-src='012.png' width=80% /><h3 id="个性推荐"><a href="#个性推荐" class="headerlink" title="个性推荐"></a>个性推荐</h3><p>参考<a href="https://zhuanlan.zhihu.com/p/89883126" target="_blank" rel="noopener">记一篇REDIS布隆过滤器的使用</a>。</p><div class="note danger"><p>原文分析</p><ol><li>业务需求：针对新用户推广告，老用户不推。</li><li>要求: 1. QPS至少要能撑住<code>30W</code>。2. 接口响应不能超过60ms</li><li>现状：数量级：6亿，设备多样性【需考虑】，总数*3=18亿。注：博主以设备纬度判断；</li><li>依据确认后，技术选型—REDIS 布隆过滤器<ol><li>阿里云单机redis QPS <code>10w</code>, 需要选择集群版, &amp; <strong>将key打到不同的节点上</strong></li><li>redis key 值的选择<ol><li>如何存放这么多数据</li><li>截取md5(设备ID)前4位相同的放一个key中.</li></ol></li></ol></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例:  deviceArray = [</span><br><span class="line">        <span class="string">"202cb962ac59075b964b07152d234b70"</span>,</span><br><span class="line">        <span class="string">"202cb35dac59075b964b07152d234b95"</span>,</span><br><span class="line">        <span class="string">"202cb35dac09875b964b07152d234b88"</span>,</span><br><span class="line">        ....</span><br><span class="line">    ]</span><br><span class="line">对应的写命令:</span><br><span class="line">     BF.ADD app:old_users:202c 202cb962ac59075b964b07152d234b70</span><br><span class="line">     BF.ADD app:old_users:202c 202cb35dac59075b964b07152d234b95</span><br><span class="line">     BF.ADD app:old_users:202c 202cb35dac09875b964b07152d234b88</span><br><span class="line">     ....</span><br></pre></td></tr></table></figure><div class="note success"><p>注意&amp;总结</p><ol><li>业务转化为技术选型</li><li>提前调研所租服务是否支持该技术</li><li>多看别人的实战</li></ol></div></div><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">KEYS[1]: bf.key</span></span><br><span class="line"><span class="comment">ARGV[1]: 模拟循环次数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">生成随机32位置 十六进制字符串</span></span><br><span class="line"><span class="comment">1. 采用模版替换</span></span><br><span class="line"><span class="comment">2. 十六进制的用法</span></span><br><span class="line"><span class="comment">3. 三目运算</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">random</span> = <span class="built_in">math</span>.<span class="built_in">random</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">uuid</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> template = <span class="string">"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">gsub</span>(</span><br><span class="line">        template,</span><br><span class="line">        <span class="string">"[xy]"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span><span class="params">(c)</span></span></span><br><span class="line">            <span class="comment">-- 三目运算: local z = a&gt;b and x or y</span></span><br><span class="line">            <span class="comment">-- 0x: 十六进制</span></span><br><span class="line">            <span class="comment">-- 0xf: 15</span></span><br><span class="line">            <span class="comment">-- 0xb: 11</span></span><br><span class="line">            <span class="keyword">local</span> v = (c == <span class="string">"x"</span>) <span class="keyword">and</span> <span class="built_in">random</span>(<span class="number">0</span>, <span class="number">0xf</span>) <span class="keyword">or</span> <span class="built_in">random</span>(<span class="number">8</span>, <span class="number">0xb</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%x"</span>, v)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>] <span class="comment">-- bf key</span></span><br><span class="line"><span class="keyword">local</span> totalNum = ARGV[<span class="number">1</span>] <span class="comment">-- 循环次数</span></span><br><span class="line"><span class="keyword">while</span> index &lt; totalNum <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> value, _ = uuid()</span><br><span class="line">    redis.call(<span class="string">"BF.ADD"</span>, key, value)</span><br><span class="line">    index = index + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">!是否存在</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="keyword">local</span> exists = redis.call(<span class="string">"BF.EXISTS"</span>, key, value)</span><br><span class="line"><span class="keyword">return</span> exists</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://segmentfault.com/a/1190000017305460" target="_blank" rel="noopener">Redis 缓存穿透问题及解决方案</a></li><li><a href="https://chenjiabing666.github.io/2020/04/26/%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BF%9D%E8%AF%81%E4%BD%A0%E8%83%BD%E5%92%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BA%92%E6%89%AF%EF%BC%81%EF%BC%81%EF%BC%81/" target="_blank" rel="noopener">看完这篇缓存穿透的文章，保证你能和面试官互扯！！！</a></li><li><a href="https://github.com/sx89/seckill-practice#%E6%8A%A2%E7%BA%A2%E5%8C%85%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">seckill-practice</a></li><li><a href="https://zhuanlan.zhihu.com/p/89883126" target="_blank" rel="noopener">记一篇 REDIS 布隆过滤器的使用</a></li><li><a href="https://blog.csdn.net/u012150168/article/details/105756264" target="_blank" rel="noopener">Mac 系统 Redis 安装布隆过滤器</a></li><li><a href="https://blog.csdn.net/Revivedsun/article/details/94992323" target="_blank" rel="noopener">Guava布隆过滤器(boomfilter)使用简介</a></li><li><a href="https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/" target="_blank" rel="noopener">Bloom Filters – Introduction and Implementation</a></li><li><a href="https://juejin.cn/post/6874792464285663240" target="_blank" rel="noopener">玩转Redis-Redis中布隆过滤器的使用及原理</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列八 抢红包</title>
      <link href="2020/12/08/redis_8/"/>
      <url>2020/12/08/redis_8/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/055.jpg" width=80% /><span class='geyan'>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</span><a id="more"></a><p>本文概述</p><ol><li>掌握红包的两种常见生成算法</li><li>掌握lua+redis 实现原子性抢红包</li><li>项目中还有mysql相关内容</li><li>了解jmeter的基本用法</li><li>遗留问题<ol><li>redis同步DB时机问题</li></ol></li></ol><h2 id="红包生成算法"><a href="#红包生成算法" class="headerlink" title="红包生成算法"></a>红包生成算法</h2><h3 id="普通随机方法"><a href="#普通随机方法" class="headerlink" title="普通随机方法"></a>普通随机方法</h3><p>该方法的原理是：每次都以 [最小值，剩余金额值] 之间进行随机取值。<br>假设红包金额为 88.88，红包数量为 8 个</p><ol><li>第一个人领取金额将从 [0.01, 88.88] 之间进行取值，假设取值为 20.20，那么剩余的金额为 68.68。</li><li>第二个领取金额将从 [0,01, 68.68] 之间进行取值，</li><li>以此类推…</li></ol><p>这里可以明显看出此方法的弊端，<strong>前面领取红包的金额区间更大</strong>，也就更容易获取更大的红包金额。下面看二倍均值法的原理。</p><h3 id="二倍均值法-—-公平版"><a href="#二倍均值法-—-公平版" class="headerlink" title="二倍均值法 — 公平版"></a>二倍均值法 — 公平版</h3><div class="note danger"><p>原理：每次以 <strong>[最小值，红包剩余金额 / 人数 * 2]</strong> 的区间进行取值。</p></div><p>假设100元红包发10个人，那么合理的做法应该是每个人领到10元的概率相同。<br>第一个人随机金额的范围为[0,100/10×2] ,也就是[0,20],这样<strong>平均</strong>可以领到10元，此时剩余金额为100-10=90。<br>第二个人随机金额的范围为[0,90/9×2] ,也就是[0,20],这样<strong>平均</strong>也可以领到10元，此时剩余金额为90-10=80。<br>第三个人随机金额的范围为[0,80/8×2] ,也就是[0,20],这样<strong>平均</strong>也可以领到10元。</p><p>该方法也不是完美的，上述是非常理想情况下红包的领取金额，同时每个人获取金额区间相对公平。但是<strong>当其中一个人在区间取值接近最小值或者最大值都会对后面的区间造成影响</strong>。当取到接近最小值时，后面领取红包金额区间将会变大；反之，则变小。这也是该方法的弊端。</p><h3 id="截线段法-—-拼手速版"><a href="#截线段法-—-拼手速版" class="headerlink" title="截线段法 — 拼手速版"></a>截线段法 — 拼手速版</h3><div class="note danger"><p><strong>假设</strong></p><ol><li>问题：十人分一段十米长绳子，先到先截取。</li><li>前提：人人理性、利己</li><li>分析：<ol><li>第一个人可以直接拿走，问题结束。这样太没意思了，就算拿5m;</li><li>第二个人最多可以拿5m;</li><li>一次类推，越往后，可选择越短，直到没了绳子。</li></ol></li></ol></div><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><blockquote><p>随机整数 【含最大值，含最小值】</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomInt</span>(<span class="params">min: number, max: number</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min);</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二倍均值法"><a href="#二倍均值法" class="headerlink" title="二倍均值法"></a>二倍均值法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 二倍均值法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * !核心：红包 = 随机([最小值，(红包剩余金额 / 人数 * 2)])</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>totalAmount 总金额 单位：分</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>redPacketNum 总人数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>小红包值【单位：分】</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fairMethod</span>(<span class="params">totalAmount: number, redPacketNum: number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 无效数据</span></span><br><span class="line">  <span class="keyword">if</span> (totalAmount &lt; <span class="number">0</span> &amp;&amp; redPacketNum &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="string">'金额错误'</span>;</span><br><span class="line">  <span class="keyword">let</span> curTotalAmount = totalAmount;</span><br><span class="line">  <span class="keyword">if</span> (curTotalAmount / redPacketNum &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="string">'最低每人0.1元'</span>;</span><br><span class="line">  <span class="comment">// 最小值 单位：分</span></span><br><span class="line">  <span class="keyword">const</span> min = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 剩余人数</span></span><br><span class="line">  <span class="keyword">let</span> _redPacketNum = redPacketNum;</span><br><span class="line">  <span class="comment">// 结果单位</span></span><br><span class="line">  <span class="keyword">const</span> reslut: number[] = [];</span><br><span class="line">  <span class="keyword">while</span> (_redPacketNum &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> max = (curTotalAmount / _redPacketNum) * <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 红包金额</span></span><br><span class="line">    <span class="keyword">const</span> amount = randomInt(min, max);</span><br><span class="line">    <span class="comment">// 金额-、人数-</span></span><br><span class="line">    curTotalAmount -= amount;</span><br><span class="line">    _redPacketNum--;</span><br><span class="line">    reslut.push(amount);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后金额为最后一个红包</span></span><br><span class="line">  reslut.push(curTotalAmount);</span><br><span class="line">  <span class="keyword">return</span> reslut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拼手速版本"><a href="#拼手速版本" class="headerlink" title="拼手速版本"></a>拼手速版本</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拼手速版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>totalAmount 总金额； 单位分</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>redPacketNum 红包个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">speedMethod</span>(<span class="params">totalAmount: number, redPacketNum: number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 无效数据</span></span><br><span class="line">  <span class="keyword">if</span> (totalAmount &lt; <span class="number">0</span> &amp;&amp; redPacketNum &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="string">'金额错误'</span>;</span><br><span class="line">  <span class="keyword">const</span> curTotalAmount = totalAmount;</span><br><span class="line">  <span class="keyword">if</span> (curTotalAmount / redPacketNum &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="string">'最低每人0.1元'</span>;</span><br><span class="line">  <span class="keyword">let</span> [ begin, end ] = [ <span class="number">0</span>, curTotalAmount ];</span><br><span class="line">  <span class="comment">// 剩余</span></span><br><span class="line">  <span class="keyword">let</span> _redPacketNum = redPacketNum;</span><br><span class="line">  <span class="comment">// 结果</span></span><br><span class="line">  <span class="keyword">const</span> result: number[] = [];</span><br><span class="line">  <span class="keyword">while</span> (_redPacketNum &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果红包发完了，就直接返回0</span></span><br><span class="line">    <span class="keyword">if</span> (begin === end) &#123;</span><br><span class="line">      result.push(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 起止间隔1，得特殊补充一下，否则会少1分，《原因在于math.randomInt(99, 100),总是返回99》</span></span><br><span class="line">      <span class="keyword">if</span> (end === begin + <span class="number">1</span>) &#123;</span><br><span class="line">        begin++;</span><br><span class="line">        result.push(<span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 起止位置中 挑个点</span></span><br><span class="line">        <span class="keyword">const</span> randomPoint = randomInt(begin, end);</span><br><span class="line">        <span class="comment">// console.log("begin", begin);</span></span><br><span class="line">        <span class="comment">// console.log("end", end);</span></span><br><span class="line">        <span class="comment">// console.log("randomPoint", randomPoint);</span></span><br><span class="line">        <span class="comment">// 亮点之间的距离作为 红包金额</span></span><br><span class="line">        <span class="keyword">const</span> amount = randomPoint - begin;</span><br><span class="line">        <span class="comment">// 更改起点</span></span><br><span class="line">        begin += amount;</span><br><span class="line">        result.push(amount);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _redPacketNum--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后一个兜底</span></span><br><span class="line">  result.push(end - begin);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// !结果</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">拼手速红包： [ 66, 8, 13, 0, 10, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">拼手速红包： [ 52, 2, 42, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">拼手速红包： [ 50, 0, 45, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">拼手速红包： [ 90, 2, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">拼手速红包： [ 61, 2, 25, 6, 0, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] -- 100 - 20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">公平红包  ： [ 6, 7, 2, 7, 4, 1, 7, 1, 6, 1, 9, 4, 10, 6, 8, 3, 8, 5, 1, 4 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">公平红包  ： [ 7, 1, 1, 1, 6, 6, 11, 8, 6, 4, 5, 5, 2, 9, 1, 1, 1, 9, 8, 8 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">公平红包  ： [ 6, 5, 8, 5, 6, 7, 7, 3, 7, 6, 4, 7, 1, 1, 1, 5, 1, 11, 4, 5 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">公平红包  ： [ 4, 7, 4, 8, 7, 5, 4, 8, 8, 1, 7, 2, 2, 6, 3, 4, 3, 3, 2, 12 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">公平红包  ： [ 9, 3, 2, 6, 3, 8, 6, 5, 2, 4, 10, 7, 5, 1, 6, 5, 8, 1, 7, 2 ] -- 100 - 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="redis-lua-抢红包实现"><a href="#redis-lua-抢红包实现" class="headerlink" title="redis+lua 抢红包实现"></a>redis+lua 抢红包实现</h2><p>有了就红包算法，结合 redis+lua, 就可以实现一个抢红包功能了</p><h3 id="整体步骤"><a href="#整体步骤" class="headerlink" title="整体步骤"></a>整体步骤</h3><div class="note danger"><div class="note success"><p>采用<code>事先生成小红包</code>的方式。</p></div><ol><li>生成红包数据<ol><li>插入红包表 <code>DB</code></li><li>生成红包算法</li><li>生成红包&amp;用户表 <code>DB</code></li><li>插入待消费队列 <code>redis</code></li></ol></li><li>redis相关<ol><li>待消费队列: 生成红包时插入redis</li><li>集合 set: 存储抢红包的用户ID；</li><li>消费队列: 从<code>待消费队列</code>pop<code>消费队列</code></li></ol></li><li>最后同步到：<strong>红包&amp;用户表</strong></li></ol></div><h3 id="代码部分-1"><a href="#代码部分-1" class="headerlink" title="代码部分"></a>代码部分</h3><div class="note info"><p>支持三种类型的红包生成方式</p><ol><li>公平版</li><li>手速版</li><li>固定版</li></ol><div class="note success"><p>源码: <a href="https://github.com/simuty/Integration/blob/main/Redis/" target="_blank" rel="noopener">https://github.com/simuty/Integration/blob/main/Redis/</a></p></div></div><h4 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h4><blockquote><p>写代码离不开debug, lua也不例外，不会的左转上篇文章有调试的教程。</p></blockquote><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 函数：尝试获得红包，如果成功，则返回json字符串，如果不成功，则返回空</span></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="comment">-- 参数：</span></span><br><span class="line"><span class="comment">--- KEYS[1-3] 未消费队列名、已消费的队列名、hset key &lt;集合: 去重用户&gt;</span></span><br><span class="line"><span class="comment">--- ARGV[1] 用户ID</span></span><br><span class="line"><span class="comment">-- 返回值：nil 或者 json字符串</span></span><br><span class="line"><span class="comment">---- &#123;userId: xxx, packetId: xxx, amount: 11&#125; : 用户ID：userId，红包ID：packetId，红包金额：money</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户是否抢过</span></span><br><span class="line"><span class="keyword">local</span> judge = redis.call(<span class="string">"SISMEMBER"</span>, KEYS[<span class="number">3</span>], ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> judge ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span> <span class="comment">-- 已经抢过了</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">local</span> item = redis.call(<span class="string">"RPOP"</span>, KEYS[<span class="number">1</span>]) <span class="comment">-- 先取出一个小红包</span></span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> _item = cjson.decode(item)</span><br><span class="line">        _item[<span class="string">"userId"</span>] = ARGV[<span class="number">1</span>] <span class="comment">-- 加入用户ID信息</span></span><br><span class="line">        <span class="keyword">local</span> newItem = cjson.encode(_item)</span><br><span class="line">        redis.call(<span class="string">"SADD"</span>, KEYS[<span class="number">3</span>], ARGV[<span class="number">1</span>]) <span class="comment">-- 把用户ID放到去重的set里</span></span><br><span class="line">        redis.call(<span class="string">"LPUSH"</span>, KEYS[<span class="number">2</span>], newItem) <span class="comment">-- 把红包放到已消费队列里</span></span><br><span class="line">        <span class="keyword">return</span> newItem</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span> <span class="comment">-- 红包队列已经为空</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><h4 id="抢红包"><a href="#抢红包" class="headerlink" title="抢红包"></a>抢红包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis+lua抢红包</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>packetId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>userId </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">async</span> getRedPacket_redis_lua(packetId: number, <span class="attr">userId</span>: number) &#123;</span><br><span class="line">    <span class="keyword">const</span> redisDefalueKey = <span class="string">`<span class="subst">$&#123;RP_DEFALUT_LIST&#125;</span><span class="subst">$&#123;packetId&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> redisConsumeKey = <span class="string">`<span class="subst">$&#123;RP_CONSUME_LIST&#125;</span><span class="subst">$&#123;packetId&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> redisSetKey = <span class="string">`<span class="subst">$&#123;RP_USER_SET&#125;</span><span class="subst">$&#123;packetId&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// lua</span></span><br><span class="line">    <span class="keyword">const</span> filePath = path.join(__dirname, <span class="string">'../bin/redpacket.lua'</span>);</span><br><span class="line">    <span class="keyword">const</span> luaScript = fs.readFileSync(filePath, <span class="string">"utf8"</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.app.redis.eval(luaScript, <span class="number">3</span>,  redisDefalueKey, redisConsumeKey, redisSetKey, userId);</span><br><span class="line">    <span class="keyword">if</span>(result === <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经抢过了～'</span>, userId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'红包空了'</span>, userId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> result === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'抢红包成功'</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="redis-数据结构"><a href="#redis-数据结构" class="headerlink" title="redis 数据结构"></a>redis 数据结构</h5><img data-src="004.png" width=80% /><img data-src="005.png" width=80% /><img data-src="006.png" width=80% /><h5 id="jmeter-测试"><a href="#jmeter-测试" class="headerlink" title="jmeter 测试"></a>jmeter 测试</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果</span></span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:71,<span class="string">"userId"</span>:<span class="string">"16"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:17&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:72,<span class="string">"userId"</span>:<span class="string">"5"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:14&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:73,<span class="string">"userId"</span>:<span class="string">"18"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:11&#125;</span><br><span class="line">已经抢过了～ 18</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:74,<span class="string">"userId"</span>:<span class="string">"19"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:16&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:75,<span class="string">"userId"</span>:<span class="string">"13"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:10&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:76,<span class="string">"userId"</span>:<span class="string">"1"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:1&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:77,<span class="string">"userId"</span>:<span class="string">"4"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:15&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:78,<span class="string">"userId"</span>:<span class="string">"14"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:2&#125;</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:79,<span class="string">"userId"</span>:<span class="string">"3"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:6&#125;</span><br><span class="line">已经抢过了～ 13</span><br><span class="line">已经抢过了～ 13</span><br><span class="line">已经抢过了～ 19</span><br><span class="line">抢红包成功 &#123;<span class="string">"id"</span>:80,<span class="string">"userId"</span>:<span class="string">"8"</span>,<span class="string">"rpId"</span>:9,<span class="string">"amount"</span>:8&#125;</span><br><span class="line">红包空了 15</span><br><span class="line">已经抢过了～ 8</span><br><span class="line">已经抢过了～ 1</span><br><span class="line">已经抢过了～ 19</span><br><span class="line">已经抢过了～ 4</span><br><span class="line">红包空了 6</span><br><span class="line">红包空了 7</span><br></pre></td></tr></table></figure><p><strong>jmeter的强大功能后续再摸索</strong></p><img data-src="007.png" width=80% /><img data-src="008.png" width=80% /><img data-src="009.png" width=80% /><img data-src="0010.png" width=80% /><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>因为后续还会往这个项目中加其他redis业务，采用 <strong>egg+ts</strong></p><p><a href="https://github.com/simuty/Integration/blob/main/Redis/" target="_blank" rel="noopener">https://github.com/simuty/Integration/blob/main/Redis/</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.aliyun.com/article/6104" target="_blank" rel="noopener">并发 - 利用redis + lua解决抢红包高并发的问题</a><br><a href="http://www.mamicode.com/info-detail-2167066.html" target="_blank" rel="noopener">[高并发]抢红包设计（使用redis）</a><br><a href="https://blog.csdn.net/zhanglu_1024/article/details/96288486?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control" target="_blank" rel="noopener">抢红包算法–四种抢红包算法对比</a><br><a href="https://blog.csdn.net/hengyunabc/article/details/19177877" target="_blank" rel="noopener">抢红包的红包生成算法</a><br><a href="https://blog.csdn.net/raoxiaoya/article/details/92708736?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">微信红包生成算法</a><br><a href="https://blog.csdn.net/weixin_43883917/article/details/108586841?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">抢红包算法（公平版和手速版）</a><br><a href="https://www.cnblogs.com/dreign/p/4610766.html" target="_blank" rel="noopener">红包分配算法</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列七 调试Lua</title>
      <link href="2020/12/07/redis_7/"/>
      <url>2020/12/07/redis_7/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/053.jpg" width=80% /><span class='geyan'>劳而不伐，有功而不德，厚之至也。（《周易·系辞上》）</span><a id="more"></a><h1 id="调试redis-lua"><a href="#调试redis-lua" class="headerlink" title="调试redis+lua"></a>调试redis+lua</h1><p>学了lua的基本语法，了解了redis+lua的配套用法，但是却<strong>不知道怎么断点调试</strong>。学就学全面点， 官网中有dubug相关说明。地址：<a href="https://www.geek-book.com/src/docs/redis/redis/redis.io/topics/ldb.html" target="_blank" rel="noopener">Redis Lua scripts debugger</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- script.lua</span></span><br><span class="line"><span class="keyword">local</span> ping = redis.call(<span class="string">'ping'</span>)</span><br><span class="line"><span class="keyword">return</span> ping</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行脚本 --ldb --eval</span></span><br><span class="line">➜  7Debug git:(main) ✗ redis-cli --ldb --<span class="built_in">eval</span> /Users/mw/Desktop/Github/Integration/Redis/7Debug/script.lua</span><br><span class="line">Lua debugging session started, please use:</span><br><span class="line">quit    -- End the session.</span><br><span class="line">restart -- Restart the script <span class="keyword">in</span> debug mode again.</span><br><span class="line"><span class="built_in">help</span>    -- Show Lua script debugging commands.</span><br><span class="line"></span><br><span class="line">* Stopped at 1, stop reason = step over</span><br><span class="line"><span class="comment"># 调试位置</span></span><br><span class="line">-&gt; 1   <span class="built_in">local</span> ping = redis.call(<span class="string">'ping'</span>)</span><br><span class="line"><span class="comment"># next</span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line">&lt;redis&gt; ping</span><br><span class="line">&lt;reply&gt; <span class="string">"+PONG"</span></span><br><span class="line">* Stopped at 2, stop reason = step over</span><br><span class="line"><span class="comment"># 调试位置</span></span><br><span class="line">-&gt; 2   <span class="built_in">return</span> ping</span><br><span class="line"><span class="comment"># 打印lua变量</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> ping</span><br><span class="line">&lt;value&gt; &#123;[<span class="string">"ok"</span>]=<span class="string">"PONG"</span>&#125;</span><br><span class="line"><span class="comment"># next</span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line"><span class="comment"># lua返回的结果</span></span><br><span class="line">PONG</span><br><span class="line"><span class="comment"># 调试结束</span></span><br><span class="line">(Lua debugging session ended -- dataset changes rolled back)</span><br><span class="line"><span class="comment"># 退出redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">➜  7Debug git:(main) ✗</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- script1.lua</span></span><br><span class="line"><span class="comment">-- 测试接受参数</span></span><br><span class="line"><span class="keyword">local</span> src = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> dst = KEYS[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="KEYS-amp-ARGV"><a href="#KEYS-amp-ARGV" class="headerlink" title="KEYS &amp; ARGV"></a>KEYS &amp; ARGV</h3><p>传递参数时&lt;KEYS &amp; ARGV&gt;的注意事项</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 传参数: list_a list_b 10</span></span><br><span class="line">➜  7Debug git:(main) ✗ redis-cli --ldb --<span class="built_in">eval</span> /Users/mw/Desktop/Github/Integration/Redis/7Debug/script1.lua list_a list_b 10</span><br><span class="line">Lua debugging session started, please use:</span><br><span class="line">quit    -- End the session.</span><br><span class="line">restart -- Restart the script <span class="keyword">in</span> debug mode again.</span><br><span class="line"><span class="built_in">help</span>    -- Show Lua script debugging commands.</span><br><span class="line"></span><br><span class="line">* Stopped at 1, stop reason = step over</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span></span><br><span class="line">No <span class="built_in">local</span> variables <span class="keyword">in</span> the current context.</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 2, stop reason = step over</span><br><span class="line">-&gt; 2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 3, stop reason = step over</span><br><span class="line">-&gt; 3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line"><span class="comment"># 打印 KEYS 全部都是keys</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> KEYS</span><br><span class="line">&lt;value&gt; &#123;<span class="string">"list_a"</span>; <span class="string">"list_b"</span>; <span class="string">"10"</span>&#125;</span><br><span class="line"><span class="comment"># 打印 ARGV</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> ARGV</span><br><span class="line">&lt;value&gt; &#123;&#125;</span><br><span class="line"><span class="comment"># 结束</span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">(Lua debugging session ended -- dataset changes rolled back)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><div class="note danger"><p><strong>参数 中 KEYS &amp; ARGV 区分: 逗号隔开</strong></p><ol><li>参数<code>list_b,</code>, 逗号与key之间没有空格，则认为依旧是KEYS；</li></ol></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意 </span></span><br><span class="line">➜  7Debug git:(main) ✗ redis-cli --ldb --<span class="built_in">eval</span> /Users/mw/Desktop/Github/Integration/Redis/7Debug/script1.lua list_a list_b , 10</span><br><span class="line">Lua debugging session started, please use:</span><br><span class="line">quit    -- End the session.</span><br><span class="line">restart -- Restart the script <span class="keyword">in</span> debug mode again.</span><br><span class="line"><span class="built_in">help</span>    -- Show Lua script debugging commands.</span><br><span class="line"></span><br><span class="line">* Stopped at 1, stop reason = step over</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line"><span class="comment"># KEYS</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> KEYS</span><br><span class="line">&lt;value&gt; &#123;<span class="string">"list_a"</span>; <span class="string">"list_b"</span>&#125;</span><br><span class="line"><span class="comment"># ARGV</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> ARGV</span><br><span class="line">&lt;value&gt; &#123;<span class="string">"10"</span>&#125;</span><br><span class="line">lua debugger&gt; </span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 2, stop reason = step over</span><br><span class="line">-&gt; 2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 3, stop reason = step over</span><br><span class="line">-&gt; 3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 4, stop reason = step over</span><br><span class="line">-&gt; 4   <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span></span><br><span class="line">&lt;value&gt; src = <span class="string">"list_a"</span></span><br><span class="line">&lt;value&gt; dst = <span class="string">"list_b"</span></span><br><span class="line">&lt;value&gt; count = 10</span><br><span class="line">lua debugger&gt; n</span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">(Lua debugging session ended -- dataset changes rolled back)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><blockquote><p>将list_a中的一个元素push到list_b</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  7Debug git:(main) ✗ redis-cli --ldb --<span class="built_in">eval</span> /Users/mw/Desktop/Github/Integration/Redis/7Debug/script1.lua list_a list_b , 10</span><br><span class="line">Lua debugging session started, please use:</span><br><span class="line">quit    -- End the session.</span><br><span class="line">restart -- Restart the script <span class="keyword">in</span> debug mode again.</span><br><span class="line"><span class="built_in">help</span>    -- Show Lua script debugging commands.</span><br><span class="line"></span><br><span class="line">* Stopped at 1, stop reason = step over</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line"><span class="comment"># 打印keys</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> KEYS</span><br><span class="line">&lt;value&gt; &#123;<span class="string">"list_a"</span>; <span class="string">"list_b"</span>&#125;</span><br><span class="line"><span class="comment"># 打印参数</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span> ARGV</span><br><span class="line">&lt;value&gt; &#123;<span class="string">"10"</span>&#125;</span><br><span class="line"><span class="comment"># 初始化队列 list_a、list_b</span></span><br><span class="line">lua debugger&gt; r lpush list_a 1 2 3 4 </span><br><span class="line">&lt;redis&gt; lpush list_a 1 2 3 4</span><br><span class="line">&lt;reply&gt; 4</span><br><span class="line">lua debugger&gt; r lpush list_b a b c d</span><br><span class="line">&lt;redis&gt; lpush list_b a b c d</span><br><span class="line">&lt;reply&gt; 4</span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 2, stop reason = step over</span><br><span class="line">-&gt; 2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 3, stop reason = step over</span><br><span class="line">-&gt; 3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">lua debugger&gt; n</span><br><span class="line">* Stopped at 5, stop reason = step over</span><br><span class="line">-&gt; 5   <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line"><span class="comment"># next 执行pop</span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line">&lt;redis&gt; rpop list_a</span><br><span class="line">&lt;reply&gt; <span class="string">"1"</span></span><br><span class="line">* Stopped at 6, stop reason = step over</span><br><span class="line">-&gt; 6   redis.call(<span class="string">'lpush'</span>, dst, item)</span><br><span class="line"><span class="comment"># next 执行push</span></span><br><span class="line">lua debugger&gt; n</span><br><span class="line">&lt;redis&gt; lpush list_b 1</span><br><span class="line">&lt;reply&gt; 5</span><br><span class="line">* Stopped at 7, stop reason = step over</span><br><span class="line">-&gt; 7   <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># r: redis; 获取list元素</span></span><br><span class="line">lua debugger&gt; r lrange list_a 0 -1</span><br><span class="line">&lt;redis&gt; lrange list_a 0 -1</span><br><span class="line">&lt;reply&gt; [<span class="string">"4"</span>,<span class="string">"3"</span>,<span class="string">"2"</span>]</span><br><span class="line"><span class="comment"># r: redis; 获取list元素</span></span><br><span class="line">lua debugger&gt; r lrange list_b 0 -1</span><br><span class="line">&lt;redis&gt; lrange list_b 0 -1</span><br><span class="line"><span class="comment"># 执行成功</span></span><br><span class="line">&lt;reply&gt; [<span class="string">"1"</span>,<span class="string">"d"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>,<span class="string">"a"</span>]</span><br><span class="line"><span class="comment"># 重启，将所有执行回滚</span></span><br><span class="line">lua debugger&gt; restart</span><br><span class="line"></span><br><span class="line">Lua debugging session started, please use:</span><br><span class="line">quit    -- End the session.</span><br><span class="line">restart -- Restart the script <span class="keyword">in</span> debug mode again.</span><br><span class="line"><span class="built_in">help</span>    -- Show Lua script debugging commands.</span><br><span class="line"></span><br><span class="line">* Stopped at 1, stop reason = step over</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line"><span class="comment"># 回滚至无数据</span></span><br><span class="line">lua debugger&gt; r lrange list_b 0 -1</span><br><span class="line">&lt;redis&gt; lrange list_b 0 -1</span><br><span class="line">&lt;reply&gt; []</span><br><span class="line">lua debugger&gt;</span><br></pre></td></tr></table></figure><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><div class="note danger">断点操作</div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入redis 准备数据</span></span><br><span class="line">➜  7Debug git:(main) ✗ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; lpush list_a 1 2 3 4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lpush list_b a b c d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; llen list_a</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; llen list_b</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取全部文件</span></span><br><span class="line">lua debugger&gt; w</span><br><span class="line">   1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line">   2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">   3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">   4   </span><br><span class="line">-&gt; 5   <span class="keyword">while</span> count &lt; 10 <span class="keyword">do</span></span><br><span class="line">   6       <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">   8       redis.call(<span class="string">'lpush'</span>, dst, item)</span><br><span class="line">   9       count = count -1</span><br><span class="line">   10  end</span><br><span class="line">   11  </span><br><span class="line">   12  <span class="built_in">return</span> redis.call(<span class="string">'llen'</span>, dst);</span><br><span class="line"><span class="comment"># 显示第7行 【l:list】</span></span><br><span class="line">lua debugger&gt; l 7</span><br><span class="line">   2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">   3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">   4   </span><br><span class="line">-&gt; 5   <span class="keyword">while</span> count &lt; 10 <span class="keyword">do</span></span><br><span class="line">   6       <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">   8       redis.call(<span class="string">'lpush'</span>, dst, item)</span><br><span class="line">   9       count = count -1</span><br><span class="line">   10  end</span><br><span class="line">   11  </span><br><span class="line">   12  <span class="built_in">return</span> redis.call(<span class="string">'llen'</span>, dst);</span><br><span class="line"><span class="comment"># 显示第7行前后一行 【l:list】</span></span><br><span class="line">lua debugger&gt; l 7 1</span><br><span class="line">   6       <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">   8       redis.call(<span class="string">'lpush'</span>, dst, item)</span><br><span class="line">lua debugger&gt; b 6</span><br><span class="line">-&gt; 5   <span class="keyword">while</span> count &lt; 10 <span class="keyword">do</span></span><br><span class="line">  <span class="comment">#6       local item = redis.call('rpop', src)</span></span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line"><span class="comment"># continue 继续，直到断点执行</span></span><br><span class="line">lua debugger&gt; c</span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line">(Lua debugging session ended -- dataset changes rolled back)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="逐步断点"><a href="#逐步断点" class="headerlink" title="逐步断点"></a>逐步断点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lua debugger&gt; w</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line">   2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">   3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">   4   </span><br><span class="line">   5   <span class="keyword">while</span> count &gt; 0 <span class="keyword">do</span></span><br><span class="line">   6       <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">   8       redis.call(<span class="string">'lpush'</span>, dst, item)</span><br><span class="line">   9       count = count -1</span><br><span class="line">   10  end</span><br><span class="line">   11  </span><br><span class="line">   12  <span class="built_in">return</span> redis.call(<span class="string">'llen'</span>, dst);</span><br><span class="line">lua debugger&gt; b 8</span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">  <span class="comment">#8       redis.call('lpush', dst, item)</span></span><br><span class="line">   9       count = count -1</span><br><span class="line"><span class="comment"># 验证断点位置</span></span><br><span class="line">lua debugger&gt; w</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line">   2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">   3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">   4   </span><br><span class="line">   5   <span class="keyword">while</span> count &gt; 0 <span class="keyword">do</span></span><br><span class="line">   6       <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line">   7       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">  <span class="comment">#8       redis.call('lpush', dst, item)</span></span><br><span class="line">   9       count = count -1</span><br><span class="line">   10  end</span><br><span class="line">   11  </span><br><span class="line">   12  <span class="built_in">return</span> redis.call(<span class="string">'llen'</span>, dst);</span><br><span class="line"><span class="comment"># 等同与next</span></span><br><span class="line">lua debugger&gt; c</span><br><span class="line">* Stopped at 8, stop reason = <span class="built_in">break</span> point</span><br><span class="line">-&gt;<span class="comment">#8       redis.call('lpush', dst, item)</span></span><br><span class="line"></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span></span><br><span class="line">&lt;value&gt; src = <span class="string">"list_a"</span></span><br><span class="line">&lt;value&gt; dst = <span class="string">"list_b"</span></span><br><span class="line">&lt;value&gt; count = 10</span><br><span class="line">&lt;value&gt; item = <span class="string">"1"</span></span><br><span class="line">lua debugger&gt; c</span><br><span class="line">* Stopped at 8, stop reason = <span class="built_in">break</span> point</span><br><span class="line">-&gt;<span class="comment">#8       redis.call('lpush', dst, item)</span></span><br><span class="line">lua debugger&gt; c</span><br><span class="line">* Stopped at 8, stop reason = <span class="built_in">break</span> point</span><br><span class="line">-&gt;<span class="comment">#8       redis.call('lpush', dst, item)</span></span><br><span class="line">lua debugger&gt; c</span><br><span class="line">* Stopped at 8, stop reason = <span class="built_in">break</span> point</span><br><span class="line">-&gt;<span class="comment">#8       redis.call('lpush', dst, item)</span></span><br><span class="line"><span class="comment"># 打印日志</span></span><br><span class="line">lua debugger&gt; <span class="built_in">print</span></span><br><span class="line">&lt;value&gt; src = <span class="string">"list_a"</span></span><br><span class="line">&lt;value&gt; dst = <span class="string">"list_b"</span></span><br><span class="line">&lt;value&gt; count = 7</span><br><span class="line">&lt;value&gt; item = <span class="string">"4"</span></span><br></pre></td></tr></table></figure><h4 id="redis-debug-一步到位"><a href="#redis-debug-一步到位" class="headerlink" title="redis.debug 一步到位"></a>redis.debug 一步到位</h4><p>此处有加新代码：<code>redis.debug(&#39;dubug value:&#39;, item)</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lua debugger&gt; w</span><br><span class="line">-&gt; 1   <span class="built_in">local</span> src = KEYS[1]</span><br><span class="line">   2   <span class="built_in">local</span> dst = KEYS[2]</span><br><span class="line">   3   <span class="built_in">local</span> count = tonumber(ARGV[1])</span><br><span class="line">   4   </span><br><span class="line">   5   <span class="keyword">while</span> count &gt; 0 <span class="keyword">do</span></span><br><span class="line">   6       <span class="built_in">local</span> item = redis.call(<span class="string">'rpop'</span>, src)</span><br><span class="line"><span class="comment"># 采用redis.debug</span></span><br><span class="line">   7       redis.debug(<span class="string">'dubug value:'</span>, item)</span><br><span class="line">   8       <span class="keyword">if</span> item == <span class="literal">false</span> <span class="keyword">then</span> <span class="built_in">break</span> end</span><br><span class="line">   9       redis.call(<span class="string">'lpush'</span>, dst, item)</span><br><span class="line">   10      count = count -1</span><br><span class="line">   11  end</span><br><span class="line">   12  </span><br><span class="line">   13  <span class="built_in">return</span> redis.call(<span class="string">'llen'</span>, dst);</span><br><span class="line"><span class="comment"># 继续，打印redis.debug处的日志</span></span><br><span class="line">lua debugger&gt; c</span><br><span class="line">&lt;debug&gt; line 7: <span class="string">"dubug value:"</span>, <span class="string">"1"</span></span><br><span class="line">&lt;debug&gt; line 7: <span class="string">"dubug value:"</span>, <span class="string">"2"</span></span><br><span class="line">&lt;debug&gt; line 7: <span class="string">"dubug value:"</span>, <span class="string">"3"</span></span><br><span class="line">&lt;debug&gt; line 7: <span class="string">"dubug value:"</span>, <span class="string">"4"</span></span><br><span class="line">&lt;debug&gt; line 7: <span class="string">"dubug value:"</span>, <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">(Lua debugging session ended -- dataset changes rolled back)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列六 Lua</title>
      <link href="2020/11/26/redis_6/"/>
      <url>2020/11/26/redis_6/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/052.jpg" width=80% /><span class='geyan'>纸上得来终觉浅，绝知此事要躬行——出自《冬夜读书示子聿》</span><a id="more"></a><blockquote><p>本文目标</p></blockquote><ol><li>学习lua基本语法</li><li>能够采用redis+lua</li></ol><h2 id="lua-基本语法"><a href="#lua-基本语法" class="headerlink" title="lua 基本语法"></a>lua 基本语法</h2><p>Lua 是一种轻量小巧的脚本语言，用标准<strong>C语言编写并以源代码形式开放</strong>， 其设计目的是为了<strong>嵌入应用程序</strong>中，从而为应用程序提供灵活的扩展和定制功能。</p><p>Lua 是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的，该小组成员有：Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo。</p><h3 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h3><p>其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><h3 id="Lua-特性"><a href="#Lua-特性" class="headerlink" title="Lua 特性"></a>Lua 特性</h3><ol><li>轻量级: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。</li><li>可扩展: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。</li><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 行注释</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">块注释</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="comment">--全局</span></span><br><span class="line">num = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变量</span></span><br><span class="line">a1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">local</span> a2 = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line">    a3 = <span class="number">7</span></span><br><span class="line">    <span class="keyword">local</span> a4 = <span class="number">8</span> <span class="comment">--局部变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1.----变量分为：全局变量和局部变量"</span>)</span><br><span class="line"><span class="built_in">print</span>(a1, a2, a3, a4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"2.----循环与控制语句"</span>)</span><br><span class="line">b1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (b1 &lt; num) <span class="keyword">do</span></span><br><span class="line">    b1 = b1 + <span class="number">1</span> <span class="comment">-- 没有 【+= ++】 语法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"while循环"</span>, b1)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    数值 for 循环</span></span><br><span class="line"><span class="comment">for var=exp1, exp2, exp3 do end</span></span><br><span class="line"><span class="comment">var 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次"执行体"。exp3 是可选的，如果不指定，默认为 1。</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"for数值-循环"</span>, i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    泛型循环</span></span><br><span class="line"><span class="comment">    i 是数组索引值，v 是对应索引的数组元素值。ipairs 是 Lua 提供的一个迭代器函数，用来迭代数组。</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line">cArray = &#123;</span><br><span class="line">    <span class="string">"v1"</span>,</span><br><span class="line">    <span class="string">"v2"</span>,</span><br><span class="line">    <span class="string">"v3"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(cArray) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"for泛型-index: "</span>, i, <span class="string">"value: "</span>, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">repeat...until循环</span></span><br><span class="line"><span class="comment">repeat...until 循环和 C 语言里面的 do...while() 作用是一样的。</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line">d1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    d1 = d1 + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"repeat-"</span>, d1)</span><br><span class="line"><span class="keyword">until</span> (d1 &gt; num)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    if 语句</span></span><br><span class="line"><span class="comment">    Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</span></span><br><span class="line"><span class="comment">    !boolean 类型只有两个可选值：true（真） 和 false（假），Lua 把 false 和 nil 看作是 false，其他的都为 true，数字 0 也是 true:</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">false</span> <span class="keyword">or</span> <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"至少有一个是 true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"false 和 nil 都为 false"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数字 0 是 true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数字 0 为 false"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">运算符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. +加、 -减、 *乘、 /除、 %取余、 ^乘幂、 -负数</span></span><br><span class="line"><span class="comment">2. ==等于、【～=】不等于、&gt;、&lt;、&gt;=、&lt;=</span></span><br><span class="line"><span class="comment">3. and、or、【not】 </span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---------分割线---------"</span>)</span><br><span class="line"></span><br><span class="line">e1 = <span class="literal">true</span></span><br><span class="line">e2 = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (e1 <span class="keyword">and</span> e2) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"e1 and e2 - 条件为 true"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (e1 <span class="keyword">or</span> e2) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"e1 or e2 - 条件为 true"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---------分割线---------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改 a 和 b 的值</span></span><br><span class="line">e1 = <span class="literal">false</span></span><br><span class="line">e2 = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (e1 <span class="keyword">and</span> e2) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"e1 and e2 - 条件为 true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"e1 and e2 - 条件为 false"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> (e1 <span class="keyword">and</span> e2)) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"not( e1 and e2) - 条件为 true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"not( e1 and e2) - 条件为 false"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---------函数---------"</span>)</span><br><span class="line">myprint = <span class="function"><span class="keyword">function</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"函数 ##"</span>, params, <span class="string">"##"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(num1, num2, functionPrint)</span></span></span><br><span class="line">    sum = num1 + num2</span><br><span class="line">    functionPrint(sum)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">3</span>, myprint)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maximun</span><span class="params">(array)</span></span></span><br><span class="line">    <span class="keyword">local</span> index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> value = array[index]</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> v &gt; value <span class="keyword">then</span></span><br><span class="line">            index = i</span><br><span class="line">            value = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> index, value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- !Lua的下标不是从0开始的，是从1开始的。</span></span><br><span class="line"><span class="built_in">print</span>(maximun(&#123;<span class="number">800</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">102</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可变参数 三点 ... 表示函数有可变的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span> </span><br><span class="line">        sum = sum + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">-- select("#",...) 来获取可变参数的数量</span></span><br><span class="line">    <span class="comment">-- .. 字符串拼接</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"总共传入 "</span> .. <span class="built_in">select</span>(<span class="string">"#"</span>,...) .. <span class="string">" 个数"</span>)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">-- 斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">2</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-2</span>) + fib(n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    闭包</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newCounter</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        i= i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">newCounter = newCounter()</span><br><span class="line">newCounter()</span><br><span class="line">newCounter()</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    函数返回值，多个</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span><span class="params">(id)</span></span></span><br><span class="line">    <span class="built_in">print</span>(id)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"haoel"</span>, <span class="number">37</span>, <span class="string">"haoel@hotmail.com"</span>, <span class="string">"https://coolshell.cn"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 似乎必须直接解构！！！</span></span><br><span class="line">name, age, email, website, bGay = getUserInfo()</span><br><span class="line">userInfo = getUserInfo()</span><br><span class="line"><span class="comment">-- haoel   37      haoel@hotmail.com       https://coolshell.cn    nil</span></span><br><span class="line"><span class="built_in">print</span>(name, age, email, website, bGay)</span><br><span class="line"><span class="comment">-- haoel</span></span><br><span class="line"><span class="built_in">print</span>(userInfo)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    函数返回值，多个</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---------函数---------"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---------table 类型---------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    table 类型</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line"><span class="comment">-- table 里面值的设置和获取</span></span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">"元素1"</span></span><br><span class="line">mytable[<span class="string">"er"</span>] = <span class="string">"元素2"</span></span><br><span class="line"><span class="built_in">print</span>(mytable[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数组，lua里面的元素是从 1 开始的</span></span><br><span class="line">array = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    等价于</span></span><br><span class="line"><span class="comment">    array = &#123;[1]=10, [2]=20, [3]=30, [4]=40, [5]=50&#125;</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数组里面值得获取</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>], array[<span class="number">2</span>], array[<span class="number">3</span>])</span><br><span class="line"><span class="comment">-- 字典</span></span><br><span class="line">dictionary = &#123;</span><br><span class="line">    key1 = <span class="string">"value1"</span>,</span><br><span class="line">    key2 = <span class="string">"value2"</span>,</span><br><span class="line">    key3 = <span class="string">"value3"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字典里面值得获取</span></span><br><span class="line"><span class="built_in">print</span>(dictionary.key1, dictionary.key2, dictionary.key3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---------table 类型---------"</span>)</span><br></pre></td></tr></table></figure><h2 id="Redis-Lua"><a href="#Redis-Lua" class="headerlink" title="Redis + Lua"></a>Redis + Lua</h2><p>在 Redis 中，执行 Lua 语言是原子性的，有助于 Redis 对并发数据一致性的支持。</p><h3 id="为什么要用lua"><a href="#为什么要用lua" class="headerlink" title="为什么要用lua"></a>为什么要用lua</h3><ol><li>减少网络开销：本来5次网络请求的操作，可以用一个请求完成，原先5次请求的逻辑放在redis服务器上完成。使用脚本，减少了网络往返时延。</li><li>原子操作：Redis会将整个脚本作为一个整体执行，中间不会被其他进程或者进程的命令插入。（最重要）</li><li>复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。</li></ol><h3 id="两种方法运行脚本"><a href="#两种方法运行脚本" class="headerlink" title="两种方法运行脚本"></a>两种方法运行脚本</h3><ol><li>直接输入一些 Lua 语言的程序代码；<strong>简单的脚本可以直接采用这种</strong></li><li>将 Lua 语言编写成文件。<strong>有一定逻辑的采用这种</strong></li></ol><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> lua-script key-num [key1 key2 key3 ...] [value1 value2 value3 ...]</span><br></pre></td></tr></table></figure><p><strong>其中：</strong></p><ul><li>eval 代表执行 Lua 语言的命令。</li><li>Lua-script 代表 Lua 语言脚本。</li><li>key-num 整数代表参数中有多少个 key，需要注意的是 Redis 中 key 是从 1 开始的，如果没有 key 的参数，那么写 0。</li><li>[key1 key2 key3…] 是 key 作为参数传递给 Lua 语言，也可以不填它是 key 的参数，但是需要和 key-num 的个数对应起来。</li><li>[value1 value2 value3…] 这些参数传递给 Lua 语言，它们是可填可不填的。</li></ul><h3 id="实例一-嵌入脚本"><a href="#实例一-嵌入脚本" class="headerlink" title="实例一 嵌入脚本"></a>实例一 嵌入脚本</h3><p>基本用法：<code>set、get</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">"return redis.call('set', KEYS[1], ARGV[1])"</span> 1 lua-key lua-value</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># get</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">"return redis.call('get', KEYS[1])"</span> 1 lua-key</span><br><span class="line"><span class="string">"lua-value"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush person a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 多参数</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">"return redis.call('lrange', KEYS[1], ARGV[1], ARGV[2])"</span> 1 person 0 -1</span><br><span class="line">1) <span class="string">"c"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"a"</span></span><br></pre></td></tr></table></figure><p>字段说明</p><ol><li>KEYS[1]: 需要大写，对应的是1之后的lua-key, 【占位符】</li><li>1: 代表之后key的个数，多余的舍弃</li><li>ARGV[1]: 需要大写，对应的是value的第一个</li></ol><p><strong>注意事项</strong></p><ol><li>KEYS、ARGV：需要大写</li><li>内部需要用单引号</li></ol><h4 id="node代码"><a href="#node代码" class="headerlink" title="node代码"></a>node代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 嵌入脚本</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> argv = [<span class="string">'lua-key'</span>, <span class="string">'lua-value'</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">set</span> = await redis.eval("return redis.call('<span class="keyword">set</span>', KEYS[1], ARGV[1])", 1, argv);</span><br><span class="line">    const <span class="keyword">get</span> = await redis.eval("return redis.call('<span class="keyword">get</span>', KEYS[1])", 1, argv[0]);</span><br><span class="line">    console.log("简单:", <span class="keyword">set</span>, <span class="keyword">get</span>);</span><br><span class="line">    // 同时传入多个key需要借助lua中的循环</span><br><span class="line">    // const list = await redis.eval("redis.call('lpush', KEYS[1], ARGV)", 1, 'list', 1,2,3);</span><br><span class="line">    await redis.eval("return redis.call('lpush', KEYS[1], ARGV[1])", 1, 'list', '1');</span><br><span class="line">    const listGet = await redis.eval("return redis.call('lrange', KEYS[1], ARGV[1], ARGV[2])", 1, 'list', 0, -1);</span><br><span class="line">    console.log("队列:", listGet)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> evalScript = <span class="string">`return redis.call('SET', KEYS[1], ARGV[2])`</span>;</span><br><span class="line"><span class="comment">// 缓存脚本</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 缓存脚本获取 sha1 值</span></span><br><span class="line">    <span class="keyword">const</span> sha1 = <span class="keyword">await</span> redis.script(<span class="string">"load"</span>, evalScript);</span><br><span class="line">    <span class="built_in">console</span>.log(sha1); <span class="comment">// 6bce4ade07396ba3eb2d98e461167563a868c661</span></span><br><span class="line">    <span class="comment">// 2. 通过 evalsha 执行脚本</span></span><br><span class="line">    <span class="keyword">await</span> redis.evalsha(sha1, <span class="number">2</span>, <span class="string">'name1'</span>, <span class="string">'name2'</span>, <span class="string">'val1'</span>, <span class="string">'val2'</span>);</span><br><span class="line">    <span class="comment">// 3. 获取数据</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> redis.get(<span class="string">"name1"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// "val2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例二-脚本文件-–-频次限制"><a href="#实例二-脚本文件-–-频次限制" class="headerlink" title="实例二 脚本文件 – 频次限制"></a>实例二 脚本文件 – 频次限制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 脚本文件</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> luaScript = fs.readFileSync(<span class="string">'./limit.lua'</span>);</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">'rate:limit'</span>;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> limit = <span class="keyword">await</span> redis.eval(luaScript, <span class="number">1</span>, key, <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'limit'</span>, limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">Author: simuty</span></span><br><span class="line"><span class="comment">Date: 2020-11-26 11:17:33</span></span><br><span class="line"><span class="comment">LastEditTime: 2020-11-26 13:50:03</span></span><br><span class="line"><span class="comment">LastEditors: Please set LastEditors</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">limit.lua</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">!10秒内只能访问3次。 后续该脚本可以在nginx或者程序运行脚本中直接使用，判断返回是否为0，就0就不让其继续访问。</span></span><br><span class="line"><span class="comment">!以上，如果不使用redis+lua，那高并发下incr和expire就会出现原子性破坏，造成expire执行多次浪费</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> times = redis.call(<span class="string">"incr"</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> times == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">"expire"</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> times &gt; <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>]) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  6Lua git:(main) ✗ ts-node index.ts</span><br><span class="line"><span class="built_in">limit</span> 1</span><br><span class="line"><span class="built_in">limit</span> 1</span><br><span class="line"><span class="built_in">limit</span> 1</span><br><span class="line"><span class="built_in">limit</span> 0</span><br><span class="line"><span class="built_in">limit</span> 0</span><br></pre></td></tr></table></figure><h3 id="实例三-脚本文件-–-自增ID"><a href="#实例三-脚本文件-–-自增ID" class="headerlink" title="实例三 脚本文件 – 自增ID"></a>实例三 脚本文件 – 自增ID</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">"get"</span>, key)</span><br><span class="line"><span class="keyword">if</span> id == <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">"set"</span>, key, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> key .. <span class="string">"00001"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">"set"</span>, key, id + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> key .. <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%04d"</span>, id + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>参考链接<br><a href="http://c.biancheng.net/view/4603.html" target="_blank" rel="noopener">Redis乐观锁解决高并发抢红包的问题</a><br><a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">Lua 教程</a><br><a href="https://coolshell.cn/articles/10739.html#%E9%80%92%E5%BD%92" target="_blank" rel="noopener">LUA简明教程</a><br><a href="http://c.biancheng.net/view/4554.html" target="_blank" rel="noopener">Redis中使用Lua语言</a><br><a href="https://segmentfault.com/a/1190000019676878" target="_blank" rel="noopener">【redis进阶(1)】redis的Lua脚本控制（原子性）</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列五 锁</title>
      <link href="2020/11/25/redis_5/"/>
      <url>2020/11/25/redis_5/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/052.jpg" width=80% /><span class='geyan'>    君子以遏恶扬善，顺天休命。（《周易·䷍大有·象传》）</span><a id="more"></a><blockquote><p>本文目标</p></blockquote><ol><li>熟悉乐观锁ABA概念</li><li>理解掌握redis事务以及watch回滚；</li><li>实战redis锁</li></ol><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁是一种不会阻塞其他线程并发的机制，它不会使用数据库的锁进行实现，它的设计里面由于不阻塞其他线程，所以并不会引发线程频繁挂起和恢复，这样便能够提高并发能力，所以也有人把它称为非阻塞锁，那么它的机制是怎么样的呢？</p><h3 id="CAS-原理概述"><a href="#CAS-原理概述" class="headerlink" title="CAS 原理概述"></a>CAS 原理概述</h3><p>在 CAS 原理中，对于多个线程共同的资源，先保存一个旧值（Old Value），比如进入线程后，查询当前存量为 100 个红包，那么先把旧值保存为 100，然后经过一定的逻辑处理。</p><p>当需要扣减红包的时候，先比较数据库当前的值和旧值是否一致，如果一致则进行扣减红包的操作，否则就认为它已经被其他线程修改过了，不再进行操作，CAS 原理流程如图 1 所示。</p><img data-src="004.png" width=80% /><p>CAS 原理并不排斥并发，也不独占资源，<strong>只是在线程开始阶段就读入线程共享数据，保存为旧值</strong>。当处理完逻辑，<strong>需要更新数据的时候，会进行一次比较</strong>，即比较各个线程当前共享的数据是否和旧值保持一致。</p><p>如果一致，就开始更新数据；如果不一致，则认为该数据已经被其他线程修改了，那么就不再更新数据，可以考虑重试或者放弃。有时候可以重试，这样就是一个可重入锁，但是 CAS 原理会有一个问题，那就是 <strong>ABA 问题</strong>，下面先来讨论一下 ABA 问题。</p><h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>对于乐观锁而言，我们之前讨论了存在 ABA 的问题，那么什么是 ABA 问题呢？下面看看表 1 的两个线程发生的场景。</p><table><thead><tr><th>时 刻</th><th>线程1</th><th>线程2</th><th>备 注</th></tr></thead><tbody><tr><td>T0</td><td>——</td><td>——</td><td>初始化 X=A</td></tr><tr><td>T1</td><td>读入X=A</td><td>——</td><td>——</td></tr><tr><td>T2</td><td>——</td><td>读入X=A</td><td>——</td></tr><tr><td>T3</td><td>处理线程 1 的业务逻辑</td><td>X=B</td><td>修改共享变量为 B</td></tr><tr><td>T4</td><td>处理线程 1 的业务逻辑</td><td>处理线程 2 业务逻辑第一段</td><td>此时线程1在 X=B 的情况下运行逻辑</td></tr><tr><td>T5</td><td>处理线程 1 的业务逻辑</td><td>X=A</td><td>还原变量为 A</td></tr><tr><td>T6</td><td>因为判断 X=A，所以更新数据</td><td>处理线程 2 业务逻辑第二段</td><td>此时线程 1 无法知道线程 2 是否修改过 X，引发业务逻辑错误</td></tr><tr><td>T7</td><td>——</td><td>更新数据</td><td>——</td></tr></tbody></table><p>在 T3 时刻，由于线程 2 修改了 X=B，此时线程 1 的业务逻辑依旧执行，但是到了 T5 时刻，线程 2 又把 X 还原为 A，那么到了 T6 时刻，使用 CAS 原理的旧值判断，线程 1 就会认为 X 值没有被修改过，于是执行了更新。</p><p>我们<strong>难以判定的是在 T4 时刻，线程 1 在 X=B 的时候，对于线程 1 的业务逻辑是否正确的问题</strong>。</p><div class="note danger">由于 X 在线程 2 中的值改变的过程为 A->B->A，才引发这样的问题，因此人们形象地把这类问题称为 ABA 问题。</div><p>ABA 问题的发生，是因为业务逻辑存在回退的可能性。如果加入一个非业务逻辑的属性，比如在一个数据中加入版本号（version），对于版本号有一个约定，就是只要修改 X 变量的数据，<strong>强制版本号（version）只能递增，而不会回退</strong>，即使是其他业务数据回退，它也会递增，<strong>那么 ABA 问题就解决了</strong>，如表 2 所示。</p><blockquote><p>表 2 用版本号消除 ABA 问题</p></blockquote><table><thead><tr><th>时刻</th><th>线程1</th><th>线程2</th><th>备 注</th></tr></thead><tbody><tr><td>T0</td><td>——</td><td>——</td><td>初始化 X=A，version=0</td></tr><tr><td>T1</td><td>读入X=A</td><td>——</td><td>线程1旧值：version=0</td></tr><tr><td>T2</td><td>——</td><td>读入X=A</td><td>线程2旧值：version=0</td></tr><tr><td>T3</td><td>处理线程1的业务逻辑</td><td>X=B</td><td>修改共享变量为 B，version=1</td></tr><tr><td>T4</td><td>处理线程1的业务逻辑</td><td>处理线程 2 业务逻辑第一段</td><td>——</td></tr><tr><td>T5</td><td>——</td><td>X=A</td><td>还原变量为A，version=2</td></tr><tr><td>T6</td><td>判断 version == 0，由于线程 2 两次更新数据，导致数据 version=2，所以不再更新数据</td><td>处理线程 2 业务逻辑第二段</td><td>此时线程 1 知道旧值 version 和当前 version 不一致，将不更新数据</td></tr><tr><td>T7</td><td>——</td><td>更新数据</td><td>——</td></tr></tbody></table><p>只是这个 <strong>version 变量</strong>并不存在什么业务逻辑，只是为了记录更新次数，只能递增，帮助我们<strong>克服 ABA 问题</strong>罢了，有了这些理论，我们就可以开始使用乐观锁来完成抢红包业务了。</p><h2 id="redis-事务"><a href="#redis-事务" class="headerlink" title="redis 事务"></a>redis 事务</h2><p>在 Redis 中，存在多个客户端同时向 Redis 系统发送命令的<strong>并发可能性</strong>，因此同一个数据，可能在不同的时刻被不同的线程所操纵，这样就出现了<strong>并发下的数据一致的问题</strong>。为了保证异性数据的安全性，Redis 为提供了事务方案。而 Redis 的事务是使用 MULTI-EXEC 的命令组合，使用它可以提供两个重要的保证：</p><ol><li>事务是一个被隔离的操作，事务中的方法都会被 Redis 进行序列化并按顺序执行，事务在执行的过程中不会被其他客户端发生的命令所打断。</li><li>事务是一个原子性的操作，它要么全部执行，要么就什么都不执行。</li></ol><p>Redis 通过<code>MULTI 、EXEC、WATCH</code>等命令来实现<strong>事务功能</strong>。事物提供了一种将<strong>多个命令请求打包</strong>，然后<strong>一次性、按顺序的执行多个命令的机制</strong>，并且在事物执行期间，服务器<strong>不会中断</strong>事务而去执行其他客户端的命令请求，它会将事物中所有的命令都执行完毕。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>开启事务</li><li>命令进入队列</li><li>执行事务。</li></ol><p><strong>Redis事物不支持回滚操作</strong>，所以事物队列中<code>某个命令执行错误，整个事物也会继续执行下去。</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 入队</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR key1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v3</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line"><span class="comment"># INCR 失败</span></span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br><span class="line">4) OK</span><br><span class="line"><span class="comment"># key1 变为最后的v3</span></span><br><span class="line">127.0.0.1:6379&gt; GET key1</span><br><span class="line"><span class="string">"v3"</span></span><br><span class="line"><span class="comment"># key2 set 成功</span></span><br><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line"><span class="string">"v2"</span></span><br></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>watch 命令可以决定事务是<strong>执行还是回滚</strong>，可以在 multi 命令之前使用 watch 命令监控某些键值对，然后使用 multi 命令开启事务，执行各类对数据结构进行操作的命令，这个时候这些命令就会进入队列。</p><img data-src="006.png" width=80% /><p>如下图，在<strong>执行</strong>之前，更改了version的值，导致事务回滚,<br><img data-src="005.png" width=80% /></p><p>是否可以避免 <strong>ABA</strong> 问题呢？如下图：</p><img data-src="007.png" width=80% /><div class="note danger">Redis 的机制是不会产生 ABA 问题的，这样就有利于在保证数据一致的基础上，提高高并发系统的数据读/写性能。</div><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>分布式锁的实现，目前常用的方案有以下三类：</p><ol><li>数据库乐观锁；</li><li>基于分布式缓存实现的锁服务，典型代表有 Redis 和基于 Redis 的 RedLock；</li><li>基于分布式一致性算法实现的锁服务，典型代表有 ZooKeeper、Chubby 和 ETCD。</li></ol><blockquote><p>为了确保锁服务可用，通常，分布式锁需同时满足以下四个约束条件。</p></blockquote><ol><li>互斥性：在任意时刻，只有一个客户端能持有锁；</li><li>安全性：即不会形成死锁，当一个客户端在持有锁的期间崩溃而没有主动解锁的情况下，其持有的锁也能够被正确释放，并保证后续其它客户端能加锁；</li><li>可用性：就 Redis 而言，当提供锁服务的 Redis Master 节点发生宕机等不可恢复性故障时，Slave 节点能够升主并继续提供服务，支持客户端加锁和解锁；对基于分布式一致性算法实现的锁服务（如 ETCD）而言，当 Leader 节点宕机时，Follow 节点能够选举出新的 Leader 继续提供锁服务；</li><li>对称性：对于任意一个锁，其<strong>加锁和解锁必须是同一个客户端</strong>，即客户端 A 不能把客户端 B 加的锁给解了。</li></ol><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><div class="note danger"><p>上锁部分，</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上锁🔒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>lockName 锁名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>randomVale 随机值， 为解锁是校验持有者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>expireTime 过期时间，单位秒, 过期后自动删除</span></span><br><span class="line"><span class="comment">     * !保证上锁的安全--一条命令保证安全性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">async</span> lock(lockName: string, <span class="attr">randomVale</span>: string, <span class="attr">expire</span>: number) &#123;</span><br><span class="line">        <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">intranetLock</span>(<span class="params">this: any</span>): <span class="title">Promise</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 核心代码</span></span><br><span class="line">                <span class="comment">//* 1. 如果key不存在，则设置key-value, 且value的唯一性，保证删除的时候同样可以校验</span></span><br><span class="line">                <span class="comment">// * 2. 如果key存在，NX 保证不做任何操作</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> self.redis.set(lockName, randomVale, self.expiryMode, expire | self.lockLeaseTime, self.setMode);</span><br><span class="line">                <span class="comment">// 上锁成功</span></span><br><span class="line">                <span class="keyword">if</span> (result === <span class="string">'OK'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;lockName&#125;</span> <span class="subst">$&#123;randomVale&#125;</span> 上锁成功`</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 锁超时</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Math</span>.floor((<span class="built_in">Date</span>.now() - start) / <span class="number">1000</span>) &gt; self.lockTimeout) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;lockName&#125;</span> <span class="subst">$&#123;randomVale&#125;</span> 上锁重试超时结束`</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 循环等待重试</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;lockName&#125;</span> <span class="subst">$&#123;randomVale&#125;</span> 等待重试`</span>);</span><br><span class="line">                <span class="keyword">await</span> sleep(<span class="number">3</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;lockName&#125;</span> <span class="subst">$&#123;randomVale&#125;</span> 开始重试`</span>);</span><br><span class="line">                <span class="keyword">return</span> intranetLock();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="note danger"><p>解锁部分</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">async</span> unLock(lockName: string, <span class="attr">randomValue</span>: string) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Watch 命令监控锁。监控锁对应的 key(lockName)，事务开启后，如果其它的客户端对这个 Key 进行了更改，</span></span><br><span class="line">            <span class="comment">// 那么本次事务会被取消而不会执行 redis.watch(lockName)。</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.redis.watch(lockName);</span><br><span class="line">            <span class="keyword">const</span> value = <span class="keyword">await</span> <span class="keyword">this</span>.redis.get(lockName);</span><br><span class="line">            <span class="comment">// 如果获取到🔒对应的值，与 randomValue 相等</span></span><br><span class="line">            <span class="keyword">if</span> (randomValue === value) &#123;</span><br><span class="line">                <span class="comment">// 开启事务，删除锁🔒</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.redis.multi().del(lockName).exec();</span><br><span class="line">                <span class="keyword">if</span> (DistributedLock.RELEASE_SUCCESS === result.length) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'解锁成功'</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'value 不相等，解锁失败'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'解锁error'</span>, error);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>返回值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  5锁 git:(main) ✗ ts-node index.ts</span><br><span class="line">name1 b9ccabe0-2ec7-11eb-b965-933ad584a1de 上锁成功</span><br><span class="line">name1 b9cdbd50-2ec7-11eb-b965-933ad584a1de 等待重试</span><br><span class="line">name1 b9cdbd50-2ec7-11eb-b965-933ad584a1de 开始重试</span><br><span class="line">name1 b9cdbd50-2ec7-11eb-b965-933ad584a1de 等待重试</span><br><span class="line">解锁成功</span><br><span class="line">unLock:  name1 b9ccabe0-2ec7-11eb-b965-933ad584a1de <span class="literal">true</span></span><br><span class="line">name1 b9cdbd50-2ec7-11eb-b965-933ad584a1de 开始重试</span><br><span class="line">name1 b9cdbd50-2ec7-11eb-b965-933ad584a1de 上锁成功</span><br><span class="line">解锁成功</span><br><span class="line">unLock:  name1 b9cdbd50-2ec7-11eb-b965-933ad584a1de <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>具体的实例代码：<a href="https://github.com/simuty/Integration/blob/main/Redis/" target="_blank" rel="noopener">https://github.com/simuty/Integration/blob/main/Redis/</a></p><p>参考链接</p><p><a href="http://c.biancheng.net/view/4603.html" target="_blank" rel="noopener">Redis乐观锁解决高并发抢红包的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列四 GEO附近的人</title>
      <link href="2020/11/23/redis_4/"/>
      <url>2020/11/23/redis_4/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/051.jpg" width=80% /><span class='geyan'>夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。（《周易·䷀乾·文言》）</span><a id="more"></a><h2 id="GEO算法"><a href="#GEO算法" class="headerlink" title="GEO算法"></a>GEO算法</h2><div class="note danger"><p>GeoHash是一种<strong>地址编码方法</strong>。将二维的空间<em>经纬度</em>数据编码成一个<strong>字符串</strong>；</p></div><p>地球上的经度范围：[-180， 180]，纬度范围：[-90，90]。如果以本初子午线、赤道为界，地球可以分成4个部分。</p><p>我们先将平面切割成四个正方形，然后用简单的 01 编码来标识这个四个正方形，最后按照编码的大小将四个正方形连接起来，这样整个平面就转换成了一条Z曲线，变成了一维。<br>我们递归对每个正方形做同样的操作，递归的层次越深，整个平面就逐渐被Z曲线填充。我们的点也会落在每个小正方形里面，小正方形越小，精度就越高。如下图所示:</p><img data-src="004.png" width=80% /><h3 id="第一步：-经纬度转二进制"><a href="#第一步：-经纬度转二进制" class="headerlink" title="第一步： 经纬度转二进制"></a>第一步： 经纬度转二进制</h3><p>比如这样一个点（39.923201, 116.390705）</p><img data-src="005.png" width=80% /><blockquote><p>在区间内就是1，否则就是0<br>依次计算得到二进制数：</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">39.923201 =&gt; 10111000110001111001</span><br><span class="line">116.390705 =&gt; 11010010110001000100</span><br></pre></td></tr></table></figure><h3 id="第二步：-经纬度合并"><a href="#第二步：-经纬度合并" class="headerlink" title="第二步： 经纬度合并"></a>第二步： 经纬度合并</h3><div class="note danger"><p><strong>经度占偶数位，纬度占奇数位</strong>，注意，0也是偶数位。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11100 11101 00100 01111 00000 01101 01011 00001</span><br></pre></td></tr></table></figure></div><h3 id="第三步：-Base32编码"><a href="#第三步：-Base32编码" class="headerlink" title="第三步： Base32编码"></a>第三步： Base32编码</h3><img data-src="006.png" width=80% /><blockquote><p>二进制=&gt;十进制=&gt;进行编码即可<br>wx4g0ec1ebpf</p></blockquote><p>可以在这个网址互相转换，<a href="http://geohash.co/；" target="_blank" rel="noopener">http://geohash.co/；</a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h4><ol><li>GeoHash表示的<strong>并不是一个点</strong>，而<strong>是一个矩形区域</strong></li><li>GeoHash编码的<strong>前缀</strong>可以表示<strong>更大的区域</strong>。例如wx4g0ec1，它的前缀wx4g0e表示包含编码wx4g0ec1在内的更大范围。 这个特性可以用于附近地点搜索</li><li>编码越长，表示的范围越小，位置也越精确</li></ol><h4 id="边缘问题"><a href="#边缘问题" class="headerlink" title="边缘问题"></a>边缘问题</h4><img data-src="007.png" width=80% /><p>如图，如果车在<strong>红点位置</strong>，区域内还有一个<strong>黄点</strong>。相邻区域内的<strong>绿点明显离红点更近</strong>。但因为黄点的编码和红点一样，<strong>最终找到的将是黄点</strong>。这就有问题了。</p><p>要解决这个问题，很简单，只要再查找周边8个区域内的点，<strong>对比距离即可</strong></p><h4 id="曲线突变问题"><a href="#曲线突变问题" class="headerlink" title="曲线突变问题"></a>曲线突变问题</h4><img data-src="004.png" width=80% /><p>其中<strong>0111和1000</strong>两个<strong>编码非常相近</strong>，但它们的<strong>实际距离确很远</strong>。所以编码相近的两个单位，并不一定真实距离很近，这需要<strong>实际计算两个点的距离才行。</strong></p><h2 id="iordis代码实现"><a href="#iordis代码实现" class="headerlink" title="iordis代码实现"></a>iordis代码实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Redis <span class="keyword">from</span> <span class="string">"ioredis"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redis = <span class="keyword">new</span> Redis();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">'geo:zhubo'</span>;</span><br><span class="line">    <span class="comment">// 1. geoadd 添加 ABC三元素&amp;对应的经纬度</span></span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">await</span> redis.geoadd(key, [<span class="number">116.48</span>, <span class="number">39.9</span>, <span class="string">'A'</span>, <span class="number">116.9</span>, <span class="number">39.95</span>, <span class="string">'B'</span>, <span class="number">116.83</span>, <span class="number">39.01</span>, <span class="string">'C'</span>]);</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> dist = <span class="keyword">await</span> redis.geodist(key, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'km'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`AB之间的距离为<span class="subst">$&#123;dist&#125;</span>km`</span>);</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> pos = <span class="keyword">await</span> redis.geopos(key, <span class="string">'A'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`A的经纬度为<span class="subst">$&#123;pos&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">await</span> redis.geohash(key, <span class="string">'A'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`A的hash为<span class="subst">$&#123;hash&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> GEORADIUSBYMEMBER = <span class="keyword">await</span> redis.georadiusbymember(key, <span class="string">'A'</span>, <span class="number">300</span>, <span class="string">'km'</span>, <span class="string">'COUNT'</span>, <span class="number">4</span>, <span class="string">'asc'</span>)</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> GEORADIUSBYMEMBER1 = <span class="keyword">await</span> redis.georadiusbymember(key, <span class="string">'A'</span>, <span class="number">300</span>, <span class="string">'km'</span>, <span class="string">'withcoord'</span>, <span class="string">'withdist'</span>,  <span class="string">'withhash'</span>, <span class="string">'COUNT'</span>, <span class="number">4</span>, <span class="string">'asc'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`A的附近300km, 距离由近到远为<span class="subst">$&#123;GEORADIUSBYMEMBER&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`A的附近300km, 距离由近到远为<span class="subst">$&#123;GEORADIUSBYMEMBER1&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> GEORADIUS = <span class="keyword">await</span> redis.georadius(key, <span class="number">116.67</span>, <span class="number">39.5</span>, <span class="number">50</span>, <span class="string">'km'</span>, <span class="string">'withdist'</span>, <span class="string">'count'</span>, <span class="number">3</span>, <span class="string">'asc'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`距离「116.67, 39.5」附近「50」km内, 距离由近到远前3位为<span class="subst">$&#123;GEORADIUS&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4附近的人 git:(main) ✗ ts-node index.ts</span><br><span class="line">AB之间的距离为36.2543km</span><br><span class="line">A的经纬度为116.47999852895736694,39.90000009167092543</span><br><span class="line">A的<span class="built_in">hash</span>为wx4ffxd4ke0</span><br><span class="line">A的附近300km, 距离由近到远为A,B,C</span><br><span class="line">A的附近300km, 距离由近到远为A,0.0000,4069885894809634,116.47999852895736694,39.90000009167092543,B,36.2543,4069982235196126,116.90000027418136597,39.9500000012600438,C,103.4539,4069174206137433,116.82999998331069946,39.01000119404034905</span><br><span class="line">距离「116.67, 39.5」附近「50」km内, 距离由近到远前3位为A,47.3686</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GEOADD: 添加位置 hset结构 </span></span><br><span class="line">127.0.0.1:6379&gt; GEOADD zhubo 116.48 39.9 A</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; GEOADD zhubo 116.9 39.95 B</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; GEOADD zhubo 116.83 39.01 C</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; GEOADD zhubo 116.67 39.44 D</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># GEODIST 两个key 之间的距离 km m </span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST zhubo A B  km</span><br><span class="line"><span class="string">"36.2543"</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST zhubo A A  km</span><br><span class="line"><span class="string">"0.0000"</span></span><br><span class="line"><span class="comment"># GEOPOS 输出某个key的信息</span></span><br><span class="line">127.0.0.1:6379&gt; GEOPOS zhubo A</span><br><span class="line">1) 1) <span class="string">"116.47999852895736694"</span></span><br><span class="line">   2) <span class="string">"39.90000009167092543"</span></span><br><span class="line">127.0.0.1:6379&gt; GEOPOS zhubo A B</span><br><span class="line">1) 1) <span class="string">"116.47999852895736694"</span></span><br><span class="line">   2) <span class="string">"39.90000009167092543"</span></span><br><span class="line">2) 1) <span class="string">"116.90000027418136597"</span></span><br><span class="line">   2) <span class="string">"39.9500000012600438"</span></span><br><span class="line"><span class="comment"># GEOHASH 输出对应的hash值</span></span><br><span class="line">127.0.0.1:6379&gt; GEOHASH zhubo A</span><br><span class="line">1) <span class="string">"wx4ffxd4ke0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GEORADIUSBYMEMBER 距离某个key xxkm，限制number个元素 生序排列</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER zhubo A 300 km count 4 asc</span><br><span class="line">1) <span class="string">"A"</span></span><br><span class="line">2) <span class="string">"B"</span></span><br><span class="line">3) <span class="string">"D"</span></span><br><span class="line">4) <span class="string">"C"</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER zhubo A 300 km count 4 desc</span><br><span class="line">1) <span class="string">"C"</span></span><br><span class="line">2) <span class="string">"D"</span></span><br><span class="line">3) <span class="string">"B"</span></span><br><span class="line">4) <span class="string">"A"</span></span><br><span class="line"><span class="comment"># GEORADIUSBYMEMBER 附加 withcoord withdist withhash</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER zhubo A 300 km withcoord withdist withhash count 4 asc</span><br><span class="line">1) 1) <span class="string">"A"</span></span><br><span class="line">   2) <span class="string">"0.0000"</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4069885894809634</span><br><span class="line">   4) 1) <span class="string">"116.47999852895736694"</span></span><br><span class="line">      2) <span class="string">"39.90000009167092543"</span></span><br><span class="line">2) 1) <span class="string">"B"</span></span><br><span class="line">   2) <span class="string">"36.2543"</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4069982235196126</span><br><span class="line">   4) 1) <span class="string">"116.90000027418136597"</span></span><br><span class="line">      2) <span class="string">"39.9500000012600438"</span></span><br><span class="line">3) 1) <span class="string">"D"</span></span><br><span class="line">   2) <span class="string">"53.6879"</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4069136689844544</span><br><span class="line">   4) 1) <span class="string">"116.67000085115432739"</span></span><br><span class="line">      2) <span class="string">"39.43999889567408701"</span></span><br><span class="line">4) 1) <span class="string">"C"</span></span><br><span class="line">   2) <span class="string">"103.4539"</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4069174206137433</span><br><span class="line">   4) 1) <span class="string">"116.82999998331069946"</span></span><br><span class="line">      2) <span class="string">"39.01000119404034905"</span></span><br><span class="line"><span class="comment"># GEORADIUS 距离某个点，附近信息</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS zhubo 116.67 39.5 50 km withdist count 3 asc</span><br><span class="line">1) 1) <span class="string">"D"</span></span><br><span class="line">   2) <span class="string">"6.6737"</span></span><br><span class="line">2) 1) <span class="string">"A"</span></span><br><span class="line">   2) <span class="string">"47.3686"</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/2fd0cf12e5ba" target="_blank" rel="noopener">Geohash算法原理及实现</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列三 限流</title>
      <link href="2020/11/20/redis_3/"/>
      <url>2020/11/20/redis_3/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/050.jpg" width=80% /><span class='geyan'>君子终日乾乾，夕惕若，厉，无咎。（《周易·䷀乾》）</span><a id="more"></a><h3 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h3><div class="note danger"><p>开发高并发系统时有三把利器用来保护系统：<strong>缓存、降级和限流</strong></p><div class="note default"><p><strong>缓存目的：</strong> 提升系统访问速度和增大系统能处理的容量；</p></div><div class="note primary"><p><strong>降级</strong>： 在意外情况下，保证系统的可用性。</p></div><div class="note success"><p><strong>限流：</strong>对某些场景进行<code>并发/请求量限制</code>,如：稀缺资源&lt;秒杀&gt;、写服务&lt;评论&gt;、复杂的查询&lt;评论的最后几页&gt;</p><ol><li>目的：通过对 <code>并发</code>访问/请求进行<code>限速</code> 或者一个<code>时间窗口内</code>的的请求进行<code>限速</code>来保护系统;</li><li>常见的限流方向<ol><li>限制总并发数（比如数据库连接池、线程池）、</li><li>限制瞬时并发数（如nginx的limit_conn模块，用来限制瞬时并发连接数）、</li><li>限制时间窗口内的平均速率（如Guava的RateLimiter、nginx的limit_req模块，限制每秒的平均速率）；</li><li>限制远程接口调用速率、</li><li>限制MQ的消费速率。</li></ol></li><li>常见的限流算法<ol><li>计数器</li><li>漏桶</li><li>令牌桶</li></ol></li></ol></div></div><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><h4 id="计数器滑动窗口算法"><a href="#计数器滑动窗口算法" class="headerlink" title="计数器滑动窗口算法"></a>计数器滑动窗口算法</h4><img data-src="004.png" width=80% /><img data-src="005.png" width=80% /><img data-src="009.png" width=80% /><p>采用redis zset实现滑动窗口限流，核心：</p><ol><li>清除时间段外的请求数</li><li>在时间段内进行数据标记</li></ol><div class="note danger">因为有序集合，很容易按照score进行处理，所以加上时间戳就可是实现.<div class="note primary"><p><strong>缺点</strong></p><ol><li>如果数据量过大，如60s-100w,则需要保存大量的行为记录，消耗大量的存储空间</li><li>如果第1s,达到访问量，之后就一直被拒绝。❌</div></li></ol></div><p>代码实现</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动时间限流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key redis 标示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>period 限流时间范围 单位：秒</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>limit 最大运行访问次数</span></span><br><span class="line"><span class="comment"> * 1. 非原子性</span></span><br><span class="line"><span class="comment"> * 2. 允许 60s 的最大访问次数为 1000w 的时候，此时如果使用 ZSet 的方式就会占用大量的空间用来存储请求的记录信息</span></span><br><span class="line"><span class="comment"> * 3. 第一秒达到了最大访问次数，之后就一直拒绝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">isPeriodLimiting</span>(<span class="params">key: string, period: number, limit: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> unixMS = UtilDate.formatUnix(&#123; <span class="attr">type</span>: <span class="string">"MS"</span> &#125;);</span><br><span class="line">    <span class="comment">// console.log(`清除 0 - $&#123;unixS - period&#125; ----`, unixS);</span></span><br><span class="line">    <span class="comment">// 从目前时间戳开始，清除过去区间的数据【 N 秒】</span></span><br><span class="line">    <span class="comment">// !单位要一致，都是秒</span></span><br><span class="line">    <span class="keyword">await</span> redis.zremrangebyscore(key, <span class="number">0</span>, (unixMS - period * <span class="number">1000</span>));</span><br><span class="line">    <span class="comment">// key对应的总个数</span></span><br><span class="line">    <span class="keyword">const</span> currentCount = <span class="keyword">await</span> redis.zcard(key);</span><br><span class="line">    <span class="comment">// console.log('currentCount: ', currentCount)</span></span><br><span class="line">    <span class="comment">// 如果该区间内标记的个数 大于 限制个数，则返回false</span></span><br><span class="line">    <span class="keyword">if</span> (currentCount &gt;= limit) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则，正常写入zset; key score field</span></span><br><span class="line">    <span class="comment">// !field 不能一样</span></span><br><span class="line">    <span class="keyword">await</span> redis.zadd(key, unixMS, unixMS);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 针对某个接口进行限流</span></span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">'limit:period:buy'</span>;</span><br><span class="line">    <span class="comment">// 区间限制次数 20</span></span><br><span class="line">    <span class="keyword">const</span> limit = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 滑动时间区间为 2s</span></span><br><span class="line">    <span class="keyword">const</span> period = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> noLimit = <span class="keyword">await</span> isPeriodLimiting(key, period, limit);</span><br><span class="line">        <span class="keyword">if</span> (noLimit) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'正常请求：'</span>, i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'被限制：'</span>, i);</span><br><span class="line">            <span class="comment">// 如果被限制，等待 区间 时间后，再次判断</span></span><br><span class="line">            <span class="keyword">await</span> UtilCommon.sleep(period);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> UtilCommon.sleep(<span class="number">1</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  3限流 git:(main) ✗ ts-node periodLimit.ts</span><br><span class="line">正常请求： 0</span><br><span class="line">正常请求： 1</span><br><span class="line">正常请求： 2</span><br><span class="line">正常请求： 3</span><br><span class="line">正常请求： 4</span><br><span class="line">被限制： 5</span><br><span class="line">正常请求： 6</span><br><span class="line">正常请求： 7</span><br><span class="line">正常请求： 8</span><br><span class="line">正常请求： 9</span><br><span class="line">正常请求： 10</span><br><span class="line">被限制： 11</span><br><span class="line">正常请求： 12</span><br><span class="line">正常请求： 13</span><br><span class="line">正常请求： 14</span><br><span class="line">正常请求： 15</span><br><span class="line">正常请求： 16</span><br><span class="line">被限制： 17</span><br><span class="line">正常请求： 18</span><br><span class="line">正常请求： 19</span><br></pre></td></tr></table></figure><h4 id="漏⽃限流"><a href="#漏⽃限流" class="headerlink" title="漏⽃限流"></a>漏⽃限流</h4><img data-src="006.png" width=80% /><img data-src="008.png" width=80% /><blockquote><p>核心概念</p></blockquote><ol><li>漏斗的<code>容量</code>: 最多存多少数据</li><li>漏⽃的<code>剩余空间</code>：当前⾏为可以持续进⾏的数量;</li><li>漏嘴的<code>流⽔速率</code>代表着系统允许该⾏为的最⼤频率</li></ol><div class="note danger"><p><strong>优缺点</strong></p><ol><li>实现很简单，对后端的负载是恒定的；</li><li><strong>无法解决有突增流量的情况</strong></li></ol><p><strong>场景</strong></p><p>如果你的系统没有突增流量，对于流量绝对均匀有很强的要求，可以采用使用漏斗算法。</p></div><h4 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h4><img data-src="007.png" width=80% /><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.iteye.com/blog/jinnianshilongnian-2305117" target="_blank" rel="noopener">聊聊高并发系统之限流特技</a><br><a href="https://zhuanlan.zhihu.com/p/20872901" target="_blank" rel="noopener">API 调用次数限制实现</a><br><a href="https://www.jianshu.com/p/a3d068f2586d" target="_blank" rel="noopener">基于Redis的限流系统的设计</a><br><a href="http://dockone.io/article/10137" target="_blank" rel="noopener">我司用了6年的Redis分布式限流器，可以说是非常厉害了！</a><br><a href="https://my.oschina.net/u/3876337/blog/4412168" target="_blank" rel="noopener">Redis高并发限流策略之漏斗限流算法</a><br><a href="https://juejin.cn/post/6870396751178629127#heading-4" target="_blank" rel="noopener">一文搞懂高频面试题之限流算法</a><br><a href="https://zhuanlan.zhihu.com/p/121610364" target="_blank" rel="noopener">「预热桶」限流算法详解(附 Node.js 实现)</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列二 位图</title>
      <link href="2020/11/19/redis_2/"/>
      <url>2020/11/19/redis_2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/049.jpg" width=80% /><span class='geyan'>居上位而不骄，在下位而不忧。（《周易·䷀乾·文言》）</span><a id="more"></a><div class="note danger">直接上代码----实战在最后</div><ol><li>如果要统计一篇文章的阅读量，可以直接使用 Redis 的 incr 指令来完成。</li><li>如果要求阅读量必须按用户去重，那就可以使用 set 来记录阅读了这篇文章的所有用户 id，获取 set 集合的长度就是去重阅读量。</li><li>但是如果爆款文章阅读量太大，set 会浪费太多存储空间。这时候我们就要使用 Redis 提供的 HyperLogLog 数据结构 来代替 set，它只会占用最多 12k 的存储空间就可以完成海量的去重统计。但是它牺牲了准确度，它是模糊计数，误差率约为 0.81%。</li></ol><p>按照官网的说法，Redis位图Bitmaps不是实际的数据类型，而是在字符串类型上定义的一组<strong>面向位的操作</strong>。在Redis中<strong>字符串限制最大为512MB</strong>， 所以位图中最大可以设置<strong>2^32个不同的位（42.9亿个）</strong>。图位的最小单位是比特(bit)，每个bit的值只能是0或1。<br>位图适合存bool数据，当某个业务只有两种结果的时候，位图是不二之选<br>位图的存储大小计算： （maxOffset / 8 / 1024 / 1024）MB。其中maxOffset为位图的最大位数</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bit 基本操作</span></span><br><span class="line"><span class="function">async function <span class="title">baseBitFun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hello =&gt; 二进制  【01101000 01100101 01101100 01101100 01101111】</span></span><br><span class="line">    <span class="keyword">const</span> [bitKey, bitValue] = [<span class="string">'bitKey'</span>, <span class="string">'hello'</span>]</span><br><span class="line">    client.set(bitKey, bitValue, redis.print);</span><br><span class="line">    client.get(bitKey, redis.print);</span><br><span class="line">    <span class="comment">// 1. 根据偏移量获取bit上的值 0=》0；1-》1</span></span><br><span class="line">    client.getbit(bitKey, <span class="number">1</span>, redis.print);</span><br><span class="line">    <span class="comment">// 2. bitcount 获取全部的 1 的总数</span></span><br><span class="line">    client.bitcount(bitKey, redis.print);</span><br><span class="line">    <span class="comment">// 3. setbit 设置指定偏移量的值，0 || 1</span></span><br><span class="line">    <span class="comment">// !offset 参数必须0到 2^32 (bit 映射被限制在 512 MB 之内)。</span></span><br><span class="line">    <span class="comment">// !注意，这里的star和end不是指bit的下标，而是字节(byte)的下标。比如start为1，则实际对应的bit下标为8（1byte = 8 bit）</span></span><br><span class="line">    client.setbit(bitKey, <span class="number">0</span>, <span class="string">'1'</span>);</span><br><span class="line">    client.bitcount(bitKey, redis.print);</span><br><span class="line">    <span class="function">await <span class="title">sleep</span><span class="params">(<span class="number">0.2</span>)</span></span>;</span><br><span class="line">    console.log(<span class="string">'----获取位置----'</span>);</span><br><span class="line">    <span class="comment">// 4. 获取第一次出现0或1的位置，获取某个偏移量之后第一次出现0或1的位置</span></span><br><span class="line">    client.bitpos(bitKey, <span class="number">0</span>, redis.print)</span><br><span class="line">    client.bitpos(bitKey, <span class="number">1</span>, redis.print)</span><br><span class="line">    <span class="comment">// 1=&gt;8 2=&gt;16 == [8, 16]</span></span><br><span class="line">    client.bitpos(bitKey, <span class="number">1</span>, <span class="number">2</span>, redis.print)</span><br><span class="line">    <span class="function">await <span class="title">sleep</span><span class="params">(<span class="number">0.2</span>)</span></span>;</span><br><span class="line">    console.log(<span class="string">'----BITFIELD----'</span>);</span><br><span class="line">    <span class="comment">// 设置value=hello</span></span><br><span class="line">    client.setbit(bitKey, <span class="number">0</span>, <span class="string">'0'</span>);</span><br><span class="line">    client.get(bitKey, redis.print);</span><br><span class="line">    <span class="comment">// get i4 0 从0开始取4位即0110,有符号/无符号转十进制为6, 1*2^2+1*2^1 = 6, 结果一致</span></span><br><span class="line">    <span class="keyword">const</span> get1Arg = [<span class="string">'get'</span>, <span class="string">'i4'</span>, <span class="number">0</span>];</span><br><span class="line">    <span class="comment">// !get i4 4 从4开始取4位即 1000 , 有符号转十进制为 -8, 1000 =&gt;  </span></span><br><span class="line">    <span class="keyword">const</span> get2Arg = [<span class="string">'get'</span>, <span class="string">'i4'</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 5. bitfield</span></span><br><span class="line">    client.bitfield(bitKey, get1Arg, redis.print);</span><br><span class="line">    client.bitfield(bitKey, get2Arg, redis.print);</span><br><span class="line">    <span class="comment">// 6. incrby</span></span><br><span class="line">    <span class="comment">// 2位开始连续4位无符号自增</span></span><br><span class="line">    <span class="keyword">const</span> incrby1Arg = [<span class="string">'incrby'</span>, <span class="string">'u4'</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">    client.bitfield(bitKey, incrby1Arg, redis.print);</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 它用来对指定范围的位进行自增操作。既然提到自增，就有可能出现溢出。如果增加了正数，会出现上溢，如果增加的是负数，就会出现下溢出。</span></span><br><span class="line"><span class="comment">     * 【Redis 默认的处理是折返】。如果出现了溢出，就将溢出的符号位丢掉。如果是 8 位无符号数 255，加 1 后就会溢出，会全部变零。如果是 8 位有符号数 127，加 1 后就会溢出变成 -128。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">await <span class="title">sleep</span><span class="params">(<span class="number">0.2</span>)</span></span>;</span><br><span class="line">    console.log(<span class="string">'----BITOP----'</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>返回值</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">Reply: OK</span></span><br><span class="line"><span class="comment">Reply: hello</span></span><br><span class="line"><span class="comment">Reply: 1</span></span><br><span class="line"><span class="comment">Reply: 21</span></span><br><span class="line"><span class="comment">Reply: 22</span></span><br><span class="line"><span class="comment">----获取位置----</span></span><br><span class="line"><span class="comment">Reply: 3</span></span><br><span class="line"><span class="comment">Reply: 0</span></span><br><span class="line"><span class="comment">Reply: 17</span></span><br><span class="line"><span class="comment">----BITFIELD----</span></span><br><span class="line"><span class="comment">Reply: hello</span></span><br><span class="line"><span class="comment">Reply: 6</span></span><br><span class="line"><span class="comment">Reply: -8</span></span><br><span class="line"><span class="comment">Reply: 11</span></span><br><span class="line"><span class="comment">----BITOP----</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="BITFIELD"><a href="#BITFIELD" class="headerlink" title="BITFIELD"></a>BITFIELD</h4><table><thead><tr><th>字母</th><th>数值</th><th>二进制(高位&lt;-低位)</th></tr></thead><tbody><tr><td>h</td><td>104</td><td>0110 1000</td></tr><tr><td>e</td><td>101</td><td>0110 0101</td></tr><tr><td>l</td><td>108</td><td>0110 1100</td></tr><tr><td>l</td><td>108</td><td>0110 1100</td></tr><tr><td>o</td><td>111</td><td>0110 1111</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> w hello</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; bitfield w get u4 0    <span class="comment">#从w的第0个位开始取4个位(0110)，结果为无符号数(u)</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; bitfield w get u3 2    <span class="comment">#从w的第2个位开始取3个位(101)，结果为无符号数(u)</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; bitfield w get i4 0   <span class="comment">#从w的第0个位开始取4个位(0110)，结果为有符号数(i)</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; bitfield w get i3 2   <span class="comment">#从w的第2个位开始取3个位(101)，结果为有符号数(i)</span></span><br><span class="line">1) (<span class="built_in">integer</span>) -3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; bitfield w <span class="built_in">set</span> u8 8 97  <span class="comment">#从第9个位开始，将接下来8个位用无符号数97 ( 字母a) 替换</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 101</span><br><span class="line">127.0.0.1:6379&gt; get w</span><br></pre></td></tr></table></figure><h4 id="BITOP-operation-destkey-key-key-…"><a href="#BITOP-operation-destkey-key-key-…" class="headerlink" title="BITOP operation destkey key [key …]"></a>BITOP operation destkey key [key …]</h4><div class="note danger"><p>基本操作其实还是用终端比较好，直接贴命令</p></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a a                  <span class="comment"># 二进制  01100001    </span></span><br><span class="line">OK    </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> c c                  <span class="comment"># 二进制  01100011    </span></span><br><span class="line">OK    </span><br><span class="line">127.0.0.1:6379&gt; bitop and destkey a c    <span class="comment"># 与操作  01100001 -&gt; a    </span></span><br><span class="line">(<span class="built_in">integer</span>) 1    </span><br><span class="line">127.0.0.1:6379&gt; get destkey    <span class="string">"a"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a a                 <span class="comment"># 二进制  01100001    </span></span><br><span class="line">OK    127.0.0.1:6379&gt; <span class="built_in">set</span> b b           <span class="comment"># 二进制  01100010    </span></span><br><span class="line">OK    127.0.0.1:6379&gt; bitop or destkey a b    <span class="comment"># 或操作  01100011 -&gt; c    </span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get destkey    </span><br><span class="line"><span class="string">"c"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a a                 <span class="comment"># 二进制  01100001    </span></span><br><span class="line">OK    </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> z Z                 <span class="comment"># 二进制  01011010 (大写的Z)    </span></span><br><span class="line">OK    </span><br><span class="line">127.0.0.1:6379&gt; bitop xor destkey a z   <span class="comment"># 异或    00111011 -&gt; ; 分号    </span></span><br><span class="line">(<span class="built_in">integer</span>) 1    </span><br><span class="line">127.0.0.1:6379&gt; get destkey</span><br><span class="line"><span class="string">";"</span></span><br></pre></td></tr></table></figure><h3 id="实战前奏"><a href="#实战前奏" class="headerlink" title="实战前奏"></a>实战前奏</h3><blockquote><p>如果对位运算不熟悉的同学，可以先复习一下。</p></blockquote><p>链接放这里了：</p><p><a href="https://www.cnblogs.com/lazycoding/archive/2011/03/21/unsigned-signed.html" target="_blank" rel="noopener">理解有符号数和无符号数</a><br><a href="https://juejin.im/post/6844903846947323918#heading-19" target="_blank" rel="noopener">位运算世界畅游指南</a></p><h3 id="位图实战"><a href="#位图实战" class="headerlink" title="位图实战"></a>位图实战</h3><p>如果要统计一篇文章的<code>阅读量</code>，可以直接使用 Redis 的 <strong>incr 指令来完成</strong>。<br>如果要求阅读量必须按<code>用户去重</code>，那就可以使用 set 来记录阅读了这篇文章的所有用户 id，获取 <strong>set 集合</strong>的长度就是去重阅读量。<br>但是如果爆款文章<code>阅读量太大</code>，set 会<code>浪费太多存储空间</code>。这时候我们就要使用 Redis 提供的 <strong>HyperLogLog 数据结构</strong> 来代替 set，它只会占用<strong>最多 12k</strong> 的存储空间就可以完成海量的去重统计。<br>但是它牺牲了准确度，它是模糊计数，<strong>误差率约为 0.81%</strong>。</p><div class="note danger"><p>按照官网的说法，Redis位图Bitmaps不是实际的数据类型，而是在字符串类型上定义的一组<strong>面向位的操作</strong>。在Redis中<strong>字符串限制最大为512MB</strong>，<br>所以位图中最大可以设置<strong>2^32个不同的位（42.9亿个）</strong>。图位的最小单位是比特(bit)，每个bit的值只能是0或1。</p><div class="note primary">位图适合存bool数据，当某个业务只有两种结果的时候，位图是不二之选</div><div class="note success">位图的存储大小计算： （maxOffset / 8 / 1024 / 1024）MB。其中maxOffset为位图的最大位数</div></div><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ol><li>打卡</li><li>判断某天是否打卡</li><li>统计某月打卡总次数</li><li>获取某用户在某月的打卡信息<ol><li>连续打卡的起止时间</li><li>最长连续天数</li></ol></li><li>统计指定区间的打卡次数</li></ol><h5 id="总的调用"><a href="#总的调用" class="headerlink" title="总的调用"></a>总的调用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="function">async <span class="title">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> bitmap = <span class="keyword">new</span> BitMap();</span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    await bitmap.initData([<span class="string">'2020-10'</span>]);</span><br><span class="line">    <span class="comment">// 展示10月份全部签到数据</span></span><br><span class="line">    await bitmap.getAllData([<span class="string">'2020-10'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [uid1, uid2] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户X 签到</span></span><br><span class="line">    await bitmap.userSign(uid2, <span class="string">'2020-11-18'</span>);</span><br><span class="line">    <span class="comment">// 用户X在XX日期 是否签到</span></span><br><span class="line">    await bitmap.judgeUserSign(uid2, <span class="string">'2020-11-18'</span>);</span><br><span class="line">    <span class="comment">// 用户X在XX月 总的签到次数</span></span><br><span class="line">    await bitmap.getUserSignCount(uid2, <span class="string">'2020-10'</span>);</span><br><span class="line">    <span class="comment">// 用户X在XX月 第一次签到的日期</span></span><br><span class="line">    await bitmap.getFirstSignDate(uid2, <span class="string">'2020-11'</span>);</span><br><span class="line">    <span class="comment">// 用户XX在XX月 签到的情况</span></span><br><span class="line">    await bitmap.getSignInfo(uid2, <span class="string">'2020-10'</span>);</span><br><span class="line">    <span class="comment">// 某个区间内，连续签到的人数总和</span></span><br><span class="line">    await bitmap.signAllWeek();</span><br><span class="line"></span><br><span class="line">    await common.sleep(<span class="number">1</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>返回值</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  2位图 git:(main) ✗ ts-node sign.ts</span><br><span class="line"></span><br><span class="line">用户1在 2020-10月 签到数据: 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1</span><br><span class="line">用户2在 2020-10月 签到数据: 0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1</span><br><span class="line">用户3在 2020-10月 签到数据: 1,0,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1</span><br><span class="line">用户4在 2020-10月 签到数据: 1,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0</span><br><span class="line">用户5在 2020-10月 签到数据: 1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1</span><br><span class="line">用户6在 2020-10月 签到数据: 0,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,0</span><br><span class="line">用户2在 2020-11-18签到为1</span><br><span class="line">用户1在 2020-11月 签到数据: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">用户2在 2020-11月 签到数据: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">用户3在 2020-11月 签到数据: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">用户4在 2020-11月 签到数据: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">用户5在 2020-11月 签到数据: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">用户6在 2020-11月 签到数据: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">用户2在 2020-11-18签到状态为1</span><br><span class="line">用户2在 2020-10 月份 签到总次数为15</span><br><span class="line">用户2在 2020-11 月份 首次签到 日期为2020-11-18</span><br><span class="line">------用户2在2020-10签到情况-------</span><br><span class="line">当月签到连续情况为：</span><br><span class="line"> [ &#123; signCount: 4, days: [ 3, 4, 5, 6 ] &#125;,</span><br><span class="line">  &#123; signCount: 3, days: [ 29, 30, 31 ] &#125;,</span><br><span class="line">  &#123; signCount: 2, days: [ 26, 27 ] &#125;,</span><br><span class="line">  &#123; signCount: 2, days: [ 23, 24 ] &#125;,</span><br><span class="line">  &#123; signCount: 1, days: [ 19 ] &#125;,</span><br><span class="line">  &#123; signCount: 1, days: [ 17 ] &#125;,</span><br><span class="line">  &#123; signCount: 1, days: [ 13 ] &#125;,</span><br><span class="line">  &#123; signCount: 1, days: [ 11 ] &#125; ]</span><br><span class="line">最长的连续签到次数：4</span><br><span class="line">最长的连续签到次数日期为：3,4,5,6</span><br><span class="line">----------本月某七天-----------</span><br><span class="line">本月第4到10天 中所有的签到次数: 1</span><br></pre></td></tr></table></figure><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><p>实现部分涉及:</p><ol><li>位操作</li><li>多种实现方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某些月份总的签到数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalMonth 如: ['2020-10']</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> async <span class="title">getAllData</span><span class="params">(totalMonth: string[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (let uid = <span class="number">1</span>; uid &lt;= <span class="keyword">this</span>.allUser; uid++) &#123;</span><br><span class="line">            <span class="keyword">const</span> total = [];</span><br><span class="line">            <span class="comment">// 获取上月份的起止时间</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> month of totalMonth) &#123;</span><br><span class="line">                <span class="comment">// month对应的天数</span></span><br><span class="line">                <span class="keyword">const</span> &#123; days &#125; = UtilDate.daysInMonth(month);</span><br><span class="line">                <span class="comment">// allUser 用户ID作为key中的标示</span></span><br><span class="line">                <span class="comment">// 【偏移量+1】就是某月对应的几号</span></span><br><span class="line">                let offset = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (offset &lt; days) &#123;</span><br><span class="line">                    <span class="keyword">const</span> bit = await <span class="keyword">this</span>.client.getbit(<span class="keyword">this</span>.genKey(&#123; date: month, uid &#125;), offset);</span><br><span class="line">                    total.push(bit);</span><br><span class="line">                    offset++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">const</span> result = `用户$&#123;uid&#125;在 $&#123;month&#125;月 签到数据: $&#123;total&#125;`;</span><br><span class="line">                console.log(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户在某天 签到</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date YYYY-MM—DD</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> async <span class="title">userSign</span><span class="params">(uid: number, date: string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> offset = UtilDate.dayOfNumInMonth(date);</span><br><span class="line">        <span class="keyword">const</span> status = SIGN.YES;</span><br><span class="line">        await <span class="keyword">this</span>.client.setbit(<span class="keyword">this</span>.genKey(&#123; date, uid &#125;), offset - <span class="number">1</span>, status);</span><br><span class="line">        console.log(`用户$&#123;uid&#125;在 $&#123;date&#125;签到为$&#123;status&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户在某天是否签到</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date YYYY-MM—DD</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> async <span class="title">judgeUserSign</span><span class="params">(uid: number, date: string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> offset = UtilDate.dayOfNumInMonth(date);</span><br><span class="line">        <span class="keyword">const</span> status = await <span class="keyword">this</span>.client.getbit(<span class="keyword">this</span>.genKey(&#123; date, uid &#125;), offset - <span class="number">1</span>);</span><br><span class="line">        await <span class="keyword">this</span>.getAllData([<span class="string">'2020-11'</span>]);</span><br><span class="line">        console.log(`用户$&#123;uid&#125;在 $&#123;date&#125;签到状态为$&#123;status&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户X在XX月总的签到次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date YYYY-MM—DD</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> async <span class="title">getUserSignCount</span><span class="params">(uid: number, date: string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> count = await <span class="keyword">this</span>.client.bitcount(<span class="keyword">this</span>.genKey(&#123; date, uid &#125;));</span><br><span class="line">        console.log(`用户$&#123;uid&#125;在 $&#123;date&#125; 月份 签到总次数为$&#123;count&#125;`);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当月签到情况</span></span><br><span class="line"><span class="comment">     * 1. 当月最长的签到天数</span></span><br><span class="line"><span class="comment">     * 2. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> async <span class="title">getSignInfo</span><span class="params">(uid: number, date: string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; days, dayList &#125; = UtilDate.daysInMonth(date);</span><br><span class="line">        <span class="keyword">const</span> key = <span class="keyword">this</span>.genKey(&#123; date, uid &#125;);</span><br><span class="line">        <span class="comment">// days 该月总天数</span></span><br><span class="line">        <span class="keyword">const</span> bitValue = await <span class="keyword">this</span>.genBitIntervalValue(&#123; key, start: <span class="number">0</span>, length: days &#125;);</span><br><span class="line">        <span class="keyword">if</span> (bitValue === -<span class="number">1</span>) &#123;</span><br><span class="line">            console.log(<span class="string">'相关信息不存在'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let signCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> signInfo = [];</span><br><span class="line">        let signValue = bitValue;</span><br><span class="line">        <span class="comment">// 从后往前算</span></span><br><span class="line">        <span class="keyword">for</span> (let index = dayList.length; index &gt; <span class="number">0</span>; index--) &#123;</span><br><span class="line">            <span class="comment">// 位运算</span></span><br><span class="line">            <span class="comment">// 先左后右，如果和原数据相等，则标示最低位是0，即，没有签到</span></span><br><span class="line">            <span class="comment">// 从该月最后一天往前算。</span></span><br><span class="line">            <span class="keyword">if</span> (signValue &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span> === signValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (signCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 记录连续的长度&amp;位置</span></span><br><span class="line">                    signInfo.push(&#123; signCount, index &#125;);</span><br><span class="line">                    <span class="comment">// 重置连续次数</span></span><br><span class="line">                    signCount = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                signCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            signValue &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录最后的一次连续【高位】</span></span><br><span class="line">        <span class="keyword">if</span> (signCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            signInfo.push(&#123; signCount, index: <span class="number">0</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计连续的天数、连续的日期</span></span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item of signInfo) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; signCount, index &#125; = item;</span><br><span class="line">            <span class="keyword">const</span> days = [];</span><br><span class="line">            let i = <span class="number">1</span>;</span><br><span class="line">            let _index = index + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= signCount) &#123;</span><br><span class="line">                days.push(_index++);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> arg = &#123;</span><br><span class="line">                signCount,</span><br><span class="line">                days,</span><br><span class="line">            &#125;</span><br><span class="line">            result.push(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序函数 逆序排列</span></span><br><span class="line">        <span class="keyword">const</span> compare = (p: any) =&gt; (m: any, n: any) =&gt; -(m[p] - n[p]);</span><br><span class="line">        result.sort(compare(<span class="string">'signCount'</span>));</span><br><span class="line">        console.log(`------用户$&#123;uid&#125;在$&#123;date&#125;签到情况-------`)</span><br><span class="line">        console.log(<span class="string">"当月签到连续情况为："</span>, <span class="string">'\n'</span>, result);</span><br><span class="line">        console.log(`最长的连续签到次数：$&#123;result[<span class="number">0</span>].signCount&#125;`);</span><br><span class="line">        console.log(`最长的连续签到次数日期为：$&#123;result[<span class="number">0</span>].days&#125;`);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体的实例代码：<a href="https://github.com/simuty/Integration/blob/main/Redis/" target="_blank" rel="noopener">https://github.com/simuty/Integration/blob/main/Redis/</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.javazhiyin.com/53322.html" target="_blank" rel="noopener">Redis -位图为何能存亿级数据</a><br><a href="http://researchlab.github.io/2018/01/19/redis-04-bitmap/" target="_blank" rel="noopener">redis专题04 数据结构之redis位图系列问题</a><br><a href="https://segmentfault.com/a/1190000008188655" target="_blank" rel="noopener">Redis中bitmap的妙用</a><br><a href="https://segmentfault.com/a/1190000020594802" target="_blank" rel="noopener">使用redis位图bitMap 实现签到功能（PHP版本）</a><br><a href="https://juejin.im/post/6844904049909694477" target="_blank" rel="noopener">Redis修行 — 位图实战</a><br><a href="https://www.debugger.wiki/article/html/1550476800410833" target="_blank" rel="noopener">基于Redis位图实现用户签到功能</a><br><a href="https://developer.aliyun.com/article/757841" target="_blank" rel="noopener">跬步千里 —— 阿里云Redis bitfield命令加速记</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解有符号数和无符号数</title>
      <link href="2020/11/18/base_signed_usigned/"/>
      <url>2020/11/18/base_signed_usigned/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/050.jpg" width=80% /><span class='geyan'>纸上得来终觉浅，绝知此事要躬行——出自《冬夜读书示子聿》</span><a id="more"></a><p><a href="https://www.cnblogs.com/lazycoding/archive/2011/03/21/unsigned-signed.html" target="_blank" rel="noopener">原文链接</a></p><h3 id="理解有符号数和无符号数"><a href="#理解有符号数和无符号数" class="headerlink" title="理解有符号数和无符号数"></a>理解有符号数和无符号数</h3><blockquote><p>声明网上看到的文章，原文找不到了，原文被转载的不成样子，重复很多，整理花了很长时间，在翻看了维基百科后发现，原文中对于负数原码和补码存在一些问题，修改了一部分，原作者看到后可以联系我。</p></blockquote><h4 id="1、你自已决定是否需要有正负。"><a href="#1、你自已决定是否需要有正负。" class="headerlink" title="1、你自已决定是否需要有正负。"></a>1、你自已决定是否需要有正负。</h4><p>就像我们必须决定某个量使用整数还是实数，使用多大的范围数一样，我们必须自已决定某个量是否需要正负。如果这个量不会有负值，那么我们可以定它为带正负的类型。 </p><p>在计算机中，<strong>可以区分正负的类型，称为有符类型（signed）</strong>，<strong>无正负的类型（只有正值），称为无符类型</strong>。 （unsigned）数值类型分为整型或实型，其中整型又分为无符类型或有符类型，而实型则只有符类型。 字符类型也分为有符和无符类型。 比如有两个量，年龄和库存，我们可以定前者为无符的字符类型，后者定为有符的整数类型。 </p><h4 id="2、使用二制数中的最高位表示正负。"><a href="#2、使用二制数中的最高位表示正负。" class="headerlink" title="2、使用二制数中的最高位表示正负。"></a>2、使用二制数中的最高位表示正负。</h4><p>首先得知道最高位是哪一位？1个字节的类型，如字符类型，最高位是第7位，2个字节的数，最高位是第15位，4个字节的数，最高位是第31位。不同长度的数值类型，其最高位也就不同，但总是最左边的那位（如下示意）。字符类型固定是1个字节，所以最高位总是第7位。 </p><p>(红色为最高位) </p><p>单字节数： <strong>1</strong>1111111<br>双字节数： <strong>1</strong>1111111 11111111<br>四字节数： <strong>1</strong>1111111 11111111 11111111 11111111 </p><p>当我们指定一个数量是无符号类型时，那么其最高位的1或0，和其它位一样，用来表示该数的大小。<br>当我们指定一个数量是无符号类型时，此时，最高数称为“符号位”。为1时，表示该数为负值，为0时表示为正值。 </p><h4 id="3、无符号数和有符号数的范围区别。"><a href="#3、无符号数和有符号数的范围区别。" class="headerlink" title="3、无符号数和有符号数的范围区别。"></a>3、无符号数和有符号数的范围区别。</h4><p>无符号数中，所有的位都用于直接表示该值的大小。有符号数中最高位用于表示正负，所以，当为正值时，该数的最大值就会变小。我们举一个字节的数值对比： </p><div class="note danger"><p>无符号数： 11111111    值：255</p><p>1* 27 + 1* 26 + 1* 25 + 1* 24 + 1* 23 + 1* 22 + 1* 21 + 1* 20</p></div><div class="note primary">有符号数： 01111111    值：127         <p>1* 26 + 1* 25 + 1* 24 + 1* 23 + 1* 22 + 1* 21 + 1* 20</p></div><p>同样是一个字节，无符号数的最大值是<strong>255</strong>，而有符号数的<strong>最大值是127</strong>。原因是<strong>有符号数中的最高位被挪去表示符号了</strong>。并且，我们知道，最高位的权值也是最高的（对于1字节数来说是2的7次方=128），所以仅仅少于一位，最大值一下子减半。 </p><p>不过，有符号数的长处是它可以表示负数。因此，虽然它的在最大值缩水了，却在负值的方向出现了伸展。我们仍一个字节的数值对比： </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">无符号数：          0 ---------------- 255 </span><br><span class="line"></span><br><span class="line">有符号数：-128 ---- 0 ---- 127</span><br></pre></td></tr></table></figure><p>同样是一个字节，无符号的最小值是 0 ，而有符号数的最小值是-128。所以二者能表达的不同的数值的个数<strong>都一样是256个</strong>。只不过前者表达的是0到255这256个数，后者表达的是-128到+127这256个数。 </p><p>一个有符号的数据类型的最小值是如何计算出来的呢？ </p><p>有符号的数据类型的最大值的计算方法完全和无符号一样，只不过它少了一个最高位（见第3点）。但在负值范围内，数值的计算方法不能直接使用1* 26 + 1* 25 的公式进行转换。在计算机中，负数除为最高位为1以外，还采用补码形式进行表达。所以在计算其值前，需要对补码进行还原。<br>这里，先直观地看一眼补码的形式： </p><p><strong>在10进制中：1 表示正1，而加上负号：-1 表示和1相对的负值</strong></p><p>那么，我们会很容易认为在2进制中（1个字节）： <strong>0000 0001 表示正1，则高位为1后：1000 0001应该表示-1。</strong></p><p>然而，事实上计算机中的规定有些相反，请看下表： </p><table><thead><tr><th>二进制值（1字节）</th><th>十进制值</th></tr></thead><tbody><tr><td>10000000</td><td>-128</td></tr><tr><td>10000001</td><td>-127</td></tr><tr><td>10000010</td><td>-126</td></tr><tr><td>10000011</td><td>-125</td></tr><tr><td>….</td><td>…</td></tr><tr><td>11111110</td><td>-2</td></tr><tr><td>11111111</td><td>-1</td></tr></tbody></table><p>首先我们看到，从-1到-128，其二进制的最高位都是1，正如我们前面的学。 <strong>负数最高为为1</strong></p><p>然后我们有些奇怪地发现，1000 0000 并没有拿来表示 -0；而1000 0001也不是拿来直观地表示-1。事实上，-1 用1111 1111来表示。 </p><p><strong>怎么理解这个问题呢？先得问一句是-1大还是-128大？</strong></p><p>当然是 -1 大。-1是最大的负整数。以此对应，计算机中无论是字符类型，或者是整数类型，也无论这个整数是几个字节。它都用全1来表示 -1。比如一个字节的数值中：1111 1111表示-1，那么，1111 1111 - 1 是什么呢？<br>和现实中的计算结果完全一致。1111 1111 - 1 = 1111 1110，而1111 1110就是-2。这样一直减下去，当减到只剩最高位用于表示符号的1以外，其它低位全为0时，就是最小的负值了，在一字节中，最小的负值是1000 0000，也就是-128。 </p><p>我们以-1为例，来看看不同字节数的整数中，如何表达-1这个数： </p><table><thead><tr><th>字节数</th><th>二进制值</th><th>十进制值</th></tr></thead><tbody><tr><td>单字节数</td><td>11111111</td><td>-1</td></tr><tr><td>双字节数</td><td>11111111 11111111</td><td>-1</td></tr><tr><td>四字节数</td><td>11111111 11111111 11111111 11111111</td><td>-1</td></tr></tbody></table><div class="note danger"><p>可能有同学这时会混了：为什么 1111 1111 有时表示255，有时又表示-1？</p></div><p>所以我再强调一下前面所说的第2点：<strong>你自已决定一个数是有符号还是无符号的</strong>。写程序时，指定一个量是有符号的，那么当这个量的二进制各位上都是1时，它表示的数就是-1；相反，如果事选声明这个量是无符号的，此时它表示的就是该量允许的最大值，对于一个字节的数来说，最大值就是255。 </p><p> 我们已经知道计算机中，所有数据最终都是使用二进制数表达。 也已经学会如何将一个10进制数如何转换为二进制数。 不过，我们仍然没有学习一个负数如何用二进制表达。<br>比如，假设有一 int 类型的数，值为5，那么，我们知道它在计算机中表示为： </p><pre><code>00000000 00000000 00000000 00000101 </code></pre><p>5转换成二制是101，不过int类型的数占用4字节（32位），所以前面填了一堆0。 现在想知道，-5在计算机中如何表示？ 在计算机中，负数以其正值的补码形式表达。 </p><blockquote><p>什么叫补码呢？这得从原码、反码说起。 </p></blockquote><p><strong>原码</strong>：一个整数，按照绝对值大小转换成的二进制数，最高为为符号位，称为原码。 红色为符号位</p><p>比如 <strong>0</strong>0000000 00000000 00000000 00000101 是 5的 原码。<br>    <strong>1</strong>0000000 00000000 00000000 00000101  是-5的原码</p><p><strong>反码</strong>：将二进制除符号位数按位取反，所得的新二进制数称为原二进制数的反码。 <strong>正数的反码为原码</strong>，<strong>负数</strong>的反码是原码符号位外<strong>按位取反</strong>。<br> 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1） </p><ol><li>正数：正数的反码与原码相同。</li><li>负数：负数的反码，符号位为“1”，数值部分按位取反。</li></ol><p>比如：将10000000 00000000 00000000 00000101除符号位每一位取反，</p><pre><code>得11111111 11111111 11111111 11111010。 </code></pre><p>称：11111111 11111111 11111111 11111010 是 10000000 00000000 00000000 00000101 的反码。 </p><p>反码是相互的，所以也可称： </p><p>11111111 11111111 11111111 11111010 和 10000000 00000000 00000000 00000101 互为反码。 </p><p><strong>补码</strong>：<code>反码加1称为补码</code>。 </p><div class="note danger"><p><strong>正数：正数的补码和原码相同。</strong></p></div><p>负数：按照规则来<br>也就是说，要得到一个数的补码，先得到反码，然后将<strong>反码加上1</strong>，所得数称为<strong>补码</strong></p><p>11111111 11111111 11111111 11111010 是 10000000 00000000 00000000 00000101（-5） 的反码。<br>加1得11111111 11111111 11111111 11111011</p><p>所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。 </p><p>再举一例，我们来看整数-1在计算机中如何表示。 </p><p>假设这也是一个int类型，那么： </p><ol><li>先取-1的原码：        10000000 00000000 00000000 00000001 </li><li>除符号位取反得反码：11111111 11111111 11111111 11111110 </li><li>加1得补码：            11111111 11111111 11111111 11111111 </li></ol><p>可见，－1在计算机里用二进制表达就是全1。16进制为：0xFFFFFF。 </p><h4 id="计算机中的带符号数用补码表示的优点："><a href="#计算机中的带符号数用补码表示的优点：" class="headerlink" title="计算机中的带符号数用补码表示的优点："></a>计算机中的带符号数用补码表示的优点：</h4><ol><li>负数的补码与对应正数的补码之间的转换可以用同一种方法——求补运算完成，可以简化硬件； </li><li>可将减法变为加法，省去减法器； </li><li>无符号数及带符号数的加法运算可以用同一电路完成。 </li></ol><p>可得出一种<strong>心算求补</strong>的方法——从最低位开始至找到的第一个1均不变，符号位不变，这之间的各位“求反”(该方法仅用于做题)。</p><table><thead><tr><th>方法</th><th>例1</th><th>例2</th></tr></thead><tbody><tr><td>1. 从右边开始，找到第一个’1’</td><td>1010100<strong>1</strong></td><td>10101<strong>1</strong>00</td></tr><tr><td>2. 反转从这个’1’之后开始到最左边（不包括符号位）的所有位</td><td>1<strong>101011</strong>1</td><td>1<strong>1010</strong>100</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列一 基本用法&amp;应用场景</title>
      <link href="2020/11/12/redis_1/"/>
      <url>2020/11/12/redis_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/048.jpg" width=80% /><span class='geyan'>君子学以聚之，问以辩之，宽以居之，仁以行之。（《周易·䷀乾·文言》）</span><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><div class="note danger"><p>redis的最基本使用方法以及使用场景。工作中可优化的地方似乎越来越多。。</p></div><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="function">async function <span class="title">stringFun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [key1, key2, key3, key4, key5] = [<span class="string">"key1"</span>, <span class="string">"key2"</span>, <span class="string">"key3"</span>, <span class="string">"key4"</span>, <span class="string">"key5"</span>];</span><br><span class="line">    <span class="keyword">const</span> [v1, v2, v3, v4, v5] = [<span class="string">"v1"</span>, <span class="string">"v2"</span>, <span class="string">"v3"</span>, <span class="string">"v4"</span>, <span class="string">"v5"</span>];</span><br><span class="line">    <span class="comment">// 1. set get</span></span><br><span class="line">    await redis.set(key1, v1);</span><br><span class="line">    <span class="comment">// 2. 过期时间</span></span><br><span class="line">    await redis.setex(key2, <span class="number">10</span>, v2);</span><br><span class="line">    <span class="comment">// 3. 自增</span></span><br><span class="line">    await redis.incr(key3);</span><br><span class="line">    <span class="comment">// 4. 加减</span></span><br><span class="line">    await redis.incrby(key3, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 5. 是否存在</span></span><br><span class="line">    <span class="keyword">const</span> judgeKey4 = await redis.exists(key4);</span><br><span class="line">    <span class="comment">// 6. value length</span></span><br><span class="line">    <span class="keyword">const</span> keyLen = await redis.strlen(key1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getValue = await redis.get(key1);</span><br><span class="line">    <span class="keyword">const</span> hgetVaule = await redis.mget(key1, key2, key3);</span><br><span class="line">    console.log(<span class="string">"getValue : "</span>, getValue);</span><br><span class="line">    console.log(<span class="string">"hgetVaule : "</span>, hgetVaule);</span><br><span class="line">    console.log(<span class="string">"judgeKey4 : "</span>, judgeKey4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 删除</span></span><br><span class="line">    await redis.del(key1, key2, key3, key4);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash</span></span><br><span class="line"><span class="comment"> * 应用场景：</span></span><br><span class="line"><span class="comment"> * 1. 【存-取-改】用户信息【ID、name、age..】，无需set\get string 序列化。</span></span><br><span class="line"><span class="comment"> * 2. 初始化，缓存用户信息</span></span><br><span class="line"><span class="comment"> * 3. 购物车，用户ID：物品ID、数量增减、删除</span></span><br><span class="line"><span class="comment"> * 4. 商品的价格、销量、关注数、评价数等可能经常发生变化的属性，就适合存储在hash类型里</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">async function <span class="title">hashFun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> userObj = &#123; id: <span class="number">1</span>, name: <span class="string">'zhangsan'</span>, age: <span class="number">18</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> userKey = <span class="string">'user_1'</span>;</span><br><span class="line">    <span class="comment">// 1. hset key filed value</span></span><br><span class="line">    await redis.hset(userKey, userObj);</span><br><span class="line">    <span class="comment">// 2. 所有的key</span></span><br><span class="line">    <span class="keyword">const</span> hkeys = await redis.hkeys(userKey);</span><br><span class="line">    <span class="comment">// 3. 整个value</span></span><br><span class="line">    <span class="keyword">const</span> hgetall = await redis.hgetall(userKey);</span><br><span class="line">    console.log(<span class="string">'hkeys: '</span>, hkeys)</span><br><span class="line">    console.log(<span class="string">'hgetall: '</span>, hgetall)</span><br><span class="line">    <span class="comment">// 4. 更改单个数值</span></span><br><span class="line">    await redis.hset(userKey, <span class="string">'age'</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 5. 字段加减</span></span><br><span class="line">    await redis.hincrby(userKey, <span class="string">'age'</span>, -<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">const</span> hgetall1 = await redis.hgetall(userKey);</span><br><span class="line">    console.log(<span class="string">'hgetall--: '</span>, hgetall1)</span><br><span class="line">    <span class="comment">// 6. hsetnx 如果存在key，则不更新</span></span><br><span class="line">    await redis.hsetnx(userKey, <span class="string">'name'</span>, <span class="string">'lisi'</span>);</span><br><span class="line">    <span class="comment">// !7. expire 设置过期时间</span></span><br><span class="line">    await redis.expire(userKey, <span class="number">2</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    % ts-node base.ts</span></span><br><span class="line"><span class="comment">    hkeys:  [ 'id', 'name', 'age' ]</span></span><br><span class="line"><span class="comment">    hgetall:  &#123; id: '1', name: 'zhangsan', age: '18' &#125;</span></span><br><span class="line"><span class="comment">    hgetall--:  &#123; id: '1', name: 'zhangsan', age: '10' &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表</span></span><br><span class="line"><span class="comment"> * 1. list类型是用来存储多个【有序】的字符串的，支持存储【2^32次方-1】个元素。</span></span><br><span class="line"><span class="comment"> * 2. 应用场景</span></span><br><span class="line"><span class="comment"> *      1. 栈： lpush + lpop</span></span><br><span class="line"><span class="comment"> *      2. 队列：lpush + rpop</span></span><br><span class="line"><span class="comment"> *      3. 定长队列：lpush + ltrim</span></span><br><span class="line"><span class="comment"> *      4. 消息队列：lpush + brpop</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">async function <span class="title">listFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> bookKey = <span class="string">'books'</span>;</span><br><span class="line">    <span class="keyword">const</span> bookValue = [<span class="string">'C'</span>, <span class="string">'C++'</span>, <span class="string">'Java'</span>, <span class="string">'OC'</span>, <span class="string">'Node'</span>];</span><br><span class="line">    <span class="comment">// 1. 栈【左进左出】</span></span><br><span class="line">    <span class="comment">// C-&gt;Node 左：进入队列。</span></span><br><span class="line">    await redis.lpush(bookKey, bookValue);</span><br><span class="line">    <span class="keyword">const</span> llen = await redis.llen(bookKey);</span><br><span class="line">    let i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; llen) &#123;</span><br><span class="line">        <span class="comment">// 左出</span></span><br><span class="line">        <span class="keyword">const</span> item = await redis.lpop(bookKey);</span><br><span class="line">        console.log(<span class="string">'出栈：'</span>, item);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="string">'------'</span>);</span><br><span class="line">    <span class="comment">// 2. 左进右出</span></span><br><span class="line">    await redis.lpush(bookKey, bookValue);</span><br><span class="line">    <span class="keyword">const</span> len = await redis.llen(bookKey);</span><br><span class="line">    let index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; len) &#123;</span><br><span class="line">        <span class="comment">// 左出</span></span><br><span class="line">        <span class="keyword">const</span> item = await redis.rpop(bookKey);</span><br><span class="line">        console.log(<span class="string">'出队列-：'</span>, item);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="string">'------'</span>);    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 3. 固定长度的队列</span></span><br><span class="line"><span class="comment">     *      1. 队列结合 ltrim,  【保留起止位置内，删除其他】:start_index和end_index定义了一个区间内的值将被保留下来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    await redis.lpush(bookKey, bookValue);</span><br><span class="line">    <span class="comment">// 保留【前三个】</span></span><br><span class="line">    await redis.ltrim(bookKey, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 获取【队列全部信息】</span></span><br><span class="line">    <span class="keyword">const</span> firstThree = await redis.lrange(bookKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    console.log(<span class="string">'队列全部信息'</span>, firstThree);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合</span></span><br><span class="line"><span class="comment"> * 1. 定义： 集合类型 (Set) 是一个【无序】并【唯一】的键值集合。</span></span><br><span class="line"><span class="comment"> * !2. 场景：【以某个条件为权重】</span></span><br><span class="line"><span class="comment"> *      1. 关注的人</span></span><br><span class="line"><span class="comment"> *      2. 中奖人</span></span><br><span class="line"><span class="comment"> *      3. 例子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">async function <span class="title">setFun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [key1, key2, key3, key4, key5] = [<span class="string">"set01"</span>, <span class="string">"set02"</span>, <span class="string">"set03"</span>, <span class="string">"set04"</span>, <span class="string">"set05"</span>];</span><br><span class="line">    <span class="keyword">const</span> [v1, v2, v3, v4, v5] = [<span class="string">"v1"</span>, <span class="string">"2"</span>, <span class="string">"v3"</span>, <span class="string">"v4"</span>, <span class="string">"v5"</span>];</span><br><span class="line">    <span class="keyword">const</span> [v10, v20, v30, v40, v50] = [<span class="string">"v1"</span>, <span class="string">"v2"</span>, <span class="string">"v3"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> setV1 = [v1, v2, v3, v4, v5];</span><br><span class="line">    <span class="comment">// 1. 添加元素</span></span><br><span class="line">    await redis.sadd(key1, setV1);</span><br><span class="line">    await redis.sadd(key2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">    <span class="comment">// 2. 获取全部</span></span><br><span class="line">    <span class="keyword">const</span> allValue = await redis.smembers(key1);</span><br><span class="line">    <span class="comment">// 3. 是否存在</span></span><br><span class="line">    <span class="keyword">const</span> sismember = await redis.sismember(key1, <span class="string">'v1'</span>);</span><br><span class="line">    <span class="comment">// 4. 随机获取几个数据</span></span><br><span class="line">    <span class="keyword">const</span> srandmember = await redis.srandmember(key1, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 5. 随机删除几个数据</span></span><br><span class="line">    await redis.spop(key1, <span class="number">1</span>);</span><br><span class="line">    console.log(<span class="string">'allvalue: '</span>, allValue);</span><br><span class="line">    console.log(<span class="string">'sismember: '</span>, sismember);</span><br><span class="line">    console.log(<span class="string">'srandmember: '</span>, srandmember);</span><br><span class="line">    <span class="keyword">const</span> key1Values = await redis.smembers(key1);</span><br><span class="line">    <span class="keyword">const</span> key2Values = await redis.smembers(key2);</span><br><span class="line">    console.log(<span class="string">'key1---Values: '</span>, key1Values);</span><br><span class="line">    console.log(<span class="string">'key2---Values: '</span>, key2Values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 将 set1 中的数据 转移到 set2 中: 把set1中的“v1”转移到set2中； </span></span><br><span class="line">    await redis.smove(key1, key2, v10);</span><br><span class="line">    <span class="comment">// !7. 差集, 以前者为基准</span></span><br><span class="line">    <span class="keyword">const</span> sdiff = await redis.sdiff(key1, key2);</span><br><span class="line">    <span class="comment">// 8. 交集，</span></span><br><span class="line">    <span class="keyword">const</span> sinter = await redis.sinter(key1, key2);</span><br><span class="line">    <span class="comment">// 9. 并集</span></span><br><span class="line">    <span class="keyword">const</span> sunion = await redis.sunion(key1, key2);</span><br><span class="line">    console.log(<span class="string">'sdiff'</span>, sdiff)</span><br><span class="line">    console.log(<span class="string">'sinter'</span>, sinter)</span><br><span class="line">    console.log(<span class="string">'sunion'</span>, sunion)</span><br><span class="line">    <span class="keyword">const</span> Vkey1 = await redis.smembers(key1);</span><br><span class="line">    <span class="keyword">const</span> Vkey2 = await redis.smembers(key2);</span><br><span class="line">    console.log(<span class="string">'key1---Values: '</span>, Vkey1);</span><br><span class="line">    console.log(<span class="string">'key2---Values: '</span>, Vkey2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">allvalue:  [ '2', 'v1', 'v4', 'v5', 'v2', 'v3' ]</span></span><br><span class="line"><span class="comment">sismember:  1</span></span><br><span class="line"><span class="comment">srandmember:  [ '2', 'v3' ]</span></span><br><span class="line"><span class="comment">key1---Values:  [ '2', 'v1', 'v4', 'v5', 'v3' ]</span></span><br><span class="line"><span class="comment">key2---Values:  [ '2', 'v1', '1', '3', '5', '4' ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sdiff [ 'v5', 'v4', 'v3' ]</span></span><br><span class="line"><span class="comment">sinter [ '2' ]</span></span><br><span class="line"><span class="comment">sunion [ '2', '1', 'v1', '3', 'v4', 'v5', '5', 'v3', '4' ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">key1---Values:  [ '2', 'v4', 'v5', 'v3' ]</span></span><br><span class="line"><span class="comment">key2---Values:  [ '2', 'v1', '1', '3', '5', '4' ]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// string + set 求交集</span></span><br><span class="line">    await redis.set(<span class="string">"book:1:name"</span>, <span class="string">"shujujiegou"</span>);</span><br><span class="line">    await redis.set(<span class="string">"book:2:name"</span>, <span class="string">"suanfa"</span>);</span><br><span class="line">    await redis.set(<span class="string">"book:3:name"</span>, <span class="string">"C"</span>);</span><br><span class="line">    <span class="comment">// set</span></span><br><span class="line">    await redis.sadd(<span class="string">"tag:jichu"</span>, <span class="number">1</span>);</span><br><span class="line">    await redis.sadd(<span class="string">"tag:jichu"</span>, <span class="number">2</span>);</span><br><span class="line">    await redis.sadd(<span class="string">"tag:yuyan"</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 属于【语言】不属于【基础】</span></span><br><span class="line">    <span class="keyword">const</span> lang = await redis.sdiff(<span class="string">"tag:yuyan"</span>, <span class="string">"tag:jichu"</span>);</span><br><span class="line">    console.log(<span class="string">"lang: "</span>, lang);</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    lang:  [ '3' ]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有序集合</span></span><br><span class="line"><span class="comment"> * 1. 相比于集合类型多了一个排序属性 score（权重），单个存储元素有两个值【元素值、排序值】</span></span><br><span class="line"><span class="comment"> * !2. 场景</span></span><br><span class="line"><span class="comment"> *      1. 游戏排名</span></span><br><span class="line"><span class="comment"> *      2. 微博热点话题</span></span><br><span class="line"><span class="comment"> *      3. 学生成绩：汇总、排名、百分制、</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">async function <span class="title">zsetFun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">"z:student:math"</span>;</span><br><span class="line">    <span class="keyword">const</span> key1 = <span class="string">"z:student:english"</span>;</span><br><span class="line">    <span class="keyword">const</span> key2 = <span class="string">'z:student:sum'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Ykey = <span class="string">"y:student:math"</span>;</span><br><span class="line">    <span class="comment">// const Ykey1 = "y:student:english";</span></span><br><span class="line">    <span class="comment">// const Ykey2 = 'y:student:sum';</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// score field score field ...</span></span><br><span class="line">    <span class="keyword">const</span> value = [<span class="number">90</span>, <span class="string">"zhangsan"</span>, <span class="number">20</span>, <span class="string">"lisi"</span>, <span class="number">99</span>, <span class="string">"xiaoming"</span>, <span class="number">60</span>, <span class="string">"xiaohong"</span>];</span><br><span class="line">    <span class="keyword">const</span> value1 = [<span class="number">30</span>, <span class="string">"zhangsan"</span>, <span class="number">59</span>, <span class="string">"lisi"</span>, <span class="number">80</span>, <span class="string">"xiaoming"</span>, <span class="number">90</span>, <span class="string">"xiaohong"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> YmathValue = [<span class="number">30</span>, <span class="string">"lucy"</span>, <span class="number">59</span>, <span class="string">"nick"</span>, <span class="number">80</span>, <span class="string">"davi"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 添加</span></span><br><span class="line">    await redis.zadd(key, value);</span><br><span class="line">    await redis.zadd(key1, value1);</span><br><span class="line">    <span class="comment">// 默认按score生序排列, 0 -1 获取全部的</span></span><br><span class="line">    <span class="keyword">const</span> zrange = await redis.zrange(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// !分数由高到低，排 优秀的学生, 得逆序写 【100，80】 反之，顺序排，顺序写数字</span></span><br><span class="line">    <span class="keyword">const</span> zrevrange = await redis.zrevrangebyscore(key, <span class="number">100</span>, <span class="number">80</span>);</span><br><span class="line">    console.log(<span class="string">"zrange"</span>, zrange);</span><br><span class="line">    console.log(<span class="string">"zrevrange"</span>, zrevrange);</span><br><span class="line">    <span class="comment">// 2. 删除, 按score区间、起止、</span></span><br><span class="line">    await redis.zrem(key1, <span class="string">'xiaming'</span>);</span><br><span class="line">    await redis.zrem(key2, <span class="string">'xiaming'</span>);</span><br><span class="line">    <span class="comment">// await redis.zremrangebyscore(key, 10, 60);</span></span><br><span class="line">    <span class="comment">// 3. 总个数</span></span><br><span class="line">    <span class="keyword">const</span> count = await redis.zcard(key);</span><br><span class="line">    <span class="comment">// 4. 区间内个数</span></span><br><span class="line">    <span class="keyword">const</span> youxiu = await redis.zcount(key, <span class="number">80</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 5. 获取单个field</span></span><br><span class="line">    <span class="keyword">const</span> zhansan = await redis.zscore(key, <span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="comment">// 6. 单个fiele 加减</span></span><br><span class="line">    await redis.zincrby(key, <span class="number">1</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 多个集合操作</span></span><br><span class="line">    <span class="comment">// ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span></span><br><span class="line">    <span class="comment">// destination 给定的一个新的集合 </span></span><br><span class="line">    <span class="comment">// numkeys 计算的几个集合</span></span><br><span class="line">    <span class="comment">// WEIGHTS 乘法： 默认算法因子 1</span></span><br><span class="line">    <span class="comment">// AGGREGATE 默认 sum </span></span><br><span class="line">    <span class="comment">// !总成绩，单科相加</span></span><br><span class="line">    await redis.zinterstore(key2, <span class="number">2</span>, key, key1);</span><br><span class="line">    <span class="comment">// 全都打印</span></span><br><span class="line">    <span class="keyword">const</span> total = await redis.zrange(key2, <span class="number">0</span>, -<span class="number">1</span>, <span class="string">'WITHSCORES'</span>);</span><br><span class="line">    console.log(total);</span><br><span class="line">    <span class="comment">// 8. 某个field排名 从大到小</span></span><br><span class="line">    <span class="keyword">const</span> xiaoming = await redis.zrevrank(key, <span class="string">"xiaoming"</span>);</span><br><span class="line">    console.log(<span class="string">'xiaoming班级排名'</span>, xiaoming);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// !9. 汇总整个年级成绩, 【Y Z 班级数学汇总表】</span></span><br><span class="line">    <span class="comment">// !并集</span></span><br><span class="line">    await redis.zadd(Ykey, YmathValue);</span><br><span class="line">    <span class="comment">// 百分制</span></span><br><span class="line">    <span class="keyword">const</span> keyClassMath100 = <span class="string">"clas:math:100"</span>;</span><br><span class="line">    <span class="keyword">const</span> keyClassMath150 = <span class="string">"clas:math:150"</span>;</span><br><span class="line">    <span class="comment">// 总分</span></span><br><span class="line">    <span class="keyword">const</span> keyClassMathTotal = <span class="string">"clas:math:total"</span>;</span><br><span class="line">    <span class="comment">// 100 分制 返回元素集合的个数</span></span><br><span class="line">    await redis.zunionstore(keyClassMath100, <span class="number">2</span>, key1, Ykey);</span><br><span class="line">    <span class="comment">// 150 分制度</span></span><br><span class="line">    await redis.zunionstore(keyClassMath150, <span class="number">2</span>, key1, Ykey, <span class="string">'weights'</span>, <span class="number">1.5</span>, <span class="number">1.5</span>);</span><br><span class="line">    <span class="keyword">const</span> classMath100 = await redis.zrange(keyClassMath100, <span class="number">0</span>, -<span class="number">1</span>, <span class="string">'WITHSCORES'</span>);</span><br><span class="line">    <span class="keyword">const</span> classMath150 = await redis.zrange(keyClassMath150, <span class="number">0</span>, -<span class="number">1</span>, <span class="string">'WITHSCORES'</span>);</span><br><span class="line">    console.log(<span class="string">"年级数学成绩--100分制"</span>, classMath100);</span><br><span class="line">    console.log(<span class="string">"年级数学成绩--150分制"</span>, classMath150);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不知道 AGGREGATE 的用处。。。</span></span><br><span class="line">    <span class="comment">// await redis.zunionstore(keyClassMathTotal, 2, key1, Ykey, 'AGGREGATE', 'max');</span></span><br><span class="line">    <span class="comment">// const classMathTotal = await redis.zrange(keyClassMathTotal, 0, -1, 'WITHSCORES');</span></span><br><span class="line">    <span class="comment">// console.log("年级数学成绩", classMathTotal);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka系列三</title>
      <link href="2020/11/07/kafka_3/"/>
      <url>2020/11/07/kafka_3/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/047.jpg" width=80% /><span class='geyan'>任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</span><a id="more"></a><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/100029201" target="_blank" rel="noopener">极客时间—Kafka核心技术与实战</a><br><a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/huxi2b/">胡夕 - 博客园 –《Apache Kafka实战》</a><br><a href="https://www.zhihu.com/question/56172498" target="_blank" rel="noopener">kafka 推荐书籍？</a><br><a href="https://kafka.apachecn.org/documentation.html#introduction" target="_blank" rel="noopener">kafka 中文文档</a><br><a href="https://gitbook.cn/books/5ae1e77197c22f130e67ec4e/index.html" target="_blank" rel="noopener">深入浅出理解基于 Kafka 和 ZooKeeper 的分布式消息队列</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka系列二</title>
      <link href="2020/11/03/kafka_2/"/>
      <url>2020/11/03/kafka_2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/046.jpg" width=80% /><span class='geyan'>川泽纳污，山薮藏疾，瑾瑜匿瑕。（《左传·宣公十五年》）</span><a id="more"></a><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>Kafka 的消息组织方 式实际上是三级结构：主题 - 分区 - 消息</p><img data-src="004.png" width=80% /><div class="note danger"><p>问题一：为什么 Kafka 要做这样的设计？为什么使用分区的概念而不是直接使用多个主题呢？</p><div class="note default"><ol><li>分区的目的是：提供负载均衡，实现系统的<strong>高伸缩性</strong>【Scalability】</li><li>每条消息 <strong>只会</strong> 保存在某一个分区中。</li><li>不同的分区可以放在不同机器上；</li><li>数据的读写都是基于 <strong>分区</strong> 这个粒度；</li></ol></div></div><h3 id="生产者-分区策略"><a href="#生产者-分区策略" class="headerlink" title="生产者 分区策略"></a>生产者 分区策略</h3><blockquote><p>分区策略是决 定生产者将消息发送到哪个分区的算法</p></blockquote><h4 id="轮询策略"><a href="#轮询策略" class="headerlink" title="轮询策略"></a>轮询策略</h4><p>Round-robin 策略，即顺序分配,kafka默认分区策略。</p><img data-src="005.png" width=80% /><h4 id="随机策略"><a href="#随机策略" class="headerlink" title="随机策略"></a>随机策略</h4><p>Randomness 策略， 随机的将消息放置到任意一个分区上。</p><img data-src="006.png" width=80% /><h4 id="按消息键保序策略"><a href="#按消息键保序策略" class="headerlink" title="按消息键保序策略"></a>按消息键保序策略</h4><p>根据业务指定合适的key进行分区。</p><h3 id="生产者-压缩"><a href="#生产者-压缩" class="headerlink" title="生产者 压缩"></a>生产者 压缩</h3><div class="note danger"><p>Producer 发送压缩消 息到 Broker 后，Broker 照单全收并原样保存起来。当 Consumer 程序请求这部分消息 时，Broker 依然原样发送出去，当消息到达 Consumer 端后，由 Consumer 自行解压缩 还原成之前的消息。</p><div class="note success"><p>Producer 端压缩、Broker 端保持、Consumer 端解压缩。</p></div></div><h4 id="问题一：Producer、Broker压缩算法不一致"><a href="#问题一：Producer、Broker压缩算法不一致" class="headerlink" title="问题一：Producer、Broker压缩算法不一致"></a>问题一：Producer、Broker压缩算法不一致</h4><ol><li>Producer压缩一遍</li><li>Broker解压，再压缩一遍。</li></ol><p>但如果配置一致，则broker保持就好了。</p><h4 id="问题二：版本不同，Broker端发生消息格式转化"><a href="#问题二：版本不同，Broker端发生消息格式转化" class="headerlink" title="问题二：版本不同，Broker端发生消息格式转化"></a>问题二：版本不同，Broker端发生消息格式转化</h4><blockquote><p>消息格式转换主要是为了兼容老版本的消费者程序</p></blockquote><ol><li>Broker解压，再压缩一遍, 从而支持老版本</li><li>丧失Zero Copy的特性，</li></ol><div class="note danger">Zero Copy”就是“零拷贝<p>当数据在磁盘和网 络进行传输时避免昂贵的内核态数据拷贝，从而实现快速的数据传输</p></div><h3 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h3><div class="note success"><p>压缩算法的指标</p><ol><li><strong>压缩比</strong>，原先占 100 份空 间的东西经压缩之后变成了占 20 份空间，那么压缩比就是 5，显然压缩比越高越好</li><li><strong>压缩 / 解压缩吞吐量</strong>，比如每秒能压缩或解压缩多少 MB 的数据。同样地，吞 吐量也是越高越好。</li></ol></div><p>在 Kafka 2.1.0 版本之前，Kafka 支持 3 种压缩算法：<strong>GZIP、Snappy 和 LZ4</strong>。从 2.1.0 开 始，Kafka 正式支持 <strong>Zstandard 算法（简写为 zstd）</strong>。它是 Facebook 开源的一个压缩算 法，能够提供超高的压缩比（compression ratio）。</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>CPU允许的情况下，开启压缩zstd，进而也可以节省带宽。</p><img data-src="007.png" width=80% /><h2 id="避免消息丢失"><a href="#避免消息丢失" class="headerlink" title="避免消息丢失"></a>避免消息丢失</h2><blockquote><p>如何配置 Kafka 无消息丢失?</p><blockquote><p>对一个问题的回答，先要确认问题是什么，概念的边界</p></blockquote></blockquote><div class="note danger"><p>Kafka 的世界里什么 才算是消息丢失，或者说 Kafka 在什么情况下能保证消息不丢失。这点非常关键，<strong>因为很多时候我们容易混淆责任的边界，如果搞不清楚事情由谁负责，自然也就不知道由谁来出解决方案了。</strong></p><div class="note success"><p>Kafka 只对“<strong>已提交</strong>”的消息（committed message）做<strong>有限度</strong>的持久化 保证。</p><ol><li>已提交：只有broker确认收到才算是已提交；</li><li>有限度：凡事有例外，如果broker全部出现问题等。</li></ol></div></div><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><blockquote><p>问题： 生产者发送了消息，但是Kafka没有收到</p></blockquote><p>回答问题可以： 概念+原因，概念是为了做铺垫，让原因更直白</p><ol><li>Kafka Producer 是<strong>异步发送消息的</strong>，也就是说如果你调用的是 producer.send(msg) 这个 API，那么它通常会立即返回，但此时<strong>你不能认为消息发送已成功完成。</strong>。 “fire and forget”，翻译一下就是“发射后不管“； </li><li>造成丢失的原因不限于：网络抖动、格式不符合broker&lt;消息过大&gt;等；</li><li>采用 <strong>回调+重试</strong>的方式，producer.send(msg, callback)</li></ol><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><blockquote><p>问题：消费者程序丢失数据</p></blockquote><ol><li>问题定位：消费者要消费的数据不见了。</li><li>涉及的概念：Consumer 程序有 个“位移”的概念，表示的是这个 Consumer 当前消费到的 Topic 分区的位置。</li></ol><img data-src="008.png" width=80% /><p>位移可以类比读书的书签，正常来说，你这次读到100页，下次继续读完全没有问题，<strong>问题是：你本计划读到100页，就把书签放到100的位置，实际上读到90页就跑出去完了，下次直接从100页开始，其中就少读了10页</strong>。</p><p>解决的方法类似与生产者，<strong>维持先消费消息（阅读），再更新位移（书签）的顺序</strong></p><h4 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h4><h5 id="Producer参数"><a href="#Producer参数" class="headerlink" title="Producer参数"></a>Producer参数</h5><ol><li>使用 producer.send(msg, callback)。</li><li>设置 acks = all。表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。 这是最高等级的“已提交”定义。<strong>可能对某些业务有点浪费</strong></li><li>retries 为一个较大的值。重试次数；</li></ol><h5 id="Broker-端的参数"><a href="#Broker-端的参数" class="headerlink" title="Broker 端的参数"></a>Broker 端的参数</h5><ol><li>unclean.leader.election.enable = false： 控制的是哪 些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么 它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false， 即不允许这种情况的发生。</li><li>replication.factor &gt;= 3： 最好将 消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。</li><li>min.insync.replicas &gt; 1： 控制的是消息至少要被写入到多少个副本<strong>才算是“已提交”</strong>。设置成大于 1 可以提升消息持久性。在实际环境中<strong>千万不要使用默认值 1。</strong></li></ol><div class="note danger"><p>确保 replication.factor &gt; min.insync.replicas;<br><strong>推荐设置成 replication.factor = min.insync.replicas + 1。</strong></p><blockquote><p> 如果两者相等，那么只要有一个副本挂 机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要 在不降低可用性的基础上完成</p></blockquote></div><h2 id="幂等与事务"><a href="#幂等与事务" class="headerlink" title="幂等与事务"></a>幂等与事务</h2><p><strong>消息交付可靠性保障：</strong> 是指 Kafka 对 Producer 和 Consumer 要处理的消息提供什么样的承诺</p><ol><li>最多一次（at most once）：消息可能会丢失，但绝不会 被重复发送。</li><li>至少一次（at least once）<strong>【默认】</strong>：消息不会丢失，但有可能被 重复发送。</li><li>精确一次（exactly once）：消息不会丢失，也不会被重 复发送。</li></ol><p>Kafka 是怎么做到精确一次的呢？简单来说，这是通过两种机制：<strong>幂等性（Idempotence）和事务 （Transaction）</strong></p><h3 id="幂等性-Producer"><a href="#幂等性-Producer" class="headerlink" title="幂等性 Producer"></a>幂等性 Producer</h3><blockquote><p>幂等性有很多好处，其最大的优势在于我们可以安全地重试 任何幂等性操作，反正它们也不会破坏我们的系统状态。</p></blockquote><p>在 Kafka 中，Producer <strong>默认不是幂等性</strong>的,仅需要设置一个 参数即可，即 <strong>props.put(“enable.idempotence”, ture)，</strong>或 <strong>props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CO NFIG， true)。</strong></p><h4 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h4><ol><li>只能保证单分区上的幂等性，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消 息，它无法实现多个分区的幂等性。</li><li>它只能实现单会 话上的幂等性，不能实现跨会话的幂等性。这里的会话，你 可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了</li></ol><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p><strong>实现多分区以及多会话上的消息无重复</strong>，应该怎么做呢？答案就是<strong>事务（transaction）或 者依赖事务型 Producer。</strong></p><p>事务提供的安全性保障是经典的 <strong>ACID，即原 子性（Atomicity）、一致性 (Consistency)、隔离性 (Isolation) 和持久性 (Durability)。</strong></p><p>事务型 Producer 能够保证将消息原子性地写入到多个分区 中。这批消息要么全部写入成功，要么全部失败。和幂等性 Producer 一样，开启 <strong>enable.idempotence = true。</strong></p><p>Consumer 端，读取事务型 Producer 发送的消息也是需要一些变更的。修改起来也很简单，设置 isolation.level 参数的值即可。当前这个参数有两个取值：</p><ol><li>read_uncommitted：这是默认值，表明 Consumer 能 够读取到 Kafka 写入的任何消息,</li><li>read_committed：表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看 到非事务型 Producer 写入的所有消息。</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong>天下没有免费的午餐</strong>。比起幂等性 Producer， 事务型 Producer 的性能要更差，在实际使用过程中，我们 需要仔细评估引入事务的开销，</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/100029201" target="_blank" rel="noopener">极客时间—Kafka核心技术与实战</a><br><a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/huxi2b/">胡夕 - 博客园 –《Apache Kafka实战》</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka系列一</title>
      <link href="2020/11/02/kafka_1/"/>
      <url>2020/11/02/kafka_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/045.jpg" width=80% /><span class='geyan'>学所以益才也，砺所以致刃也。（《说苑·建本》）</span><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note danger"><blockquote><p>刚学了rabbitmq, 怎么突然又开始了kafka?</p></blockquote><ol><li>艺多不压身   &lt;摸着渐渐稀疏的头发&gt;</li><li><strong>只有对比才能有更深的理解</strong></li><li>起于专业，终于专业</li></ol></div><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>知乎上<a href="https://www.zhihu.com/question/56172498" target="_blank" rel="noopener">kafka 推荐书籍？</a>，其中列出来了大神的书籍、博客，站在大佬的肩膀上，努力向前！</p><p>摘录下</p><ol><li><a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener"> Apache Kafka 官网</a></li><li><a href="https://stackoverflow.com/questions/tagged/apache-kafka?sort=newest&pageSize=15" target="_blank" rel="noopener">StackOverflow: Newest &#x27;apache-kafka&#x27; Questions</a></li><li><a href="https://blog.csdn.net/lizhitao/article/details/39499283" target="_blank" rel="noopener">美团李志涛博客</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/huxi2b/">胡夕 - 博客园 –《Apache Kafka实战》</a></li><li><a href="https://www.orchome.com/kafka/index" target="_blank" rel="noopener">kafka中文教程 - OrcHome</a></li></ol><p>看了下<a href="https://time.geekbang.org/column/intro/100029201" target="_blank" rel="noopener">极客时间—Kafka核心技术与实战</a>的目录介绍，加上大佬有《Apache Kafka实战》，应该这样的配套更全面。</p><p>那就开始学习吧。</p><p>Kafka 是由 Linkedin 公司开发的，它是一个<code>分布式</code>的，支持<code>多分区</code>、<code>多副本</code>，基于 <code>Zookeeper</code> 的分布式消息流平台，它同时也是一款<code>开源的</code>基于<strong>发布订阅模式的消息引擎系统</strong>。</p><div class="note default"><p><strong>消息引擎系统概念：</strong></p><ol><li>【官方】消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语 义准确的消息，实现松耦合的异步式数据传递。</li><li>【人话】系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。</li></ol><p><strong>组成部分</strong></p><ol><li>消息：json、xml、protocol buffer等</li><li>传输协议; &lt;http不属于传输协议，属于网络协议&gt;<ol><li>点对点模型: 上述列子中，A 只能被 B 读取。</li><li>发布\订阅模型<ol><li>topic、publisher、subscriber</li><li>可以有多个发布者向相同的主题发布消息，也支持多个消费者订阅。</li></ol></li></ol></li></ol></div><h3 id="kafka-基本概念"><a href="#kafka-基本概念" class="headerlink" title="kafka 基本概念"></a>kafka 基本概念</h3><img data-src="007.png" width=80% /><img data-src="008.png" width=80% /><ol><li>Broker：Kafka 集群由多个 Kafka 实例（server） 组成，每个实例构成一个 broker，说白了就是服务器；</li><li>Producer：生产者，即消息发送者，push 消息到 Kafka 集群中的 broker（就是 server）中</li><li>Topic：主题，producer 向 kafka 集群 push 的消息会被归于某一类别，即Topic，这本质上只是一个逻辑概念，面向的对象是 producer 和 consumer，<ol><li>producer 只需要关注将消息 push 到哪一个 Topic 中，</li><li>consumer 只需要关心自己订阅了哪个 Topic；</li></ol></li><li>Partition：每一个 Topic 又被分为多个 Partitions，即<strong>物理分区</strong>；<ol><li>出于负载均衡的考虑，同一个 Topic 的 Partitions 分别存储于 Kafka 集群的多个 broker 上；</li><li>为了提高可靠性，这些 Partitions 可以由 Kafka 机制中的 replicas 来设置备份的数量；</li></ol></li><li>Consumer：消费者，从 Kafka 集群的 broker 中 pull 消息、消费消息；</li><li>Consumer group：high-level consumer API 中，每个 consumer 都属于一个 consumer-group，每条消息只能被 consumer-group 中的一个 Consumer 消费，但可以被多个 consumer-group 消费；</li><li>Replica。Kafka 中消息的备份又叫做副本（Replica），副本的数量是可以配置的，Kafka 定义了两类副本：<ol><li>领导者副本（Leader Replica）</li><li>追随者副本（Follower Replica）</li><li><strong>前者对外提供服务，后者只是被动跟随</strong></li></ol></li><li>Offset： 消息位移， 表示分区中每条消息的位置信息，是一个单调递增且不变的值</li><li>Consumer Offset： 消费者位移，表征消费者消费进度，每个消费者都有自己的消费者位移。</li><li>ZooKeeper：Kafka 通过 ZooKeeper 来存储集群的 meta 信息等；</li></ol><h3 id="kafka-与-Zookeeper"><a href="#kafka-与-Zookeeper" class="headerlink" title="kafka 与 Zookeeper"></a>kafka 与 Zookeeper</h3><p>Kafka的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成，<strong>Broker 负责接收和处理客户端发送过来的请求</strong>，以及<strong>对消息进行持久化</strong>；</p><blockquote><p>该部分需要结合zk, 后续再学习。</p></blockquote><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>Kafka的定位：Kafka 不再是一个单纯的消息引擎系统，而是能够实现精确一次（Exactly-once）处理语义的实时流处理平台。</p><ol><li>Apache Kafka，也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以 让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。</li><li>Confluent Kafka，Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太 多可供参考的范例。</li><li>CDH/HDP Kafka，大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简 单，节省运维成本；缺陷在于把控度低，演进速度较慢。</li></ol><div class="note danger"><p><strong>监控</strong><br>JMXTrans + InfluxDB + Grafana</p></div><h3 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h3><img data-src="009.png" width=80% /><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><div class="note danger"><p>五种I/O模型</p><ol><li>阻塞式 I/O</li><li>非阻塞式 I/O</li><li>I/O 多路复用：</li><li>信号驱动 I/O</li><li>异步 I/O。</li></ol><blockquote><p>I/O 模型与 Kafka 的关系又是什么呢？</p></blockquote><div class="note info"><p>实际上 Kafka 客户端底层使用了 Java 的 selector，selector 在 Linux 上的实现机制是 epoll，而在 Windows 平台上的实现机制 是 select。因此在这一点上将 Kafka 部署在 Linux 上是有优势的，因为能够获得更高效的 I/O 性能。</p><p>在 Linux 部署 Kafka 能够享受到<strong>零拷贝技术</strong>所带来的 快速数据传输特性。</p></div></div><h4 id="磁盘容量"><a href="#磁盘容量" class="headerlink" title="磁盘容量"></a>磁盘容量</h4><p>每天 <strong>1 亿</strong>条 <strong>1KB</strong> 大小的消息，保存<strong>两份</strong>且留存<strong>两周</strong>的时间，Kafka 集群需要为这个业务预 留多少磁盘空间吗？</p><div class="note success"><ol><li>单日：1 亿 * 1KB * 2 / 1000 / 1000 = 200GB</li><li>加上索引数据等，预留<strong>20%磁盘空间</strong>； 220G</li><li>两周，220*14，大约3T；</li><li>kafka支持数据压缩，<strong>压缩比0.75</strong>， 总的需要2.25T</li></ol></div><div class="note primary"><p>考虑的因素</p><ol><li>消息数量</li><li>留存时间</li><li>平均消息大小</li><li>备份数量</li><li>是否启用压缩</li></ol></div><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><div class="note info"><p>假设你公司的机房环境是<code>千兆网络</code>，即 <code>1Gbps</code>，现在你有个业务，其业务目标或 SLA 是在 <strong>1 小时内处 理 1TB 的业务数据</strong>。需要多少台 Kafka 服务器来完成这个业务呢？</p><div class="note danger"><ol><li>1Gbps, 每秒处理 1Gb 的数据;</li><li>单台Kafka服务用<strong>70%</strong> 带宽；也就是<strong>700Mb；【最大】</strong></li><li>1T一小时，每秒 1000*1000/3600 = 277；</li><li>但<strong>带宽资源 Mbps 而不是 MBps, 需要乘以8，等于2300+</strong></li><li>2336/240， 约等于10台机器</li><li>如果需要<strong>备份两份</strong>，乘以3，即<strong>30台</strong></li></ol></div></div><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><div class="note danger"><p><strong>Broker 配置</strong></p><ol><li>log.dirs：一定要配置<strong>多个路径</strong>，格式为CSV；</li><li>log.dir：补充上一个参数的；</div></li></ol><div class="note default"><p><strong>ZooKeeper 配置</strong></p><ol><li>zookeeper.connect: 🚩CSV 格式的参数，比 如我可以指定它的值为 zk1:2181,zk2:2181,zk3:2181</li></ol><div class="note success"><p>你有两套 Kafka 集群，假设分别叫它们 kafka1 和 kafka2，那么两套集群的zookeeper.connect参数可以 这样指定：</p><p>zk1:2181,zk2:2181,zk3:2181/kafka1<br>zk1:2181,zk2:2181,zk3:2181/kafka2。</p><p>切记 <strong>chroot</strong> [别名]只需要写一次，而且是加到最后的</p></div></div><div class="note primary"><p><strong>与 Broker 连接配置</strong></p><ol><li>listeners：学名叫监听器, 对内，内网访问，这个就行了。</li><li>advertised.listeners：这组监听器是 Broker 用于对外发布的</li><li>listener.security.protocol.map： 告诉这个协议 底层使用了哪种安全协议；</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">改变当前broker 0上的log cleaner threads可以通过下面命令实现：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-name 0 --alter --add-config log.cleaner.threads&#x3D;2</span><br><span class="line"></span><br><span class="line">查看当前broker 0的动态配置参数：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-name 0 --describe</span><br><span class="line"></span><br><span class="line">删除broker id为0的server上的配置参数&#x2F;设置为默认值：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-name 0 --alter --delete-config log.cleaner.threads</span><br><span class="line"></span><br><span class="line">同时更新集群上所有broker上的参数（cluster-wide类型，保持所有brokers上参数的一致性）：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-default --alter --add-config log.cleaner.threads&#x3D;2</span><br><span class="line"></span><br><span class="line">查看当前集群中动态的cluster-wide类型的参数列表：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --bootstrap-server localhost:9092 --entity-type brokers --entity-default --describe</span><br></pre></td></tr></table></figure></div><div class="note success"><p><strong>Topic 管理</strong></p><ol><li>auto.create.topics.enable：false, 是否允许自动创建 Topic。建议：false, 防止疏忽创建topic;</li><li>unclean.leader.election.enable：是否允许 Unclean Leader 选举。建议false, 不让落后太多的副本当选leader；</li><li>auto.leader.rebalance.enable：是否允许定期进 行 Leader 选举。false，没必要没事<strong>换</strong>leader，即便原来的leader正常也会定<strong>期换，</strong>没有必要。</li></ol><div class="note danger"><p><strong>Topic 级别参数</strong><br>Topic 级别参数会覆盖全局 Broker 参数的值，而每个 Topic 都能设置自己的参数值，这就是所谓的 Topic 级别参数.</p><p>retention.ms：规定了该 Topic 消息被保存的时长。 默认是 7 天，即该 Topic 只保存最近 7 天的消息<br>retention.bytes：规定了要为该 Topic 预留多大的磁盘空间。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可在创建topic时，通过--config进行指定项的参数配置，覆盖默认配置：</span><br><span class="line">&gt; bin&#x2F;kafka-topics.sh --zookeeper localhost:2181 --create --topic my-topic --partitions 1 --replication-factor 1 --config max.message.bytes&#x3D;1000000 --config flush.messages&#x3D;1</span><br><span class="line"></span><br><span class="line">也可以在创建topic之后通过config.sh文件对其中的特定指标进行修改，下面操作对my-topic相关指标进行配置：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name my-topic --alter --add-config max.message.bytes&#x3D;1000000</span><br><span class="line"></span><br><span class="line">查看是否修改成功：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name my-topic --describe</span><br><span class="line"></span><br><span class="line">也可以撤销&#x2F;删除某些指定配置，将该项重置为默认配置：</span><br><span class="line">&gt; bin&#x2F;kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name my-topic --alter --delete-config max.message.bytes</span><br></pre></td></tr></table></figure></div></div><div class="note warning"><p><strong>数据留存</strong></p><ol><li>log.retention.{hour|minutes|ms}: 控制一条消息数据被保存多长时间; hour多一些</li><li>log.retention.bytes：这是指定 Broker 为消息保存 的总磁盘容量大小。：-1无限制，自行设置就行</li><li>message.max.bytes：控制 Broker 能够接收的最大消 息大小。默认1000012， 1M，太小，只是一个度量尺；可以适当设置大一些。</li></ol></div><div class="note danger"><p><strong>操作系统参数</strong></p><ol><li>文件描述符限制: ulimit -n 1000000, 设置这个参数一 点都不重要，但不设置的话后果很严重，比如你会经常看 到“Too many open files”的错误。</li><li>文件系统类型: XFS 的性能要强于 ext4，</li><li>Swappiness: 网上很多文章都提到设置其为 0，将 swap 完全禁掉以防止 Kafka 进程使用 swap 空间。我个人 反倒觉得还是不要设置成 0 比较好，设置成一个比较小的值，当开始使用 swap 空间时，你至少 能够观测到 Broker 性能开始出现急剧下降，从而给你进一 步调优和诊断问题的时间, 比如：1</li><li>提交时间：默认是 5 秒。向 Kafka 发送 数据并不是真要等数据被写入磁盘才会认为成功，而是只要 数据被写入到操作系统的页缓存（Page Cache）上就可以 了，随后操作系统根据 LRU 算法会定期将页缓存上 的“脏”数据落盘到物理磁盘上</li></ol></div><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><p>问题摘录–<a href="https://time.geekbang.org/column/intro/100029201" target="_blank" rel="noopener">极客时间—Kafka核心技术与实战</a></p><div class="note success"><ol><li>A系统为什么不能直接把消息发送给B系统？<ol><li>削峰填谷，避免雪崩。</li><li>上游接受订单，下游处理，结果雪崩了；<ol><li><strong>对上游限速不合理</strong>，问题不在上游，采用消息队列进行<strong>解耦、削峰填谷</strong></div></li></ol></li></ol></li></ol><div class="note info">mq和rpc调用的区别是什么？<div class="note primary"><p>常见的数据流有三种：</p><ol><li>通过数据库；</li><li>通过服务调用（REST/RPC）; </li><li>通过异步消息传递（消息引擎，如 Kafka）</li></ol></div><ol><li>MQ有自己的buffer，能够对抗过载（overloaded）和不可用场景</li><li>MQ支持重试</li><li>允许发布/订阅模式</li><li>RPC是介于通过数据库和通过MQ之间的数据流模式。</li></ol></div><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zhihu.com/question/56172498" target="_blank" rel="noopener">kafka 推荐书籍？</a><br><a href="https://kafka.apachecn.org/documentation.html#introduction" target="_blank" rel="noopener">kafka 中文文档</a><br><a href="https://gitbook.cn/books/5ae1e77197c22f130e67ec4e/index.html" target="_blank" rel="noopener">深入浅出理解基于 Kafka 和 ZooKeeper 的分布式消息队列</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node&amp;RabbitMQ系列四 X场景解构</title>
      <link href="2020/10/30/RabbitMQ_4/"/>
      <url>2020/10/30/RabbitMQ_4/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/044.png" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><div class="note danger"><p>先设想购票的场景：用户<code>注册</code>成功后，三天内<code>未登陆</code>，则<code>短信提醒</code>。</p><p>三段式场景: A-B-C<br>可以延伸至：</p><ol><li>发起购票—&gt;时间+未付款—&gt;短信提醒⏰、取消订单</li><li>发起退款—&gt;时间+未处理—&gt;通知相关人员⏰</li></ol><div class="note default">总的来说，满足A，到期时间后进一步处理。</div></div><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><img data-src="005.png" width=80% /><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><a href="https://www.cnblogs.com/davenkin/p/rabbitmq-best-practices.html" target="_blank" rel="noopener">该案例来自–RabbitMQ最佳实践</a></p><div class="note danger"><p>假设有个订单(Order)系统，用户下单后需要向用户<code>发送短信</code>通知，而所有对订单的数据显示采用了<code>CQRS架构</code>，即将订单的读模型和写模型分离，即所有订单的更新都<code>通过事件发到rabbitmq</code>，然后专门有个<code>consumer接收这些消息用于更新订单的读模型</code>。</p><div class="note primary"><p>在次基础上，做了少许更改： <strong>创建订单，5分钟后如果没有支付，则发短信通知。</strong>, 整个流程：</p><ol><li>触发订单，统一放进 order.exchange 交换机，并且采用 <code>rabbitmq delay</code> 插件、采用<code>topic</code>规则；</li><li>一个订单消息，同时发到两个队列<ol><li>处理订单： order.# 【后期update可以沿用该路由】</li><li>处理短信：order.create</li></ol></li><li>发布消息<ol><li>采用手工ack的方式，记录日志，进一步保证可靠性；</li><li>采用延迟插件<ol><li>order.#： 直接发送</li><li>order.create： 延迟N分钟，</li></ol></li></ol></li><li>队列<ol><li>order.notification 绑定 order.create, 处理短信</li><li>order.summary： 绑定order.#， 处理订单业务相关</li></ol></li><li>死信队列<ol><li>模拟，短信服务、订单业务异常，扔到死信队列，以供之后相关操作。</li></ol></li></ol></div><div class="note success"><blockquote><p>待完善</p></blockquote><ol><li>可靠投递；注：先把流程走通，实现了再完善；</li><li>重试投递；requeue问题</li><li>当然还有更多问题待发掘。</li></ol></div></div><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><h4 id="1-rabbitmq-订单相关的交换机、队列等的名称"><a href="#1-rabbitmq-订单相关的交换机、队列等的名称" class="headerlink" title="1. rabbitmq 订单相关的交换机、队列等的名称"></a>1. rabbitmq 订单相关的交换机、队列等的名称</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单相关mq</span></span><br><span class="line"><span class="keyword">export</span> enum ORDER &#123;</span><br><span class="line">    <span class="comment">// 相关业务一个交换机</span></span><br><span class="line">    EXCHANE = <span class="string">'order.exchange'</span>,</span><br><span class="line">    <span class="comment">// 路由key</span></span><br><span class="line">    ROUTERKEY_CREATE = <span class="string">'order.create'</span>,</span><br><span class="line">    ROUTERKEY_SUMMARY = <span class="string">'order.#'</span>,</span><br><span class="line">    <span class="comment">// 两个队列</span></span><br><span class="line">    QUEUE_NOTIFICATION = <span class="string">'order.notification'</span>,</span><br><span class="line">    QUEUE_SUMMARY = <span class="string">'order.summary'</span>,</span><br><span class="line">    <span class="comment">// 死信</span></span><br><span class="line">    ELX_EXCHANGE = <span class="string">'order.dlx.exchange'</span>,</span><br><span class="line">    ELK_QUEUE = <span class="string">'order.dlq.queue'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-生产端"><a href="#2-生产端" class="headerlink" title="2. 生产端"></a>2. 生产端</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rabbimq <span class="keyword">from</span> <span class="string">"./rabbitmq"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ORDER, EX_TYPE &#125; <span class="keyword">from</span> <span class="string">'./rbEnum'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connct = rabbimq.connection();</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connct.createConfirmChannel();</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="comment">// 统一业务，用一个交换机： 延迟+topic</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(ORDER.EXCHANE, EX_TYPE.DELAY, &#123;</span><br><span class="line">        durable: <span class="literal">true</span>,</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;<span class="string">'x-delayed-type'</span>: EX_TYPE.TOPIC &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 模拟一些假的数据</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="comment">// N分钟后，对没支付的进行通知</span></span><br><span class="line">        <span class="keyword">const</span> time = mock.Random.integer(<span class="number">500</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">const</span> expiration = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">const</span> content = &#123; <span class="attr">id</span>: mock.Random.integer(<span class="number">1000</span>), <span class="attr">number</span>: mock.Random.integer(<span class="number">1</span>, <span class="number">3</span>), time &#125;;</span><br><span class="line">        <span class="keyword">const</span> msg =  <span class="built_in">JSON</span>.stringify(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// !场景1：创建订单，如果三分钟不付款，则发短信通知</span></span><br><span class="line">        channel.publish(ORDER.EXCHANE, ORDER.ROUTERKEY_CREATE, Buffer.from(msg), &#123;</span><br><span class="line">            expiration,</span><br><span class="line">            contentType: <span class="string">'application/json'</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">'x-delay'</span>: time, <span class="comment">// 一定要设置，否则按一般的交换机</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 消息持久化</span></span><br><span class="line">            deliveryMode: <span class="number">2</span></span><br><span class="line">        &#125;, (err, ok) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 生产端监听消息是否被ack；比如，记录日志啥的</span></span><br><span class="line">            <span class="comment">// 如果消费端，nack, 则不会再次到这里</span></span><br><span class="line">            <span class="comment">// console.log("是否被ack----ok: ", err, ok);</span></span><br><span class="line">            <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'【SMS】Message nacked!'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'【SMS】Message acked'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// !场景2, 发送后，供消费端消费</span></span><br><span class="line">        channel.publish(ORDER.EXCHANE, ORDER.QUEUE_SUMMARY, Buffer.from(msg), &#123;&#125;, (err, ok) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'【summary】Message nacked!'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'【summary】Message acked'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果创建需要确认的channel，需要等待</span></span><br><span class="line">    <span class="comment">// 生产者消息确认，一旦消息被投递到指定交换机，broker就会ack</span></span><br><span class="line">    <span class="keyword">await</span> channel.waitForConfirms()</span><br><span class="line">    <span class="keyword">await</span> channel.close();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-消费端"><a href="#3-消费端" class="headerlink" title="3. 消费端"></a>3. 消费端</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rabbimq <span class="keyword">from</span> <span class="string">"./rabbitmq"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Channel, Message &#125; <span class="keyword">from</span> <span class="string">"amqplib"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ORDER, EX_TYPE &#125; <span class="keyword">from</span> <span class="string">'./rbEnum'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 死信队列，针对无效信息的归属地</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">orderDlq</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connect = rabbimq.connection();</span><br><span class="line">    <span class="keyword">const</span> channel: Channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(ORDER.ELX_EXCHANGE, EX_TYPE.TOPIC, &#123; <span class="attr">durable</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> queueConsumer = <span class="keyword">await</span> channel.assertQueue(ORDER.ELK_QUEUE, &#123;</span><br><span class="line">        exclusive: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.prefetch(<span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueConsumer.queue, ORDER.ELX_EXCHANGE, <span class="string">'order.#'</span>);</span><br><span class="line"></span><br><span class="line">    channel.consume(queueConsumer.queue, <span class="keyword">async</span> msg =&gt; &#123;</span><br><span class="line">        <span class="comment">// console.info('【死信队列】收到的消息', msg.content.toString());</span></span><br><span class="line">        channel.ack(msg, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对没有支付的，发送短信，</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">orderSms</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = &#123;</span><br><span class="line">        exchange: ORDER.EXCHANE, <span class="attr">exchangeType</span>: EX_TYPE.DELAY,</span><br><span class="line">        routerKey: ORDER.ROUTERKEY_CREATE, <span class="attr">queueName</span>: ORDER.QUEUE_NOTIFICATION,</span><br><span class="line">        elx: ORDER.ELX_EXCHANGE, <span class="attr">elk</span>: ORDER.ELK_QUEUE</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer(args, <span class="keyword">async</span> (msg, channel) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; content &#125; = msg;</span><br><span class="line">        <span class="comment">// console.log(`【短信】获取消息: $&#123;content&#125;`);</span></span><br><span class="line">        <span class="comment">// 根据消息ID，查询对应用户是否支付，如果支付ack, 否则发送短信&amp;扔到死信队列，之后再说</span></span><br><span class="line">        <span class="keyword">const</span> success = mock.Random.boolean();</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">`【短信】无需发送短信 <span class="subst">$&#123;content&#125;</span>`</span>, )</span><br><span class="line">            channel.ack(msg, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// !可以扔到短信队列</span></span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">`【短信】该用户尚未支付，发送短信中----- <span class="subst">$&#123;content&#125;</span>`</span>);</span><br><span class="line">            channel.nack(msg, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建订单，针对订单相关信息进行处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">orderSummery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = &#123;</span><br><span class="line">        exchange: ORDER.EXCHANE, <span class="attr">exchangeType</span>: EX_TYPE.DELAY,</span><br><span class="line">        routerKey: ORDER.ROUTERKEY_SUMMARY, <span class="attr">queueName</span>: ORDER.QUEUE_SUMMARY,</span><br><span class="line">        elx: ORDER.ELX_EXCHANGE, <span class="attr">elk</span>: ORDER.ELK_QUEUE</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    consumer(args, <span class="keyword">async</span> (msg, channel) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; content, <span class="attr">fields</span>: &#123; deliveryTag &#125;, <span class="attr">properties</span>: &#123; <span class="attr">headers</span>: &#123; retry &#125; &#125; &#125; = msg;</span><br><span class="line">        <span class="comment">// console.log(`【订单-消费】获取消息: $&#123;content&#125;`);</span></span><br><span class="line">        <span class="comment">// 模拟业务</span></span><br><span class="line">        <span class="keyword">const</span> success = <span class="keyword">await</span> mock.Random.boolean();</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">'【订单-消费】消费成功'</span>, content.toString());</span><br><span class="line">            <span class="comment">// broker 从内存磁盘中删除</span></span><br><span class="line">            channel.ack(msg, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 仍旧保留</span></span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">`【订单-消费】放入死信队列`</span>);</span><br><span class="line">            channel.nack(msg, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 最大重试次数 [加入redis 或 其他队列]</span></span><br><span class="line">            <span class="comment">//     if () &#123;</span></span><br><span class="line">            <span class="comment">//         console.info(`【订单-消费】第 $&#123;retry&#125; 次消费 $&#123;deliveryTag&#125; 失败，尝试重试`);</span></span><br><span class="line">            <span class="comment">//         const requeue = true;</span></span><br><span class="line">            <span class="comment">//         channel.nack(msg, false, requeue);</span></span><br><span class="line">            <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">            <span class="comment">//         console.info(`【订单-消费】第 $&#123;retry&#125; 次消费 $&#123;deliveryTag&#125; 失败，放入死信队列`);</span></span><br><span class="line">            <span class="comment">//         const requeue = false;</span></span><br><span class="line">            <span class="comment">//         channel.nack(msg, false, requeue);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公用消费端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>exchange </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>exchangeType </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>routerKey </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>elx 死信交换机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>elk 死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">consumer</span>(<span class="params">args: &#123; exchange: string, exchangeType: any, routerKey: string, queueName: string, elx: string, elk: string &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    callback: (msg: Message, channel: Channel</span>) =&gt; </span>&#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; exchange, exchangeType, routerKey, queueName, elx, elk &#125; = args;</span><br><span class="line">    <span class="keyword">const</span> connect = rabbimq.connection();</span><br><span class="line">    <span class="keyword">const</span> channel: Channel = <span class="keyword">await</span> connect.createConfirmChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ! topic + delay</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">durable</span>: <span class="literal">true</span>, <span class="attr">arguments</span>: &#123; <span class="string">'x-delayed-type'</span>: EX_TYPE.TOPIC &#125; &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queueConsumer = <span class="keyword">await</span> channel.assertQueue(queueName, &#123;</span><br><span class="line">        exclusive: <span class="literal">true</span>,</span><br><span class="line">        deadLetterExchange: elx,</span><br><span class="line">        deadLetterRoutingKey: elk,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.prefetch(<span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueConsumer.queue, exchange, routerKey);</span><br><span class="line">    channel.consume(queueConsumer.queue, <span class="keyword">async</span> msg =&gt; &#123;</span><br><span class="line">        <span class="comment">// console.info('统一收到的消息', msg);</span></span><br><span class="line">        callback(msg, channel);</span><br><span class="line">    &#125;, &#123; <span class="attr">noAck</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-github"><a href="#4-github" class="headerlink" title="4. github"></a>4. github</h4><p><a href="https://github.com/simuty/Node_Demo/tree/main/rabbitmq" target="_blank" rel="noopener">github—https://github.com/simuty/Node_Demo/tree/main/rabbitmq</a></p><p>参考链接<br><a href="https://juejin.im/post/6844904069618925581" target="_blank" rel="noopener">Node + MQ 限流小计</a><br><a href="https://my.oschina.net/steadyjack/blog/3096794" target="_blank" rel="noopener">Java秒杀系统实战系列~秒杀逻辑优化之RabbitMQ接口限流二</a><br><a href="https://www.cnblogs.com/mfrank/p/11260355.html" target="_blank" rel="noopener">【RabbitMQ】一文带你搞定RabbitMQ延迟队列</a><br><a href="https://www.squaremobius.net/amqp.node/channel_api.html#model_events" target="_blank" rel="noopener">amqp wiki</a><br><a href="https://cloud.tencent.com/developer/article/1478662" target="_blank" rel="noopener">RabbitMQ 高级篇八 消费端ACK与重回队列</a><br><a href="https://cloud.tencent.com/developer/article/1466789" target="_blank" rel="noopener">RabbitMQ高级篇一 本章导航及BAT大厂如何保障生产端可靠性投递</a><br><a href="https://www.cnblogs.com/davenkin/p/rabbitmq-best-practices.html" target="_blank" rel="noopener">RabbitMQ最佳实践</a><br><a href="https://blog.forma-pro.com/rabbitmq-retries-on-node-js-1f82c6afc1a1" target="_blank" rel="noopener">RabbitMQ retries on Node.JS</a><br><a href="https://segmentfault.com/a/1190000019227064" target="_blank" rel="noopener">Rabbitmq</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node&amp;RabbitMQ系列三 重连</title>
      <link href="2020/10/29/RabbitMQ_3/"/>
      <url>2020/10/29/RabbitMQ_3/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/043.jpg" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前两篇对rabbitmq的基本概念与延迟队列、死信队列进行了代码测试，默认都是理想情况的正常操作，针对<strong>复杂多变</strong>的网络环境，先不说投递的<strong>可靠性</strong>，首先服务的<strong>可用性</strong>就是第一个拦路虎，如：重连、限流。</p><p>本文目标：</p><ol><li>单独抽离rabbitmq配置，便于之后写插件</li><li>考虑异常，比如：重联，&lt;之前为了实现API，不想考虑&gt;</li><li>消费端限流，为啥，因为遇到过bug…</li><li></li></ol><p>有了前边三篇的基础，就直接上代码了</p><h2 id="代码篇"><a href="#代码篇" class="headerlink" title="代码篇"></a>代码篇</h2><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// !应该写断言的。。。下次</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> assert <span class="keyword">from</span> <span class="string">'assert'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> consumer <span class="keyword">from</span> <span class="string">'./consumer'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接配置：https://www.squaremobius.net/amqp.node/channel_api.html#connect</span></span><br><span class="line"><span class="comment">// url | config</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    protocol: <span class="string">'amqp'</span>,</span><br><span class="line">    hostname: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">5672</span>,</span><br><span class="line">    username: <span class="string">'guest'</span>,</span><br><span class="line">    password: <span class="string">'guest'</span>,</span><br><span class="line">    <span class="comment">// 最大连接数，0:无限</span></span><br><span class="line">    <span class="comment">// the size in bytes of the maximum frame allowed over the connection. 0 means no limit (but since frames have a size field which is an unsigned 32 bit integer, it’s perforce 2^32 - 1); I default it to 0x1000, i.e. 4kb, which is the allowed minimum, will fit many purposes, and not chug through Node.JS’s buffer pooling.</span></span><br><span class="line">    frameMax: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 心跳周期</span></span><br><span class="line">    heartbeat: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> connect: amqp.Connection;</span><br><span class="line"><span class="comment">// 最大连接次数...</span></span><br><span class="line"><span class="keyword">let</span> maxConnectTimes = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isConnect = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> init = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connect = <span class="keyword">await</span> amqp.connect(config);</span><br><span class="line">        <span class="comment">// 监听error\close，重新连接</span></span><br><span class="line">        connect.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">            reconnect(err, <span class="string">'error'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 什么时候会触发？网络异常、服务异常、管理后台删除</span></span><br><span class="line">        connect.on(<span class="string">'close'</span>, err =&gt; &#123;</span><br><span class="line">            reconnect(err, <span class="string">'close'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">'[x]Rabbitmq connect success'</span>);</span><br><span class="line">        <span class="comment">// !注册执行消费者</span></span><br><span class="line">        <span class="comment">// 可以根据需求，多写几个？</span></span><br><span class="line">        consumer.run(connect);</span><br><span class="line">        <span class="keyword">return</span> connect;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        reconnect(error, <span class="string">'catch'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reconnect = <span class="function">(<span class="params">err, event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 因为后台删除连接，会同时触发error、close, 为了不一次创建两个，所以做个限制</span></span><br><span class="line">    <span class="keyword">if</span> (!isConnect) &#123;</span><br><span class="line">        isConnect = <span class="literal">true</span>;</span><br><span class="line">        maxConnectTimes++;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`[x]Lost connection to RMQ. reconnectingCount: <span class="subst">$&#123;maxConnectTimes&#125;</span>. Reconnecting in 10 seconds...`</span>);</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'[x]Rabbitmq close: '</span>, event, err);</span><br><span class="line">        <span class="comment">// 5秒连接一次</span></span><br><span class="line">        <span class="keyword">return</span> setTimeout(init, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公用这个连接</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> connection = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> connect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动文件"><a href="#启动文件" class="headerlink" title="启动文件"></a>启动文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> http <span class="keyword">from</span> <span class="string">'http'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rabbitmq <span class="keyword">from</span> <span class="string">'./rabbitmq'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> producer <span class="keyword">from</span> <span class="string">'./producer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 实现功能</span></span><br><span class="line"><span class="comment"> * 1. 启动node服务 &amp;&amp; 初始化rabbitmq &lt;包含：重联、启动消费端&gt;</span></span><br><span class="line"><span class="comment"> * 2. 接口请求：http://127.0.0.1:3000/producer； 触发【生产者生产信息】</span></span><br><span class="line"><span class="comment"> * 3. 【消费端】</span></span><br><span class="line"><span class="comment"> *      1. 监听队列进行消费</span></span><br><span class="line"><span class="comment"> *      2. 限流，其实设置一下参数就行了</span></span><br><span class="line"><span class="comment"> *      3. 待完成：根据业务，扔到死信队列 ？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url === <span class="string">'/producer'</span>) &#123;</span><br><span class="line">        producer.publish();</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;).listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    rabbitmq.init();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开启端口3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">consumer</span>(<span class="params">args: &#123;exchange, queue, routingKey, connection&#125;, cb: (msg: any, channel: any</span>) =&gt; <span class="title">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 常规操作</span></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> args.connection.createChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(args.exchange, <span class="string">'direct'</span>, &#123;<span class="attr">durable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> queueA = <span class="keyword">await</span> channel.assertQueue(args.queue, &#123;<span class="attr">exclusive</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueA.queue, args.exchange, args.routingKey);</span><br><span class="line">    <span class="comment">// !消费端限流</span></span><br><span class="line">    <span class="keyword">await</span> channel.prefetch(<span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 消费队列</span></span><br><span class="line">    <span class="keyword">await</span> channel.consume(queueA.queue, msg =&gt; &#123;</span><br><span class="line">        cb(msg, channel);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> run = <span class="function">(<span class="params">connection</span>) =&gt;</span> &#123;</span><br><span class="line">    consumer(&#123;</span><br><span class="line">        exchange: <span class="string">'order.exchange'</span>,</span><br><span class="line">        routingKey: <span class="string">'order.routingKey'</span>,</span><br><span class="line">        queue: <span class="string">'order.queue'</span>,</span><br><span class="line">        connection,</span><br><span class="line">    &#125;, <span class="keyword">async</span> (msg, channel) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> data = msg.content.toString();</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">`<span class="subst">$&#123;(<span class="keyword">new</span> <span class="built_in">Date</span>()).getMinutes()&#125;</span>:<span class="subst">$&#123;(<span class="keyword">new</span> <span class="built_in">Date</span>()).getSeconds()&#125;</span> consumer msg：%j`</span>, data);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'msg: '</span>, msg)</span><br><span class="line">        <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 针对队列信息进行业务操作</span></span><br><span class="line"><span class="comment">                 * 1. 直接消费</span></span><br><span class="line"><span class="comment">                 * 2. 重回队列</span></span><br><span class="line"><span class="comment">                 * 3. 扔到死信队列</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               channel.ack(msg);</span><br><span class="line">                <span class="comment">// if(Number(data) &lt; 6) &#123;</span></span><br><span class="line">                <span class="comment">//     // 手动ack</span></span><br><span class="line">                <span class="comment">//     channel.ack(msg);</span></span><br><span class="line">                <span class="comment">// &#125; else &#123;</span></span><br><span class="line">                <span class="comment">//     // !1. 重回队列</span></span><br><span class="line">                <span class="comment">//     channel.nack(msg);</span></span><br><span class="line">                <span class="comment">//     // !2. 扔到死信队列</span></span><br><span class="line">                <span class="comment">//     // 下个demo再整理。</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">'消息 Ack Error：'</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每隔1s执行一个任务</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动服务，node应该都会，要不也不会看这个</span><br><span class="line">$ ts-node index.ts</span><br></pre></td></tr></table></figure><p>代码地址：<a href="https://github.com/simuty/Node_Demo" target="_blank" rel="noopener">https://github.com/simuty/Node_Demo</a></p><p>参考链接<br><a href="https://github.com/squaremo/amqp.node/issues/153" target="_blank" rel="noopener">How to reestablish connection after a failure? #153</a><br><a href="https://github.com/qufei1993/Nodejs-Roadmap/blob/master/docs/microservice/rabbitmq-reconnecting.md" target="_blank" rel="noopener">一次 RabbitMQ 生产故障引发的服务重连限流思考</a><br><a href="https://juejin.im/post/6844904069618925581" target="_blank" rel="noopener">Node + MQ 限流小计</a><br><a href="https://my.oschina.net/steadyjack/blog/3096794" target="_blank" rel="noopener">Java秒杀系统实战系列~秒杀逻辑优化之RabbitMQ接口限流二</a><br><a href="https://www.cnblogs.com/mfrank/p/11260355.html" target="_blank" rel="noopener">【RabbitMQ】一文带你搞定RabbitMQ延迟队列</a><br><a href="https://www.squaremobius.net/amqp.node/channel_api.html#model_events" target="_blank" rel="noopener">amqp wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node&amp;RabbitMQ系列二 延迟｜死信队列</title>
      <link href="2020/10/28/RabbitMQ_2/"/>
      <url>2020/10/28/RabbitMQ_2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/042.jpg" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>目前项目中采用ts+eggjs结合的方式，针对定时任务，采用schedule，随着业务的增多，觉得缺点啥，可能就是缺消息队列吧。上一篇文章，针对rabbitmq的基本语法进行了学习。缺乏具体的使用场景，今天找到一个文章 <a href="https://segmentfault.com/a/1190000019115582" target="_blank" rel="noopener">Node.js结合RabbitMQ延迟队列实现定时任务</a><br>,基于这篇文章学习一下死信队列相关内容，逐步加深对mq的理解与认知。</p><blockquote><p>可能很多摘录自上文，但代码是自己跑过的。</p></blockquote><p>实际业务中对于定时任务的需求是不可避免的，例如，<code>订单超时自动取消</code>、<code>每天定时拉取数据</code>等，在Node.js中系统层面提供了<code>setTimeout、setInterval</code>两个API或通过<code>node-schedule</code>这种第三方库来实现。<br>通过这种方式实现对于简单的定时任务是ok的，过于<code>复杂的、可用性</code>要求较高的系统就会存在以下缺点。</p><ol><li>消耗系统内存，如果定时任务很多，长时间得不到释放，将会<code>一直占用系统进程</code>耗费内存。</li><li>单线程如何保障出现<code>系统崩溃后之前的定时任务不受影响</code>？多进程集群模式下一致性的保证？</li><li>setTimeout、setInterval会存在时间误差，对于时间精度要求较高的是不行的。</li></ol><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>那么什么时候需要用延时队列呢？考虑一下以下场景：</p><p>订单在十分钟之内未支付则自动取消。<br>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。<br>账单在一周内未支付，则自动结算。<br>用户注册成功后，如果三天内没有登陆则进行短信提醒。<br>用户发起退款，如果三天内没有得到处理则通知相关运营人员。<br>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议。</p><h3 id="RabbitMQ-TTL-DLX-实现定时任务"><a href="#RabbitMQ-TTL-DLX-实现定时任务" class="headerlink" title="RabbitMQ TTL+DLX 实现定时任务"></a>RabbitMQ TTL+DLX 实现定时任务</h3><p>RabbitMQ本身是不支持的，可以通过它提供的两个特性<code>Time-To-Live and Expiration</code>、<code>Dead Letter Exchanges</code>来实现，通过以下泳道图可以看到一个消息从发布到消费的整个过程。</p><img data-src="004.png" width=80% /><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><p>死信队列全称 Dead-Letter-Exchange 简称 <code>DLX 是 RabbitMQ 中交换器</code>的一种类型，消息在<strong>一段时间之后没有被消费就会变成死信</strong>被重新 publish 到另一个 DLX 交换器队列中，因此称为死信队列。</p><p>死信队列产生几种情况</p><ol><li>消息被拒绝</li><li>消息TTL过期</li><li>队列达到最大长度</li></ol><p>设置DLX的两个参数：</p><ol><li><strong>deadLetterExchange</strong>: 设置DLX，当正常队列的消息成为死信后会被路由到DLX中</li><li><strong>deadLetterRoutingKey</strong>: 设置DLX指定的路由键</li></ol><div class="note danger">注意：Dead-Letter-Exchange也是一种普通的Exchange</div><h4 id="消息TTL"><a href="#消息TTL" class="headerlink" title="消息TTL"></a>消息TTL</h4><p>消息的TTL指的是消息的存活时间，RabbitMQ支持<strong>消息</strong>、<strong>队列</strong>两种方式设置TTL，分别如下：</p><ol><li>消息设置TTL：对消息的设置是在发送时进行TTL设置，通过 <code>x-message-ttl 或 expiration</code> 字段设置，单位为<code>毫秒</code>，代表消息的过期时间，<code>每条消息的TTL可不同</code>。</li><li>队列设置TTL：对队列的设置是在消息入队列时计算，通过 <code>x-expires</code> 设置，队列中的所有消息都有相同的过期时间，当超过了队列的超时设置，消息会自动的清除。</li></ol><div class="note danger">注意：如果以上两种方式都做了设置，消息的TTL则以两者之中最小的那个为准。</div><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><h4 id="缺失插件"><a href="#缺失插件" class="headerlink" title="缺失插件"></a>缺失插件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ts-node producer.ts </span><br><span class="line"></span><br><span class="line">&#x2F;Users&#x2F;mw&#x2F;Desktop&#x2F;Node_Demo&#x2F;rabbitmq&#x2F;node_modules&#x2F;amqplib&#x2F;lib&#x2F;connection.js:91</span><br><span class="line">      var e &#x3D; new Error(emsg);</span><br><span class="line">              ^</span><br><span class="line">Error: Connection closed: 503 (COMMAND-INVALID) with message &quot;COMMAND_INVALID - unknown exchange type &#39;x-delayed-message&#39;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1. 罗列插件列表</span><br><span class="line">$ rabbitmq-plugins list</span><br><span class="line"></span><br><span class="line"># 2. 去官网下载插件： rabbitmq_delayed_message_exchange</span><br><span class="line"># https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;community-plugins.html</span><br><span class="line"></span><br><span class="line"># 3. 找到插件目录</span><br><span class="line">$ ps -ef | grep rabbitmq</span><br><span class="line">  501   723     1   0 Fri10AM ??         0:00.03 &#x2F;bin&#x2F;sh &#x2F;usr&#x2F;local&#x2F;opt&#x2F;rabbitmq&#x2F;sbin&#x2F;rabbitmq-server</span><br><span class="line">  501  1125   723   0 Fri10AM ??        64:35.98 &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;erlang&#x2F;22.2&#x2F;lib&#x2F;erlang&#x2F;erts-10.6&#x2F;bin&#x2F;beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -MBlmbcs 512 -MHlmbcs 512 -MMmcs 30 -P 1048576 -t 5000000 -stbt db -zdbbl 128000 -K true -B i -- -root &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;erlang&#x2F;22.2&#x2F;lib&#x2F;erlang -progname erl -- -home &#x2F;Users&#x2F;mw -- -pa &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;rabbitmq&#x2F;3.8.2&#x2F;ebin  -noshell -noinput -s rabbit boot -sname rabbit@localhost -boot &#x2F;usr&#x2F;local&#x2F;opt&#x2F;erlang&#x2F;lib&#x2F;erlang&#x2F;bin&#x2F;start_clean -kernel inet_default_connect_options [&#123;nodelay,true&#125;] -rabbit tcp_listeners [&#123;&quot;127.0.0.1&quot;,5672&#125;] -sasl errlog_type error -sasl sasl_error_logger false -rabbit lager_log_root &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;rabbitmq&quot; -rabbit lager_default_file &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;rabbit@localhost.log&quot; -rabbit lager_upgrade_file &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;rabbit@localhost_upgrade.log&quot; -rabbit feature_flags_file &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@localhost-feature_flags&quot; -rabbit enabled_plugins_file &quot;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;rabbitmq&#x2F;enabled_plugins&quot; </span><br><span class="line">    -rabbit plugins_dir &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;rabbitmq&#x2F;3.8.2&#x2F;plugins&quot; -rabbit plugins_expand_dir &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@localhost-plugins-expand&quot; -os_mon start_cpu_sup false -os_mon start_disksup false -os_mon start_memsup false -mnesia dir &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@localhost&quot; -ra data_dir &quot;&#x2F;usr&#x2F;local&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;mnesia&#x2F;rabbit@localhost&#x2F;quorum&quot; -kernel inet_dist_listen_min 25672 -kernel inet_dist_listen_max 25672 --</span><br><span class="line">  </span><br><span class="line">  501 96364 96362   0 Fri03PM ??         0:00.65 &#x2F;usr&#x2F;bin&#x2F;ssh git@github.com git-upload-pack &#39;Quinton&#x2F;egg-rabbitmq.git&#39;</span><br><span class="line">  501 72100 11727   0  4:14PM ttys011    0:00.00 grep rabbitmq</span><br><span class="line"></span><br><span class="line"># 4. 将下载好的插件，放入 -rabbit plugins_dir &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;rabbitmq&#x2F;3.8.2&#x2F;plugins&quot;</span><br><span class="line"># 5. 开启插件</span><br><span class="line">$ rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><h3 id="代码–延迟队列"><a href="#代码–延迟队列" class="headerlink" title="代码–延迟队列"></a>代码–延迟队列</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// producer.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">msg: string, ttl: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'my-delayed-exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeType = <span class="string">'x-delayed-message'</span>; <span class="comment">// x-delayed-message 交换机的类型</span></span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'my-delayed-routingKey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">durable</span>: <span class="literal">true</span>, <span class="attr">arguments</span>: &#123;<span class="string">'x-delayed-type'</span>: <span class="string">'direct'</span> &#125;&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发布消息'</span>, msg, ttl, routingKey);</span><br><span class="line">    channel.publish(exchange, routingKey, Buffer.from(msg), &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'x-delay'</span>: ttl, <span class="comment">// 一定要设置，否则无效</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    channel.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> publish(<span class="string">'msg0 1S Expire'</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">await</span> publish(<span class="string">'msg0 2S Expire'</span>, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">await</span> publish(<span class="string">'msg0 3S Expire'</span>, <span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 最后一个不会触发</span></span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// consumer.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'my-delayed-exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> exchangeType = <span class="string">'x-delayed-message'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'my-delayed-routingKey'</span>;</span><br><span class="line">    <span class="keyword">const</span> queueName = <span class="string">'my-delayed-queue'</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">        <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">        <span class="keyword">await</span> channel.assertExchange(exchange, exchangeType, &#123; <span class="attr">durable</span>: <span class="literal">true</span>, <span class="attr">arguments</span>: &#123; <span class="string">'x-delayed-type'</span>: <span class="string">'direct'</span> &#125; &#125;)</span><br><span class="line">        <span class="keyword">const</span> queueA = <span class="keyword">await</span> channel.assertQueue(queueName);</span><br><span class="line">        <span class="built_in">console</span>.log(queueA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> channel.bindQueue(queueA.queue, exchange, routingKey);</span><br><span class="line">        <span class="keyword">await</span> channel.consume(queueA.queue, msg =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"接受到的消息"</span>, msg.content.toString());</span><br><span class="line">        &#125;, &#123; <span class="attr">noAck</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mw$ ts-node producer.ts </span><br><span class="line">发布消息 msg0 1S Expire 1000 delayed-routingKey</span><br><span class="line">发布消息 msg0 2S Expire 2000 delayed-routingKey</span><br><span class="line">发布消息 msg0 3S Expire 3000 delayed-routingKey</span><br><span class="line"></span><br><span class="line">$ ts-node consumer.ts </span><br><span class="line">&#123; queue: <span class="string">'delayed-queue'</span>, messageCount: 0, consumerCount: 0 &#125;</span><br><span class="line">接受到的消息 msg0 1S Expire</span><br><span class="line">接受到的消息 msg0 2S Expire</span><br></pre></td></tr></table></figure><img data-src="005.png" width=80% /><img data-src="006.png" width=80% /><img data-src="007.png" width=80% /><h3 id="代码–死信队列"><a href="#代码–死信队列" class="headerlink" title="代码–死信队列"></a>代码–死信队列</h3><p>流程</p><ol><li>生产者X发消息，队列A消费</li><li>设置死信队列B；</li><li>启动 <strong>X、A、B</strong></li><li>X-A，形成<strong>生产-消费；X-&gt;A</strong></li><li>kill A, 生产消息，过期后进入死信队列，由B进行消费，形成 <strong>X-B</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// producerDLX.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 1. 正常发送消息到交换机</span></span><br><span class="line"><span class="comment"> * 2. 如果超时，发送到死信队列</span></span><br><span class="line"><span class="comment"> * 3. 对应 consumerDLX.ts 、consumerEX.ts</span></span><br><span class="line"><span class="comment"> * 4. consumerEX.ts 消费生产的消息</span></span><br><span class="line"><span class="comment"> * 5. consumerDLX.ts 消费 生产的消息 被会收到 死信队列的消息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span>;</span><br><span class="line">    <span class="comment">// 默认交换机-队列-路由</span></span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'ex.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'ex.routerkey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="comment">// 默认交换机</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    channel.publish(exchange, routingKey, Buffer.from(<span class="string">'hello world'</span>), &#123;</span><br><span class="line">        expiration: <span class="number">3000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> connect.close();</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, time*<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对应producerDLX.ts 发送的消息进行消费</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">consumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机-路由</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span>;</span><br><span class="line">    <span class="comment">// 死信交换机-路由</span></span><br><span class="line">    <span class="keyword">const</span> deadLetterExchange = <span class="string">'dlx.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> deadLetterRoutingKey = <span class="string">'dlx.routingkey'</span> </span><br><span class="line">    <span class="comment">// 默认交换机-队列-路由</span></span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'ex.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> queueExName = <span class="string">'ex.queue'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKey = <span class="string">'ex.routerkey'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> queueEX = <span class="keyword">await</span> channel.assertQueue(queueExName, &#123;</span><br><span class="line">        exclusive: <span class="literal">false</span>,</span><br><span class="line">        deadLetterExchange,</span><br><span class="line">        deadLetterRoutingKey,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueExName, exchange, routingKey);</span><br><span class="line">    <span class="keyword">await</span> channel.consume(queueEX.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"消费队列"</span>, msg);</span><br><span class="line">    &#125;, &#123;<span class="attr">noAck</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对死信队列，进行消费</span></span><br><span class="line"><span class="comment"> * 对应producerDLX.ts</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">consumer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`amqp://localhost:5672`</span>;</span><br><span class="line">    <span class="comment">// 死信交换机-路由</span></span><br><span class="line">    <span class="keyword">const</span> deadLetterExchange = <span class="string">'dlx.exchange'</span>;</span><br><span class="line">    <span class="keyword">const</span> deadLetterRoutingKey = <span class="string">'dlx.routingkey'</span></span><br><span class="line">    <span class="keyword">const</span> deadLetterQueue = <span class="string">'dlx.queue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="comment">// 默认交换机</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(deadLetterExchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="comment">// 队列，超时发动到死信队列</span></span><br><span class="line">    <span class="keyword">const</span> queueDLX = <span class="keyword">await</span> channel.assertQueue(deadLetterQueue, &#123;<span class="attr">exclusive</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(deadLetterQueue, deadLetterExchange, deadLetterRoutingKey);</span><br><span class="line">    <span class="keyword">await</span> channel.consume(queueDLX.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"消费死信队列"</span>, msg);</span><br><span class="line">    &#125;, &#123;<span class="attr">noAck</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><img data-src="007.png" width=80% /><img data-src="008.png" width=80% /><img data-src="009.png" width=80% /><img data-src="010.png" width=80% /><h3 id="代码–小结"><a href="#代码–小结" class="headerlink" title="代码–小结"></a>代码–小结</h3><ol><li>延迟发送需要下载插件</li><li><code>x-delayed-type</code> 支持 famout\direct\topic 原生交换机类型</li><li>process.exit(0) 不会触发的原因，你觉得呢？</li><li>routingKey等自定义字段，最好是常量。</li><li>看管理界面</li></ol><div class="note danger"><p>生产者只管生产消息即可，至于如何消费，都交给消费端去处理。<br>具体的应用场景，下节再整。<br>把每个小块学会，再组合起来。</p></div><div class="note primary">加油，打工人！！！</div><p>代码地址：<a href="https://github.com/simuty/Node_Demo" target="_blank" rel="noopener">https://github.com/simuty/Node_Demo</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000019115582" target="_blank" rel="noopener">Node.js结合RabbitMQ延迟队列实现定时任务</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node&amp;RabbitMQ 系列一</title>
      <link href="2020/10/23/RabbitMQ_1/"/>
      <url>2020/10/23/RabbitMQ_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/022.jpg" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>消息队列中间件（Message Queue Middleware， 简称为 MQ）是指利用<code>高效可靠</code>的消息传递机制进行与<code>平台无关</code>的数据交流， 并基于数据通信来进行分布式系统的集成。 通过提供消息传递和消息排队模型 ，它可以在<strong>分布式环境下扩展进程间</strong>的通信。一般有两种传递模式：点对 点 ( P2P, Point-to-Point ）模式和发布／订阅（ Pub/Sub ）模式</p><p>MQ的作用<br>1）解耦：在项目启动之初是很难预测未来会遇到什么困难的，消息中间件在处理过程中插入了一个隐含的，基于数据的接口层，两边都实现这个接口，这样就允许独立的修改或者扩展两边的处理过程，只要两边遵守相同的接口约束即可。<br>2）冗余（存储）：在某些情况下处理数据的过程中会失败，消息中间件允许把数据持久化知道他们完全被处理<br>扩展性：消息中间件解耦了应用的过程，所以提供消息入队和处理的效率是很容易的，只需要增加处理流程就可以了。<br>3）削峰：在访问量剧增的情况下，但是应用仍然需要发挥作用，但是这样的突发流量并不常见。而使用消息中间件采用队列的形式可以减少突发访问压力，不会因为突发的超时负荷要求而崩溃<br>4）可恢复性：当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的耦合性，当一个处理消息的进程挂掉后，加入消息中间件的消息仍然可以在系统恢复后重新处理<br>5）顺序保证：在大多数场景下，处理数据的顺序也很重要，大部分消息中间件支持一定的顺序性<br>6）缓冲：消息中间件通过一个缓冲层来帮助任务最高效率的执行<br>7）异步通信：通过把把消息发送给消息中间件，消息中间件并不立即处。</p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><img data-src="006.png" width=80% /><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>RabbitMQ 整体上是一个生产者与消费者模型， 主要负责接收、存储和转发消息。 可以把消 息传递的过程想象成： 当你将一个包裹送到邮局， 邮局会暂存并最终将邮件通过邮递员送到收 件人的手上， RabbitMQ 就好比由邮局、邮箱和邮递员组成的一个系统。 从计算机术语层面来说， RabbitMQ 模型更像是一种交换机模型。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Broker:它提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输, </span><br><span class="line">Exchange：消息交换机,它指定消息按什么规则,路由到哪个队列。 </span><br><span class="line">Queue:消息的载体,每个消息都会被投到一个或多个队列。 </span><br><span class="line">Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来.</span><br><span class="line">Routing Key:路由关键字,exchange根据这个关键字进行消息投递。</span><br><span class="line">vhost:虚拟主机,一个broker里可以有多个vhost，用作不同用户的权限分离。</span><br><span class="line">Producer:消息生产者,就是投递消息的程序.</span><br><span class="line">Consumer:消息消费者,就是接受消息的程序.</span><br><span class="line">Channel:消息通道,在客户端的每个连接里,可建立多个channel.</span><br></pre></td></tr></table></figure><h4 id="Broker：消息中间件的服务节点"><a href="#Broker：消息中间件的服务节点" class="headerlink" title="Broker：消息中间件的服务节点"></a>Broker：消息中间件的服务节点</h4><p>对于 RabbitMQ 来说， 一个 RabbitMQ Broker 可以简单地看作一个 RabbitMQ 服务节点， 或者 RabbitMQ 服务实例。 大多数情况下也可以将一个 RabbitMQ Broker 看作一 台 RabbitMQ 服务器 。</p><img data-src="007.png" width="80%" /><h4 id="Exchange：交换机"><a href="#Exchange：交换机" class="headerlink" title="Exchange：交换机"></a>Exchange：交换机</h4><p>生产者将消息发送到 Exchange ，由交换器将消息路由到一个或者多个队列中。</p><img data-src="008.png" width="80%" /><h4 id="RoutingKey-与-Binding-Key"><a href="#RoutingKey-与-Binding-Key" class="headerlink" title="RoutingKey 与 Binding Key"></a>RoutingKey 与 Binding Key</h4><p>生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。</p><p>RabbitMQ常用的Exchange Type有三种：fanout、direct、topic。</p><ol><li>fanout:把所有发送到该Exchange的消息投递到所有与它绑定的队列中。</li><li>direct:把消息投递到那些binding key与routing key完全匹配的队列中。</li><li>topic:将消息路由到binding key与routing key模式匹配的队列中。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><blockquote><p>由官方教程翻译而来，用ts实现，因为觉得ts好使<br><a href="https://www.rabbitmq.com/tutorials" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials</a></p></blockquote><p>能搜索rabbitmq的一般都会了解一些概念，就直接上代码吧。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v8.9.3</span><br><span class="line"># 为了执行ts代码</span><br><span class="line">$ ts-node -v</span><br><span class="line">v9.0.0</span><br><span class="line">$ brew install rabbitmq</span><br><span class="line">$ brew services start rabbitmq</span><br></pre></td></tr></table></figure><p>访问 <a href="http://127.0.0.1:15672，">http://127.0.0.1:15672，</a> 进入rabbitmq后台管理界面。</p><img data-src="009.png" width="80%" /><p>访问 <a href="http://tryrabbitmq.com/" target="_blank" rel="noopener">http://tryrabbitmq.com/</a> 进入模拟 <strong>生产-交换机-队列-消费者</strong></p><img data-src="010.png" width="80%" /><div class="note danger"> 以上为准备阶段与可视化阶段</div><h4 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h4><p>以下代码主要实现生产者</p><img data-src="011.png" width="80%" /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// emit_log_direct.ts 生产者</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`amqp://localhost`</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'direct_logs'</span>;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">'hello world'</span>;</span><br><span class="line">    <span class="keyword">const</span> routingKeys = [<span class="string">'info'</span>, <span class="string">'error'</span>, <span class="string">'warning'</span>];</span><br><span class="line">    <span class="comment">// 1. 创建链接</span></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="comment">// 2. 创建channel</span></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="comment">// 3. 创建or连上 交换机</span></span><br><span class="line">    <span class="comment">// 3.1 直连方式；</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> index = random(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 4. 消息发给交换机</span></span><br><span class="line">        channel.publish(exchange, routingKeys[index], Buffer.from(msg));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[x] Sent <span class="subst">$&#123;msg&#125;</span>-- <span class="subst">$&#123;routingKeys[index]&#125;</span>`</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> connect.close();</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, time*<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">max: number</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">Math</span>.floor(max));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// receive_logs_direct.ts 消费者</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`amqp://localhost`</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">receive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'direct_logs'</span>;</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'direct'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> routingKeys = [<span class="string">'info'</span>, <span class="string">'error'</span>, <span class="string">'warning'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queueA = <span class="keyword">await</span> channel.assertQueue(<span class="string">'queueA'</span>);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueA.queue, exchange, routingKeys[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueA.queue, exchange, routingKeys[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueA.queue, exchange, routingKeys[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queueB = <span class="keyword">await</span> channel.assertQueue(<span class="string">'queueB'</span>);</span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueB.queue, exchange, routingKeys[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    channel.consume(queueA.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"队列AAAAA："</span>, msg.content.toString())</span><br><span class="line">    &#125;, &#123; <span class="attr">noAck</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    channel.consume(queueB.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"队列BBBBBBBB："</span>, msg.content.toString())</span><br><span class="line">    &#125;, &#123; <span class="attr">noAck</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// await connect.close();</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">$ ts-node emit_log_direct.ts</span><br><span class="line">[x] Sent hello world-- error</span><br><span class="line">[x] Sent hello world-- info</span><br><span class="line"></span><br><span class="line">$ ts-node receive_logs_direct.ts</span><br><span class="line">队列AAAAA： hello world</span><br><span class="line">队列BBBBBBBB： hello world</span><br><span class="line"></span><br><span class="line">队列AAAAA： hello world</span><br></pre></td></tr></table></figure><h4 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h4><p>发送到主题交换机的消息 <strong>必须是单词列表，以.分割</strong>， routing_key无效。通常它们指定与消息相关的某些功能。 一些有效的路由关键示例：“stock.usd.nyse”，“ nyse.vmw”，“ quick.orange.rabbit”。 路由关键字中可以包含任意多个单词，最多255个字节。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* (star) : 匹配一个单词</span><br><span class="line"># (hash) : 匹配 0 或 更多单词</span><br></pre></td></tr></table></figure><img data-src="012.png" width="80%" /><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// emit_log_topic.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`amqp://localhost`</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'topic_logs'</span>;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">'hello world'</span>;</span><br><span class="line">    <span class="comment">// bothqueue、firstqueue、secondqueue</span></span><br><span class="line">    <span class="keyword">const</span> keys = [<span class="string">'quick.orange.rabbit'</span>, <span class="string">'quick.orange.fox'</span>, <span class="string">'lazy.brown.fox'</span>];</span><br><span class="line">    <span class="comment">// 1. 创建链接</span></span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="comment">// 2. 创建channel</span></span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="comment">// 3. 创建or连上 交换机</span></span><br><span class="line">    <span class="comment">// 3.1 直连方式；</span></span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'topic'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> index = random(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 4. 消息发给交换机</span></span><br><span class="line">        channel.publish(exchange, keys[index], Buffer.from(msg));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[x] Sent <span class="subst">$&#123;msg&#125;</span>-- <span class="subst">$&#123;keys[index]&#125;</span>`</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> connect.close();</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time: number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, time*<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">max: number</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">Math</span>.floor(max));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// receive_logs_topic.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> amqp <span class="keyword">from</span> <span class="string">'amqplib'</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`amqp://localhost`</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">receive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connect = <span class="keyword">await</span> amqp.connect(url);</span><br><span class="line">    <span class="keyword">const</span> channel = <span class="keyword">await</span> connect.createChannel();</span><br><span class="line">    <span class="keyword">const</span> exchange = <span class="string">'topic_logs'</span>;</span><br><span class="line">    <span class="keyword">await</span> channel.assertExchange(exchange, <span class="string">'topic'</span>, &#123; <span class="attr">durable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queueA = <span class="keyword">await</span> channel.assertQueue(<span class="string">'queue_topic_A'</span>);</span><br><span class="line">    <span class="comment">// # 匹配多个单词</span></span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueA.queue, exchange, <span class="string">'*.orange.*'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queueB = <span class="keyword">await</span> channel.assertQueue(<span class="string">'queue_topic_B'</span>);</span><br><span class="line">    <span class="comment">// * 可以替代一个单词</span></span><br><span class="line">    <span class="keyword">await</span> channel.bindQueue(queueB.queue, exchange, <span class="string">'#'</span>);</span><br><span class="line"></span><br><span class="line">    channel.consume(queueA.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"队列AAAAA："</span>, msg.content.toString())</span><br><span class="line">    &#125;, &#123; <span class="attr">noAck</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    channel.consume(queueB.queue, msg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"队列BBBBBBBB："</span>, msg.content.toString())</span><br><span class="line">    &#125;, &#123; <span class="attr">noAck</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// await connect.close();</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">$ ts-node emit_log_topic.ts</span><br><span class="line">[x] Sent hello world-- error</span><br><span class="line">[x] Sent hello world-- info</span><br><span class="line"></span><br><span class="line">$ ts-node receive_logs_topic.ts</span><br><span class="line">队列AAAAA： hello world</span><br><span class="line">队列BBBBBBBB： hello world</span><br><span class="line"></span><br><span class="line">队列AAAAA： hello world</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.rabbitmq.com/tutorials/tutorial-five-javascript.html" target="_blank" rel="noopener">rabbitmq官网教程</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备考</title>
      <link href="2020/07/01/civil_servant_everyDay/"/>
      <url>2020/07/01/civil_servant_everyDay/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/038.jpg" width=80% /><span class='geyan'>君子避三端：避文士之笔端，避武士之锋端，避辩士之舌端。（《韩诗外传》）</span><a id="more"></a><h3 id="行测"><a href="#行测" class="headerlink" title="行测"></a>行测</h3><div class="tabs" id="行测"><ul class="nav-tabs"><li class="tab active"><a href="#行测-1">考前安排</a></li><li class="tab"><a href="#行测-2">时间分配</a></li><li class="tab"><a href="#行测-3">资料</a></li><li class="tab"><a href="#行测-4">判断</a></li></ul><div class="tab-content"><div class="tab-pane active" id="行测-1"><div class="note danger"><p><strong>考前安排</strong></p><p>前一天</p><ol><li>确认考场</li><li>下午晚上，继续做真题，对不对答案都行</li></ol></div></div><div class="tab-pane" id="行测-2"><p>一道题，90秒还不行，就直接跳过去；</p></div><div class="tab-pane" id="行测-3"></div><div class="tab-pane" id="行测-4"><div class="note danger"><hr><p><strong>图形推理</strong></p><p>时间： 5-6分钟；<br>发卷子可以看图形：</p></div></div></div></div><h3 id="申论"><a href="#申论" class="headerlink" title="申论"></a>申论</h3><div class="tabs" id="申论"><ul class="nav-tabs"><li class="tab active"><a href="#申论-1">整体</a></li></ul><div class="tab-content"><div class="tab-pane active" id="申论-1"><p>大作文</p><p>时间：40-60分钟</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日必练</title>
      <link href="2020/06/30/civil_servant_everyDay/"/>
      <url>2020/06/30/civil_servant_everyDay/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/040.png" width=80% /><span class='geyan'>剑虽利，不厉不断；材虽美，不学不高。（《韩诗外传》）</span><a id="more"></a><h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><div class="tabs" id="整体概述"><ul class="nav-tabs"><li class="tab active"><a href="#整体概述-1">正确率</a></li><li class="tab"><a href="#整体概述-2">很大的图片</a></li></ul><div class="tab-content"><div class="tab-pane active" id="整体概述-1"><div class="note danger"><blockquote class="blockquote-center"><p>道阻且长，加油！</p></blockquote><img data-src="05.png" width=60% /></div></div><div class="tab-pane" id="整体概述-2"><img data-src="explain.jpg" width=60% /></div></div></div><div class="note warning"><div class="note success"><p>模块分值  <em>判断</em>（35.6）&gt; <em>言语</em>（27.3）&gt; <em>资料</em>（16）&gt;常识（14）&gt;数量（7）</p><p>单题分值：言语、判断、资料、数量、常识</p><p><strong>常识分值这么高？？？</strong></p></div><img data-src="04.png" width=60% /></div><h3 id="数资"><a href="#数资" class="headerlink" title="数资"></a>数资</h3><div class="tabs" id="速算"><ul class="nav-tabs"><li class="tab active"><a href="#速算-1">速算</a></li><li class="tab"><a href="#速算-2">视频</a></li></ul><div class="tab-content"><div class="tab-pane active" id="速算-1"><details ><summary> <p>每日必刷–速算</p> </summary>              <div class='content'>              <p><strong>每日速算</strong></p><!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/quickcol.pdf" data-height="500px"></div> -->              </div>            </details></div><div class="tab-pane" id="速算-2"><div class="note success"><p><em>如何刷速算</em><br><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652676143&idx=2&sn=df1dcd24dce044c940cfcff3c0bd0c31&chksm=f12eb60cc6593f1a2d1909c9e80705814275a9ab43123a693ce8800bd9e532973dc78830872a&scene=4" target="_blank" rel="noopener">公众号–公考齐麟</a></p></div></div></div></div><div class="tabs" id="画圈圈"><ul class="nav-tabs"><li class="tab active"><a href="#画圈圈-1">画圈圈⭕️</a></li><li class="tab"><a href="#画圈圈-2">视频</a></li></ul><div class="tab-content"><div class="tab-pane active" id="画圈圈-1"><details ><summary> <p>资料分析–画圈圈</p> </summary>              <div class='content'>              <p><em>资料分析画圈圈</em></p><p>解析—<a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652669711&idx=1&sn=6d1627ad99367d93ba2b6691285223a7&scene=0#wechat_redirect&rd2werd=1#wechat_redirect" target="_blank" rel="noopener">刷题组全套练习</a></p><!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/circle.pdf" data-height="500px"></div> -->              </div>            </details><details ><summary> <p>资料分析–结合数字</p> </summary>              <div class='content'>              <!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/circle-1.pdf" data-height="500px"></div> -->              </div>            </details></div><div class="tab-pane" id="画圈圈-2"><div class="note success"><p><em>如何刷速算</em><br><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652676143&idx=2&sn=df1dcd24dce044c940cfcff3c0bd0c31&chksm=f12eb60cc6593f1a2d1909c9e80705814275a9ab43123a693ce8800bd9e532973dc78830872a&scene=4" target="_blank" rel="noopener">公众号–公考齐麟</a></p></div><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652676114&idx=1&sn=2762e3d367b1040fab7cdfd41858cf39&chksm=f12eb631c6593f27eb96bf39caf61482ab8858f0624a2195c0480016d261035f60fd6821f90c&scene=4&rd2werd=1#wechat_redirect" target="_blank" rel="noopener">数资刷题</a></p></div></div></div><div class="tabs" id="数量关系"><ul class="nav-tabs"><li class="tab active"><a href="#数量关系-1">数量关系</a></li><li class="tab"><a href="#数量关系-2">视频</a></li></ul><div class="tab-content"><div class="tab-pane active" id="数量关系-1"><details ><summary> <p>数量关系</p> </summary>              <div class='content'>              <p><strong>每日速算</strong></p><!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/math.pdf" data-height="500px"></div> -->              </div>            </details></div><div class="tab-pane" id="数量关系-2"></div></div></div><div class="tabs" id="百分数"><ul class="nav-tabs"><li class="tab active"><a href="#百分数-1">百分数</a></li><li class="tab"><a href="#百分数-2">百分数 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="百分数-1"><details ><summary> <p>百分数</p> </summary>              <div class='content'>              <!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/baifenshu.pdf" data-height="500px"></div> -->              </div>            </details></div><div class="tab-pane" id="百分数-2"><details ><summary> <p>高频成语</p> </summary>              <div class='content'><pre><code>  &lt;/div&gt;&lt;/details&gt;</code></pre></div></div></div><h3 id="言语理解"><a href="#言语理解" class="headerlink" title="言语理解"></a>言语理解</h3><div class="tabs" id="言语理解-成语"><ul class="nav-tabs"><li class="tab active"><a href="#言语理解-成语-1">成语</a></li><li class="tab"><a href="#言语理解-成语-2">成语</a></li></ul><div class="tab-content"><div class="tab-pane active" id="言语理解-成语-1"><details ><summary> <p>105高频成语</p> </summary>              <div class='content'>              <!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/chengyu105.pdf" data-height="500px"></div> -->              </div>            </details></div><div class="tab-pane" id="言语理解-成语-2"><details ><summary> <p>高频成语</p> </summary>              <div class='content'>              <!-- <div class="pdfobject-container" data-target="/../../../../30每日必练/chengyu.pdf" data-height="500px"></div> -->              </div>            </details></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟着学申论</title>
      <link href="2020/06/11/civil_servant_composition_2/"/>
      <url>2020/06/11/civil_servant_composition_2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/037.jpg" width=80% /><span class='geyan'>任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</span><a id="more"></a><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><div class="tabs" id="基础"><ul class="nav-tabs"><li class="tab active"><a href="#基础-1">基础</a></li><li class="tab"><a href="#基础-2">材料中的信息</a></li><li class="tab"><a href="#基础-3">隐藏位置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="基础-1"><details ><summary> <p>基础</p> </summary>              <div class='content'>              <div class="note danger"></div>              </div>            </details></div><div class="tab-pane" id="基础-2"><div class="note danger"><p><strong>材料中的信息</strong></p><ol><li>描述现象<ol><li>成绩–好现象</li><li>问题–坏现象</li></ol></li><li>分析影响类<ol><li>意义–积极影响</li><li>危害–消极影响</li><li>双刃剑–有利有弊</li></ol></li><li>表明态度类<ol><li>支持及其理由</li><li>反对及其理由</li></ol></li><li>剖析原因类<ol><li>内外因</li><li>历史、现实</li><li>经济、法律、文化</li><li>观念、管理、制度、利益驱动</li></ol></li><li>对策建议类<ol><li>经验</li><li>教训</li><li>呼吁</li><li>研究报告</li><li>建议</li><li>已经采取或将要采取的措施</li></ol></li></ol><div class="note info"><p><strong>隐藏位置</strong></p><ol><li>数据</li><li>案例</li><li>分析、观点</li></ol><p><strong>如何从材料中提炼信息？</strong></p><ol><li>大的原则<ol><li>带着问题阅读材料</li><li>作答字数会影响要点的判断</li></ol></li><li>具体的方法<ol><li>主抓提示性词汇<ol><li>分析影响类–积极–消极<ol><li>A有利于、能助推、推动B</li><li>A是B的加速器、引擎、催化剂、保障</li><li>A 危机、威胁到、阻碍、破坏 B</li><li>A构成类B前进的障碍。</li><li>A是B的绊脚石、拦路虎</li></ol></li><li>剖析原因类<ol><li>A折射出、反映出、暴漏出B；</li><li>之所以出现A是由于B</li><li>B是A的源头，A的根源在于B</li><li>究其原因有B；</li><li>A的出现与B有密不可分的关系</li></ol></li><li>对策建议类<ol><li>XXX建议、呼吁。。。</li><li>我们一定要。。</li><li>务必要。。。</li><li>要把。。摆在重要的位置</li><li>要抓住。。应该。。。</li></ol></li></ol></li><li>不同材料不同的阅读方法<ol><li>数据型<ol><li>描述一个普遍现象</li><li>支持论证一个观点</li></ol></li><li>案例型<ol><li>用个案来描述普遍的现象；</li><li>通过典型案例来支持论证观点</li><li>通过案例帮助我们<strong>分析原因、影响、对策</strong></li></ol></li><li>观点型<ol><li>要明确这是谁的观点</li><li>明确观点是什么</li><li>明确观点的理由是什么</li><li>判断<strong>观点正确</strong>与否<ol><li>中央领导观点、中央文件政策、法律本身都是正确的。</li><li>专家、网民、群众、干部<strong>不一定正确</strong></li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2013 浙江-商鞅徙木立信</span><br><span class="line"></span><br><span class="line">问题，请认真阅读给定材料，指出材料的主旨，并谈谈是从哪几个方面对这一主旨尽心该阐述</span><br><span class="line"></span><br><span class="line">主旨：守信</span><br><span class="line">从那个方面：政府 守信</span><br><span class="line">要点</span><br><span class="line">1. 保持政令稳定统一</span><br><span class="line">2. 高度重视公信力的建设</span><br><span class="line">3. 注重细节，从小事做起</span><br><span class="line">4. 及时兑现政府的承诺</span><br></pre></td></tr></table></figure></div></div></div><div class="tab-pane" id="基础-3"><div class="note default"></div></div></div></div><h3 id="归纳概括"><a href="#归纳概括" class="headerlink" title="归纳概括"></a>归纳概括</h3><div class="tabs" id="归纳概括"><ul class="nav-tabs"><li class="tab active"><a href="#归纳概括-1">归纳概括</a></li><li class="tab"><a href="#归纳概括-2">归纳概括 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="归纳概括-1"><details ><summary> <p>基础</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="04.png" width="80%" /><img data-src="05.png" width="80%" /><img data-src="06.png" width="80%" /><img data-src="07.png" width="80%" /><img data-src="08.png" width="80%" /><img data-src="09.png" width="80%" /><img data-src="10.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="归纳概括-2"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 申论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大作文</title>
      <link href="2020/06/11/civil_servant_composition_1/"/>
      <url>2020/06/11/civil_servant_composition_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/037.jpg" width=80% /><span class='geyan'>任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</span><a id="more"></a><p>大作文的框架思维</p><div class="tabs" id="框架"><ul class="nav-tabs"><li class="tab active"><a href="#框架-1">框架</a></li><li class="tab"><a href="#框架-2">框架 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="框架-1"><details ><summary> <p>框架</p> </summary>              <div class='content'>              <img data-src="04.png" width=80% /><ol><li>议论文(政论文)<ol><li>侧重 <strong>为什么</strong></li><li>论点： 对策<ol><li>主要是为什么要有这样的对策</li></ol></li><li>论据</li></ol></li><li>策论文<ol><li>侧重 <em>怎么做</em></li><li>论点： 对策<ol><li>这个对策该怎么做</li></ol></li><li>论据</li><li>以对策来论述对策</li><li>难度极高</li></ol></li><li>评论文<ol><li>侧重 <strong>做了后</strong></li><li>论点： 对策<ol><li>主题之间的问题</li></ol></li><li>论据</li></ol></li></ol><p><strong>论点</strong></p><p>论点 是 对策，来源自材料。<br>论点来源于材料，</p>              </div>            </details></div><div class="tab-pane" id="框架-2"></div></div></div><h3 id="第一讲-阅读材料篇和论点篇"><a href="#第一讲-阅读材料篇和论点篇" class="headerlink" title="第一讲 阅读材料篇和论点篇"></a>第一讲 阅读材料篇和论点篇</h3><div class="tabs" id="阅读材料篇和论点篇"><ul class="nav-tabs"><li class="tab active"><a href="#阅读材料篇和论点篇-1">阅读材料篇</a></li><li class="tab"><a href="#阅读材料篇和论点篇-2">论点篇</a></li><li class="tab"><a href="#阅读材料篇和论点篇-3">分论点</a></li><li class="tab"><a href="#阅读材料篇和论点篇-4">论据</a></li></ul><div class="tab-content"><div class="tab-pane active" id="阅读材料篇和论点篇-1"><details ><summary> <p>阅读材料篇</p> </summary>              <div class='content'>              <div class="note danger"><div class="note primary"><p>阅读材料 <strong>三步走</strong></p><ol><li>区分<strong>理论性材料</strong>和 <strong>案例性材料</strong>；</li><li>定性：理论材料：定性；案例材料：公式</li><li>段落之间的逻辑：通过段落之间主题的<strong>关联性</strong>以及段落间内容<strong>属性关系</strong>，确定出段落间的<strong>逻辑关系</strong></li></ol><p><strong>注</strong><br>第二步，定性的主要目的是：材料中宏对策为总论点，中宏对策为分论点<br>第三步，段与段逻辑主要为形成论据部分做准备</p></div><img data-src="07.png" width=80% /><img data-src="08.png" width=80% /><p><strong>转化思维</strong></p><p>材料 -&gt; 微观 -&gt; 中观 -&gt; 分论点 -&gt; 总论点</p><p>微观 -&gt; 中观 《=》中观 -&gt; 微观</p><p>微观：个人化的角度。<br>中观宏观：比较大的。</p><hr><div class="note success"><p><strong>理论材料：定性</strong></p><p>特征：单纯的理论，不容易定性</p><p>主要将各个 <em>问题、原因、对策、定义、危害、意义、成就、背景</em>等九大属性，各个归类，需要的时候，去对应的文件夹去拿。</p><img data-src="05.png" width=80% /></div><hr><div class="note info"><p><strong>案例材料：公式</strong></p><p>特征：纯故事材料，没有理论引申；XXX的故事</p><p>公式：</p><ol><li>主体+成就+意义；</li><li>主体+问题+原因+危害+对策+意义</li></ol><p>将定性的一个个标注在材料中，如下图</p><img data-src="05.png" width=80% /></div></div>              </div>            </details></div><div class="tab-pane" id="阅读材料篇和论点篇-2"><div class="note danger"><p><em>总论点：材料中最宏观的对策。</em></p><blockquote class="blockquote-center"><p>主旨要准、不跑题：三种方法可以相互印证，比如采用其中的方法之后，要用第二种、第三种去验证。</p></blockquote><p><strong>如何判断宏观对策？</strong></p><div class="note info"><p><strong>宏观对策法</strong>：一般材料中高级别<strong>官员或政府报告</strong>内容为宏观对策，一般为主旨 &lt;此方法最常用&gt; <em>找最大的</em></p><img data-src="09.png" width=80% /><img data-src="10.png" width=80% /><img data-src="11.png" width=80% /><div class="note success"><img data-src="12.png" width=80% /></div></div></div></div><div class="tab-pane" id="阅读材料篇和论点篇-3"><div class="note danger"><div class="note success"><p>分论点与总论点对应，多理解十九大、科学发展观。</p><p>快速准确的定位政治、经济、文化、生态、民生。</p></div><img data-src="13.png" width=80% /><img data-src="14.png" width=80% /><img data-src="15.png" width=80% /><img data-src="16.png" width=80% /></div></div><div class="tab-pane" id="阅读材料篇和论点篇-4"><div class="note danger">所谓要素，就是组成论据的最⼩单位，这些要素⼤多来源于材料，或者是对材料 压缩和转换，这也是咱们为啥要求定性的原因。<img data-src="22.png" width=80% /></div></div></div></div><h3 id="第二讲-十九大"><a href="#第二讲-十九大" class="headerlink" title="第二讲 十九大"></a>第二讲 十九大</h3><div class="tabs" id="十九大"><ul class="nav-tabs"><li class="tab active"><a href="#十九大-1">十九大</a></li><li class="tab"><a href="#十九大-2">经济</a></li></ul><div class="tab-content"><div class="tab-pane active" id="十九大-1"><details ><summary> <p>十九大</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="18.png" width=80% /><img data-src="19.png" width=80% /></div>              </div>            </details></div><div class="tab-pane" id="十九大-2"><div class="note danger"><img data-src="20.png" width=80% /><img data-src="17.png" width=80% /></div></div></div></div><hr><div class="tabs" id="框架"><ul class="nav-tabs"><li class="tab active"><a href="#框架-1">框架</a></li><li class="tab"><a href="#框架-2">框架 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="框架-1"><details ><summary> <p>框架</p> </summary>              <div class='content'>              <div class="note danger"><p>阅读材料 <strong>三步走</strong></p><ol><li>区分<strong>理论性材料</strong>和 <strong>案例性材料</strong>；</li><li>理论材料：定性；</li><li>案例材料：公式</li></ol></div>              </div>            </details></div><div class="tab-pane" id="框架-2"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 申论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟着学申论</title>
      <link href="2020/06/11/civil_servant_composition_2/"/>
      <url>2020/06/11/civil_servant_composition_2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/007.jpg" width=80% /><span class='geyan'>学而时习之，不亦说乎。</span><a id="more"></a><h3 id="docker配置"><a href="#docker配置" class="headerlink" title="docker配置"></a>docker配置</h3><p>官网gitlab<br>ssh://git@gitlab.mwbyd.cn:10022/mw_fe_dev/cservicehome.git</p><p>docker<br><a href="https://www.docker.com" target="_blank" rel="noopener">https://www.docker.com</a></p><p>docker镜像包<br>docker-lnmp-yii-laravel-master.zip</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">改完之后，启动配置docker镜像，cd至docker-lnmp-yii-laravel-master目录，执行</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line"></span><br><span class="line">此时docker会自动去下载所需文件，等文件下载完毕，会自动启动。</span><br><span class="line"></span><br><span class="line">如果你本地已经安装了mysql、redis，可能会提示端口报错，可以无视。</span><br><span class="line"></span><br><span class="line">docker-compose start 启动</span><br><span class="line"></span><br><span class="line">docker-compose stop 停止</span><br><span class="line"></span><br><span class="line">docker-compose restart 重启</span><br><span class="line"></span><br><span class="line">至此，官网项目已经可以通过<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>直接访问。</span><br></pre></td></tr></table></figure><img data-src="04.png" width=80% /><p>确认nginx索引正确与否。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker-compose <span class="built_in">exec</span> nginx bash</span><br><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line"><span class="comment"># 查看是否索引到项目文件目录</span></span><br><span class="line"><span class="comment"># 如果没有就</span></span><br><span class="line">docker-compose down</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 申论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟着学申论</title>
      <link href="2020/06/10/civil_servant_composition_1/"/>
      <url>2020/06/10/civil_servant_composition_1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/037.jpg" width=80% /><span class='geyan'>任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</span><a id="more"></a><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><div class="tabs" id="第二阶段-大作文"><ul class="nav-tabs"><li class="tab active"><a href="#第二阶段-大作文-1">大作文</a></li></ul><div class="tab-content"><div class="tab-pane active" id="第二阶段-大作文-1"><div class="note danger"><p>时间：40-60min<br>字数：1200+</p></div></div></div></div><blockquote class="blockquote-center"><p>听了一些课，却不知道从何下手！<br>粉笔的训练营走起！</p></blockquote><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote class="blockquote-center"><p>申论是测查<em>从事机关工作</em>应当具备的<strong>基本能力</strong></p></blockquote><div class="tabs" id="基础知识"><ul class="nav-tabs"><li class="tab active"><a href="#基础知识-1">阅读理解能力</a></li><li class="tab"><a href="#基础知识-2">综合分析能力</a></li><li class="tab"><a href="#基础知识-3">提出解决问题</a></li><li class="tab"><a href="#基础知识-4">文字表达能力</a></li><li class="tab"><a href="#基础知识-5">小结🌈</a></li></ul><div class="tab-content"><div class="tab-pane active" id="基础知识-1"><p><strong>客观性</strong>：全面把握给定资料的内容，准确理解给定资料的含义。<em>尊重材料、不要随意主观发挥</em><br><strong>准确性</strong>：</p><ol><li>符合题干</li><li>必须表述规范，明白&amp;简短。</li></ol></div><div class="tab-pane" id="基础知识-2"><div class="note success">要求对给定材料的*全部或部分*的*内容、观点、问题*进行 **分析和归纳**，多角度私聊资料内容，作出合理的推断或评价；<div class="note warning">既要表明观点，也要依据给定资料、确定观点。不能个人主观色彩、随便发表个人看法。</div></div></div><div class="tab-pane" id="基础知识-3"><ol><li>发现和界定问题：要寻找<em>问题</em>；<strong>负面、不好的事情</strong></li><li>方案或措施：<strong>对策、做法</strong>。能摘抄则摘抄，要不就自行归纳</li></ol></div><div class="tab-pane" id="基础知识-4"><p>要求熟练使用指定的语种&lt;简体汉语&gt;，运用 <strong>说明、陈述、议论等方式</strong>，准确规范、简明畅达的表达思想观点。</p></div><div class="tab-pane" id="基础知识-5"><img data-src="04.png" width="80%" /><div class="note warning"><p><strong>题型分类</strong></p><div class="note danger"><p>题型一： <strong>单一题</strong><br>特征：指向<strong>明确</strong> 种类少。<em>要素</em><br>答题要素：问题、原因、影响&lt;意义、危害&gt;、对策&lt;措施&gt;等</p></div><div class="note default"><p>题型二：<strong>综合题</strong><br>特点：要素<em>不明确</em><br>答题类型</p><ol><li>分层次&lt;多要素&gt;</li><li>按点&lt;词&gt;赋分、<em>关键词</em></li></ol><p>如：结合材料，对”人口诅咒“，作一全面解释</p></div><div class="note info"><p>题型三：<strong>公文题</strong><br>特点：<em>量词+文种</em><br>答题：</p><ol><li><em>格式分</em></li><li><em>语言分</em></li><li>内容分：多要素+关键词</div></li></ol><div class="note primary"><p>题型四：<strong>大作文</strong><br>特点：议论文<br>答题：</p><ol><li>内容客观&lt;基于材料&gt;；</li><li>文章结构赋分&lt;议论文&gt;；</li><li>语言赋分；</li><li>材料外的事例；</li></ol></div></div></div></div></div><h3 id="答题步骤"><a href="#答题步骤" class="headerlink" title="答题步骤"></a>答题步骤</h3><div class="tabs" id="答题步骤"><ul class="nav-tabs"><li class="tab active"><a href="#答题步骤-1">审题</a></li><li class="tab"><a href="#答题步骤-2">整体概述</a></li></ul><div class="tab-content"><div class="tab-pane active" id="答题步骤-1"><details ><summary> <p>审题</p> </summary>              <div class='content'>              <div class="note default"><p><strong>审—作答范围</strong></p><ol><li><em>根据、依据、结合、阅读</em>给定材料 X，<strong>限定范围</strong></li><li>材料 X 中<em>提到了。</em>；重点在 X，还要兼顾全部材料</li></ol><p><strong>审–主题&amp;结构</strong></p><ol><li>牢记主题，快速锁定材料，忽略不想干的主题；组织答案</li><li>结构：预判答案内容；整合答案</li></ol><p><strong>审–要求</strong></p><ol><li>准确：要点来自材料，尽量用材料的原词原句；归纳</li><li>全面：宁滥勿缺</li><li>简明：去掉修饰词，避免同义反复，言简意赅</li><li>有条理：分条撰写，标注序号；</li></ol></div>              </div>            </details></div><div class="tab-pane" id="答题步骤-2"><img data-src="05.png" width="80%" /><img data-src="06.png" width="80%" /><img data-src="07.png" width="80%" /></div></div></div><h3 id="答题要素-单一题"><a href="#答题要素-单一题" class="headerlink" title="答题要素 || 单一题"></a>答题要素 || 单一题</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><div class="tabs" id="问题"><ul class="nav-tabs"><li class="tab active"><a href="#问题-1">总览</a></li><li class="tab"><a href="#问题-2">数据型</a></li><li class="tab"><a href="#问题-3">事例型</a></li><li class="tab"><a href="#问题-4">分析推导</a></li></ul><div class="tab-content"><div class="tab-pane active" id="问题-1"><details ><summary> <p>总览</p> </summary>              <div class='content'>              <div class="note success"><ol><li>命题的方式：<strong>主题</strong>&lt;如：经济发展、民生&gt;+<strong>要素</strong>&lt;问题、不足、困境等&gt;</li><li>侧重：<strong>主题相关</strong>、准确</li><li>三个方向<ol><li>直接摘抄。不字辈；</li><li>归纳总结，合成、简化；</li><li>分析推导。</li></ol></li><li>尊重原意。</li></ol><img data-src="08.png" width="80%" /><img data-src="09.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="问题-2"><img data-src="10.png" width="80%" /></div><div class="tab-pane" id="问题-3"><img data-src="11.png" width="80%" /></div><div class="tab-pane" id="问题-4"><img data-src="12.png" width="80%" /></div></div></div><div class="tabs" id="序列"><ul class="nav-tabs"><li class="tab active"><a href="#序列-1">顺序</a></li><li class="tab"><a href="#序列-2">逆序</a></li></ul><div class="tab-content"><div class="tab-pane active" id="序列-1"></div><div class="tab-pane" id="序列-2"></div></div></div><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><div class="tabs" id="意义"><ul class="nav-tabs"><li class="tab active"><a href="#意义-1">积极影响</a></li><li class="tab"><a href="#意义-2">消极影响</a></li></ul><div class="tab-content"><div class="tab-pane active" id="意义-1"></div><div class="tab-pane" id="意义-2"></div></div></div><hr><h4 id="措施"><a href="#措施" class="headerlink" title="措施"></a>措施</h4><div class="tabs" id="措施"><ul class="nav-tabs"><li class="tab active"><a href="#措施-1">概括措施</a></li><li class="tab"><a href="#措施-2">启示</a></li><li class="tab"><a href="#措施-3">提出建议</a></li></ul><div class="tab-content"><div class="tab-pane active" id="措施-1"></div><div class="tab-pane" id="措施-2"></div><div class="tab-pane" id="措施-3"></div></div></div><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><div class="tabs" id="反面原因"><ul class="nav-tabs"><li class="tab active"><a href="#反面原因-1">反面原因</a></li></ul><div class="tab-content"><div class="tab-pane active" id="反面原因-1"></div></div></div><div class="tabs" id="正面原因"><ul class="nav-tabs"><li class="tab active"><a href="#正面原因-1">正面原因</a></li><li class="tab"><a href="#正面原因-2">事例</a></li><li class="tab"><a href="#正面原因-3">对比</a></li><li class="tab"><a href="#正面原因-4">总结</a></li><li class="tab"><a href="#正面原因-5">小练习🌈</a></li></ul><div class="tab-content"><div class="tab-pane active" id="正面原因-1"><details ><summary> <p>正面</p> </summary>              <div class='content'>              <div class="note success"><img data-src="30.png" width="80%" /><img data-src="31.png" width="80%" /><img data-src="35.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="正面原因-2"><div class="note danger"><img data-src="32.png" width="80%" /><img data-src="33.png" width="80%" /></div></div><div class="tab-pane" id="正面原因-3"><div class="note danger"><img data-src="36.png" width="80%" /><img data-src="37.png" width="80%" /></div></div><div class="tab-pane" id="正面原因-4"><div class="note danger"><p>答题技巧总结<br>Tips1：哲学告诉我们，事物是由主客观、内外因共同决定的，所以同学们在找寻原因题目的答案时，不光要找寻现象本身的主观原因，对于材料中出现的背景信息等也要予以格外关注，因为它很可能是事物发展变化的客观原因。</p><p>Tips2：成功原因的<strong>答案要素</strong>主要来<strong>源于三个部分</strong>：</p><ol><li>关注“因为……”“由于……”“之所以……是因为……”等表<em>因果关系的关联词。</em></li><li>关注现象本身的<em>主动作为</em>，因为要想成功，现象本身势必做了不少努力，所以在材料中找寻现象本身的做法，也是答题的一个要点。</li><li>关注现象作为后的<em>积极意义</em>，现象作为后给受众群体带来了诸多好处，受众的认可说明现象是成功的。</li></ol><hr><p><strong>示例</strong><br>下面我们截取了“根据给定资料，<em>分析 H 企业发展成功的原因</em>”中的两段材料，具体阐述一下上面的答题技巧如何运用到材料中。</p><div class="note primary">段 1：近日，国内知名洗衣机品牌 H 的校园洗衣房正式入驻 R 市大学城。18 台物联网自助洗衣设备开始投入使用，为大学生提供自助洗衣服务。互联网的风起云涌，不仅从根本上颠覆了许多传统行业，同时也创造了新的行业和机遇。与过去的自助投币式洗衣机不同，大学生只要扫描下载该品牌洗衣 APP，就可以随时随地实现在线预约排队、在线支付及在线状态查看等智慧功能。</div><details ><summary> <p>解析</p> </summary>              <div class='content'>              <div class="note default"><p>材料剖析：<br>我们看到在这一段落中，“互联网的风起云涌，不仅从根本上颠覆了许多传统行业，同时也创造了新的行业和机遇”，这是 H 企业应用物联网，开发洗衣 APP 的客观条件，构成了我们 H 企业成功的外因，提炼要点 1：互联网的发展，为企业提供机遇。<br>段 2：由于有着对中国当代大学生的长期观察和了解，该品牌依托物联网打造出这一创新模式。供求双方通过互联网发布自己可供分享或需求的物品，不仅能为特定的供给者或需求者提供可选择的交易对象，还有助于掌握交易对象更多的信息。当这种自助洗衣设备一入驻 R 市大学城，就受到了大学生们的喜爱。课间查看空余机位，一键下单，然后手机支付，该品牌洗衣逐渐成为大学生校园生活中的一部分。该校一名学生告诉记者：“自从学校有了这种自助洗衣设备，之前排队洗衣的时间可以用在逛书店和学习上了。现在我们宿舍的六个室友，每人都装了洗衣 APP，给我们带来了很多便利。”</p></div><div class="note info"><p>材料剖析：<br>“由于有着对中国当代大学生的长期观察和了解，该品牌依托物联网打造出这一创新模式。”“由于”是典型表述因果关系的关联词，其后引导的句子需要重点关注，“由于有着对中国当代大学生的长期观察和了解”是 H 企业成功的原因，提炼要点 2：长期观察了解目标群体。<br>“该品牌依托物联网打造出这一创新模式”属于做法，是 H 企业成功的原因，提炼要点 3：依托物联网发展、打造创新模式。这里需要注意的是：按照申论答案表意明确清晰的原则，如果答案中写的是打造创新模式，其实并不知道这创新模式到底创新在何处，或者这个创新模式具体是什么，我们应该把创新模式到底是什么写在答案中，接着阅读材料。“供求双方通过互联网发布自己可供分享或需求的物品，不仅能为特定的供给者或需求者提供可选择的交易对象，还有助于掌握交易对象更多的信息。”这句材料是对创新模式的具体解释，告诉了我们 H 企业到底是怎么做的，这才是 H 企业的具体做法，也是它成功的原因，提炼要点 4：通过互联网发布物品，为供求双方提供可选择的交易对象以及相关信息。</p><p>在段落的后半部分，该校一名学生告诉记者：“自从学校有了这种自助洗衣设备，之前排队洗衣的时间可以用在逛书店和学习上了。现在我们宿舍的六个室友，每人都装了洗衣 APP，给我们带来了很多便利。”这句话从用户角度说出了 H 企业投放自主洗衣设备，给他们节约了时间，带来了便利，这是 H 企业主动作为的积极意义，属于 H 企业成功的原因，提炼要点 5：方便快捷，节省用户时间。</p></div><div class="note success"><p>答案要点：<br>1、互联网的发展，为企业提供机遇。（tips1：外在环境，客观原因）<br>2、长期观察了解目标群体。（tips2-1：因果关联词引导的句子）<br>3、依托物联网发展。（tips2-2：企业的做法）<br>4、通过互联网发布物品，为供求双方提供可选择的交易对象以及相关信息。（tips2-2：企业的做法）<br>5、方便快捷，节省用户时间。（tips2-3：企业做法带来的积极意义）</p></div>              </div>            </details></div></div><div class="tab-pane" id="正面原因-5"><div class="note danger"><img data-src="38.png" width="80%" /><img data-src="39.png" width="80%" /><img data-src="40.png" width="80%" /><img data-src="41.png" width="80%" /></div></div></div></div><h4 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h4><div class="tabs" id="其他类"><ul class="nav-tabs"><li class="tab active"><a href="#其他类-1">变化</a></li><li class="tab"><a href="#其他类-2">特点</a></li><li class="tab"><a href="#其他类-3">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="其他类-1"><div class="note success"><p>有些题目 <strong>“长相特殊” “问法奇怪”</strong>，但是终归是考察申论的<em>基本能力与基本方法</em></p><img data-src="46.png" width="80%" /></div><details ><summary> <p>变化</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="42.png" width="80%" /><img data-src="43.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="其他类-2"><div class="note danger"><div class="note success"><p><strong>特点</strong>就是描述某个<em>事物</em>或某个<em>行为</em>所具有的<em>特别或特殊</em>之处的信息；</p><p>概括的时候可以借用一些<em>表达性质</em>的词语去描述事物或行为。<br><strong>两种</strong>：</p><ol><li>常见的 <strong>好、坏、美、丑</strong>带<em>有评价</em>的形容词</li><li>形容词的变形，<strong>性、化</strong>等表形容的名词，<strong>精细化、科技化、系统性</strong></li></ol><p>[待积累补充]：规范词汇</p></div><img data-src="44.png" width="80%" /><img data-src="45.png" width="80%" /></div></div><div class="tab-pane" id="其他类-3"></div></div></div><h3 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h3><h4 id="观点分析"><a href="#观点分析" class="headerlink" title="观点分析"></a>观点分析</h4><div class="tabs" id="观点分析"><ul class="nav-tabs"><li class="tab active"><a href="#观点分析-1">概念</a></li><li class="tab"><a href="#观点分析-2">事例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="观点分析-1"><details ><summary> <p>分析</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="46.png" width="80%" /><img data-src="47.png" width="80%" /><img data-src="48.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="观点分析-2"><img data-src="49.png" width="80%" /><img data-src="50.png" width="80%" /></div></div></div><h4 id="现象分析类"><a href="#现象分析类" class="headerlink" title="现象分析类"></a>现象分析类</h4><div class="tabs" id="现象分析类"><ul class="nav-tabs"><li class="tab active"><a href="#现象分析类-1">概念</a></li><li class="tab"><a href="#现象分析类-2">事例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="现象分析类-1"><details ><summary> <p>分析</p> </summary>              <div class='content'>              <div class="note danger"><p><strong>现象分析题：</strong> 针对现象进行分析评价的题目。</p><p><em>对。.. 现象。.. 见解/看法/认识/评价等</em></p><img data-src="50.png" width="80%" /><div class="note success"><p><strong>第一步：表述观点</strong></p><img data-src="51.png" width="80%" /><img data-src="52.png" width="80%" /><img data-src="53.png" width="80%" /><div class="note info"><p><strong>第二步： 原因：</strong><br><em>原因</em>  从问题、危害、意义、事例等方面展开</p><p><em>🤔️为啥是原因而不是理由🤔️</em></p><ol><li>因为现象类是客观存在的，<em>不应该说好或不好的理由</em>，而是造成好不好的原因。是两个概念。</li><li><em>事例：</em> 如果是围绕主题的，可以作为支持主题的原因，需要自己概括</li></ol><div class="note success"><p><strong>第三步：答题步骤</strong></p><div class="note warning"><p>对这一现象进行评析表态+分析理由（综合考虑<em>问题、危害、意义、事例</em>等，资料中涉及几个就写几个）+总结评价（一般为对策）</p></div><img data-src="54.png" width="80%" /></div></div></div></div>              </div>            </details></div><div class="tab-pane" id="现象分析类-2"><div class="note success"><p><strong>🤔️为何写那么多不得分</strong>？</p><div class="note primary"><p><em>分为以下几个方面</em></p><blockquote class="blockquote-center"><p><strong>为啥总是想要自己概括呢！！！</strong></p></blockquote><p><strong>三步走</strong></p><ol><li>除了考虑： <em>合理、不合理，辩证看待</em> 以外，还可以从 <strong>说话人的角度</strong> <em>摘抄、归纳</em></li><li>原因还是要 <strong>来源材料、来源材料</strong> <em>总是想要自己概括</em>，牢记二八定律，先摘抄</li><li>对策，需要进一步积累规范词汇、多看多看</li></ol><div class="note warning"><p>这是人家的<em>三步走</em></p><blockquote><p>理由有很多，已经分不清楚，现象的理由和原因的区别了</p></blockquote><p>对这一现象进行评析表态+分析理由（综合考虑<em>问题、危害、意义、事例</em>等，资料中涉及几个就写几个）+总结评价（一般为对策）</p></div></div><details ><summary> <p>题目</p> </summary>              <div class='content'>              <img data-src="55.png" width="80%" />              </div>            </details><details ><summary> <p>答案</p> </summary>              <div class='content'>              <img data-src="56.png" width="80%" />              </div>            </details></div></div></div><h4 id="词汇解释题"><a href="#词汇解释题" class="headerlink" title="词汇解释题"></a>词汇解释题</h4><div class="tabs" id="词汇解释题"><ul class="nav-tabs"><li class="tab active"><a href="#词汇解释题-1">基本信息</a></li><li class="tab"><a href="#词汇解释题-2">事例</a></li><li class="tab"><a href="#词汇解释题-3">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="词汇解释题-1"><details ><summary> <p>基本信息</p> </summary>              <div class='content'>              <div class="note danger"><p><strong>题型特征</strong></p><p><em>谈。.. 词的含义；对。.. 词进行解释；谈对。.. 词的理解</em></p><div class="note success">如：谈谈死海。<p>不能只说表面的意思，如：地中海可以漂浮起来的海。<strong>—0 分</strong></p><ol><li><p>要解释深层含义。<em>词汇附近找</em></p></li><li><p>一道题几十分，即便含义有 30 个字，也对不起分数，所以需要针对 <em>词意</em> 进行扩展。</p></li></ol></div><p><strong>解题思路</strong></p><blockquote class="blockquote-center"><p>感情色彩与答案相同</p></blockquote><div class="note info"><p>相关要素&lt;<em>问题、危害、意义、事例</em>等&gt;；</p><p>需要从 <strong>词意</strong> 的 正负面，去找</p><ol><li>好的就找好的；<strong>意义</strong></li><li>坏的就找坏的。<em>问题、危害</em></div></li></ol><p><strong>对策</strong></p><div class="note warning"><ol><li>有对策就直接抄</li><li>没有就总结。</div></li></ol></div>              </div>            </details></div><div class="tab-pane" id="词汇解释题-2"><details ><summary> <p>事例-本领恐慌</p> </summary>              <div class='content'>              <img data-src="57.png" width="80%" />              </div>            </details><div class="note danger"><details ><summary> <p>答案一</p> </summary>              <div class='content'>              <p>本领恐慌是指担心自己不能保质保量、按时按点地完成工作任务。<br>造成这样的原因主要是自身知识水平低，工作中难以创新；工作压力大，所要处理的问题多；缺乏实践经验。<br>针对这种问题我们要努力学习，长本领，理论联系实践，在实践中进步。</p>              </div>            </details><details ><summary> <p>答案二</p> </summary>              <div class='content'>              <div class="note success">“本领恐慌”指基层干部因自身能力素质、知识结构滞后于发展需要，不能有效完成工作而产生的一种不安情绪。<p>究其原因：1. 外界环境方面：基层矛盾集中，群众利益诉求多元化、复杂化。2. 基层干部自身：知识水平低，创新能力不足；基层工作经验少，缺乏解决实际问题的能力。</p><p>为此，基层干部要注重工作实践中学习知识本领。</p></div>              </div>            </details><details ><summary> <p>答案三</p> </summary>              <div class='content'>              <div class="note info">本题主要考查词汇解释题的答题思路。一般答题思路是：*释义（解释这个词的含义）+分析（相关要素：一般包括问题、原因、意义等）+总结评价（一般是对策）。*<p>结合本题，首先题干中“本领恐慌”的表意<em>不够明确</em>，可能需要结合资料解释其含义；<br>其次，由“本领恐慌”这一负面词汇可以推测答案可能涉及问题、原因、危害等要素；<br>最后，可就如何解决“本领恐慌”给出对策，具体结合资料而定。</p><ol><li>阅读段 1，尾处“……这实际上是个‘本领恐慌’的问题”提示前边讲述的是“本领恐慌”的含义，其中“这”指代前文“有些干部在工作中缺乏‘发展之招’……总担心自己不能保质保量、按时按点地完成工作任务”，由首句中“基层干部要不断提升能力素质、更新自身的知识结构才能解决好发展中的新问题”可知，“有些干部在工作中缺乏‘发展之招’”指的是基层干部自身能力素质、知识结构滞后于发展需要。因此，可整合得出“本领恐慌”的含义：<strong>“本领恐慌”指基层干部因自身能力素质、知识结构滞后于发展需要，不能有效完成工作而产生的一种不安情绪。</strong></li><li>段 2 中转折关联词“但”引导的句子“但自己知识水平低，在工作中没有新思路、新模式、新方法……种蔬菜大棚”指出了干部“羞愧难当”的原因，其中“工作中没有新思路、新模式、新方法”可概括为：创新能力不足。由此可以得出“本领恐慌”的原因：<strong>基层干部知识水平低，创新能力不足。</strong></li><li>阅读段 3，（1）段首处的句子“基层干部与群众直接接触，往往处在各种矛盾的中心地带，基层干部普遍感到压力大”，指出了基层干部“本领恐慌”的原因，可直接摘抄出要点：基层<em>矛盾集中<em>。（2）段尾处的句子“遇到问题，群众首先想到的都是找我们来解决。发展到现在，我们除了要协调……各方利益诉求，还要操心……等各种各样的事情”，指出群众利益诉求变得复杂、多元，让基层干部压力大，由此可概括得出“本领恐慌”的原因：</em>群众利益诉求多元化、复杂化。</em> [规范词]</li><li>阅读段 4，负面信息“他发现这工作和想象中的完全不一样……真到了与搬迁户面对面，他却无能为力，让小王‘慌了神’”，提示“本领恐慌”的原因，可概括为：<em>基层工作经验少，缺乏解决实际问题的能力。</em> [规范词]</li><li>阅读段 5 首处的句子“克服‘本领恐慌’，需要长知识、增本领，这就需要基层干部在‘学’字上下功夫”，指出基层干部要学习知识、本领。“广阔的工作实践是一所没有边界的学校”<br>指出应在实践中不断学习、历练。由此可得出应对“本领恐慌”的对策：基层干部要注重工作实践中学习知识本领。</li></ol><p>综上，可得出答案要点：<br>“本领恐慌”<strong>指</strong>基层干部<em>因</em>自身能力素质、知识结构滞后于发展需要，<em>不能</em>有效完成工作而产生的一种不安<strong>情绪</strong>。<br><strong>究其原因：</strong>1. 外界环境方面：基层矛盾集中，群众利益诉求多元化、复杂化。2. 基层干部自身：知识水平低，创新能力不足；基层工作经验少，缺乏解决实际问题的能力。<br><strong>为此，</strong>基层干部<strong>要</strong>注重工作实践中学习知识本领。</p></div>              </div>            </details></div></div><div class="tab-pane" id="词汇解释题-3"><div class="note success"><p><strong>得分少的原因</strong></p><ol><li><em>解释的不好</em>，首先是个完整的句子，来源材料的定义，但是也要<strong>总结、规范</strong>。主题+原因+现象；</li><li>啰嗦&amp;占字数：学习：<ol><li><strong>究其原因</strong> 代替<del>产生这样的现象的原因是</del>：</li><li><strong>为此</strong> 代替<del>针对这种问题我们要</del></li></ol></li><li>没有分条罗列，总结。</li></ol></div></div></div></div><h4 id="句子解释题"><a href="#句子解释题" class="headerlink" title="句子解释题"></a>句子解释题</h4><div class="tabs" id="句子解释题"><ul class="nav-tabs"><li class="tab active"><a href="#句子解释题-1">概念</a></li><li class="tab"><a href="#句子解释题-2">事例</a></li><li class="tab"><a href="#句子解释题-3">重点🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="句子解释题-1"><div class="note danger"><p>（1）长短有度。当我们掌握“三步走”之后，对每一步所占篇幅要有个明确认知，即释义短一些，相关<em>要素长</em>一些，总结<strong>评价再短</strong>一些。<br>（2）合理布局。这三步不一定都能找到，因此语言的衔接要自然温柔，可以简单背诵一个小“模版”，<strong>……是指，导致（由于）……，应该（因此）……。</strong></p></div><details ><summary> <p>句子解释</p> </summary>              <div class='content'>              <div class="note success"><img data-src="58.png" width="80%" /><img data-src="59.png" width="80%" /><img data-src="60.png" width="80%" /><img data-src="61.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="句子解释题-2"><details ><summary> <p>事例</p> </summary>              <div class='content'>              <div class="note danger"><div class="note success"><p>“要避免在垃圾堆上数钞票”</p><ol><li>读题，预构问题，环境相关的</li><li>污染的危害</li><li>有可能还有治理的措施、意义</li></ol></div><img data-src="62.png" width="50%" /></div>              </div>            </details><details ><summary> <p>答案对比</p> </summary>              <div class='content'>              <div class="note success"><img data-src="63.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="句子解释题-3"><div class="note danger"><p>综合题中的<em>句子解释题</em>是考试中的<strong>重点</strong>，相比词语解释题，句子更长，含义更丰富，<em>涉及要素更多</em>，有些句子还可能晦涩难懂。</p><div class="note info"><p><strong>第一步  释义</strong></p><p><em>就近原则</em>，在句子的附近位置找解释，一般有<em>专家、权威观点和总结句</em>，这时候需要我们重点去读、去理解。</p><p>如果就近位置没有，则需要我们<em>结合句子的上下文进行总结</em>。</p><p>有的句子中会出现较为<em>抽象的词</em>，或者对句子起到关键作用的词，此时，我们在释义环节可以<em>先</em>解释其中的<em>核心词汇</em>，<em>再解释句子</em>。</p><div class="note primary"><p><strong>示例</strong><br>【2018 年 云南】根据材料，谈谈你对其中划线部分“各个地方的人才引进工作，必须要‘错位’又‘对位’”的理解。</p><p><strong>参考答案</strong>：</p><p><em>“错位”指人才引进要错落有致，差异化“对位”指要结合当地的实际情况引进人才。（释义部分）</em></p><p><strong>题目分析</strong>：</p><p>（1）判断题型。出现“谈谈你对……理解”，题型为词句解释题。<br>（2）理顺思路，方法运用。确定题型之后，第一步需要对句子进行解释，即解释人才引进工作中“错位”“对位”的含义，可以分别解释什么是人才引进的“错位”以及“对位”。</p></div></div><div class="note default"><p><strong>第二步  相关要素</strong><br>综合题得分率低的主要原因就是“相关要素”这一步没有做好，因为句子含义比较模糊，回答的内容不清晰，作答要素也相对较多，致使同学们难以针对性作答，那么我们看一下到底怎么答好相关要素呢？<br>给我们一个句子，我们不能只下定义、做解释，还要分析为什么会出现这个句子，把围绕着句子的相关要素要安排的明明白白。当然不是所有要素都要回答，可以利用我们之前讲过的一个小技巧——“感情色彩”法，以此预判答题的侧重点。如果句子的感情色彩是积极的，侧重于答意义；如果是消极的，侧重于答原因、危害等；如果句子中涉及的感情色彩既有积极的，也有消极的，答案也应该包含两个方面，大家要全面考虑。需要注意的是，一般单一题中可忽略例子，但是在综合题中例子也是得分点，一般例子和主题直接相关，且较大篇幅介绍一个例子，这时一定是重点强调，写为“如 XX”即可，一般一个例子 1-2 分。相关要素（问题、危害、意义、事例等）的环节分数比较高，要素最难、最多、最杂，一定要全面掌握。</p><div class="note success">**示例**【2019 年 国考地市】“给定资料 4”中的座谈会上，主持人说：“如果不能打破这种种‘遮蔽’，就拿不出有份量的作品。”请谈谈你对“种种‘遮蔽’”的理解。（15 分）要求：观点明确，紧扣资料，准确全面。不超过 200 字。<p><strong>参考答案：</strong><br>遮蔽是指被现实、自我、技术、金钱迷惑，不能全面、真实揭示时代精神的错误文艺创作行为。【释义】<br>具体为：<br>一、被现实遮蔽，掩盖历史，创作娱乐化，对时代命运缺乏严肃思考。<br>二、被自我遮蔽，对他人缺少同情，对人民生活缺少感知力。<br>三、被技术遮蔽，沉迷虚拟世界，无视现实生活、社会实践。<br>四、被城市金钱物质遮蔽，对农村缺少认识，对精神缺乏关注。【1-4 为相关要素】</p><p><strong>题目分析：</strong><br>（1）判断题型。看到“对……理解”，确定此题为词句解释题。<br>（2）理顺作答思路，方法运用。分三步走，<em>释义+分析相关要素+总结评价</em>。通过感情色彩判断“<em>遮蔽”为负面表述</em>，所以“分析相关要素”部分可能会重点涉及“<em>问题、危害、原因</em>”等，因此答案中的相关要素部分<em>问题、危害较多</em>。</p></div></div><div class="note warning"><p><strong>第三步  总结评价</strong><br>一般来说对策的分值不太高，有空格就写，该抄就抄该总结就总结。</p><div class="note success">再走一步，优化答案（1）长短有度。当我们掌握“三步走”之后，对每一步所占篇幅要有个明确认知，即释义短一些，相关*要素长*一些，总结**评价再短**一些。（2）合理布局。这三步不一定都能找到，因此语言的衔接要自然温柔，可以简单背诵一个小“模版”，**……是指，导致（由于）……，应该（因此）……。**</div></div></div></div></div></div><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><div class="tabs" id="比较"><ul class="nav-tabs"><li class="tab active"><a href="#比较-1">概念</a></li><li class="tab"><a href="#比较-2">事例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="比较-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="64.png" width="80%" /><img data-src="65.png" width="80%" /><img data-src="66.png" width="80%" /><img data-src="67.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="比较-2"><details ><summary> <p>答案对比</p> </summary>              <div class='content'>              <img data-src="68.png" width="80%" />              </div>            </details><details ><summary> <p>问题汇总</p> </summary>              <div class='content'>              <div class="note success"><blockquote class="blockquote-center"><p>分数低的几个原因</p></blockquote><ol><li>找到点，不知道抄多还是少</li><li>总是过度引申</li><li>写的时候，不知道<em>格式是啥</em>、怎么个分结构法，概念不明。</li><li>规范词也不够</li></ol></div>              </div>            </details></div></div></div><h4 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h4><div class="tabs" id="其他"><ul class="nav-tabs"><li class="tab active"><a href="#其他-1">概念</a></li><li class="tab"><a href="#其他-2">事例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="其他-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="69.png" width="80%" /><img data-src="70.png" width="80%" /><img data-src="71.png" width="80%" /><img data-src="72.png" width="80%" /><img data-src="73.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="其他-2"></div></div></div><h4 id="6-5-分"><a href="#6-5-分" class="headerlink" title="6.5 分"></a>6.5 分</h4><div class="tabs" id="综合题"><ul class="nav-tabs"><li class="tab active"><a href="#综合题-1">概念</a></li><li class="tab"><a href="#综合题-2">我的解析</a></li><li class="tab"><a href="#综合题-3">人家的答案</a></li></ul><div class="tab-content"><div class="tab-pane active" id="综合题-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="76.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="综合题-2"><details ><summary> <p>自己的总结</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="74.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="综合题-3"><details ><summary> <p>对比</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="75.jpg" width="80%" /></div>              </div>            </details></div></div></div><h3 id="公文题"><a href="#公文题" class="headerlink" title="公文题"></a>公文题</h3><div class="tabs" id="公文题"><ul class="nav-tabs"><li class="tab active"><a href="#公文题-1">概念</a></li><li class="tab"><a href="#公文题-2">样式</a></li><li class="tab"><a href="#公文题-3">类型分类</a></li><li class="tab"><a href="#公文题-4">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="公文题-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <img data-src="78.png" width="80%" /><img data-src="79.png" width="80%" />              </div>            </details></div><div class="tab-pane" id="公文题-2"><details ><summary> <p>注意</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="77.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="公文题-3"><img data-src="80.png" width="80%" /></div><div class="tab-pane" id="公文题-4"><img data-src="81.png" width="80%" /></div></div></div><h4 id="方案类"><a href="#方案类" class="headerlink" title="方案类"></a>方案类</h4><div class="tabs" id="方案类"><ul class="nav-tabs"><li class="tab active"><a href="#方案类-1">按目的分类</a></li><li class="tab"><a href="#方案类-2">示例</a></li><li class="tab"><a href="#方案类-3">总结</a></li><li class="tab"><a href="#方案类-4">我的</a></li><li class="tab"><a href="#方案类-5">人家的</a></li></ul><div class="tab-content"><div class="tab-pane active" id="方案类-1"><details ><summary> <p>按目的分类</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="82.png" width="80%" /><p>方案类公文正文内容通常包括三个部分：<em>开头、主体和结尾</em>。<br>开头可以写背景式、根据式、目的/意义式。</p><div class="note info"><ol><li><em>背景式</em>：近日出现了……问题，提出如下对策。</li><li><em>根据式</em>：根据材料里政策、理论、会议精神提出对策。</li><li><em>目的/意义式</em>：为了达到……目的；为了让……发挥作用，现提出如下对策。</li></ol><p>以上三种都是方案类公文的常见开头方式，具体写什么，要根据材料而定。如果材料中包含背景、根据、目的/意义，均可写出。<br>例如“近日出现……问题，现根据……法，为了达到……目的，现提出如下对策”，各位考生灵活处理即可。</p></div><div class="note warning"><p>主体部分主要是提对策，对策占据大部分篇幅，而答案来源有三种方式：<strong>摘抄、借鉴、推导。</strong></p><ol><li>抄：看见标志性动词，例如“需要、应该、设置、建立”等，可以直接摘抄。</li><li>借：其他国家、地区出现好的做法，也可以借鉴。</li><li>推：没有直接摘抄的对策，并且借鉴得出的对策不够多，那么可以根据题干、材料中的问题进行反推。</div></li></ol><div class="note success"><p><strong>都写上就行了</strong></p><p>最后是结尾部分，这部分内容可以根据字数来确定，可写可不写。如果格子比较充裕，结尾部分可以写上：以上建议请有关部门重视、以上建议请各领导部门审阅等。<br>我们实际操作中需要在结尾加上：以上建议请领导审阅、以上意见请各上级部门参阅或者以上建议请相关部门批示等表述。<br>故当要求中<em>出现“建议口吻”，这里的结尾就不能省略，而一定要有一句体现建议口吻的结尾。</em></p></div></div>              </div>            </details></div><div class="tab-pane" id="方案类-2"><img data-src="83.png" width="80%" /><img data-src="84.png" width="80%" /></div><div class="tab-pane" id="方案类-3"><img data-src="85.png" width="80%" /></div><div class="tab-pane" id="方案类-4"><img data-src="86.png" width="80%" /></div><div class="tab-pane" id="方案类-5"><img data-src="87.png" width="80%" /></div></div></div><h4 id="宣传类"><a href="#宣传类" class="headerlink" title="宣传类"></a>宣传类</h4><div class="tabs" id="宣传类"><ul class="nav-tabs"><li class="tab active"><a href="#宣传类-1">概念</a></li><li class="tab"><a href="#宣传类-2">示例</a></li><li class="tab"><a href="#宣传类-3">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="宣传类-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="88.png" width="80%" /><div class="note danger"><p>第一部分：<strong>开头</strong>。主要包括行文的背景和目的。<br>第二部分：<strong>劝服</strong>。起劝服作用，可能包括：问题、危害、意义等要素。<br>第三部分：<strong>倡议</strong>。主要写对策。<br>第四部分：<strong>结尾</strong>。可以升华主题、发出呼吁号召。</p><div class="note success"><ol><li><em>开头</em>。交代发文事由，告诉读者为什么发文，可能是<em>某个背景、目的</em>。<br>具体写“背景”还是“目的”要根据材料来判断，材料中有“目的”就写“目的”，材料中有“背景”就写“背景”。如果材料中既有“背景”又有“目的”，字数充足的话，可以都写上。</li><li><em>劝服</em>。进行劝解，采用“动之以情，晓之以理”的思路。之所以倡导大家这样去做，可能是因为做了之后会带来好处，没做到会有危害等等。<br>具体落笔成文依然是遵照材料逻辑侧重。</li><li><em>倡议</em>。宣传类公文的主旨就是号召大家做什么、怎么做。所以这部分侧重落实行动、给出对策。</li><li><em>结尾</em>。主要是升华宣传主题，呼吁号召落实做法。呼吁号召有两种写法，根据材料而定：<ol><li>①如果材料中有关于呼吁号召的内容，可以直接摘抄。</li><li>②如果材料中没有这类呼吁性词汇，可以号召大家一起参加。</div></li></ol></li></ol></div></div>              </div>            </details></div><div class="tab-pane" id="宣传类-2"></div><div class="tab-pane" id="宣传类-3"><img data-src="89.png" width="80%" /></div></div></div><h5 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h5><div class="tabs" id="宣传类变形"><ul class="nav-tabs"><li class="tab active"><a href="#宣传类变形-1">总的分类</a></li><li class="tab"><a href="#宣传类变形-2">宣传正能量</a></li><li class="tab"><a href="#宣传类变形-3">危机公关类</a></li></ul><div class="tab-content"><div class="tab-pane active" id="宣传类变形-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="94.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="宣传类变形-2"><img data-src="90.png" width="80%" /><img data-src="91.png" width="80%" /></div><div class="tab-pane" id="宣传类变形-3"><img data-src="92.png" width="80%" /><img data-src="93.png" width="80%" /></div></div></div><h4 id="总结类"><a href="#总结类" class="headerlink" title="总结类"></a>总结类</h4><div class="tabs" id="总结类"><ul class="nav-tabs"><li class="tab active"><a href="#总结类-1">总结类</a></li><li class="tab"><a href="#总结类-2">示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="总结类-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="95.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="总结类-2"><img data-src="96.png" title="模版背诵" width="80%" /></div></div></div><h4 id="评论类"><a href="#评论类" class="headerlink" title="评论类"></a>评论类</h4><div class="tabs" id="评论类"><ul class="nav-tabs"><li class="tab active"><a href="#评论类-1">评论类</a></li><li class="tab"><a href="#评论类-2">示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="评论类-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="97.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="评论类-2"><img data-src="98.png" width="80%" /></div></div></div><h3 id="大作文"><a href="#大作文" class="headerlink" title="大作文"></a>大作文</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><div class="tabs" id="大作文-认识"><ul class="nav-tabs"><li class="tab active"><a href="#大作文-认识-1">基本概念</a></li><li class="tab"><a href="#大作文-认识-2">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="大作文-认识-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="99.png" width="80%" /><img data-src="100.png" width="80%" /><img data-src="101.png" width="80%" /><img data-src="105.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="大作文-认识-2"><img data-src="102.png" width="80%" /><img data-src="103.png" width="80%" /><img data-src="104.png" width="80%" /></div></div></div><h4 id="审题"><a href="#审题" class="headerlink" title="审题"></a>审题</h4><h5 id="审题–指向明确型"><a href="#审题–指向明确型" class="headerlink" title="审题–指向明确型"></a>审题–指向明确型</h5><div class="tabs" id="审题--观点明确"><ul class="nav-tabs"><li class="tab active"><a href="#审题--观点明确-1">基本概念</a></li><li class="tab"><a href="#审题--观点明确-2">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="审题--观点明确-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="106.png" width="80%" /><img data-src="107.png" width="80%" /><img data-src="108.png" width="80%" /><img data-src="109.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="审题--观点明确-2"><img data-src="110.png" width="80%" /></div></div></div><h5 id="审题–指向关系型"><a href="#审题–指向关系型" class="headerlink" title="审题–指向关系型"></a>审题–指向关系型</h5><div class="tabs" id="审题--指向关系型"><ul class="nav-tabs"><li class="tab active"><a href="#审题--指向关系型-1">基本概念</a></li><li class="tab"><a href="#审题--指向关系型-2">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="审题--指向关系型-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="111.png" width="80%" /><img data-src="112.png" width="80%" /><img data-src="113.png" width="80%" /><img data-src="114.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="审题--指向关系型-2"><img data-src="115.png" width="80%" /><img data-src="116.png" width="80%" /></div></div></div><h5 id="审题–指向多元型"><a href="#审题–指向多元型" class="headerlink" title="审题–指向多元型"></a>审题–指向多元型</h5><div class="tabs" id="审题--指向多元型"><ul class="nav-tabs"><li class="tab active"><a href="#审题--指向多元型-1">基本概念</a></li><li class="tab"><a href="#审题--指向多元型-2">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="审题--指向多元型-1"><details ><summary> <p>概念</p> </summary>              <div class='content'>              <div class="note warning"><img data-src="117.png" width="80%" /><img data-src="118.png" width="80%" /><img data-src="119.png" width="80%" /><img data-src="120.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="审题--指向多元型-2"><img data-src="121.png" width="80%" /></div></div></div><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><h5 id="提炼观点"><a href="#提炼观点" class="headerlink" title="提炼观点"></a>提炼观点</h5><div class="tabs" id="提炼观点"><ul class="nav-tabs"><li class="tab active"><a href="#提炼观点-1">基本概念</a></li><li class="tab"><a href="#提炼观点-2">事例</a></li><li class="tab"><a href="#提炼观点-3">大纲</a></li></ul><div class="tab-content"><div class="tab-pane active" id="提炼观点-1"><details ><summary> <p>观点</p> </summary>              <div class='content'>              <div class="note danger"><p><strong>观点的来源</strong></p><ol><li>题干：主题词</li><li>材料：要素、观点。</li></ol><p><strong>材料的阅读顺序</strong></p><ol><li><em>优先阅读</em>：指定材料、小题没有涉及的材料、权威材料</li><li>关照全篇：结合小题(<em>题干、答案</em>)、浏览全篇。</li></ol><p><strong>提炼观点的方法</strong></p><ol><li>直接摘抄</li><li>归纳概括</li><li>分析推导</li></ol></div>              </div>            </details></div><div class="tab-pane" id="提炼观点-2"><div class="note warning"><img data-src="122.png" width="80%" /><img data-src="123.png" width="80%" /><img data-src="124.png" width="80%" /><img data-src="125.png" width="80%" /><img data-src="126.png" width="80%" /><img data-src="127.png" width="80%" /><img data-src="128.png" width="80%" /><img data-src="129.png" width="80%" /></div></div><div class="tab-pane" id="提炼观点-3"><img data-src="130.png" width="80%" /><img data-src="131.png" width="80%" /></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 申论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申论规范表达</title>
      <link href="2020/06/09/civil_servant_composition/"/>
      <url>2020/06/09/civil_servant_composition/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/034.jpg" width=80% /><span class='geyan'>    川泽纳污，山薮藏疾，瑾瑜匿瑕。（《左传·宣公十五年》）</span><a id="more"></a><h2 id="总的分类"><a href="#总的分类" class="headerlink" title="总的分类"></a>总的分类</h2><div class="tabs" id="粉笔规范表达"><ul class="nav-tabs"><li class="tab active"><a href="#粉笔规范表达-1">政治管理类</a></li><li class="tab"><a href="#粉笔规范表达-2">经济类</a></li><li class="tab"><a href="#粉笔规范表达-3">文化类</a></li><li class="tab"><a href="#粉笔规范表达-4">社会保障类</a></li><li class="tab"><a href="#粉笔规范表达-5">生态区域类</a></li><li class="tab"><a href="#粉笔规范表达-6">科技法律类</a></li></ul><div class="tab-content"><div class="tab-pane active" id="粉笔规范表达-1"><details ><summary> <p>政治管理类</p> </summary>              <div class='content'>              <img data-src="004.jpg" width=80% />              </div>            </details></div><div class="tab-pane" id="粉笔规范表达-2"><img data-src="005.jpg" width=80% /></div><div class="tab-pane" id="粉笔规范表达-3"><img data-src="006.jpg" width=80% /></div><div class="tab-pane" id="粉笔规范表达-4"><img data-src="007.jpg" width=80% /></div><div class="tab-pane" id="粉笔规范表达-5"><img data-src="008.jpg" width=80% /></div><div class="tab-pane" id="粉笔规范表达-6"><img data-src="009.jpg" width=80% /><img data-src="010.jpg" width=80% /></div></div></div><h2 id="热点类–XXX"><a href="#热点类–XXX" class="headerlink" title="热点类–XXX"></a>热点类–XXX</h2><h2 id="热点类–XXX-1"><a href="#热点类–XXX-1" class="headerlink" title="热点类–XXX"></a>热点类–XXX</h2><h2 id="热点类–XXX-2"><a href="#热点类–XXX-2" class="headerlink" title="热点类–XXX"></a>热点类–XXX</h2><h2 id="热点类–XXX-3"><a href="#热点类–XXX-3" class="headerlink" title="热点类–XXX"></a>热点类–XXX</h2>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 申论 </category>
          
          <category> 积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常识</title>
      <link href="2020/06/09/civil_servant_common_sense/"/>
      <url>2020/06/09/civil_servant_common_sense/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/036.jpg" width=80% /><span class='geyan'>新沐者必弹冠，新浴者必振衣。（屈原《渔父》）</span><a id="more"></a><h2 id="名人名典"><a href="#名人名典" class="headerlink" title="名人名典"></a>名人名典</h2><div class="tabs" id="先秦"><ul class="nav-tabs"><li class="tab active"><a href="#先秦-1">先秦第一波</a></li><li class="tab"><a href="#先秦-2">第二波</a></li><li class="tab"><a href="#先秦-3">第三波</a></li><li class="tab"><a href="#先秦-4">思想</a></li></ul><div class="tab-content"><div class="tab-pane active" id="先秦-1"><details ><summary> <p>先秦</p> </summary>              <div class='content'>              <table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>汤</td><td>商汤灭夏《鸣条之战》然后建商</td></tr><tr><td>周文王-姬昌</td><td>文王拘而演《周易》，<em>据说是文王写的周易</em> <br/> 文王百子锁，寓意多子多福</td></tr><tr><td><strong>周武王</strong></td><td><em>武王伐纣 –《封神榜》</em> <br/> 牧野之战 – <em>灭商之战</em> 商乱导致-临阵倒戈</td></tr><tr><td>姜尚 （姜子牙）</td><td><em>《六韬》：太公兵法</em> <br/> 1. 百家宗师 <br/> 2.太公在此，诸神退位 <br/> 3. 封为 <em>齐国</em>君主，齐鲁大地，姜氏比较多</td></tr><tr><td>左丘明</td><td>《春秋左氏传》作为孔子编写的简单的《春秋》的补充 <br/> 《国语》</td></tr><tr><td>齐桓公 <strong>霸主</strong></td><td>公子小白；号钟琴；<br/> 称霸的标志✅ <strong>葵丘会盟</strong></td></tr><tr><td>晋文公</td><td>城濮之战【晋楚之战】，按约定 退避三舍，奠定了晋的霸主地位</td></tr><tr><td>楚庄王</td><td>问鼎中原，一鸣惊人 &lt;楚庄王开始无所事事，后来走上了霸主地位&gt;，<strong>绕梁琴</strong></td></tr><tr><td>越王勾践</td><td><em>卧薪尝胆</em> &lt;吴王阖闾&gt;</td></tr><tr><td><em>管仲</em></td><td>辅佐齐桓公：<strong>尊王攘夷、老马识途&lt;有经验的人有价值&gt;、管鲍之交&lt;鲍叔牙推荐管仲，不因身份影响矫情&gt;</strong> <br/> 法家先驱 <br/> 华夏第一相</td></tr></tbody></table><div class="note danger">春秋五霸两种说法1. 史记索隐：齐桓公、宋襄公、晋文公、秦穆公、楚庄王2. 荀子王霸：齐桓公、晋文公、楚庄王、吴王阖闾、越王勾践<img data-src="04.png" width="80%"></div>              </div>            </details></div><div class="tab-pane" id="先秦-2"><table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>范蠡 <strong>商圣</strong></td><td>号陶朱公；携<em>西施</em>泛舟；<br/>辅佐越王勾践；<strong>兔死狗烹</strong></td></tr><tr><td>伍子胥</td><td>辅佐吴王阖闾；<em>一夜白发&lt;过河一夜白发&gt;、倒行逆施</em>；年糕&lt;预言越灭吴，城墙下的糯米砖度过了灾荒&gt;；这几个都与伍子胥有关</td></tr><tr><td><em>秦孝公</em></td><td><code>商鞅变法</code></td></tr><tr><td>孙膑、庞涓</td><td>桂陵之战、马陵之战、田忌赛马、围魏救赵、减灶诱敌</td></tr><tr><td>苏秦&lt;6国封印&gt;、张仪</td><td>前倨后恭&lt;苏秦嫂子前后的变化&gt;；悬梁刺股&lt;苏秦 股：大腿 &gt;</td></tr><tr><td>蔺相如&lt;赵国&gt;</td><td>&lt;廉颇&gt;负荆请罪&lt;蔺相如&gt;、完璧归赵&lt;秦昭襄王&gt;、渑mian池之会</td></tr><tr><td><strong>白起</strong>战神 秦</td><td>长平之战 坑杀赵国40万 、纸上谈兵《赵括》</td></tr><tr><td>范雎</td><td>睚眦必报、远交近攻、固干削枝</td></tr><tr><td>荆轲</td><td>刺杀秦始皇嬴政、<strong>图穷匕见</strong></td></tr></tbody></table></div><div class="tab-pane" id="先秦-3"><table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>屈原</td><td>诗人、政治家；爱国、浪漫诗人、楚辞有<em>屈原等</em>几人有关 <br/> 香草美人 <br/> 离骚、九章、天问</td></tr><tr><td>战国七雄</td><td><img data-src="05.png" width="80%"></td></tr></tbody></table></div><div class="tab-pane" id="先秦-4"><table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>孔子 春秋 儒家 <br/> <strong>万世师表</strong></td><td>编《春秋》修订 <strong>五经</strong>，主张 <em>德治&amp;仁</em> <br/> 述而不作 <br/> 有教无类 因材施教</td></tr><tr><td>孟子 战国 儒家</td><td><code>性善论</code> 名贵君轻；<strong>仁政</strong>；<em>穷则独善其身</em> <br/> <em>生于忧患死于安乐</em> <strong>不以规矩无以方圆</strong> 富贵不能淫</td></tr><tr><td>荀子 战国 儒家</td><td><code>性恶论</code> 朴素唯物主义 <br/> 天行有常 不为尧存 不为桀jie亡 <br/> 不积跬步 <br/> 青取之于蓝 【发展】 <em>蓬生麻中不扶而直，白沙在涅 与之俱黑</em> 【外因】</td></tr><tr><td>老子 春秋</td><td>道德经 <em>客观唯心主义</em> <strong>辩证法</strong> 无为而治、小国寡民 <br/></td></tr><tr><td>庄子 战国</td><td>《南华经》 天人合一 庖丁解牛 《齐物论》《逍遥游》 君子之交淡如水</td></tr><tr><td>墨子 墨家 战国</td><td>兼爱 非功 尚贤 节用 明贵 代表普通民众</td></tr><tr><td>吕不韦 杂家 战国</td><td>吕氏春秋 兼儒墨 合名法 百家之道无不贯综 一字千金</td></tr><tr><td>孙武 兵家 春秋</td><td>《孙子兵法》不等于36计 <strong>第一部关于博弈论的著作</strong> 世界上 <strong>最早最著名</strong> 的兵法</td></tr><tr><td>孙膑 兵家 战国</td><td>《孙膑兵法》围魏救赵 桂陵之战 马陵之战</td></tr><tr><td>韩非子 法家 战国</td><td>《韩非子》依法治国、严刑峻法 <em>世异则事异，事宜则备变</em></td></tr><tr><td>商鞅 法家 战国</td><td>《商君书》徙木之信 <em>重农抑商</em></td></tr></tbody></table></div></div></div><div class="tabs" id="秦汉"><ul class="nav-tabs"><li class="tab active"><a href="#秦汉-1">秦汉</a></li><li class="tab"><a href="#秦汉-2">三国两晋南北朝</a></li><li class="tab"><a href="#秦汉-3">隋唐</a></li><li class="tab"><a href="#秦汉-4">唐诗派别</a></li><li class="tab"><a href="#秦汉-5">宋元</a></li><li class="tab"><a href="#秦汉-6">宋词元曲</a></li><li class="tab"><a href="#秦汉-7">明</a></li><li class="tab"><a href="#秦汉-8">清</a></li></ul><div class="tab-content"><div class="tab-pane active" id="秦汉-1"><details ><summary> <p>秦汉</p> </summary>              <div class='content'>              <table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>嬴政</td><td>统一六国、书同文、车同轨、统一<em>度量衡</em> 【长度、容器、轻重】 <br/> 小篆官方文字、隶书非官方文字 <br/></td></tr><tr><td>赵高</td><td>指鹿为马 秦二世</td></tr><tr><td>项羽</td><td>巨鹿之战 破釜沉舟 力能扛鼎 《垓gai下歌》</td></tr><tr><td>刘邦 汉高祖</td><td>约法三章 建西汉 《大风歌》</td></tr><tr><td>萧何</td><td>萧规曹随、汉惠帝 曹参</td></tr><tr><td>张良</td><td>孺子可教；汉初三杰：萧何、张良、韩信</td></tr><tr><td>韩信</td><td>一饭千金&lt;报答曾经帮助自己的老太太&gt;；<br/> 胯下之辱&lt;发达前整天佩剑，旁人说要么劈了我，要么从胯下过去&gt;；<br/><em>背水一战</em> 十面埋伏 <br/> <em>暗度陈仓</em></td></tr><tr><td>汉景帝</td><td>七国之乱；文景之治</td></tr><tr><td>武帝 刘彻</td><td>董仲舒 罢黜百家独尊儒术 &lt;也吸收别的家&gt; <br/> 盐铁经营 <br/> 金屋藏娇 思子宫</td></tr><tr><td>司马迁</td><td>《史记》第一部<em>纪传体</em> <strong>通史[先秦-西汉]</strong>，<br/>  鲁迅“史家之绝唱 无韵之离骚” 历史价值&amp;文学价值</td></tr><tr><td>司马相如</td><td>文章西汉两司马；《长门赋》；犬子；绿绎琴</td></tr><tr><td>张骞</td><td>丝绸之路 第一人； 开辟西域；丝绸之路 <strong>德国人 李希霍芬提出的</strong></td></tr><tr><td>主父偃</td><td>推恩令，文景时期发生了七国之乱，<strong>必须 把土地分给子女</strong>，越分越小</td></tr><tr><td>刘秀</td><td>昆阳之战，建东汉，光武中兴，以少胜多，击败王莽</td></tr><tr><td>马援</td><td>马革裹尸，老当益壮</td></tr><tr><td>班超</td><td><strong>投笔从戎；不入虎穴，焉得虎子</strong>； <strong>班固</strong>是<em>班超</em>的哥哥，是《汉书》的作者</td></tr></tbody></table>              </div>            </details></div><div class="tab-pane" id="秦汉-2"><img data-src="06.png" width="80%"> <table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>曹操 东汉末年</td><td>官渡之战：以少胜多 袁绍，奠定了北方 <br/> 赤壁之战：基本<strong>奠定了南北划江而治</strong> <br/> 望梅止渴 <br/> 奸雄 戏曲 <em>白色</em></td></tr><tr><td>曹丕</td><td>建魏国、文艺理<em>论批评专著</em>， 《典论论文》《燕歌行》</td></tr><tr><td>曹植</td><td><em>陈思王 才高八斗 七步成诗 洛神赋</em></td></tr><tr><td>刘备</td><td>三顾茅庐、建蜀汉</td></tr><tr><td>刘蝉</td><td>乐不思蜀 扶不起的阿斗</td></tr><tr><td>关羽</td><td>斩颜良，单刀赴会【真正的单刀赴会是鲁肃】 <br/> 水淹七军 <em>败走麦城</em></td></tr><tr><td>诸葛亮</td><td>鞠躬尽瘁；七擒孟获；北伐；八阵图；<strong>死诸葛吓走活仲尼</strong></td></tr><tr><td>孙权</td><td>建东吴</td></tr><tr><td>周瑜</td><td>赤壁之战， <em>羽扇纶巾是周瑜</em></td></tr><tr><td>吕蒙</td><td>透析荆州，孙权吕蒙 刮目相看</td></tr><tr><td>陆逊</td><td><strong>夷陵之战</strong> 奠定了三国鼎立 ，火烧联营</td></tr><tr><td>司马炎</td><td>建西晋</td></tr><tr><td>陶渊明</td><td>五柳先生 田园派创始；《归园田居》《桃花源记》</td></tr><tr><td>苻坚</td><td>投鞭断流 风声鹤唳 草木皆兵</td></tr><tr><td>谢安</td><td>沸水之战 以少胜多 <br/> <strong>东山再起</strong>, 住在东山，东晋人 <img data-src="08.png" width="30%"></td></tr><tr><td></td><td></td></tr><tr><td>谢灵运</td><td>山水派创始人，陶渊明 田园派、《登池上楼》《山居赋》</td></tr><tr><td>祖逖ti</td><td>闻鸡起舞-不是跳舞，是舞枪弄棒、中流击楫</td></tr><tr><td>北魏孝文帝</td><td><em>汉化改革</em>，平城&lt;山西大同&gt;迁都洛阳</td></tr><tr><td>郦道元</td><td>添加编著水、人文、<strong>地理</strong>《水经注》、<em>郦学</em></td></tr></tbody></table></div><div class="tab-pane" id="秦汉-3"><table><thead><tr><th>人物</th><th>高频考点</th></tr></thead><tbody><tr><td>杨坚</td><td>建隋朝，<em>开皇之治</em>，非常繁盛，唐朝还吃隋朝的粮食</td></tr><tr><td>杨广</td><td><strong>建立科举制度</strong>，修京杭大运河</td></tr><tr><td>李渊</td><td>建唐 龙行太原 先当过太上皇后去世 乾隆当过太上皇</td></tr><tr><td>初唐四杰</td><td>王 勃&lt;滕王阁序&gt;、杨炯、卢照邻、骆宾王</td></tr><tr><td>李世民</td><td>通过玄武门之变，赶下李渊 <br/> 贞观之治&lt;经济&gt; - 武周时代 - 开元盛世</td></tr><tr><td>魏征</td><td>水能载舟亦能覆舟 荀子说的</td></tr><tr><td>秦琼 <br/> 尉迟恭</td><td>李世民让他们看门，从唐朝开始变为 <strong>门神</strong></td></tr><tr><td>薛仁贵</td><td>灭高句gou丽;打破突厥；三箭定天山；脱帽退万敌；<strong>瞒天过海</strong> <br/> 主要与边疆有关</td></tr><tr><td>玄奘</td><td>西行印度；《大唐西域记》经书放在 <em>大雁塔</em></td></tr><tr><td>武则天</td><td>举行殿试；开创武剧；无字碑</td></tr><tr><td>狄仁杰</td><td><strong>桃李满天下</strong> 有很多学生， 山西太原狄村，</td></tr><tr><td>李隆基 唐玄宗</td><td>开元盛世，唐的鼎盛时代 安史之乱，宠杨贵妃，</td></tr></tbody></table></div><div class="tab-pane" id="秦汉-4"><table><thead><tr><th>门派</th><th>人物</th></tr></thead><tbody><tr><td>田园诗派</td><td>王维、孟浩然</td></tr><tr><td>边塞诗派</td><td>高适-莫愁前路无知己、岑参-忽如一夜春风来 <strong>雪</strong></td></tr><tr><td>盛唐代表</td><td>李白 <em>浪漫主义–西游记*、杜甫 *现实主义-红楼梦</em></td></tr><tr><td>中唐代表</td><td>白居易、刘禹锡、李贺-诗鬼</td></tr><tr><td>晚唐代表</td><td>李商隐、杜牧、韩愈、柳宗元</td></tr></tbody></table></div><div class="tab-pane" id="秦汉-5"><table><thead><tr><th>人物</th><th>考点</th></tr></thead><tbody><tr><td>赵匡胤</td><td>黄袍加身；杯酒释兵权；建北宋</td></tr><tr><td>赵光义 弟弟</td><td>烛影斧声–真假不知道 开卷有益</td></tr><tr><td>赵晋 宰相</td><td>半部《论语》走天下</td></tr><tr><td>包拯</td><td>笑比河清–看到包拯笑，比黄河水清都难；<br/> 阎王爷</td></tr><tr><td>范仲淹</td><td>庆历新政失败；先天下之忧而忧 《岳阳楼记》</td></tr><tr><td>王安石</td><td>熙宁变法 失败</td></tr><tr><td>司马光</td><td>《资治通鉴》是我国第一部<em>编年体通史</em>，给皇帝编个教材</td></tr><tr><td>北宋</td><td></td></tr><tr><td>赵构</td><td>建南宋</td></tr><tr><td>岳飞</td><td>郾城之战；精忠报国；直倒黄龙 吉林</td></tr><tr><td>文天祥</td><td>武将，《过零丁洋》人生自古谁无死</td></tr><tr><td>忽必烈</td><td>成吉思汗统一蒙古各个部落，其孙子忽必烈建立元朝</td></tr></tbody></table></div><div class="tab-pane" id="秦汉-6"><table><thead><tr><th>门派</th><th>人物</th></tr></thead><tbody><tr><td>宋词豪放派</td><td>苏轼 词圣、辛弃疾、陆游</td></tr><tr><td>宋婉约派</td><td>李清照、李煜–千古词帝、欧阳修、秦观</td></tr><tr><td>元曲四大家</td><td>关汉卿、郑光祖、白扑、<strong>马致远-秋思之祖，曲状元</strong></td></tr></tbody></table></div><div class="tab-pane" id="秦汉-7"><table><thead><tr><th>人物</th><th>考点</th></tr></thead><tbody><tr><td>朱元璋</td><td>建明，洪武之地</td></tr><tr><td>朱棣</td><td>靖难之役；迁都北京；永乐盛世；<strong>紫禁城</strong></td></tr><tr><td>解缙</td><td>《永乐大典》世界最大的百科全书</td></tr><tr><td>郑和</td><td>1405-1433七次下西洋；沿海&lt;福建长乐&gt;-南海-印度洋-阿拉伯海-红海</td></tr><tr><td>张君正</td><td>万历新政，一条鞭法</td></tr><tr><td>戚继光</td><td>抗倭wo，沿海 日本</td></tr><tr><td>郑成功</td><td>收复太晚，击败荷兰</td></tr><tr><td>吴三桂</td><td>冲冠一怒为红颜，带着满军攻打明朝入关</td></tr></tbody></table></div><div class="tab-pane" id="秦汉-8"><table><thead><tr><th>人物</th><th>考点</th></tr></thead><tbody><tr><td>努尔哈赤 女真族</td><td><strong>建后金</strong>，其子皇太极</td></tr><tr><td>皇太极 <strong>改满</strong></td><td>改祖名为满洲，改国号为清，<br/>因为明朝是火🔥，满加了三点水, 改为清🌊🔥，衣服上都是🌊</td></tr><tr><td>康熙</td><td>8岁登基，擒鳌拜，平三番，收台湾，雅克萨之战，征葛尔丹，康熙盛世</td></tr><tr><td>雍正</td><td>军机处，自己把自己累死了</td></tr><tr><td>乾隆</td><td>平定准葛尔，金瓶掣签；安定西藏；打大小金川、缅甸、越南等</td></tr><tr><td>纪昀</td><td>修《四库全书》修烧毁多 经史子集《阅微草堂笔记》</td></tr><tr><td>林则徐</td><td>民族英雄 虎门英雄 鸦片战争的导火线</td></tr><tr><td>曾国藩</td><td>灭太平天国，创办 <strong>【安庆内军械所】</strong></td></tr><tr><td>左宗棠</td><td>收复新疆</td></tr><tr><td>张之洞</td><td>《劝学篇》中学为体，西学为用，<strong>【汉阳铁厂】</strong></td></tr><tr><td>李鸿章</td><td>《马关条约》《辛丑条约》创办<strong>轮船招商局、【江南制造总局】</strong></td></tr><tr><td>康有为</td><td>公车上书、戊戌变法、百日维新；<em>资产阶级改良运动<em>；</em>君主立宪派</em></td></tr><tr><td>王懿荣</td><td>发现和收藏甲骨文第一人，清末书法家之一</td></tr></tbody></table></div></div></div><h2 id="国粹精探"><a href="#国粹精探" class="headerlink" title="国粹精探"></a>国粹精探</h2><h3 id="中国戏曲"><a href="#中国戏曲" class="headerlink" title="中国戏曲"></a>中国戏曲</h3><div class="tabs" id="国粹"><ul class="nav-tabs"><li class="tab active"><a href="#国粹-1">总览</a></li><li class="tab"><a href="#国粹-2">京剧</a></li><li class="tab"><a href="#国粹-3">现代地方戏</a></li></ul><div class="tab-content"><div class="tab-pane active" id="国粹-1"><details ><summary> <p>总览</p> </summary>              <div class='content'>              <div class="note danger"><p>戏曲是 <strong>中国汉族</strong> 的民族艺术，也称为 <em>戏剧</em>。<br>特征：综合的，包含文学、音乐、舞蹈、美术、武术等；<br>集：唱念做打；<br>分类：</p><ol><li><strong>京剧、豫剧、评剧、越剧、黄梅戏</strong></li><li>京剧、评剧、豫剧、粤剧、秦剧</li></ol></div>              </div>            </details></div><div class="tab-pane" id="国粹-2"><details ><summary> <p>京剧</p> </summary>              <div class='content'>              <div class="note success"><p>时间：清代1840年<br>起源：<em>安徽徽剧、湖北汉剧</em>、江苏昆剧、陕西梆子<br>唱腔：二黄&lt;沉郁缠绵&gt;、西皮&lt;轻快奔放&gt;<br>别称：<strong>皮黄</strong></p><hr><p><strong>四大技法</strong></p><ol><li>唱：讲究 <em>”字正腔圆“</em></li><li>念：念白，朗诵技法，要求严格、重要，<strong>千金话白四两唱</strong></li><li>做：做功，身段和表情技法</li><li>打：武打动作。</li></ol><hr><p><strong>四行</strong></p><ol><li>生：<em>男性角色</em> 分：老生、小生、武生、娃娃生</li><li>旦：<strong>女性角色</strong>，分：正旦、花旦、老旦、刀马旦</li><li>净：大花脸，扮演性格、品格相貌固定。一般为男性</li><li>丑：戏剧角色，<em>小花脸</em></li></ol><hr><p><strong>脸谱颜色</strong></p><table><thead><tr><th>颜色</th><th>性格</th><th>代表角色</th></tr></thead><tbody><tr><td><strong>红色</strong></td><td>忠诚正义</td><td>关羽</td></tr><tr><td>黑色</td><td>刚烈、正直、勇猛</td><td>包拯、张飞</td></tr><tr><td>黄色</td><td><em>勇猛残暴</em></td><td>典韦、宇文成都</td></tr><tr><td><strong>蓝色</strong></td><td>刚直、桀骜不驯、<em>侠义</em></td><td>窦尔敦</td></tr><tr><td><strong>白色</strong></td><td><em>奸诈多疑</em></td><td>曹操、秦桧</td></tr><tr><td>绿色</td><td>草莽英雄、莽撞 类似蓝色</td><td>程咬金、徐世英</td></tr><tr><td><strong>粉色</strong></td><td><strong>年迈的红脸</strong>人物</td><td>袁绍</td></tr><tr><td>紫色</td><td>肃穆、稳重、正义感</td><td>张颌、专诸</td></tr><tr><td>金色</td><td>威武庄严、多用于 <em>神仙</em></td><td>如来佛、二郎神</td></tr><tr><td>银色</td><td>奸诈多疑或威武庄严、用于 <em>鬼怪神仙</em>，亦正亦邪</td><td>木咤</td></tr></tbody></table><hr><p><strong>流派</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>老生</td><td>马派 马连良；谭派 谭鑫培；余派 余叔岩；杨派 杨宝森；<br/>麒派 周信芳；奚派 奚啸伯；<br/><strong>后四大须生</strong>：马连良、杨宝森、奚啸伯、谭富英 <em>马养精神、虎啸龙潭</em></td></tr><tr><td>短打武生</td><td>盖派 盖叫天</td></tr><tr><td><strong>旦角</strong></td><td>四大名旦：梅<em>兰</em>芳 春、尚小<em>云</em> 夏、程砚<em>秋</em> 秋、荀慧<em>生</em> 冬</td></tr></tbody></table></div>              </div>            </details></div><div class="tab-pane" id="国粹-3"><table><thead><tr><th>类别</th><th>起源</th><th>代表作</th></tr></thead><tbody><tr><td>评剧</td><td>发源河北</td><td>秦香莲、刘巧儿</td></tr><tr><td>粤剧</td><td>广东、广西、闽南</td><td>《搜书院》 <em>《关汉卿》</em></td></tr><tr><td><strong>越剧</strong> 女儿戏</td><td>浙江绍兴</td><td>红楼梦、梁山伯祝英台</td></tr><tr><td>豫剧</td><td>河南梆子</td><td>穆桂英挂帅、花木兰、朝阳沟</td></tr><tr><td><strong>黄梅戏</strong></td><td>在安徽出名、起源于 湖北黄梅采茶歌</td><td>《天仙配》女驸马、牛郎织女</td></tr><tr><td>吕剧</td><td>起源山东、和八仙有关</td><td><strong>《白蛇传》</strong>、李二嫂改嫁</td></tr><tr><td><strong>昆剧</strong></td><td><em>百戏之祖<em>、苏州昆山、</em>中国戏曲之母</em></td><td>《牡丹亭》、人类口述非物质遗产</td></tr><tr><td>花鼓戏</td><td>湖南花鼓戏；湖北江西都有</td><td>《打铜锣》《补锅》《刘海砍樵》</td></tr></tbody></table></div></div></div><h3 id="中国书法"><a href="#中国书法" class="headerlink" title="中国书法"></a>中国书法</h3><div class="tabs" id="中国书法"><ul class="nav-tabs"><li class="tab active"><a href="#中国书法-1">汉字发展</a></li><li class="tab"><a href="#中国书法-2">文房四宝</a></li><li class="tab"><a href="#中国书法-3">书法艺术</a></li><li class="tab"><a href="#中国书法-4">三 四</a></li><li class="tab"><a href="#中国书法-5">绘画</a></li><li class="tab"><a href="#中国书法-6">建筑艺术</a></li><li class="tab"><a href="#中国书法-7">ss</a></li></ul><div class="tab-content"><div class="tab-pane active" id="中国书法-1"><details ><summary> <p>汉字发展</p> </summary>              <div class='content'>              <table><thead><tr><th>种类</th><th>说明</th></tr></thead><tbody><tr><td>甲骨文</td><td><em>殷商</em>写在龟甲兽骨上的占卜文字，已知的最早 安阳&lt;殷墟&gt;</td></tr><tr><td>金文</td><td>商周刻在 钟鼎已经其他青铜上的 <em>铭文</em>，钟鼎文</td></tr><tr><td>大篆</td><td>春秋-秦朝通行的字体，石鼓文</td></tr><tr><td>小篆</td><td>秦朝统一的文字-小篆，官方，秦代石刻《秦山刻石》《会稽刻行》</td></tr><tr><td>隶书</td><td>小篆演变，产生于秦，通行于汉，为楷行草奠定了基础。讲究<strong>蚕头雁尾</strong></td></tr><tr><td>楷书</td><td>正书或真书，出现于汉末，魏晋南北朝通行，【唐朝 官方】<em>横平竖直</em></td></tr><tr><td>草书</td><td>从隶书演变而来，结构减省、壁画连绵</td></tr><tr><td>行书</td><td>楷书基础上来</td></tr></tbody></table>              </div>            </details></div><div class="tab-pane" id="中国书法-2"><div class="note danger"><p><strong>文房四宝</strong></p><ol><li>笔-浙江湖州-湖笔</li><li>墨-安徽徽州-徽墨</li><li>纸-安徽宣城-宣纸</li><li>砚-广东端州-端砚</li></ol><hr><p><strong>造纸术</strong></p><ol><li>时间：不晚于西汉初年。西汉初年或之前</li><li>人物：蔡伦<em>改进</em>造纸术；使纸的应用更加广泛</li></ol></div><hr><p><strong>印刷术</strong></p><ol><li><strong>隋唐</strong>出现 <em>雕版印刷</em>，《金刚经》世界上最早的雕版印刷术；</li><li><strong>北宋</strong> <em>毕升</em> 发明了 活字印刷术</li><li>1450年，德国人 古登堡 成功了利用铸造的铅化生成，工业</li><li>20世纪80年代，<strong>王选</strong> <em>激光排照</em>系统，计算机化，<strong>汉字印刷术的第二次发明</strong> 当代毕升</li></ol></div><div class="tab-pane" id="中国书法-3"><table><thead><tr><th>朝代</th><th>作家</th><th>书法</th><th>代表作</th></tr></thead><tbody><tr><td>秦</td><td><em>李斯</em></td><td>小篆</td><td>《泰山刻石》<strong>《会稽刻石》</strong></td></tr><tr><td>东汉</td><td>张芝</td><td>章草</td><td><strong>章草–草圣</strong> 隶书-草书 <br/> 张旭-草圣</td></tr><tr><td>东汉</td><td>蔡邕yong</td><td>隶书</td><td>创 <em>飞白书</em> <strong>《熹平石经》</strong></td></tr><tr><td>魏</td><td>钟繇yao</td><td>楷书</td><td>创楷书、《宣示表》《荐jizhibiao》</td></tr><tr><td>东晋</td><td>王羲之</td><td>行书、草书</td><td><strong>书圣</strong> 乾隆 [三希堂中 《快雪时晴帖》]《黄庭经》《兰亭序》<strong>天下第一行书</strong> <br/> <img data-src="09.jpg" width="30%"> <br> <img data-src="10.png" width="50%"></td></tr><tr><td>东晋</td><td>王献之</td><td>行书、草书</td><td>小圣、《洛神赋十三行》；[乾隆 三希堂中《中秋贴》]；《淳化阁帖》 <br/> <a href="http://www.9610.com/wangxianzhi/zhongqiu.htm" target="_blank" rel="noopener">http://www.9610.com/wangxianzhi/zhongqiu.htm</a></td></tr><tr><td>隋朝</td><td>智永</td><td>工草书</td><td><strong>《真书千字文》</strong> 退笔成冢</td></tr><tr><td>唐</td><td>欧阳询</td><td>楷书</td><td>严谨刚劲、<strong>唐人楷书第一人</strong> 《九成宫醴泉铭》《化度寺碑》《仲尼梦奠贴》</td></tr><tr><td>唐</td><td>虞世南</td><td>楷书</td><td>《孔子庙堂碑》</td></tr><tr><td>唐</td><td>褚遂良</td><td>楷书</td><td>《雁塔圣教序》</td></tr><tr><td>唐</td><td>颜真卿</td><td>楷书 行书</td><td>颜体 端庄胸围 《多宝塔碑》《颜勤礼碑》<br/> 行书《祭侄文稿》天下第二行书</td></tr><tr><td>唐</td><td>柳公权</td><td>楷书</td><td>颜筋柳骨，柳字一字值千金，《玄秘塔碑》《冯宿碑》<strong>《神策军碑》</strong></td></tr><tr><td>唐</td><td>张旭</td><td>草书</td><td><strong>草圣</strong> 肚痛贴 古诗四十贴</td></tr><tr><td>唐</td><td>怀素</td><td>狂草</td><td>颠张醉素 中华第一草书 自叙帖</td></tr><tr><td>北宋</td><td>蔡襄</td><td>楷书、行书、草书</td><td>自书诗帖</td></tr><tr><td>北宋</td><td>苏轼</td><td>楷书 行书</td><td>《黄州寒食帖》天下第三行书</td></tr><tr><td>北宋</td><td>赵佶</td><td>楷书</td><td>宋徽宗 瘦金体 《草书千字文》</td></tr><tr><td>北宋</td><td>黄庭坚</td><td>行 草</td><td>《诸上座帖》《经伏波神祠诗》</td></tr><tr><td>北宋</td><td>米芾fu</td><td>诸体皆工</td><td>《蜀素帖》《珊瑚贴》</td></tr><tr><td>元</td><td>赵孟頫fu</td><td>楷书</td><td>楷书《洛神赋》<em>行书《前后赤壁赋》</em>四大楷书家之一，三个唐朝的</td></tr><tr><td>明</td><td>祝允明 祝枝山</td><td>草书</td><td>《草书诗帖》明代奇才草书</td></tr></tbody></table></div><div class="tab-pane" id="中国书法-4"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>三希宝贴</td><td>王羲之 《快雪时晴帖》<br/> 王献之 《中秋帖》 <br/> 王珣《伯远帖》</td></tr><tr><td>楷书四大家</td><td>唐朝 欧阳询 颜真卿 柳公权 <br/> 元 赵孟頫</td></tr><tr><td>宋四大家</td><td>苏黄米蔡  苏轼 米芾 黄庭坚 蔡襄</td></tr></tbody></table></div><div class="tab-pane" id="中国书法-5"><div class="note danger"><ol><li>丹青：丹砂红色  石墨黑色</li><li>人物、山水、花鸟、技法</li><li>工笔 写意</li></ol></div><p><strong>十大名画</strong></p><table><thead><tr><th>人物</th><th>代表作</th></tr></thead><tbody><tr><td><em>东晋</em> <strong>顾恺之</strong></td><td>《洛神赋图》</td></tr><tr><td>唐 吴道子</td><td>《天王送子图》<em>佛教</em></td></tr><tr><td>五代 顾闳中</td><td>《韩熙载夜宴图》</td></tr><tr><td>北宋 张择端</td><td>《清明上河图》 繁茂的景象</td></tr><tr><td>明 仇英</td><td>《汉宫春晓图》重彩画 宫廷富人</td></tr><tr><td>唐 阎立本</td><td>《步辇图》唐太宗李世民 历史价值</td></tr><tr><td>唐 韩滉</td><td>《五牛图》<strong>镇国之宝</strong> 纸质画作</td></tr><tr><td>北宋 <em>王希孟</em></td><td><strong>《千里江山图》</strong></td></tr><tr><td>元 黄公望</td><td>《富春山居图》</td></tr><tr><td>清</td><td>郎世宁 意大利</td></tr></tbody></table></div><div class="tab-pane" id="中国书法-6"><div class="note danger"><p>特点：木结构、庭院。中轴线为主，对称。砖石结构主要为了高，塔</p><hr><p><strong>江南私家园林</strong></p><ol><li>苏州园林 <strong>江南园林甲天下、苏州园林佳江南</strong></li><li>开始：春秋吴国<em>姑苏</em>，形成于<em>五代</em>，成熟于宋代，兴旺于明代，鼎盛于清代</li><li>代表：<em>拙政园、留园</em>、网师园、环秀山庄、<em>沧浪亭</em>、实例林、藕园、退思园</li></ol><hr><p><strong>北方皇家园林</strong></p><ol><li>故宫：明成祖 朱棣 定都北京 <strong>世界上最大、最完整的木结构建筑群</strong></li><li>圆明园：康熙命名、雨果；<strong>万园之园</strong> <em>1860年被英法联军焚毁&lt;第二次鸦片战争&gt;</em>  1990年彻底毁灭</li><li>承德避暑山庄：经历康熙、雍正、乾隆三朝建设完成。现存中国现存最大的古典皇家园林，<em>中国地理形貌之缩影</em> <em>中国古典远离之最高范例</em></li></ol><hr><p><strong>四大名园</strong></p><ol><li>拙政园—四大名园之首 江苏苏州–江南园林</li><li>留园–苏州 –江南园林</li><li>颐和园–北京海淀区  – 皇家园林</li><li>避暑山庄–河北承德市  – 皇家园林</li></ol></div></div><div class="tab-pane" id="中国书法-7"><p><strong>四大名亭</strong></p><table><thead><tr><th>亭</th><th>位置</th><th>代表</th></tr></thead><tbody><tr><td>醉翁亭</td><td>安徽滁州</td><td>北宋 欧阳修 《醉翁亭记》</td></tr><tr><td>陶然亭</td><td>北京</td><td>唐代 白居易 <em>共君一醉</em></td></tr><tr><td>爱晚亭</td><td>湖南长沙</td><td>唐代杜牧“停车坐爱枫林晚”</td></tr><tr><td>湖心亭</td><td>杭州西湖</td><td></td></tr></tbody></table></div></div></div><div class="tabs" id="该写啥"><ul class="nav-tabs"><li class="tab active"><a href="#该写啥-1">中医</a></li><li class="tab"><a href="#该写啥-2">中草药</a></li><li class="tab"><a href="#该写啥-3">世界遗产</a></li></ul><div class="tab-content"><div class="tab-pane active" id="该写啥-1"><details ><summary> <p>中医</p> </summary>              <div class='content'>              <p><strong>四诊法</strong></p><table><thead><tr><th>大佬</th><th>代表</th></tr></thead><tbody><tr><td>扁鹊 神医</td><td>四诊法- 望、闻 听扣、问、切 把动脉–诊法–<strong>神医</strong></td></tr><tr><td>医圣</td><td>东汉末年–<em>张仲景</em>–<em>《伤寒杂病论》</em>，临床医学著作；确立辩证法</td></tr><tr><td>神医</td><td><strong>华佗、董奉&lt;杏林、杏卖了治病&gt;、张仲景 建安三神医</strong> <br/> 华佗 外壳圣手 外科鼻祖 <br/> <em>五禽戏 麻沸散</em></td></tr><tr><td>药王</td><td>唐代 孙思邈 《千金方》《唐本草》国家颁订的药书</td></tr><tr><td>文林郎</td><td>明代 李时珍 《本草纲目》先进的分类法 东方医药巨著</td></tr><tr><td>《黄帝内经》</td><td>最早的典籍之一；研究人的生理、病理、诊断、治疗、药物，阴阳五行、脉相学、藏象说</td></tr><tr><td><strong>医学四大经典著作</strong></td><td>《黄帝内经》《难经》《伤寒杂病论》《神农本草经》</td></tr></tbody></table>              </div>            </details></div><div class="tab-pane" id="该写啥-2"><table><thead><tr><th>草药</th><th>说明</th></tr></thead><tbody><tr><td>人参</td><td>多年生：【第一年长第二年开花】<em>草本植物</em> <br/> 叶片无气孔、栏栅，无法保留水分，不好看<br/> 别称：黄参、地精、神草、<strong>百草之王</strong></td></tr><tr><td>龙骨</td><td><em>动物</em>的骨头<br/> 大象、犀牛等的骨头 <br/> 镇静、催眠、抗惊厥</td></tr><tr><td>鸡内金</td><td><em>动物</em> 鸡 脖子，性甘味平，健胃消食、通淋化食</td></tr><tr><td>牛黄</td><td>牛科动物、<strong>牛胆囊</strong> <br/> 清热解毒</td></tr><tr><td>地龙</td><td>蚯蚓、含氨基酸 <br/> 清热定惊、利尿</td></tr><tr><td>决明子</td><td>豆科植物，清肝利水，性凉</td></tr><tr><td>蝉衣</td><td>蝉科昆虫，推风热、祛风治净</td></tr><tr><td>胖大海</td><td>种子、解毒利咽、清热润肺、牙龈肿痛</td></tr><tr><td>片仔黄</td><td><strong>中成药</strong>、牛黄、麝香、三七、蛇胆； 消肿止痛、凉血化瘀</td></tr><tr><td>板蓝根</td><td>十字花科植物、凉血利咽</td></tr><tr><td>珍珠粉</td><td>珍珠磨制而成；安神定惊、明目祛疫，解毒生肌、提高人体免疫力、延缓衰老、祛斑美白、补充钙质</td></tr><tr><td>陈皮</td><td>橘科植物，干燥成熟的陈皮 陈皮和 逛陈皮</td></tr><tr><td>连翘</td><td>性凉味苦，入心、肝、胆经、清热、解毒、消肿</td></tr><tr><td>乌梅</td><td>果实、生津、<strong>缓解咳嗽、</strong></td></tr><tr><td>枸杞</td><td>大补，六月红，宁夏</td></tr><tr><td>三七</td><td>云南，文三七，田七，温补</td></tr><tr><td>黄芪qi</td><td>增强机体免疫力，利尿、抗衰老</td></tr><tr><td>当归</td><td><em>甘肃东南部</em> 最常用的中药，调经止痛</td></tr><tr><td>何首乌</td><td>可以安神、养血、活络、解毒、生发</td></tr><tr><td>冬虫夏草</td><td>虫草；名贵滋补药材，增强免疫力，在动物的尸体上长出来的植物，滋补肺肾、对癌症有一定的抑制作用</td></tr><tr><td>阿胶</td><td>鹿皮、驴皮熬制、补血滋阴、润燥、止血，血虚微黄、眩晕心悸、心烦不眠</td></tr><tr><td>鹿茸</td><td>梅花未骨化的幼角</td></tr></tbody></table></div><div class="tab-pane" id="该写啥-3"><div class="note danger"><p><strong>截止2019年8月，中国55项，排名第一，和意大利相同。</strong><br><img data-src="12.png" width="70%"/><br><img data-src="13.png" width="70%"/><br><img data-src="14.png" width="70%"/></p></div></div></div></div><h3 id="传统民俗"><a href="#传统民俗" class="headerlink" title="传统民俗"></a>传统民俗</h3><div class="tabs" id="传统民俗"><ul class="nav-tabs"><li class="tab active"><a href="#传统民俗-1">传统节日</a></li><li class="tab"><a href="#传统民俗-2">立法节气</a></li><li class="tab"><a href="#传统民俗-3">中国历法</a></li><li class="tab"><a href="#传统民俗-4">干支纪年</a></li><li class="tab"><a href="#传统民俗-5">古代计时</a></li></ul><div class="tab-content"><div class="tab-pane active" id="传统民俗-1"><details ><summary> <p>传统节日</p> </summary>              <div class='content'>              <div class="note success"><ol><li>春节：元旦、岁首；</li><li>元宵节：<strong>上元节</strong>、春灯节、小正月；正月十五，汉武帝；</li><li>上巳节：农历三月三；黎、壮、苗、布依族；王羲之的《兰亭集序》；大地回春；<strong>春季</strong></li><li>寒食节：严禁烟火、只能吃寒食；<em>纪念晋国-介子推</em>，苏轼的《寒食帖》</li><li><strong>清明节：</strong> 祭祖、烧纸、扫墓、下雨 <code>【鬼节】</code></li><li>端午：五月初五；赛龙舟、雄黄酒、<strong>世界非遗之文化</strong>，纪念 屈原、屈平</li><li>七夕：<em>乞巧节、少女节、女儿节</em>，非物质文化遗产，</li><li>中元节：七月十五，<code>【鬼节】</code>盂兰盆会、亡人节、施孤等，家家祭祖</li><li>中秋节：月节、月夕、朱元璋反抗元朝，香港有舞火龙的习俗</li><li>重阳节：古代是团圆节，登高、菊花</li><li>冬至：冬节、长至节、亚岁，饺子 汤圆</li><li>腊八：释迦摩尼 成道之日，腊八粥</li><li>祭灶：灶王，腊月二十三</li><li>除夕：守岁，最后一天</div></li></ol>              </div>            </details></div><div class="tab-pane" id="传统民俗-2"><p><strong>二十四节气</strong></p><img data-src="15.png" width="80%"/><div class="note danger"><ol><li>立春：2月4日；<strong>每月两个节气</strong></li><li>开始 <em>春秋战国</em></li><li>正式确定：西汉 《淮南子 天文训》</li></ol><img data-src="16.png" width="80%"/></div></div><div class="tab-pane" id="传统民俗-3"><div class="note danger"><ol><li>春秋：孔子《春秋》最早记录 <em>哈雷彗星</em>；<strong>十九七闰</strong>，比欧洲早160年</li><li>西汉：汉武帝 邓平等《太初历》正式把二十四节气定于历法，确定 <em>天文位置</em>；太阳黑子</li><li>东汉：张衡；浑天仪、地动仪</li><li>南北朝：祖冲之 编 <strong>《太明历》</strong>，391年144个闰月</li><li>隋唐：唐朝 <em>僧一行</em> <strong>《大衍历》</strong>  <em>子午线的长度</em> 最早</li><li>宋：北宋 沈括， 《梦溪笔谈》科学著作 一年分 <strong>12个月</strong></li><li>元朝：<strong>郭守敬 《授时历》</strong>圭表；与现行历法相同</div></li></ol><div class="note warning"><p><strong>农历</strong><br><em>阴阳历</em></p><ol><li>平年 12个月 354、355天</li><li>闰年 13个月 383、384天</li></ol><p><strong>公历</strong><br><em>太阳历</em></p><ol><li>现行历法，平年365 闰年366</li></ol></div></div><div class="tab-pane" id="传统民俗-4"><p><strong>十天干</strong></p><div class="note danger"><img data-src="17.png" width="80%"/><img data-src="18.png" width="80%"/><p><em>孟仲季 对应季节中的 123月</em></p><ol><li>六十年一甲子： 天干的奇数对应地支的奇数</li><li>一月：正月、柳月、端月</li><li>二月：杏月、仲春、花月</li><li>三月：桃月、暮春、<strong>蚕月</strong></li><li>四月：槐月、孟夏、初夏</li><li>五月：蒲月、仲夏、榴月</li><li>六月：荷月、伏月、溽暑</li><li>七月：巧月、孟秋、初秋</li><li>八月：桂月、仲秋、桂月</li><li>九月：深秋、菊月、季秋</li><li>十月：孟冬、露月、阳月</li><li>十一月：辜月、仲冬、葭月</li><li>十二月：腊月、季冬、冰月</li></ol></div></div><div class="tab-pane" id="传统民俗-5"><p><strong>时、刻、更、点</strong></p><p><em>时</em><br><img data-src="19.png" width="80%"/></p><p><em>刻</em></p><p>大约西周之前，古人就把一昼夜均分为100刻，在漏壶箭杆上刻100格。折合成现代计时单位，则<strong>1刻等于14分24秒</strong>。<em>“百刻制”</em>是我国最古老、使用时间最长的计时制。</p><p><strong>午时三刻</strong>，按照现在的计时方法，是差十五分钟到正午12点</p><div class="note info">午时三刻是古代重罪犯人行斩刑的时辰，此时开刀问斩，阳气最盛，人死后的阴气会立刻消散，罪大恶极的犯人，被斩后“连鬼都不得做”，以示严惩。罪刑轻者，可在正午开刀行斩刑，让其有鬼做。所以，“午时三刻，梦斩泾河老龙”，以显示老龙罪行极重。</div><p><em>更</em></p><div class="note success"><p>一更天：戌时　19:00 – 21:00<br>二更天：亥时　21:00 – 23:00<br>三更天：子时　23:00 – 01:00<br>四更天：丑时　01:00 – 03:00<br>五更天：寅时　03:00 – 05:00</p></div><p><em>点</em></p><div class="note default">　　古代使用铜壶滴漏计时，以下漏击点为名。一更分为五点，所以，**一点的长度合现在的24分钟**。如《西游记》第九回：“却说那太宗梦醒后，念念在心。早已至五鼓三点，太宗设朝，聚集两班文武官员。*”“三更两点”就是指深夜11:48；“五鼓三点”就是指凌晨04:12。*</div></div></div></div><h4 id="少数名族"><a href="#少数名族" class="headerlink" title="少数名族"></a>少数名族</h4><div class="tabs" id="少数名族"><ul class="nav-tabs"><li class="tab active"><a href="#少数名族-1">内蒙古</a></li><li class="tab"><a href="#少数名族-2">新疆</a></li><li class="tab"><a href="#少数名族-3">广西</a></li><li class="tab"><a href="#少数名族-4">宁夏回族自治区</a></li><li class="tab"><a href="#少数名族-5">西藏</a></li><li class="tab"><a href="#少数名族-6">其他民族</a></li><li class="tab"><a href="#少数名族-7">三大英雄史诗</a></li></ul><div class="tab-content"><div class="tab-pane active" id="少数名族-1"><details ><summary> <p>内蒙古</p> </summary>              <div class='content'>              <div class="note warning"><p><strong>内蒙古自治区</strong></p><p>时间：1947年5月1日<br>少数名族：蒙古族🇲<br>节日：那达慕大会、敖包节<br>语言：汉语、蒙古语、达擀尔语、鄂温克语、鄂伦春语<br>饮食：面食、肉食[红食、乌兰伊德]；奶食[白食、茶干伊德]、茶食；<br>服饰：蒙古袍、长袍、腰带靴子、首饰；皮衣；<em>长袍不开叉</em> 是指 大腿腰部是否开衩；<br>手工艺：皮制品、<strong>刀具、银器</strong> 蒙古壁挂画；<br>音乐：马头琴、蒙古长调、<em>嘎达梅林</em>民族英雄<br>民族：图腾：狼、鹿、鹰、熊<br>宗教信仰：<strong>萨满教、喇嘛教</strong><br>分布：蒙古、东北。。。<br>建筑：蒙古包 = 格尔斯</p></div>              </div>            </details></div><div class="tab-pane" id="少数名族-2"><div class="note info"><p><strong>新疆维吾尔自治区</strong></p><p>时间：1955年10月1日<br>少数名族：维吾尔族<br>节日：肉孜节&lt;开斋节&gt; <strong>古尔邦节</strong> 诺鲁孜节<br>语言：维吾尔语<br>饮食：馕、抓饭、烤包子、拌面<br>服饰：花纹的衣服，开衩<br>音乐：手鼓、打鼓；《阿里木汗》》<strong>《半个月亮爬上来》</strong>《达坂城的姑娘》<br>民族文化：能歌善舞<br>宗教：<strong>伊斯兰教</strong><br>分布：三山夹两盆，<br>建筑：转庭院式，外间、餐室、后室； 🕌️</p></div></div><div class="tab-pane" id="少数名族-3"><div class="note warning"><p><strong>广西壮族自治区</strong></p><p>时间：1958年3月5日<br>少数民族：壮族，最多的少数民族<br>节日：三月三，陀罗节<br>语言：壮语<br>饮食：糯米、五色糯米饭、大粽子、米花糖<br>服饰：女子 <strong>蓝黑</strong>，裙角稍宽，头上包提花毛巾；腰间系腰带<br>手工艺：<em>壮锦、绣球、竹编制品</em><br>民族文化：<strong>铜鼓、山歌、壮戏、布洛陀</strong><br>分布：桂、粤、滇、黔、湘<br>建筑：木结构、外墙白灰</p></div></div><div class="tab-pane" id="少数名族-4"><p>时间：1958年10月25日<br>名族：回族 <em>分布最广</em><br>节日：开斋节 肉孜节；古尔邦节、圣纪节<br>语言：汉语、阿拉伯语、波斯语<br>饮食：<strong>手抓羊肉、八大碗</strong> <em>撒子<em>、盖碗茶<br>音乐：口弦 铁片、牛头埙 泥土做的那种、临夏花儿<br>服饰：男的 白色帽子 女的带盖头<br>宗教：《古兰经》伊斯兰教；*</em>清真寺** 🕌️穆斯林<br>分布：*最广</em></p></div><div class="tab-pane" id="少数名族-5"><p>时间：1965年9月9日<br>民族：藏族<br>节日：<strong>雪顿节</strong><br>语言：藏语<br>饮食：<em>酥油、茶叶、糌粑、牛羊肉</em> <strong>西藏四包</strong>，青稞酒 奶制品<br>服饰：<strong>半袖</strong>脱掉一个袖子；<strong>哈达</strong>祝福。珍贵的礼物。<br>文化：札木聂、<strong>扬琴</strong>、<em>《格萨尔王》</em><br>宗教：藏传佛教，毛头红色<br>分布：西藏、青海<br>建筑：碉房 石头整的</p></div><div class="tab-pane" id="少数名族-6"><p>傣族：傣语、<strong>泼水节</strong>、葫芦丝、香竹糯米饭；孔雀舞蹈；干栏式建筑、平顶土撑房<br>蠡族：蠡语、<strong>火把节</strong>、 葫芦笙、月琴；烤茶；阿诗玛；风篱房、茅草房石板房；<br>朝鲜族：韩语；老人节；长鼓；泡菜；阿里郎；土木结构<br>满族：满语；<strong>春节</strong>；摇铃；<em>萨其玛</em>；口袋房<br>哈萨克族：哈萨克语；肉孜节、古尔邦节、那吾肉孜节；冬不拉；手抓扬州，哈萨克毡房，哈萨克白宫</p></div><div class="tab-pane" id="少数名族-7"><div class="note success">藏族：说唱体民族史诗 《格萨尔》，格萨尔带领藏族富强蒙古：《江格尔》 江格尔带领蒙古富强柯尔克孜族：《玛纳斯》</div></div></div></div><h4 id="特定称谓"><a href="#特定称谓" class="headerlink" title="特定称谓"></a>特定称谓</h4><div class="tabs" id="特定称谓"><ul class="nav-tabs"><li class="tab active"><a href="#特定称谓-1">敬称</a></li><li class="tab"><a href="#特定称谓-2">谦称</a></li><li class="tab"><a href="#特定称谓-3">代称</a></li><li class="tab"><a href="#特定称谓-4">地理称谓</a></li></ul><div class="tab-content"><div class="tab-pane active" id="特定称谓-1"><details ><summary> <p>敬称</p> </summary>              <div class='content'>              <div class="note warning"><p><strong>称呼对方或其亲属</strong></p><ol><li>令: 长辈；令尊 对方的父亲；<em>令堂</em> 对方的母亲；令郎；令爱 对方的女儿；</li><li>尊：长辈；<em>尊上</em>：对方的父母；<em>尊驾：对方</em>；</li><li>贤: 平辈晚辈；贤弟</li><li>先: 地位高或已经离世；先帝、先考&lt;已经去世的父亲&gt; 先慈&lt;已经去世的母亲&gt;</li><li>尊长者或朋友：君、子、公、足下、夫子、先生、大人</li><li>奉：自己的动作涉及对方；奉告、奉还、奉劝；没啥感情色彩</li><li>惠：<strong>对方对待自己的行为</strong>；惠存、惠赠；请您惠存</li><li>垂：<strong>对方对待自己的行为</strong>；垂爱、垂青、垂询；欢迎垂询本店电话</li><li>璧还 bìhuán: 也作“璧谢”、“反璧：<em>归还对方</em>的物品；所借图书，不日璧还</li><li>俯就：请对方同意担任某一职务；请俯就我们公司职位</li><li>斧正：请别人修改文章</li><li>雅正：把自己的书画赠予别人表示请对方指教；</li></ol><p><strong>朋友称谓</strong></p><p>金兰之交、忘年之交、刎颈之交、竹马之交&lt;童年就是好朋友&gt; 总角之交&lt;小时候结交成朋友&gt;</p><p><strong>医生的称谓</strong><br>宋代==北方人-大夫 南方人–郎中</p></div>              </div>            </details></div><div class="tab-pane" id="特定称谓-2"><ol><li>家：对别人称自己辈分高或年纪大的；家父、家严；家慈、家母；</li><li>舍：自己晚辈、年纪小；舍弟、舍妹、舍亲；息弟、息妹；</li><li>小：<strong>称自己或有关</strong>；小弟、小女&lt;自己的女儿&gt;</li><li>老：称自己人或有关；老朽、老身；</li></ol><p><strong>自称</strong></p><ol><li>愚：愚兄、愚见</li><li>妾：女子谦辞</li><li>下官：官员的自称</li><li>敝：敝处；自己的住处；</li><li>鄙：鄙人、鄙见；</li><li>见：见谅、见教&lt;指教&gt;。平辈一般的说法</li><li>敢：敢问，冒昧的请示别人</li><li>窃：窃思，窃以为。</li></ol></div><div class="tab-pane" id="特定称谓-3"><img data-src="20.png" width="80%"/><div class="note danger"><table><thead><tr><th>代词</th><th>代词</th></tr></thead><tbody><tr><td>乌纱帽–官员</td><td>须眉–男子 腮部的须发</td></tr><tr><td>珠履–豪门宾客</td><td>汗青–史书、完成的著作；竹子被烤</td></tr><tr><td></td><td></td></tr><tr><td>布衣–平民</td><td>肝胆–真诚的心；共产党&amp;民主党派肝胆相照</td></tr><tr><td>纨绔–富家子弟，内裤用好的布料做的</td><td></td></tr><tr><td>巾帼、裙钗–妇女</td><td>杜康—酒、酒圣</td></tr><tr><td>尺素、鱼雁–书信</td><td>楼兰–外族的敌人</td></tr><tr><td>咏絮–<strong>女子非凡的才华</strong></td><td>手足–兄弟</td></tr><tr><td>捣衣–为远行的人赶制寒衣</td><td>梨园–唱<em>京剧</em>的地方</td></tr><tr><td>同袍–军人互称</td><td>折桂–<em>科举及第</em> 八月</td></tr><tr><td>杏坛–教育</td><td>杏林–医道</td></tr><tr><td>鹧鸪zhegu–离愁别绪</td><td>南山–隐居之地</td></tr><tr><td><em>长亭、杨柳–送别</em></td><td>吴钩–利剑、以武功建功立业</td></tr><tr><td>流水、落花、夕阳–人生无常、多变</td><td>婵娟–美妙的姿容、美女、明月，千里共婵娟，是给自己的兄弟写的</td></tr><tr><td>桑梓-家乡、故乡、乡下</td><td>岐黄之术–中医、医术</td></tr><tr><td>红豆–相思、友人</td><td>丝竹–弦、管乐器</td></tr><tr><td><strong>三尺</strong>–剑、法律</td><td>白丁–没有学问的人</td></tr><tr><td><em>南冠–俘虏的代称</em></td><td><em>弄璋之喜 玉器–生男孩；弄瓦之喜–生女孩 寓意心灵手巧</em></td></tr><tr><td>匹夫–平民百姓</td><td><strong>椿萱</strong>–椿父亲；萱：母亲</td></tr><tr><td><em>屠苏–药酒</em>，正月初一喝药酒</td><td><em>金乌</em>–太阳</td></tr><tr><td>巫山云雨–男欢女爱</td><td>轩辕–中华民族</td></tr><tr><td>莲–君子、爱情</td><td><em>梧桐–凄凉悲伤</em></td></tr><tr><td>菊花、蝉–坚贞、高洁</td><td><em>青鸾、青鸟</em>–传递书信的人</td></tr></tbody></table></div></div><div class="tab-pane" id="特定称谓-4"><div class="note info"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>江</td><td>长江</td><td>三山</td><td>三座仙山： 蓬莱、方丈、瀛洲</td></tr><tr><td>河</td><td>黄河</td><td><em>五岳</em></td><td>东岳泰山 山东泰安、西岳华山 陕西华阴县、北岳恒山 山西大同、南岳衡山 湖南衡阳、中岳嵩山 河南 少林寺 登封</td></tr><tr><td><strong>山</strong></td><td><strong>崤xiao山</strong></td><td>四渎</td><td>长江、黄河、淮水、济水</td></tr><tr><td><strong>关</strong></td><td><strong>函谷关</strong></td><td></td><td></td></tr></tbody></table><hr><ol><li>山南水北为阳，上北水南为阴；江阴：汉水的南面</li><li>山东：山的东面，也指代 <strong>崤山以东</strong></li><li>关东：函谷关、潼关以东的滴入，近代山海关以东的东北</li><li>玉门关、阳关：甘肃敦煌市西南</li></ol><hr><ol><li>山南水北为阳，上北水南为阴；江阴：汉水的南面</li><li>山东：山的东面，也指代 <strong>崤山以东</strong></li><li>关东：函谷关、潼关以东的滴入，近代山海关以东的东北</li><li>玉门关、阳关：甘肃敦煌市西南</li></ol><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>｜北京｜大都、燕京、北平｜开封｜大梁、汴梁、<strong>东京</strong>｜</td><td></td><td></td><td></td></tr><tr><td>｜扬州｜<em>维扬</em>、<em>广陵</em>、<em>江都</em>｜苏州｜姑苏、<strong>吴都</strong>｜</td><td></td><td></td><td></td></tr><tr><td>｜杭州｜临安、钱塘｜西安｜长按 13朝古都｜</td><td></td><td></td><td></td></tr><tr><td>｜镇江｜京口｜绍兴｜<em>会稽</em>｜</td><td></td><td></td><td></td></tr><tr><td>｜南京｜建康、建业、金陵、江宁、石头城白下 6朝 8朝｜</td><td></td><td></td><td></td></tr></tbody></table></div></div></div></div><h3 id="诗里诗外"><a href="#诗里诗外" class="headerlink" title="诗里诗外"></a>诗里诗外</h3><div class="tabs" id="诗里诗外"><ul class="nav-tabs"><li class="tab active"><a href="#诗里诗外-1">习大大用典</a></li><li class="tab"><a href="#诗里诗外-2">诗词地理常识</a></li><li class="tab"><a href="#诗里诗外-3">诗词物理常识</a></li><li class="tab"><a href="#诗里诗外-4">诗词声学</a></li><li class="tab"><a href="#诗里诗外-5">诗词光学</a></li><li class="tab"><a href="#诗里诗外-6">诗词 化学</a></li><li class="tab"><a href="#诗里诗外-7">诗词 生物</a></li><li class="tab"><a href="#诗里诗外-8">旅游景点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="诗里诗外-1"><details ><summary> <p>诗词</p> </summary>              <div class='content'>              <div class="note danger"><ul><li>海纳百川，有容乃大：<ul><li>林则徐自勉联，习大大 <strong>2013年</strong> 博鳌亚洲论坛 《共同创造亚洲和世界的美好未来》引用</li></ul></li><li>一花独放不是香，百花齐放满园春<ul><li>儿童启蒙书《古今贤文》；2013年 习大大 博鳌演讲</li></ul></li><li>夫万物之不齐，物之情也<ul><li>《孟子》兼容并蓄 2015年博鳌亚洲</li></ul></li><li>苟利于民，不必法古；苟周于事，不必循俗<ul><li>汉代刘安《淮南子》2018年博鳌亚洲</li></ul></li><li>明者因时而变，知者随事而制<ul><li>汉代 恒宽 《盐铁论》2013年 博鳌亚洲</li></ul></li></ul><img data-src="21.png" width="80%"><img data-src="22.png" title="重要" width="80%"></div>              </div>            </details></div><div class="tab-pane" id="诗里诗外-2"><img data-src="23.png" width="80%"><img data-src="24.png" width="80%"><img data-src="25.png" width="80%"><img data-src="26.png" width="80%"><img data-src="27.png" width="80%"><img data-src="28.png" width="80%"></div><div class="tab-pane" id="诗里诗外-3"><img data-src="29.png" width="80%"><img data-src="30.png" width="80%"><img data-src="31.png" width="80%"><img data-src="32.png" width="80%"></div><div class="tab-pane" id="诗里诗外-4"><img data-src="33.png" width="80%"></div><div class="tab-pane" id="诗里诗外-5"><img data-src="34.png" width="80%"><img data-src="35.png" width="80%"><img data-src="36.png" width="80%"><img data-src="37.png" width="80%"><img data-src="38.png" width="80%"><img data-src="39.png" width="80%"><img data-src="40.png" width="80%"></div><div class="tab-pane" id="诗里诗外-6"><img data-src="41.png" width="80%"><img data-src="42.png" width="80%"><img data-src="43.png" width="80%"><img data-src="44.png" width="80%"><img data-src="45.png" width="80%"></div><div class="tab-pane" id="诗里诗外-7"><img data-src="41.png" width="80%"><img data-src="42.png" width="80%"><img data-src="43.png" width="80%"><img data-src="44.png" width="80%"><img data-src="45.png" width="80%"><img data-src="46.png" width="80%"><img data-src="47.png" width="80%"><img data-src="48.png" width="80%"><img data-src="49.png" width="80%"><img data-src="50.png" width="80%"><img data-src="51.png" width="80%"></div><div class="tab-pane" id="诗里诗外-8"><img data-src="52.png" width="80%"><img data-src="53.png" width="80%"><img data-src="54.png" width="80%"><img data-src="55.png" width="80%"><img data-src="56.png" width="80%"><img data-src="57.png" width="80%"><img data-src="58.png" width="80%"><img data-src="59.png" width="80%"><img data-src="60.png" width="80%"><img data-src="61.png" width="80%"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 行测 </category>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十六季模考复盘</title>
      <link href="2020/06/08/civil_servant_exam_26/"/>
      <url>2020/06/08/civil_servant_exam_26/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/039.jpg" width=80% /><span class='geyan'>兽穷则啮，鸟穷则啄，人穷则诈。（《韩诗外传》）</span><a id="more"></a><div class="note danger">争取涨十分！！！</div><h2 id="二十五季复盘"><a href="#二十五季复盘" class="headerlink" title="二十五季复盘"></a>二十五季复盘</h2><div class="tabs" id="复盘对比"><ul class="nav-tabs"><li class="tab active"><a href="#复盘对比-1">本季</a></li><li class="tab"><a href="#复盘对比-2">上季</a></li></ul><div class="tab-content"><div class="tab-pane active" id="复盘对比-1"><div class="notex danger"><div class="note success"><p><strong>整体总结</strong></p><blockquote class="blockquote-center"><p><strong>需要留出足够的时间图卡</strong></p></blockquote><ul><li>言语理解<ol><li>容易被单个问题<em>卡住</em>；</li><li><strong>进入状态慢</strong></li></ol></li><li>判断推理<ol><li><em>图形推理</em>，很多不会</li><li><em>逻辑推理</em>，根本不想看，还费时间</li></ol></li><li>常识<ol><li><em>没学</em>，基本全靠蒙。</li></ol></li><li>资料分析<ol><li>明白考点、步骤</li><li><em>速度跟不上、反应慢</em></li><li>原因：<ol><li>加减乘除慢⬇️；</li><li><em>找错</em>数字；</li><li><strong>已经做了一半的题目，不在状态了</strong></li></ol></li></ol></li><li>数量关系<ol><li>全蒙，<strong>没有时间</strong>了。</li><li>即便有时间，估计<strong>公式也忘完了</strong>，一直没有练习数量关系，<strong>需要加强</strong></div></li></ol></li></ul><div class="note warning"><blockquote class="blockquote-center"><p><strong>倒计时40天</strong></p></blockquote><ol><li>常识进行中，需要加快进度过一遍；</li><li>申论进行中，单一题目基本完结；</li><li>速度与正确率。</li><li>刷数量关系！！</li></ol></div></div><img data-src="04.png" title="需要提升的侧重点" width=80% /></div><div class="tab-pane" id="复盘对比-2"><img data-src="05.png" title="时间完全不合理" width=80% /></div></div></div><h3 id="言语理解"><a href="#言语理解" class="headerlink" title="言语理解"></a>言语理解</h3><div class="tabs" id="词汇"><ul class="nav-tabs"><li class="tab active"><a href="#词汇-1">词语</a></li><li class="tab"><a href="#词汇-2">解释</a></li><li class="tab"><a href="#词汇-3">解释</a></li></ul><div class="tab-content"><div class="tab-pane active" id="词汇-1"><ol><li>漫延</li><li>疏解</li><li>彰显</li><li><em>秉承</em></li><li></li></ol></div><div class="tab-pane" id="词汇-2"><ol><li>漫延<ol><li>水满溢而向周围扩散，是专用词</li><li>记住三点水</li></ol></li><li>疏解<ol><li>疏通调解；疏散</li></ol></li><li>彰显<ol><li>充分显示</li></ol></li><li>秉承<ol><li>多用于指<em>奉行上级的意旨<em>、</em>指示而言</em><!-- end --><!-- tab 成语 --></li></ol></li><li><em>鳞次栉比</em></li><li>参差错落</li><li>有条不紊</li><li><em>文过饰非</em></li><li><em>敷衍塞责</em></li><li>广开言路</li><li>悬壶济世</li><li>学以致用</li><li>格物致知</li><li><em>经世致用</em></li><li>暮气沉沉</li><li>江河日下</li><li>畏葸不前</li><li>买椟还珠</li><li>涸泽而渔</li></ol></div><div class="tab-pane" id="词汇-3"><ol><li>鳞次栉比<ol><li>形容<em>房屋或船只</em>等排列得很密很<em>整齐</em>，无法用来形容音乐</li></ol></li><li>参差错落<ol><li>各种不同的事物错综复杂地交织在一起，与“穿插交织”意思相近</li></ol></li><li>有条不紊<ol><li>有条有理，一点不乱</li></ol></li><li>文过饰非<ol><li>用漂亮的言词掩饰自己的过失和错误</li></ol></li><li>敷衍塞责<ol><li>做事马马虎虎应付一下，塞责了事，也体现了<em>对待工作不认真</em></li></ol></li><li>广开言路<ol><li>尽量给下面创造发表意见的条件</li></ol></li><li>悬壶济世<ol><li>古代颂誉<em>医者</em>道者救人于病痛</li></ol></li><li>学以致用<ol><li><em>为了实际应用而学习</em></li></ol></li><li>格物致知<ol><li><em>穷究事物原理</em></li></ol></li><li>经世致用<ol><li><em>学问必须有益于国事</em></li></ol></li><li>暮气沉沉<ol><li>精神萎靡不振，缺乏朝气，搭配对象是人</li></ol></li><li>江河日下<ol><li>情况一天天地坏下去</li></ol></li><li>畏葸不前<ol><li>畏惧退缩，不敢前进</li></ol></li><li>买椟还珠<ol><li>没有眼力，取舍不当</li></ol></li><li>涸泽而渔<ol><li>只图眼前利益，不作长远打算</li></ol></li></ol></div></div></div><div class="tabs" id="言语汇总"><ul class="nav-tabs"><li class="tab active"><a href="#言语汇总-1">找关键点</a></li><li class="tab"><a href="#言语汇总-2">归纳总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="言语汇总-1"><img data-src="06.png" width=80% /><img data-src="07.png" width=80% /><img data-src="08.png" width=80% /></div><div class="tab-pane" id="言语汇总-2"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 模考复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十五季模考复盘</title>
      <link href="2020/06/07/civil_servant_exam_25/"/>
      <url>2020/06/07/civil_servant_exam_25/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/035.jpg" width=80% /><span class='geyan'>任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</span><a id="more"></a><div class="note danger">期待下次及格！</div><h2 id="二十五季复盘"><a href="#二十五季复盘" class="headerlink" title="二十五季复盘"></a>二十五季复盘</h2><div class="tabs" id="复盘对比"><ul class="nav-tabs"><li class="tab active"><a href="#复盘对比-1">本季</a></li><li class="tab"><a href="#复盘对比-2">上季</a></li></ul><div class="tab-content"><div class="tab-pane active" id="复盘对比-1"><div class="notex danger"><div class="note success"><p>整体总结</p><ol><li>言语理解<ol><li>第一道题看懵后，卡了好久</li><li><strong>开考，不会就跳过</strong></li></ol></li><li>资料分析<ol><li>相比上次，可以列出公式，计算；</li><li><em>错误</em>了很多❌</li><li><em>速度</em>更不上，找不到数据。</li></ol></li><li>判断推理<ol><li><em>图形推理</em>，很多不会</li><li><em>逻辑推理</em>，根本不想看，还费时间</li></ol></li><li>数量关系<ol><li>全蒙，<strong>没有时间</strong>了。</li><li>即便有时间，估计<strong>公式也忘完了</strong>，上周只顾着前三项了</li></ol></li><li>常识<ol><li><em>没学</em>，基本全靠蒙。</li></ol></li></ol></div><div class="note warning"><p>预计还有不到两个月的时间</p><ol><li>前三项目综合联系，积累重点，刷 <strong>正常、难一点的题</strong></li><li>申论必须要开始着手了</li><li><em>需要花费十个小时去整理常识</em>，不能放弃！</li></ol></div></div><img data-src="05.png" title="需要提升的侧重点" width=80% /></div><div class="tab-pane" id="复盘对比-2"><img data-src="04.png" title="时间完全不合理" width=80% /></div></div></div><h3 id="言语理解"><a href="#言语理解" class="headerlink" title="言语理解"></a>言语理解</h3><h4 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h4><div class="tabs" id="积累词汇"><ul class="nav-tabs"><li class="tab active"><a href="#积累词汇-1">词语</a></li><li class="tab"><a href="#积累词汇-2">词语含义</a></li><li class="tab"><a href="#积累词汇-3">成语</a></li><li class="tab"><a href="#积累词汇-4">成语</a></li></ul><div class="tab-content"><div class="tab-pane active" id="积累词汇-1"><ol><li>空泛</li><li>空洞</li><li>空乏</li><li>空廓</li><li>裹挟</li><li>觊觎</li><li>凝练</li><li><strong>纾解</strong></li><li>消弭</li><li>逐鹿</li></ol></div><div class="tab-pane" id="积累词汇-2"><ol><li>空泛：<ol><li>形容词：（文章、讲话）没有具体内容的泛泛之论；</li></ol></li><li>空洞：<ol><li>名词：</li><li>形容词：比喻<em>言论和文章没有实际内容</em>。空虚而无内涵</li></ol></li><li>空乏：<ol><li>形容词；空旷寥廓。</li></ol></li><li>空廓：<ol><li>形容词；空旷寥廓。</li></ol></li><li>裹挟<ol><li><em>被动的卷入</em>。“裹挟”侧重于<strong>挟持</strong>，<em>“裹胁”</em>侧重于胁迫</li><li>把别的东西卷入，使随着移动</li><li>把人卷进去，迫使其采取某种态度</li></ol></li><li>觊觎<ol><li>贬义词</li><li>非分的希望或企图</li></ol></li><li>凝练<ol><li>形容词</li><li>指文章内容紧凑，<em>文笔简练</em>。</li><li>「文章内容很好，但写得还不够 凝练」</li></ol></li><li>纾解 shū jiě<ol><li><em>缓解了但还需要继续</em></li></ol></li><li>消弭 xiāo mǐ<ol><li>清除、消除某些不好的事情</li></ol></li><li>逐鹿<ol><li>比喻群雄并起，争夺天下，体现出竞争、比赛之意</li></ol></li></ol></div><div class="tab-pane" id="积累词汇-3"><ol><li>急功近利</li><li>好高骛远</li><li>投机取巧</li><li>故弄玄虚</li><li><strong>习焉不察</strong></li><li>莫衷一是</li></ol></div><div class="tab-pane" id="积累词汇-4"><ol><li>急功近利<ol><li>急于求成，贪图眼前的利益、成效</li><li>制定目标过于急切、脱离实际的意思</li></ol></li><li>好高骛远<ol><li>脱离实际的追求不可能实现的过高、多远的目标</li></ol></li><li>投机取巧<ol><li>用不正当的手段谋划私利</li></ol></li><li>故弄玄虚<ol><li>故意玩弄花招，迷惑人、欺骗人</li><li>侧重欺骗</li></ol></li><li>习焉不察<ol><li>经常接触某种事物，反而觉察不到其中存在的问题，强调细节的不起眼</li></ol></li><li>莫衷一是<ol><li>形容意见分歧，没有一致的看法。</li></ol></li></ol></div></div></div><h4 id="考题"><a href="#考题" class="headerlink" title="考题"></a>考题</h4><div class="tabs" id="成语填空"><ul class="nav-tabs"><li class="tab active"><a href="#成语填空-1">填空核心🚩</a></li><li class="tab"><a href="#成语填空-2">同义词</a></li><li class="tab"><a href="#成语填空-3">示例二</a></li><li class="tab"><a href="#成语填空-4">有点难</a></li></ul><div class="tab-content"><div class="tab-pane active" id="成语填空-1"><div class="note success"><p>看了几个错题，主要原因并非是词汇不了解，而是<strong>根本原因</strong></p><div class="note info"><ol><li>没有找到关键词</li><li>没找到对应关系</li><li>成语、词汇填空<strong>找关键字、对应关系</strong></li></ol></div></div></div><div class="tab-pane" id="成语填空-2"><div class="note danger"><p>“做正确的事”，要求我们的目标制定要符合实际情况、符合客观规律、符合科学精神，不 <strong>【  】</strong>，不脱离实际，只有这样才能做对事；“正确地做事”，要求我们选准措施。效果好不好，很大程度上取决于措施是不是有效，若措施配套不当，再正确的事也可能事倍功半，甚至 <strong>【  】</strong> 。</p><p>依次填入画横线部分最恰当的一项是：</p><p>A 急功近利 雪上加霜</p><p>B 好高骛远 适得其反</p><p>C 投机取巧 事与愿违</p><p>D 故弄玄虚 功败垂成</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <div class="note success"><p>第一道题就卡住了，原因无法区分表述：<strong>实际</strong></p><ol><li>第一空，脱离实际的近义词，并列关系，ABC，都可以</li><li>第二空，递进关系，<ol><li>事与愿违侧重<strong>不相同</strong>，<em>程度超过了 事倍功半</em></li><li>雪上加霜侧重<strong>外因加重程度</strong></li></ol></li></ol></div>              </div>            </details></div></div><div class="tab-pane" id="成语填空-3"><div class="note default"><p>现实题材电视剧的创作命题，是在  <strong>【 】</strong>  的影像细节中揭示生活本真和生命理想，挖掘日常生活的诗意。这意味着，创作者要在 <strong>【 】</strong> 观众审美定势的基础上，明确价值导向，深拓艺术生命的底蕴。</p><p>依次填入画横线部分最恰当的一项是：</p><p>A 潜移默化 认同</p><p>B 司空见惯 秉承</p><p>C 无所不在 重塑</p><p>D 习焉不察 尊重</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>思考方向</p><ol><li>第一空形容 <strong>影响细节</strong>；<ol><li>潜移默化，性格、思量不经意间被影响、被改变</li><li>司空见惯，经常见到，不足为奇</li><li>无所不在，到处都是，</li><li>习焉不察，经常接触，反而觉察不到其中存在的问题，强调细节不起眼。</li></ol></li><li>第二空，审美定势<ol><li>尊重：尊敬、重视</li><li>秉承：秉承某种旨意、按指示办事。</li></ol></li></ol>              </div>            </details></div></div><div class="tab-pane" id="成语填空-4"><div class="note warning"><p>“不以规矩，不能成方圆”，这句话告诉我们规矩既有 <strong>【】</strong> ，也有规范性。作为中华文化重要载体和表现形式的汉字，在漫长的发展演化过程中，以规范的形式书写是各个历史阶段的时代共识。而世界上历史悠久的自源文字体系，唯有汉字 <strong>【】</strong>   ，其他文字几乎都遭遇了“断流”，这与汉字的“形神兼备”是分不开的。</p><p>依次填入画横线部分最恰当的一项是：</p><p>A 实用性 源远流长</p><p>B 工具性 经久不衰</p><p>C 局限性 历久弥新</p><p>D 灵活性 涅槃重生</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <div class="note success"><ol><li>从第二空入手，<ol><li>与断流相反</li><li>源远流长：历史悠久，</li><li>经久不衰：是精神饱满的状态，身体健壮的外表，形容某事或某人经历很长时间仍旧保持较高的旺盛状态</li><li>历久弥新”指经历长久的时间而更加鲜活，更加有活力，更显价值，与“断流”意思相反</li><li>涅槃重生：侧重重生；</li></ol></li></ol></div>              </div>            </details></div></div></div></div><div class="tabs" id="增长率问题"><ul class="nav-tabs"><li class="tab active"><a href="#增长率问题-1">排除</a></li><li class="tab"><a href="#增长率问题-2">二选一</a></li><li class="tab"><a href="#增长率问题-3">又一个</a></li><li class="tab"><a href="#增长率问题-4">二选一 🚩🚩🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="增长率问题-1"><div class="note danger"><p>近年来在生物医学领域取得了一个又一个的进展，如器官移植、试管婴儿、克隆生命，人类基因组图谱完成等，使得生物医学研究被罩上了无坚不摧的绚丽光环。但随着时间的推移，<strong>【】</strong> 。到目前为止，它既没有彻底揭示疾病发生发展的奥秘，又没能为根治疾病提供有效的帮助。一百年前不能治的疾病，现在同样不能治。而且随着工业化的进程和生态环境的改变，旧的疾病还没获得有效治疗，新的疾病又不断出现，对此生物医学研究更显得力不从心。</p><p>填入画横线部分最恰当的一项是：</p><p>A 生物医学研究的热度却呈现出了衰退的趋势<br>B 新的问题层出不穷，超出了生物医学的能力范畴<br>C 人们逐渐发现生物医学研究并非想象的那样无所不能<br>D 生物医学研究所取得的实际成果寥寥无几</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>主题词：生物医学研究<br>对应词：<em>绚丽光环。但。</em><br>找一个和他相反的就行。无法排除 C D， C 项目对应 <strong>取得了一个又一个的进展</strong></p>              </div>            </details></div></div><div class="tab-pane" id="增长率问题-2"><div class="note danger"><p>针对“互联网食品”的潜在风险，科学监管乃是当务之急。众所周知，监管的本质是对市场的补充而非替代，真正了解市场的是市场主体本身而非政府监管部门。因此监管部门要主动强化安全监管，更为重要的是，让网络平台承担更多社会责任。有的地方充分运用大数据技术，利用网络交易和支付的信息留痕特征，形成网络平台食品全链条可记录、可追溯、可查询体系，为“互联网食品安全”提供了新的可能路径。</p><p>根据这段文字，作者<em>意在说明：</em></p><p>A 科学监管是有效维护“互联网食品安全”的必然选择<br>B 强化“互联网食品”安全需监管部门和企业双管齐下<br>C “互联网食品”安全监管需充分发挥网络平台的作用<br>D 有迹可循的监管体系是“互联网食品安全”的新路径</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>因此监管部门要主动强化安全监管，更为重要的是，让网络平台承担更多社会责任</p>              </div>            </details></div></div><div class="tab-pane" id="增长率问题-3"><p>移动政务在提升政府工作效率的同时，必然推动政府工作作风的改变。新技术应用的陌生化效果消除了以往民众与具体部门和工作人员打交道时“门难进，脸难看，事难办”的麻烦，办事程序更加简化透明，民众可即时查询相关信息，而数据整合分析也可提高政府决策的科学性。这在很大程度上减少了权力寻租空间，也必将使政府部门的形象有较大改观。<strong>但</strong>新技术应用所带来的改变如果<strong>只是</strong>外在的强制性因素，<strong>而</strong>没有内化为政府部门提升服务意识的理念，<em>那么</em>，要真正建立服务型政府恐怕还路途漫长。</p><p>这段文字意在说明：</p><p>C 新技术契机下政府更需提升服务意识</p><p>D 我国建立服务型政府仍面临诸多困难</p><div class="note success">C</div></div><div class="tab-pane" id="增长率问题-4"><div class="note warning"><p>落实对个人信息的保护，需要社会不同主体发力，其中，银行加强内部管理十分重要。随着银行联网系统的普遍使用，银行功能日益强大。这同时意味着银行内部能够获取用户信息的端口增多了，有内部授权的银行员工都可以查询相关信息。若银行内部缺乏职业伦理、法律素养的培训，银行就不再是铁桶一块，若加之内部监管机制失灵，出了问题无法追究溯源，用户隐私保护机制就会彻底失灵，从而为用户信息泄露埋下重要隐患。</p><p>这段文字意在强调：</p><p>B 保护个人信息，银行需建立有效的内部监管机制<br>D 银行内部管理缺陷不利于保护用户的个人信息</p><div class="note success">B 项，“内部监管机制”是银行内部管理缺陷的一个方面，表述片面，排除；</div></div></div></div><h3 id="资料分析"><a href="#资料分析" class="headerlink" title="资料分析"></a>资料分析</h3><h3 id="判断推理"><a href="#判断推理" class="headerlink" title="判断推理"></a>判断推理</h3><div class="tabs" id="判断推理"><ul class="nav-tabs"><li class="tab active"><a href="#判断推理-1">数量--线数量</a></li><li class="tab"><a href="#判断推理-2">解析</a></li><li class="tab"><a href="#判断推理-3">相似--运算</a></li><li class="tab"><a href="#判断推理-4">面--运算</a></li></ul><div class="tab-content"><div class="tab-pane active" id="判断推理-1"><img data-src="06.png" width=80% /></div><div class="tab-pane" id="判断推理-2"><p>6 条直线与 1 条曲线构成，<strong>优先观察首尾直线的关系</strong><br><img data-src="07.png" width=80% /></p></div><div class="tab-pane" id="判断推理-3"><img data-src="08.png" width=80% /></div><div class="tab-pane" id="判断推理-4"><img data-src="09.png" width=80% /><img data-src="10.png" width=80% /><img data-src="11.png" width=80% /></div></div></div><div class="tabs" id="判断推理"><ul class="nav-tabs"><li class="tab active"><a href="#判断推理-1">蒙对了</a></li><li class="tab"><a href="#判断推理-2">不知掉怎么选</a></li><li class="tab"><a href="#判断推理-3">常识</a></li><li class="tab"><a href="#判断推理-4">依据对应关系 🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="判断推理-1"><div class="note warning">还是凭感觉写题了，当时不知道是什么关系，要熟练背诵关系<div class="note success"><p><em>隔热砖：粘土砖</em></p><p>A 精装书：专业书<br>B 炒菜锅：铁锅<br>C 衣服：裙子<br>D 塑料桶：垃圾桶</p></div><ol><li>如果是从不同的角度描述，有可能是<strong>交叉关系</strong></li><li>二级对比，隔热板是<em>用途命名<em>，粘土砖是</em>原材料命名</em></li></ol></div></div><div class="tab-pane" id="判断推理-2"><div class="note primary"><p>森林：老虎</p><p>A 海洋：动物<br>B 果园：苹果<br>C 天空：飞机<br>D 河流：鲤鱼</p><div class="note success"><ol><li>地点对应，并且老虎是动物的其中一种</li><li>D</div></li></ol></div></div><div class="tab-pane" id="判断推理-3"><p><em>上行文：下行文：平行文</em></p><p>A 陆生动物：水生动物：两栖动物<br>B 海水鱼：淡水鱼：观赏鱼<br>C 高原：盆地：平原<br>D 细菌：病毒：真菌</p><div class="note success"><ol><li>公文按照行文关系和运行方向，可分为上行文、下行文、平行文，且在这一划分标准上只分为这三类</li><li>A </div></li></ol></div><div class="tab-pane" id="判断推理-4"><div class="note warning"><p>倒叙  对于  （    ）  相当于  （    ）  对于  时间</p><p>A 顺序；近代史<br>B 叙述；地点<br>C 插叙；历史<br>D 补叙；现代史</p><div class="note success"><ol><li>近代史：时间。是依据对应关系，近代史是依据时间分类所得到的一段历史，依据对应关系</li><li>倒叙是依据顺序分类所得到的一种叙述方式；依据对应关系</div></li></ol></div></div></div></div><div class="tabs" id="逻辑推理-需要加强"><ul class="nav-tabs"><li class="tab active"><a href="#逻辑推理-需要加强-1">翻译推理</a></li><li class="tab"><a href="#逻辑推理-需要加强-2">真假推理 此处有🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="逻辑推理-需要加强-1"><div class="note warning"><p>甲、乙、丙、丁、戊参加了同一场考试，最后分数各不相同，已知：如果丁不是第四名，那么丙就是第一名；第三名不是甲就是丁；除非戊是第一名，否则乙是第一名。</p><p>补充以下哪项，可以确定所有人的名次？</p><p>A 乙是第一名<br>B 丙是第二名<br>C 丁是第四名<br>D 戊是第五名</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <div class="note info"><p>🤔 思考方向 🤔</p><ol><li>推理判断题。可以画图、但前提是找对逻辑关系；</li><li>当时不知道 *<em>除非。.. 否则。.. *</em>是什么意思</li><li>后推前的变形，搜索相应的关键词复习。</li></ol><div class="note success"><ol><li>丁第四名丙第一名；</li><li>第三名：甲、丁之一；</li><li>乙第一名戊第一名。</li></ol><p>之后代入排除法。</p></div></div>              </div>            </details></div></div><div class="tab-pane" id="逻辑推理-需要加强-2"><div class="note warning"><p>某公司计划组织春游，佳佳、龙龙、东东、来来四人安排了出游计划，已知：</p><p>（1）如果龙龙选择去长城，那么东东也会选择去长城；<br>（2）佳佳没有选择去长城；<br>（3）所有人都选择了去长城；<br>（4）有的人没有去长城。</p><p>如果上述四个条件中只有一个为真，则以下哪项有可能为真？</p><p>A 去长城的人数为1<br>B 去长城的人数为4<br>C 去长城的人数为3<br>D 去长城的人数为0</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <div class="note success"><p>🤔思考方向🤔</p><ol><li>题型：真假推理</li><li>方向：<ol><li>找矛盾关系的一组</li><li><strong>剩余的都是真、假</strong></li></ol></li></ol><div class="note primary"><ol><li>3、4为一真一假，==》1、2都是假的</li><li>1如果为假，该怎么翻译呢？？？</li></ol><div class="note warning"><p><em>前后推的问题，转为整体部分的问题</em></p><div class="note success">龙龙 -> 东东，为真(两人都去为真)  =>   —东东 -> —龙龙，为真(两人都不去为真)<p>两人都去或者都不去为真，两人有一个人去一个人不去为假</p><p>龙龙   -&gt;   —东东，为假(一人去，一人不去为假)<br>—龙龙   -&gt;   东东，为假(一人去，一人不去为假)</p></div><p>龙龙 -&gt; 东东，为假(两人都去为假)  =&gt;   —东东 -&gt; —龙龙，为假(两人都不去为假)</p><p>两人都去或者都不去为假，两人有一个人去一个人不去为真</p></div></div></div>              </div>            </details></div></div></div></div><hr><div class="tabs" id="削弱"><ul class="nav-tabs"><li class="tab"><a href="#削弱-1">牢记做题步骤 🚩</a></li><li class="tab active"><a href="#削弱-2">这个得积累下 🚩 🚩</a></li></ul><div class="tab-content"><div class="tab-pane" id="削弱-1"><p>疫苗是一种用于预防和控制传染病的生物类制品，是对病原微生物（细菌、病毒等）及其代谢产物进行人工减毒和灭活处理后制成的。很多家长认为孩子打了传染性疾病的疫苗之后就可以高枕无忧，不会再得传染病了。</p><p>以下哪项如果为真，最不能质疑上述结论？</p><p>A 疫苗是针对相关疾病的已知病毒类型做出预测后培育的病毒，但致病的病毒很可能会发生变异<br>B 不少人在打了流感疫苗后依然得了流感，还会因此质疑相关疫苗的有效性<br>C 传染病疫苗的种类有所不同，注射的频率和次数也有所不同，因病而异的同时也要因人而异<br>D 注射疫苗后产生的抗体在人体内存在的时间有所不同，当人体内没有相关抗体之后，就有可能染病</p><div class="note warning"><p>不能只知道是 <em>削弱题型</em>，而胡乱的去找答案，按步骤做题，</p><ol><li>论点： <ol><li>位置、认为、因此等、首尾句；</li><li>孩子打了传染性疾病的疫苗之后就可以高枕无忧</li></ol></li><li>论据： <strong>无</strong></li><li>🤔思考方向🤔：<ol><li>直接削论点</li><li>削论据</li><li>拆桥</li></ol></li><li>形成依据<ol><li>削论点</li><li>找 <strong>打疫苗也会得病</strong> 的同义句、替换句子</li><li><em>选三排一</em><img data-src="12.png" width=80% /></li></ol></li></ol></div></div><div class="tab-pane active" id="削弱-2"><div class="note danger">做题得时候可以，用字母推导；</div><img data-src="13.png" width=80% /></div></div></div><h3 id="数量关系"><a href="#数量关系" class="headerlink" title="数量关系"></a>数量关系</h3><div class="tabs" id="工程问题"><ul class="nav-tabs"><li class="tab active"><a href="#工程问题-1">比率</a></li><li class="tab"><a href="#工程问题-2">解析</a></li><li class="tab"><a href="#工程问题-3">工作量🔺</a></li><li class="tab"><a href="#工程问题-4">解析-比例不变</a></li></ul><div class="tab-content"><div class="tab-pane active" id="工程问题-1"><img data-src="60.png" width=80% /></div><div class="tab-pane" id="工程问题-2"><img data-src="61.png" width=80% /></div><div class="tab-pane" id="工程问题-3"><img data-src="62.png" width=80% /></div><div class="tab-pane" id="工程问题-4"><img data-src="63.png" width=80% /></div></div></div><div class="tabs" id="概率问题"><ul class="nav-tabs"><li class="tab active"><a href="#概率问题-1">综合</a></li><li class="tab"><a href="#概率问题-2">解析🔺🔺</a></li></ul><div class="tab-content"><div class="tab-pane active" id="概率问题-1"><img data-src="65.png" width=80% /></div><div class="tab-pane" id="概率问题-2"><img data-src="64.png" width=80% /></div></div></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="二十三季复盘"><a href="#二十三季复盘" class="headerlink" title="二十三季复盘"></a>二十三季复盘</h2><img data-src="04.png" title="时间完全不合理" width=80% /><ol><li>做题顺序<ol><li>言语-&gt;逻辑判断-&gt;常识-&gt;资料分析-&gt;数量关系</li></ol></li><li>时间问题<ol><li>粉笔推荐顺序是<ol><li>言语理解（32 分钟）➜逻辑判断（35 分钟）➜资料分析（30 分钟）➜常识（8 分钟）➜数量关系（10 分钟）➜涂答题卡（5 分钟）</li></ol></li><li>中公推荐顺序是<ol><li>常识（5 分钟）➜言语理解（35 分钟）➜逻辑判断（35 分钟）➜资料分析（20-25 分钟）➜数量关系（10 分钟）➜涂答题卡</li></ol></li></ol></li></ol><p>接下来需要<strong>按时间做题、按步骤做题</strong></p><h3 id="言语理解-1"><a href="#言语理解-1" class="headerlink" title="言语理解"></a>言语理解</h3><h4 id="成语、词语填空"><a href="#成语、词语填空" class="headerlink" title="成语、词语填空"></a>成语、词语填空</h4><p>很烦的一部分</p><h4 id="中心理解题"><a href="#中心理解题" class="headerlink" title="中心理解题"></a>中心理解题</h4><img data-src="05.png" title="主旨" width=80% /><img data-src="06.png" title="细节判断" width=80% /><img data-src="07.png" width=80% /><img data-src="08.png" width=80% /><img data-src="09.png" width=80% /><img data-src="10.png" width=80% /><h3 id="数量关系-1"><a href="#数量关系-1" class="headerlink" title="数量关系"></a>数量关系</h3><img data-src="11.png" title="年龄问题" width=80% /><img data-src="13.png" width=80% /><img data-src="12.png" width=80% /><img data-src="14.png" width=80% /><img data-src="15.png" width=80% /><img data-src="16.png" width=80% /><img data-src="17.png" width=80% /><img data-src="18.png" width=80% /><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><h3 id="资料分析-1"><a href="#资料分析-1" class="headerlink" title="资料分析"></a>资料分析</h3>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 模考复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十四季模考复盘</title>
      <link href="2020/05/31/civil_servant_exam_24/"/>
      <url>2020/05/31/civil_servant_exam_24/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/023.jpg" width=80% /><span class='geyan'>    业精于勤，荒于嬉。 （唐·韩愈《进学解》）</span><a id="more"></a><div class="note danger">期待下次及格！</div><h2 id="二十四季复盘"><a href="#二十四季复盘" class="headerlink" title="二十四季复盘"></a>二十四季复盘</h2><div class="tabs" id="复盘对比"><ul class="nav-tabs"><li class="tab active"><a href="#复盘对比-1">本季</a></li><li class="tab"><a href="#复盘对比-2">上季</a></li></ul><div class="tab-content"><div class="tab-pane active" id="复盘对比-1"><div class="note danger">蒙了好多<div class="note success">时间安排<ol><li>相比第一次有提升</li><li><em>资料分析</em> 熟练度<code>完全不够</code></li></ol></div><div class="note info"><p>正确率</p><ol><li><strong>言语理解</strong>正确率<code>太差劲</code>👎</li></ol></div></div><img data-src="24.png" title="需要提升的侧重点" width=80% /></div><div class="tab-pane" id="复盘对比-2"><img data-src="04.png" title="时间完全不合理" width=80% /></div></div></div><h3 id="言语理解"><a href="#言语理解" class="headerlink" title="言语理解"></a>言语理解</h3><h4 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h4><div class="tabs" id="积累词汇"><ul class="nav-tabs"><li class="tab active"><a href="#积累词汇-1">词语</a></li><li class="tab"><a href="#积累词汇-2">词语含义</a></li><li class="tab"><a href="#积累词汇-3">成语</a></li><li class="tab"><a href="#积累词汇-4">成语</a></li></ul><div class="tab-content"><div class="tab-pane active" id="积累词汇-1"><ol><li>空泛</li><li>空洞</li><li>空乏</li><li>空廓</li><li>裹挟</li><li>觊觎</li><li>凝练</li><li><strong>纾解</strong></li><li>消弭</li><li>逐鹿</li></ol></div><div class="tab-pane" id="积累词汇-2"><ol><li>空泛：<ol><li>形容词：（文章、讲话）没有具体内容的泛泛之论；</li></ol></li><li>空洞：<ol><li>名词：</li><li>形容词：比喻<em>言论和文章没有实际内容</em>。空虚而无内涵</li></ol></li><li>空乏：<ol><li>形容词；空旷寥廓。</li></ol></li><li>空廓：<ol><li>形容词；空旷寥廓。</li></ol></li><li>裹挟<ol><li><em>被动的卷入</em>。“裹挟”侧重于<strong>挟持</strong>，<em>“裹胁”</em>侧重于胁迫</li><li>把别的东西卷入，使随着移动</li><li>把人卷进去，迫使其采取某种态度</li></ol></li><li>觊觎<ol><li>贬义词</li><li>非分的希望或企图</li></ol></li><li>凝练<ol><li>形容词</li><li>指文章内容紧凑，<em>文笔简练</em>。</li><li>「文章内容很好，但写得还不够 凝练」</li></ol></li><li>纾解 shū jiě<ol><li><em>缓解了但还需要继续</em></li></ol></li><li>消弭 xiāo mǐ<ol><li>清除、消除某些不好的事情</li></ol></li><li>逐鹿<ol><li>比喻群雄并起，争夺天下，体现出竞争、比赛之意</li></ol></li></ol></div><div class="tab-pane" id="积累词汇-3"><ol><li>掩人耳目</li><li>画龙点睛</li><li>叶公好龙</li><li>杯弓蛇影</li><li>语焉不详</li><li>一知半解</li><li>知之甚少</li><li>琳琅满目</li><li>星罗棋布</li><li><strong>以逸待劳</strong></li><li>偃旗息鼓</li><li>退徙三舍</li><li>销声匿迹</li><li>跃跃欲试</li><li>声名鹊起</li><li>异军突起</li><li>横空出世</li><li><em>痛心疾首</em></li><li>扼腕叹息</li><li><em>统筹兼顾</em></li><li>不一而足</li><li>此起彼伏</li><li>甚嚣尘上</li><li>沸反盈天</li><li>党同伐异</li><li>剑拔弩张</li><li>如日中天</li><li>日新月异</li><li><strong>要言不烦</strong></li><li>虎尾春冰</li><li>狐死首丘</li></ol></div><div class="tab-pane" id="积累词汇-4"><ol><li>掩人耳目<ol><li>贬义词</li><li>迷惑欺骗别人</li></ol></li><li>画龙点睛<ol><li>褒义词</li><li>写文章或讲话时，在<code>关键处</code>用几句话<em>点明实质</em>，使内容更加生动有力</li></ol></li><li>叶公好龙<ol><li>贬义词</li><li>自称爱好某种事物，实际上并不是真正爱好</li></ol></li><li>杯弓蛇影<ol><li>贬义词</li><li>疑神疑鬼，自相惊扰</li></ol></li><li>语焉不详<ol><li>虽然提到了，但<em>说得不详细</em></li></ol></li><li>一知半解<ol><li>知道得不全面，理解得也不透彻</li></ol></li><li>知之甚少<ol><li>对<strong>某方面知道的太少</strong></li></ol></li><li>琳琅满目<ol><li>满眼都是<strong>珍贵的东西</strong>，形容<em>美好的事物很多</em>，多与“商品”搭配</li></ol></li><li>星罗棋布<ol><li>形容数量多，分布广</li></ol></li><li>以逸待劳<ol><li>贬义词</li><li>在战争中做好充分准备，养精蓄锐，<code>等疲乏的敌人来犯时给以迎头痛击</code></li></ol></li><li>偃旗息鼓<ol><li>比喻休战或无声无息地停止活动；或<em>停止做某事</em></li></ol></li><li>退徙三舍<ol><li>退让和回避，<em>避免冲突</em></li></ol></li><li>销声匿迹<ol><li>隐藏起来或不公开出现</li></ol></li><li>跃跃欲试<ol><li><strong>心里</strong>急切地想试试</li></ol></li><li>声名鹊起<ol><li>名声突然大振，知名度迅速提高</li></ol></li><li>异军突起<ol><li>比喻与众不同的新派别或新力量<strong>一下子崛起</strong></li></ol></li><li>横空出世<ol><li>形容优秀的<code>人或物</code><strong>突然出现</strong>，强调突然且显著地出现</li></ol></li><li><strong>痛心疾首</strong><ol><li>形容痛恨到了极点或形容悲痛、伤心到了极点</li></ol></li><li>扼腕叹息，<ol><li>意思是握着手腕发出叹息的声音；形容十分激动地发出长叹的情态</li></ol></li><li><em>统筹兼顾</em><ol><li>从全局出发，通盘筹划，照顾到各方面及其相互间的关系</li></ol></li><li>不一而足<ol><li>同类的事物不止一个而是很多，无法列举齐全，<strong>特指同类事物，且强调多</strong></li></ol></li><li>此起彼伏<ol><li>一波未平一波又起，形容接连不断</li></ol></li><li>甚嚣尘上<ol><li>形容某种<em>传闻或谬论十分嚣张</em></li></ol></li><li>沸反盈天<ol><li>形容<code>人声喧闹，乱成一片</code></li></ol></li><li>党同伐异<ol><li>结帮分派，偏向同伙，打击不同意见的人</li></ol></li><li>剑拔弩张<ol><li>对方摆开了阵势，形势紧张，一触即发</li></ol></li><li>如日中天<ol><li>事物正发展到十分兴盛的阶段</li></ol></li><li>日新月异<ol><li>每天都在更新，每月都有变化，指<em>发展或进步迅速</em></li></ol></li><li><strong>要言不烦</strong><ol><li>说话、写文章<strong>简明扼要</strong></li></ol></li><li>虎尾春冰<ol><li>踩着老虎尾巴，走在春天将解冻的冰上。比喻处境非常危险。出自《尚书·君牙》。</li></ol></li><li>狐死首丘<ol><li>意思是古代传说狐狸如果死在外面，一定把头朝着它的洞穴。比喻<strong>不忘本或怀念故乡</strong>，也比喻对故国、故乡的思念。出自《礼记注疏》。</li></ol></li></ol></div></div></div><h4 id="考题"><a href="#考题" class="headerlink" title="考题"></a>考题</h4><div class="tabs" id="混搭填空"><ul class="nav-tabs"><li class="tab active"><a href="#混搭填空-1">关键词对应</a></li><li class="tab"><a href="#混搭填空-2">代入验证</a></li></ul><div class="tab-content"><div class="tab-pane active" id="混搭填空-1"><img data-src="25.png" width=80% /></div><div class="tab-pane" id="混搭填空-2"><img data-src="26.png" width=80% /></div></div></div><div class="tabs" id="理解"><ul class="nav-tabs"><li class="tab active"><a href="#理解-1">细节画出重点</a></li><li class="tab"><a href="#理解-2">按题型做题</a></li><li class="tab"><a href="#理解-3">语句衔接</a></li><li class="tab"><a href="#理解-4">非重点</a></li><li class="tab"><a href="#理解-5">非重点</a></li><li class="tab"><a href="#理解-6">别加戏</a></li><li class="tab"><a href="#理解-7">感情色彩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="理解-1"><img data-src="27.png" width=80% /></div><div class="tab-pane" id="理解-2"><img data-src="28.png" width=80% /></div><div class="tab-pane" id="理解-3"><div class="note danger">语句衔接题，也要通读文段，***画出重点***</div><img data-src="29.png" width=80% /></div><div class="tab-pane" id="理解-4"><img data-src="30.png" width=80% /></div><div class="tab-pane" id="理解-5"><img data-src="31.png" width=80% /></div><div class="tab-pane" id="理解-6"><img data-src="32.png" width=80% /></div><div class="tab-pane" id="理解-7"><img data-src="33.png" width=80% /></div></div></div><h3 id="资料分析"><a href="#资料分析" class="headerlink" title="资料分析"></a>资料分析</h3><div class="tabs" id="增长率问题"><ul class="nav-tabs"><li class="tab active"><a href="#增长率问题-1">混合增长率</a></li><li class="tab"><a href="#增长率问题-2">平均数增长率</a></li><li class="tab"><a href="#增长率问题-3">解析</a></li></ul><div class="tab-content"><div class="tab-pane active" id="增长率问题-1"><img data-src="34.png" width=80% /></div><div class="tab-pane" id="增长率问题-2"><img data-src="37.png" width=80% /></div><div class="tab-pane" id="增长率问题-3"><img data-src="38.png" width=80% /></div></div></div><div class="tabs" id="基期问题"><ul class="nav-tabs"><li class="tab active"><a href="#基期问题-1">基期🔺</a></li><li class="tab"><a href="#基期问题-2">解析</a></li></ul><div class="tab-content"><div class="tab-pane active" id="基期问题-1"><img data-src="35.png" width=80% /></div><div class="tab-pane" id="基期问题-2"><img data-src="36.png" width=80% /></div></div></div><div class="tabs" id="现期问题"><ul class="nav-tabs"><li class="tab active"><a href="#现期问题-1">平均数</a></li><li class="tab"><a href="#现期问题-2">解析</a></li></ul><div class="tab-content"><div class="tab-pane active" id="现期问题-1"><div class="note danger">题目还可以这样出</div><img data-src="39.png" width=80% /></div><div class="tab-pane" id="现期问题-2"><img data-src="40.png" width=80% /></div></div></div><h3 id="判断推理"><a href="#判断推理" class="headerlink" title="判断推理"></a>判断推理</h3><div class="tabs" id="判断推理"><ul class="nav-tabs"><li class="tab active"><a href="#判断推理-1">数量--面数量</a></li><li class="tab"><a href="#判断推理-2">数量--点数量</a></li><li class="tab"><a href="#判断推理-3">相交--点线🔺</a></li></ul><div class="tab-content"><div class="tab-pane active" id="判断推理-1"><img data-src="41.png" width=80% /></div><div class="tab-pane" id="判断推理-2"><img data-src="42.png" width=80% /></div><div class="tab-pane" id="判断推理-3"><img data-src="43.png" width=80% /></div></div></div><div class="tabs" id="定义"><ul class="nav-tabs"><li class="tab active"><a href="#定义-1">择优选择</a></li><li class="tab"><a href="#定义-2">隐含内容</a></li><li class="tab"><a href="#定义-3">注意关键词</a></li></ul><div class="tab-content"><div class="tab-pane active" id="定义-1"><img data-src="44.png" width=80% /></div><div class="tab-pane" id="定义-2"><img data-src="45.png" width=80% /></div><div class="tab-pane" id="定义-3"><img data-src="46.png" width=80% /></div></div></div><div class="tabs" id="类比"><ul class="nav-tabs"><li class="tab active"><a href="#类比-1">对应关系</a></li><li class="tab"><a href="#类比-2">蜜蜡是琥珀</a></li><li class="tab"><a href="#类比-3">近反义</a></li><li class="tab"><a href="#类比-4">疫苗</a></li></ul><div class="tab-content"><div class="tab-pane active" id="类比-1"><img data-src="47.png" width=80% /></div><div class="tab-pane" id="类比-2"><img data-src="48.png" width=80% /></div><div class="tab-pane" id="类比-3"><img data-src="49.png" width=80% /></div><div class="tab-pane" id="类比-4"><img data-src="50.png" width=80% /></div></div></div><h3 id="数量关系"><a href="#数量关系" class="headerlink" title="数量关系"></a>数量关系</h3><div class="tabs" id="工程问题"><ul class="nav-tabs"><li class="tab active"><a href="#工程问题-1">比率</a></li><li class="tab"><a href="#工程问题-2">解析</a></li><li class="tab"><a href="#工程问题-3">工作量🔺</a></li><li class="tab"><a href="#工程问题-4">解析-比例不变</a></li></ul><div class="tab-content"><div class="tab-pane active" id="工程问题-1"><img data-src="60.png" width=80% /></div><div class="tab-pane" id="工程问题-2"><img data-src="61.png" width=80% /></div><div class="tab-pane" id="工程问题-3"><img data-src="62.png" width=80% /></div><div class="tab-pane" id="工程问题-4"><img data-src="63.png" width=80% /></div></div></div><div class="tabs" id="概率问题"><ul class="nav-tabs"><li class="tab active"><a href="#概率问题-1">综合</a></li><li class="tab"><a href="#概率问题-2">解析🔺🔺</a></li></ul><div class="tab-content"><div class="tab-pane active" id="概率问题-1"><img data-src="65.png" width=80% /></div><div class="tab-pane" id="概率问题-2"><img data-src="64.png" width=80% /></div></div></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="二十三季复盘"><a href="#二十三季复盘" class="headerlink" title="二十三季复盘"></a>二十三季复盘</h2><img data-src="04.png" title="时间完全不合理" width=80% /><ol><li>做题顺序<ol><li>言语-&gt;逻辑判断-&gt;常识-&gt;资料分析-&gt;数量关系</li></ol></li><li>时间问题<ol><li>粉笔推荐顺序是<ol><li>言语理解（32 分钟）➜逻辑判断（35 分钟）➜资料分析（30 分钟）➜常识（8 分钟）➜数量关系（10 分钟）➜涂答题卡（5 分钟）</li></ol></li><li>中公推荐顺序是<ol><li>常识（5 分钟）➜言语理解（35 分钟）➜逻辑判断（35 分钟）➜资料分析（20-25 分钟）➜数量关系（10 分钟）➜涂答题卡</li></ol></li></ol></li></ol><p>接下来需要<strong>按时间做题、按步骤做题</strong></p><h3 id="言语理解-1"><a href="#言语理解-1" class="headerlink" title="言语理解"></a>言语理解</h3><h4 id="成语、词语填空"><a href="#成语、词语填空" class="headerlink" title="成语、词语填空"></a>成语、词语填空</h4><p>很烦的一部分</p><h4 id="中心理解题"><a href="#中心理解题" class="headerlink" title="中心理解题"></a>中心理解题</h4><img data-src="05.png" title="主旨" width=80% /><img data-src="06.png" title="细节判断" width=80% /><img data-src="07.png" width=80% /><img data-src="08.png" width=80% /><img data-src="09.png" width=80% /><img data-src="10.png" width=80% /><h3 id="数量关系-1"><a href="#数量关系-1" class="headerlink" title="数量关系"></a>数量关系</h3><img data-src="11.png" title="年龄问题" width=80% /><img data-src="13.png" width=80% /><img data-src="12.png" width=80% /><img data-src="14.png" width=80% /><img data-src="15.png" width=80% /><img data-src="16.png" width=80% /><img data-src="17.png" width=80% /><img data-src="18.png" width=80% /><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><h3 id="资料分析-1"><a href="#资料分析-1" class="headerlink" title="资料分析"></a>资料分析</h3>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 模考复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词汇积累</title>
      <link href="2020/05/27/civil_servant_vocabulary/"/>
      <url>2020/05/27/civil_servant_vocabulary/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/031.jpg" width=80% /><span class='geyan'>无稽之言，不见之行，不闻之谋，君子慎之。                ——《荀子·正名》节选</span><a id="more"></a><h2 id="高频词汇"><a href="#高频词汇" class="headerlink" title="高频词汇"></a>高频词汇</h2><div class="tabs" id="高频词汇"><ul class="nav-tabs"><li class="tab active"><a href="#高频词汇-1">词汇</a></li><li class="tab"><a href="#高频词汇-2">词汇解释</a></li><li class="tab"><a href="#高频词汇-3">成语</a></li><li class="tab"><a href="#高频词汇-4">成语解释</a></li></ul><div class="tab-content"><div class="tab-pane active" id="高频词汇-1"><details success><summary> <p>词汇列表 1</p> </summary>              <div class='content'>              <p>sss</p>              </div>            </details></div><div class="tab-pane" id="高频词汇-2"><details warning><summary> <p>词汇列表 1</p> </summary>              <div class='content'>              <p>ffff</p>              </div>            </details></div><div class="tab-pane" id="高频词汇-3"><details success><summary> <p>成语</p> </summary>              <div class='content'>              <ol><li>南辕北辙</li><li><em>理所当然</em></li><li>大相径庭</li><li><strong>无可厚非</strong></li><li>不负众望</li><li>不孚众望</li><li>一蹴而就</li><li>层出不穷</li><li>按部就班</li><li>标新立异</li><li>方兴未艾</li><li>趋之若鹜</li><li>如火如荼</li><li>饱经风雨</li><li>饱经沧桑</li><li>休戚与共</li><li>唇齿相依</li></ol>              </div>            </details></div><div class="tab-pane" id="高频词汇-4"><details warning><summary> <p>成语解释</p> </summary>              <div class='content'>              <ol><li>南辕北辙<ol><li>比喻<em>行动和目的相反</em>。</li><li>辕”是车杠；“辙”是车轮在路上留下的痕迹。指要到南方去，却驾着车往走</li><li>《战国策·魏策四》：“ 犹至楚而北行也。”</li></ol></li><li>理所当然<ol><li><strong>完全合理，不容质疑</strong></li><li>理：道理、情理；当：应当；然：这样</li><li><code>善者福而恶者祸，理所当然</code>。 ——明·赵弼《续东窗事犯传》</li></ol></li><li>大相径庭<ol><li><em>彼此<em>相差很大或</em>矛盾很大</em>,事物区别明显，意见、看法截然相反</li><li><strong>径：门外的路；庭：门院里的地</strong>。后来用“大相径庭”表示彼此相差很远或矛盾很大。</li></ol></li><li>无可厚非<ol><li>用作人或事情，说话做事有缺点，但是还有可取之初，应予以谅解</li><li>厚：深重；非：非议，否定；</li><li>《汉书·王莽传》：“莽怒；免英官；后颇觉悟；曰：‘英亦未可厚非。’复以英为长沙连率。”</li></ol></li><li>不负众望<ol><li>不辜负大家的期望；</li><li>负：辜负；众：众人；望：期望；</li></ol></li><li>不孚众望<ol><li>没有符合大家的期望</li><li>孚：信服；</li><li>《诗经·大雅·下武》中有“永言配命，成王之孚”</li></ol></li><li>一蹴而就<ol><li>事情轻而易举，一下子就成功</li><li>蹴：踏；<em>就：成功</em></li><li>宋·苏洵《上田枢密书》：“天下之学者，孰不欲一蹴而造圣人之域。”</li></ol></li><li>层出不穷<ol><li><em>接连不断的出现，没有穷尽；</em></li><li>层：重复；穷：尽；</li><li>《阅微草堂笔记·槐西杂志二》：“天下之巧，层出不穷，千变万化，岂一端所可尽乎？”</li></ol></li><li>按部就班<ol><li>按规矩办事；也指 <em>缺乏创新</em></li><li>部、班：门类；就：归于；</li></ol></li><li>标新立异<ol><li>贬义词；没有被认可的与众不同；</li></ol></li><li>方兴未艾<ol><li>方：正在；兴：起始，兴起；艾：停止，完结。</li><li>事物正在发展，还没有停止。</li><li>多形容新生<em>事物正在蓬勃发展</em>。</li></ol></li><li>趋之若鹜<ol><li>像鸭子一样成群跑过去， 比喻许多人争着去追逐。出自《明史·萧如薰传》。</li></ol></li><li>如火如荼<ol><li>荼：茅草的白花。像火那样红，像荼那样白。</li><li>原比喻军容之盛。</li><li>现用来形容<em>大规模的行动</em>气势旺盛，气氛热烈。</li></ol></li><li>饱经风雨<ol><li>经历过许多<em>艰难困苦</em></li></ol></li><li>饱经沧桑<ol><li>经历过多次的<em>世事变化<em>，生活经历极为</em>丰富</em></li></ol></li><li>休戚与共<ol><li>关系密切，利害相同</li></ol></li><li>唇齿相依<ol><li>关系密切，相互依存</li></ol></li></ol>              </div>            </details></div></div></div><h2 id="模考积累"><a href="#模考积累" class="headerlink" title="模考积累"></a>模考积累</h2><div class="tabs" id="模考积累"><ul class="nav-tabs"><li class="tab active"><a href="#模考积累-1">词汇</a></li><li class="tab"><a href="#模考积累-2">词汇解释</a></li><li class="tab"><a href="#模考积累-3">成语</a></li><li class="tab"><a href="#模考积累-4">成语解释</a></li></ul><div class="tab-content"><div class="tab-pane active" id="模考积累-1"><details warning><summary> <p>词汇列表 1</p> </summary>              <div class='content'>              <p>sss</p>              </div>            </details></div><div class="tab-pane" id="模考积累-2"><details warning><summary> <p>词汇列表 1</p> </summary>              <div class='content'>              <p>ffff</p>              </div>            </details></div><div class="tab-pane" id="模考积累-3"><details success><summary> <p>成语</p> </summary>              <div class='content'>              <ol><li>相得益彰</li></ol>              </div>            </details></div><div class="tab-pane" id="模考积累-4"><details warning><summary> <p>成语解释</p> </summary>              <div class='content'>              <ol><li>相得益彰<ol><li></li></ol></li></ol>              </div>            </details></div></div></div><h3 id="二十四季"><a href="#二十四季" class="headerlink" title="二十四季"></a>二十四季</h3><div class="tabs" id="二十四季"><ul class="nav-tabs"><li class="tab active"><a href="#二十四季-1">词汇</a></li><li class="tab"><a href="#二十四季-2">词汇解释</a></li><li class="tab"><a href="#二十四季-3">成语</a></li><li class="tab"><a href="#二十四季-4">成语解释</a></li></ul><div class="tab-content"><div class="tab-pane active" id="二十四季-1"><details success><summary> <p>词汇列表</p> </summary>              <div class='content'>              <ol><li>空泛</li><li>空洞</li><li>空乏</li><li>空廓</li><li>裹挟</li><li>觊觎</li><li>凝练</li><li><strong>纾解</strong></li><li>消弭</li><li>逐鹿</li></ol>              </div>            </details></div><div class="tab-pane" id="二十四季-2"><details warning><summary> <p>词语含义</p> </summary>              <div class='content'>              <ol><li>空泛：<ol><li>形容词：（文章、讲话）没有具体内容的泛泛之论；</li></ol></li><li>空洞：<ol><li>名词：</li><li>形容词：比喻<em>言论和文章没有实际内容</em>。空虚而无内涵</li></ol></li><li>空乏：<ol><li>形容词；空旷寥廓。</li></ol></li><li>空廓：<ol><li>形容词；空旷寥廓。</li></ol></li><li>裹挟<ol><li><em>被动的卷入</em>。“裹挟”侧重于<strong>挟持</strong>，<em>“裹胁”</em>侧重于胁迫</li><li>把别的东西卷入，使随着移动</li><li>把人卷进去，迫使其采取某种态度</li></ol></li><li>觊觎<ol><li>贬义词</li><li>非分的希望或企图</li></ol></li><li>凝练<ol><li>形容词</li><li>指文章内容紧凑，<em>文笔简练</em>。</li><li>「文章内容很好，但写得还不够 凝练」</li></ol></li><li>纾解 shū jiě<ol><li><em>缓解了但还需要继续</em></li></ol></li><li>消弭 xiāo mǐ<ol><li>清除、消除某些不好的事情</li></ol></li><li>逐鹿<ol><li>比喻群雄并起，争夺天下，体现出竞争、比赛之意</li></ol></li></ol>              </div>            </details></div><div class="tab-pane" id="二十四季-3"><details success><summary> <p>成语</p> </summary>              <div class='content'>              <ol><li>掩人耳目</li><li>画龙点睛</li><li>叶公好龙</li><li>杯弓蛇影</li><li><em>语焉不详</em></li><li>一知半解</li><li>知之甚少</li><li>琳琅满目</li><li>星罗棋布</li><li><em>以逸待劳</em></li><li>偃旗息鼓</li><li>退徙三舍</li><li>销声匿迹</li><li>跃跃欲试</li><li>声名鹊起</li><li>异军突起</li><li>横空出世</li><li><em>痛心疾首</em></li><li>扼腕叹息</li><li><em>统筹兼顾</em></li><li>不一而足</li><li>此起彼伏</li><li>甚嚣尘上</li><li>沸反盈天</li><li>党同伐异</li><li>剑拔弩张</li><li>如日中天</li><li>日新月异</li><li>要言不烦</li><li>虎尾春冰</li><li>狐死首丘</li><li>方兴未艾</li></ol>              </div>            </details></div><div class="tab-pane" id="二十四季-4"><details warning><summary> <p>成语含义</p> </summary>              <div class='content'>              <ol><li>掩人耳目<ol><li>贬义词</li><li>迷惑欺骗别人</li></ol></li><li>画龙点睛<ol><li>褒义词</li><li>写文章或讲话时，在<code>关键处</code>用几句话<em>点明实质</em>，使内容更加生动有力</li></ol></li><li>叶公好龙<ol><li>贬义词</li><li>自称爱好某种事物，实际上并不是真正爱好</li></ol></li><li>杯弓蛇影<ol><li>贬义词</li><li>疑神疑鬼，自相惊扰</li></ol></li><li>语焉不详<ol><li>虽然提到了，但<em>说得不详细</em></li></ol></li><li>一知半解<ol><li>知道得不全面，理解得也不透彻</li></ol></li><li>知之甚少<ol><li>对<strong>某方面知道的太少</strong></li></ol></li><li>琳琅满目<ol><li>满眼都是<strong>珍贵的东西</strong>，形容<em>美好的事物很多</em>，多与“商品”搭配</li></ol></li><li>星罗棋布<ol><li>形容数量多，分布广</li></ol></li><li>以逸待劳<ol><li>贬义词</li><li>在战争中做好充分准备，养精蓄锐，<code>等疲乏的敌人来犯时给以迎头痛击</code></li></ol></li><li>偃旗息鼓<ol><li>比喻休战或无声无息地停止活动；或<em>停止做某事</em></li></ol></li><li>退徙三舍<ol><li>退让和回避，<em>避免冲突</em></li></ol></li><li>销声匿迹<ol><li>隐藏起来或不公开出现</li></ol></li><li>跃跃欲试<ol><li><strong>心里</strong>急切地想试试</li></ol></li><li>声名鹊起<ol><li>名声突然大振，知名度迅速提高</li></ol></li><li>异军突起<ol><li>比喻与众不同的新派别或新力量<strong>一下子崛起</strong></li></ol></li><li>横空出世<ol><li>形容优秀的<code>人或物</code><strong>突然出现</strong>，强调突然且显著地出现</li></ol></li><li>痛心疾首<ol><li>形容痛恨到了极点或形容悲痛、伤心到了极点</li></ol></li><li>扼腕叹息，<ol><li>意思是握着手腕发出叹息的声音；形容十分激动地发出长叹的情态</li></ol></li><li><em>统筹兼顾</em><ol><li>从全局出发，通盘筹划，照顾到各方面及其相互间的关系</li></ol></li><li>不一而足<ol><li>同类的事物不止一个而是很多，无法列举齐全，<strong>特指同类事物，且强调多</strong></li></ol></li><li>此起彼伏<ol><li>一波未平一波又起，形容接连不断</li></ol></li><li>甚嚣尘上<ol><li>形容某种<em>传闻或谬论十分嚣张</em></li></ol></li><li>沸反盈天<ol><li>形容<code>人声喧闹，乱成一片</code></li></ol></li><li>党同伐异<ol><li>结帮分派，偏向同伙，打击不同意见的人</li></ol></li><li>剑拔弩张<ol><li>对方摆开了阵势，形势紧张，一触即发</li></ol></li><li>如日中天<ol><li>事物正发展到十分兴盛的阶段</li></ol></li><li>日新月异<ol><li>每天都在更新，每月都有变化，指<em>发展或进步迅速</em></li></ol></li><li>要言不烦<ol><li>说话、写文章<strong>简明扼要</strong></li></ol></li><li>虎尾春冰<ol><li>踩着老虎尾巴，走在春天将解冻的冰上。比喻处境非常危险。出自《尚书·君牙》。</li></ol></li><li>狐死首丘<ol><li>意思是古代传说狐狸如果死在外面，一定把头朝着它的洞穴。比喻<strong>不忘本或怀念故乡</strong>，也比喻对故国、故乡的思念。出自《礼记注疏》。</li><li></li></ol></li></ol>              </div>            </details></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 积累 </category>
          
          <category> 词汇积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词汇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数量关系-考点</title>
      <link href="2020/05/21/civil_servant_math_knowledge/"/>
      <url>2020/05/21/civil_servant_math_knowledge/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/021.jpg" width=80% /><span class='geyan'>    是是非非谓之智，非是是非谓之愚。（《荀子·修身》）</span><a id="more"></a><h2 id="基础计算"><a href="#基础计算" class="headerlink" title="基础计算"></a>基础计算</h2><h3 id="不定方程"><a href="#不定方程" class="headerlink" title="不定方程"></a>不定方程</h3><div class="tabs" id="不定方程"><ul class="nav-tabs"><li class="tab"><a href="#不定方程-1">特征</a></li><li class="tab active"><a href="#不定方程-2">奇偶</a></li><li class="tab"><a href="#不定方程-3">倍数</a></li></ul><div class="tab-content"><div class="tab-pane" id="不定方程-1"><div class="note warning"><p><strong>解法</strong></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652666086&idx=2&sn=ed14ad4b80a4ccec25cacc5db4c6f467&chksm=f12e6ec5c659e7d33f13c29f0ef12137e1523a036e95e5b7c27b5024d8a52ee29c1df562b8ca&scene=21#wechat_redirect" target="_blank" rel="noopener">公考齐麟—【方法技巧】数量0基础——不定方程解法汇总-链接🔗</a></p><div class="note success">①直接代入选项验证②枚举试算；③利用奇偶、尾数、倍数等数字特性分析；④特定题型可以采用赋“0”法。<p><strong>赋“0”法</strong></p><ol><li>如果三个未知数，两个方程</li><li>将系数大的那个项设置为0，求的其余两个未知数</li><li>就是xyz的和，</li><li>如果求的是 ： <strong>三个未知数、但不是xyz</strong></li></ol><div class="note primary">某次考试，题目是30道多项选择题，每题选对所有正确选项3分，少选且正确的1分，不选或选错倒扣1分，小王最终得分为50分，现要求改变评分方式，选对所有正确选项得4分，少选且正确得1分，不选或错选倒扣2分，问这种评分方式下小王将得多少分？（    ）<p>x+y+z = 30<br>3x + y - z = 50</p><p>求：<strong>4x + y - 2z</strong></p><div class="note info"><p><em>令x=0、y=40、z=-10</em>, 答案60</p></div></div></div></div></div><div class="tab-pane active" id="不定方程-2"></div><div class="tab-pane" id="不定方程-3"></div></div></div><h3 id="周期问题"><a href="#周期问题" class="headerlink" title="周期问题"></a>周期问题</h3><div class="tabs" id="周期问题"><ul class="nav-tabs"><li class="tab active"><a href="#周期问题-1">步骤</a></li><li class="tab"><a href="#周期问题-2">实例</a></li><li class="tab"><a href="#周期问题-3">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="周期问题-1"><div class="note danger"><ol><li>确定周期，注意<strong>每隔</strong>，N+1</li><li>计算最小公倍数，可以两两计算</li><li>总数&lt;最小公倍数&gt; ➗ 周期，看商和<strong>余数</strong></li></ol></div></div><div class="tab-pane" id="周期问题-2"><img data-src="04.png" width=80% /></div><div class="tab-pane" id="周期问题-3"><img data-src="03.png" width=80% /></div></div></div><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><p><strong>分别有周期，求同时发生</strong></p><img data-src="05.png" width=80% /><p>每隔 <strong>N</strong> 天，即 每隔 <strong>N+1</strong> 天</p><img data-src="06.png" width=80% /><h3 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h3><div class="tabs" id="等差数列"><ul class="nav-tabs"><li class="tab active"><a href="#等差数列-1">公式</a></li><li class="tab"><a href="#等差数列-2">事例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="等差数列-1"><div class="note warning"><p>和  = （首项 + 未项）/ 2 * 项数<br>    = 中位数 * 项数<br>    = 平均数 * 项数</p><p>第 N 项 = 第一项 + (n-1) *公差</p><div class="note success"><ol><li>1-10 共 10-1+1 = 10位</li><li>3-10 共 10-3+1 = 8位</li><li>1-9 中间位 （9+1）/2 = 5</li><li>1-10 中间位 （10+1） /2</li></ol></div></div></div><div class="tab-pane" id="等差数列-2"></div></div></div><img data-src="07.png" width=80% /><img data-src="08.png" width=80% /><img data-src="09.png" width=80% /><h2 id="工程问题"><a href="#工程问题" class="headerlink" title="工程问题"></a>工程问题</h2><p><span id="inline-blue"> 特征 </span></p><ol><li>若干个人干活</li><li>完成工程</li><li>就是多人干活</li><li>就是多人干活</li></ol><p><span id="inline-purple"> 公式 </span></p><p><strong>工作总量=工作效率 X 工作时间</strong></p><p><span id="inline-yellow"> 常用方法 </span></p><img data-src="17.png" width=80% /><h3 id="工作总量"><a href="#工作总量" class="headerlink" title="工作总量"></a>工作总量</h3><ol><li>赋值<strong>总量</strong>为<strong>时间</strong>的<code>公倍数</code></li><li>计算工作效率</li><li>按题目要求完成计算</li></ol><img data-src="11.png" width=80% /><p><strong>⚠️：找等量关系，一定按步骤做题</strong></p><p><span id="inline-blue"> 等量关系找不到再找 </span></p><div class="tabs" id="工作总量"><ul class="nav-tabs"><li class="tab active"><a href="#工作总量-1">题目一</a></li><li class="tab"><a href="#工作总量-2">解析</a></li></ul><div class="tab-content"><div class="tab-pane active" id="工作总量-1"><img data-src="94.png" width=80% /></div><div class="tab-pane" id="工作总量-2"><div class="note danger">为啥不直接用总时间？而是列时间等式<div class="note info"><ol><li>因为中间有人休息，6 小时是两人共同完成的时间✅</li><li>等式是需要根据实际的情况而获得🉐️</li></ol></div><div class="note success">找等式；等量关系是映射到真实的数据之前的关系</div><div class="note primary"><p>最终需要<code>映射</code>为真实的数据</div></p></div><img data-src="12.png" width=80% /></div></div></div><h4 id="工作总量-amp-最优解"><a href="#工作总量-amp-最优解" class="headerlink" title="工作总量 &amp; 最优解"></a>工作总量 &amp; 最优解</h4><div class="tabs" id="工作总量最优解"><ul class="nav-tabs"><li class="tab active"><a href="#工作总量最优解-1">习题</a></li><li class="tab"><a href="#工作总量最优解-2">解析</a></li></ul><div class="tab-content"><div class="tab-pane active" id="工作总量最优解-1"><img data-src="95.png" width=80% /></div><div class="tab-pane" id="工作总量最优解-2"><div class="note warning">原则问题<div class="note success"><ul><li><p>工程量的原则不变；</p></li><li><p>各自负责擅长的</p></li><li><p>✅完成自己负责的，去帮助他人</p></li></ul></div></div><img data-src="96.png" width=80% /></div></div></div><h3 id="工作效率"><a href="#工作效率" class="headerlink" title="工作效率"></a>工作效率</h3><div class="tabs" id="工作效率"><ul class="nav-tabs"><li class="tab active"><a href="#工作效率-1">习题 1</a></li><li class="tab"><a href="#工作效率-2">习题 2</a></li><li class="tab"><a href="#工作效率-3">习题 3</a></li><li class="tab"><a href="#工作效率-4">习题 4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="工作效率-1"><img data-src="13.png" width=80% /></div><div class="tab-pane" id="工作效率-2"><img data-src="14.png" width=80% /></div><div class="tab-pane" id="工作效率-3"><img data-src="15.png" width=80% /></div><div class="tab-pane" id="工作效率-4"><img data-src="16.png" width=80% /></div></div></div><h3 id="等量关系"><a href="#等量关系" class="headerlink" title="等量关系"></a>等量关系</h3><div class="tabs" id="等量关系"><ul class="nav-tabs"><li class="tab active"><a href="#等量关系-1">未知数 习题</a></li><li class="tab"><a href="#等量关系-2">未知数 解析</a></li><li class="tab"><a href="#等量关系-3">计算时间问题</a></li><li class="tab"><a href="#等量关系-4">计算时间问题</a></li></ul><div class="tab-content"><div class="tab-pane active" id="等量关系-1"><img data-src="97.png" width=80% /></div><div class="tab-pane" id="等量关系-2"><div class="note info"><p>遇到问题不要慌，就是<code>等量关系就是总量</code></div><br><img data-src="98.png" width=80% /></p></div><div class="tab-pane" id="等量关系-3"><div class="note success"><p>如果<code>同时开始、结束</code>，则要考虑计算总时间，与<code>题目一</code>正好相反</p></div><img data-src="99.png" width=80% /></div><div class="tab-pane" id="等量关系-4"><img data-src="100.png" width=80% /></div></div></div><hr><img data-src="17.png" title="总结" width=80% /><h2 id="集合容斥"><a href="#集合容斥" class="headerlink" title="集合容斥"></a>集合容斥</h2><div class="tabs" id="集合容斥"><ul class="nav-tabs"><li class="tab active"><a href="#集合容斥-1">公式</a></li><li class="tab"><a href="#集合容斥-2">事例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="集合容斥-1"><ol><li>两个集合公式：<strong>总数-两者都不=A+B-AB</strong></li><li>三个集合标准公式：<ol><li>总数-三个都不 = <code>A+B+C - AB - AC — BC + ABC</code></li></ol></li><li>三个集合变形公式<ol><li>总数-三个都不 = <code>A+B+C - 同时两者 - 2ABC</code></li><li>ABC 加了三遍，只需要留一个，故 <strong>-2ABC</strong></li></ol></li><li>文氏图 <strong>《只满足某一项》</strong><ol><li>画图</li><li>从中心向外层，填数字</li></ol></li></ol></div><div class="tab-pane" id="集合容斥-2"><img data-src="18.png" width=80% /><img data-src="19.png" width=80% /><img data-src="20.png" width=80% /><img data-src="21.png" width=80% /><img data-src="22.png" width=80% /></div></div></div><h3 id="文氏图"><a href="#文氏图" class="headerlink" title="文氏图"></a>文氏图</h3><img data-src="23.png" width=80% /><img data-src="24.png" width=80% /><h2 id="经济利润问题"><a href="#经济利润问题" class="headerlink" title="经济利润问题"></a>经济利润问题</h2><p>利润率 = 利润 / 成本 = （售价 -成本）/ 成本</p><p>打几折： 原价*零点几 </p><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><img data-src="25.png" width=80% /><h3 id="部分打折-🚩"><a href="#部分打折-🚩" class="headerlink" title="部分打折 🚩"></a>部分打折 🚩</h3><p><strong>总利润=每部分利润之和</strong></p><img data-src="26.png" width=80% /><img data-src="27.png" width=80% /><img data-src="28.png" width=80% /><h3 id="分段计费"><a href="#分段计费" class="headerlink" title="分段计费"></a>分段计费</h3><p><span id="inline-blue"> 找准分段点，分段计算 </span></p><img data-src="29.png" width=80% /><h2 id="最值问题"><a href="#最值问题" class="headerlink" title="最值问题"></a>最值问题</h2><h3 id="最值问题-1"><a href="#最值问题-1" class="headerlink" title="最值问题"></a>最值问题</h3><div class="tabs" id="最值问题概念"><ul class="nav-tabs"><li class="tab active"><a href="#最值问题概念-1">最值概念</a></li><li class="tab"><a href="#最值问题概念-2">最不利构造🚩</a></li><li class="tab"><a href="#最值问题概念-3">结合组合</a></li><li class="tab"><a href="#最值问题概念-4">溜溜</a></li></ul><div class="tab-content"><div class="tab-pane active" id="最值问题概念-1"><div class="note danger"><ol><li>至多</li><li>至少</li><li>最多</li><li>做少</li><li><strong>至少+保证</strong> — 最不利构造</div></li></ol></div><div class="tab-pane" id="最值问题概念-2"><div class="note danger"><p>原则：<strong>气死</strong></p><p><em>方式</em></p><ol><li>想要什么不给什么</li><li>想要 N，先给 <strong>N-1</strong></li><li>不需要的东西统统给</div></li></ol><p><span id="inline-yellow"> 答案：气死之后加 1 </span></p><img data-src="30.png" width=80% /><img data-src="31.png" width=80% /></div><div class="tab-pane" id="最值问题概念-3"><img data-src="33.png" width=80% /><div class="note warning"><p><strong>转为简单的问题</strong><br><img data-src="34.png" width=80% /></p></div><div class="note success"><p><strong>至少报一个，将报名一个、二个、三个、四个、五个</strong>的情况相加。</p><p><em>C5·1 + C5·2 + C5·3 + C5·4 + 1</em> 这就是球球数量；</p><p><code>数量*（N-1）+ 1 = 31*3=1 = 94</code></p></div></div><div class="tab-pane" id="最值问题概念-4"><div class="note danger"><blockquote><p>2 的 5 次方-1<br>这样计算总数很溜</p></blockquote><img data-src="35.png" width=80% /></div></div></div></div><h3 id="数列构造"><a href="#数列构造" class="headerlink" title="数列构造"></a>数列构造</h3><div class="tabs" id="数列构造"><ul class="nav-tabs"><li class="tab active"><a href="#数列构造-1">数列构造</a></li><li class="tab"><a href="#数列构造-2">示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="数列构造-1"><details warning><summary> <p>送分题</p> </summary>              <div class='content'>              <p><span id="inline-yellow"> 题干特征 </span></p><p><code>固定总和，分成若干份，求其中某一项的最值</code></p><p><span id="inline-blue"> 步骤 </span></p><div class="note danger"><ol><li>编号</li><li>求谁设谁</li><li>按要求完成构造、求解</div></li></ol>              </div>            </details></div><div class="tab-pane" id="数列构造-2"><img data-src="36.png" width=80% /><img data-src="37.png" width=80% /></div></div></div><h3 id="多集合反向构造-🌈"><a href="#多集合反向构造-🌈" class="headerlink" title="多集合反向构造 🌈"></a>多集合反向构造 🌈</h3><div class="tabs" id="多集合问题"><ul class="nav-tabs"><li class="tab active"><a href="#多集合问题-1">多集合</a></li><li class="tab"><a href="#多集合问题-2">送分题</a></li></ul><div class="tab-content"><div class="tab-pane active" id="多集合问题-1"><details warning><summary> <p>送分题</p> </summary>              <div class='content'>              <div class="note warning"><span id="inline-blue"> 特征 </span><ol><li>已知<code>若干单个集合</code></li><li>求<code>最中心</code>的<code>最小值</code></li><li><code>没有相交</code></li></ol><p><span id="inline-purple"> 步骤 </span></p><p><code>反向、求和、做差</code></p><p><strong>减 加 减</strong></p></div>              </div>            </details></div><div class="tab-pane" id="多集合问题-2"><img data-src="38.png" width=80% /></div></div></div><h2 id="趣味杂题"><a href="#趣味杂题" class="headerlink" title="趣味杂题"></a>趣味杂题</h2><h3 id="指数取余数"><a href="#指数取余数" class="headerlink" title="指数取余数"></a>指数取余数</h3><div class="tabs" id="指数问题"><ul class="nav-tabs"><li class="tab active"><a href="#指数问题-1">指数尾数</a></li></ul><div class="tab-content"><div class="tab-pane active" id="指数问题-1"><div class="note warning"><p><strong>乘方尾数口诀：指数除以4，取余数，如果整除，取4；底数保留个位即可。</strong></p><img data-src="38.png" title="送分题" width=80% /></div></div></div></div><h3 id="两两求和问题"><a href="#两两求和问题" class="headerlink" title="两两求和问题"></a>两两求和问题</h3><div class="tabs" id="两两求和问题"><ul class="nav-tabs"><li class="tab"><a href="#两两求和问题-1">题型</a></li><li class="tab active"><a href="#两两求和问题-2">题型一</a></li><li class="tab"><a href="#两两求和问题-3">题型二</a></li></ul><div class="tab-content"><div class="tab-pane" id="两两求和问题-1"><p><strong>题型特性</strong></p><ol><li><p>不同的数、组成不同的和。总的有Cn-2个，不重要。</p></li><li><p>默认为⼩到⼤排列。</p></li><li><p>⼤ DE 45 ⼤ CE 42 ⼩ AB 17 ⼩ 25 如果求A与E的差，直接25-17 3⃣ 该题⽬需要计算全部的。⼩ BC = 28 进⼀步就可以解的答案，不难。</p></li><li><p><em>但不要慌，加减法要快。</em></p></li></ol></div><div class="tab-pane active" id="两两求和问题-2"><div class="note warning"><p><strong>数量小，罗列出所有的可能性</strong></p><p>某疗养院同一个房间的四位病友，把他们的年龄（均为整数）两两相加得到6个不同的数，已知其中5个数为：99，113，125，130，144，四人中年龄最大者与年龄最小者岁数之和为（    ）岁。</p><div class="note info">计算</div></div></div><div class="tab-pane" id="两两求和问题-3"><p><strong>数量大，直接推导，很可能直接就出来了</strong></p><div class="note success">A、B、C、D、E是5个不同的整数，两两相加的和共有8个不同的数值，分别是17、25、28、31、34、39、42、45，则这5个数中能被6整除的有几个？（    ）<p><strong>看题型</strong></p></div></div></div></div><h3 id="年龄问题"><a href="#年龄问题" class="headerlink" title="年龄问题"></a>年龄问题</h3><div class="tabs" id="时钟问题"><ul class="nav-tabs"><li class="tab active"><a href="#时钟问题-1">公式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="时钟问题-1"><img data-src="105.png" width=80% /></div></div></div><h3 id="比赛问题"><a href="#比赛问题" class="headerlink" title="比赛问题"></a>比赛问题</h3><div class="tabs" id="比赛问题"><ul class="nav-tabs"><li class="tab active"><a href="#比赛问题-1">简单</a></li><li class="tab"><a href="#比赛问题-2">复杂🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="比赛问题-1"><div class="note warning">乒乓球世界杯锦标赛上，中国队、丹麦队、日本队和德国队分在一个小组，每两个队之间都要比赛1场，已知日本队已比赛了1场，德国队已比赛了2场，中国队已比赛了3场，则丹麦队还有几场比赛未比？（    ）<div class="note success">把N个元素画成钟表的样⼦，互相连线，⼀般都是每两个必须，还有⼀个全部的。 快速连线，计算结果就⾏了。</div></div></div><div class="tab-pane" id="比赛问题-2"><div class="note danger">8个人比赛国际象棋，约定每两人之间都要比赛一局，胜者得2分，平局得1分，负的不得分。在进行了若干局比赛之后，发现每个人的分数都不一样。问最多还有几局比赛没比？（    ）<img data-src="106.png" width=80% /></div></div></div></div><h3 id="空瓶换酒"><a href="#空瓶换酒" class="headerlink" title="空瓶换酒"></a>空瓶换酒</h3><div class="tabs" id="空瓶换水"><ul class="nav-tabs"><li class="tab active"><a href="#空瓶换水-1">公式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="空瓶换水-1"><div class="note danger">12个啤酒空瓶可以免费换1瓶啤酒，现有101个啤酒空瓶，最多可以免费喝到的啤酒数为（    ）。<p>A.10瓶<br>B.11瓶<br>C.8瓶<br>D.9瓶</p><p>6个空瓶可以换一瓶汽水，某班同学喝了157瓶汽水，其中有一些是用喝剩下来的空瓶换的，那么他们至少要买多少瓶汽水？（    ）<br>A. 131<br>B. 130<br>C. 128<br>D. 127</p><div class="note success"><p><strong>牢记公式： M/N-1</strong></p><ol><li>N个空瓶 &lt;-&gt; 1 水</li><li>共M个空瓶 可以得多少水？</li><li>记得取整数。</li><li>如果7换2 =》 3.5=》1</li></ol><div class="note primary"><p><strong>事例二，灵活运用公式</strong></p><ol><li>灵活运用公式</li><li>找等量关系，买的+换的=总的</li><li>买<em>X</em></li><li>X又可以换 X/5 </li><li>X+X/5=157</li></ol></div></div></div></div></div></div><h3 id="天平问题"><a href="#天平问题" class="headerlink" title="天平问题"></a>天平问题</h3><div class="tabs" id="天平问题"><ul class="nav-tabs"><li class="tab active"><a href="#天平问题-1">天平问题 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="天平问题-1"><div class="note danger"><p>有一架天平，只有<em>5克和30克</em>的砝码各一个。现在要用这架天平把<em>300克</em>味精<em>平均分成3份</em>，那么至少需要称多少次？（    ）</p><div class="note success"><p><strong>称好的可以当砝码。</strong></p><p>第⼀次：⽤所有的砝码，获得35g味精；<br>第⼆次：砝码：35g的味精+30g的砝码 = 称出：65；共100g;<br>第三次：<em>剩下的200直接左右平分</em></p><div class="note primary"><p>考试应该不会太难，<strong>多看几遍，操作流程</strong><br>应该就是就是</p><ol><li>最后一次，左右平分；</li><li>前面的次数，最快计算出一份的次数。<ol><li>以第一称出来的为基准，第二次向总数靠。</li></ol></li></ol></div></div></div></div></div></div><h3 id="时钟问题"><a href="#时钟问题" class="headerlink" title="时钟问题"></a>时钟问题</h3><div class="tabs" id="时钟问题"><ul class="nav-tabs"><li class="tab active"><a href="#时钟问题-1">公式</a></li><li class="tab"><a href="#时钟问题-2">实例一</a></li><li class="tab"><a href="#时钟问题-3">实例一</a></li><li class="tab"><a href="#时钟问题-4">实例一</a></li></ul><div class="tab-content"><div class="tab-pane active" id="时钟问题-1"><div class="note danger"><p><strong>表盘上的常识：</strong></p><p>表盘一圈分成了12大格（60小格），时针每小时转1大格，分针每小时转12大格（60小格）。</p><ol><li>度数：<em>1大格30°，1小格6°</em></li><li>速度：<ol><li>时针的速度：每分钟走<em>0.5°</em>；</li><li>分针的速度：每分钟走6°。</li><li><strong>两者速度差5.5°/分钟</strong></li></ol></li></ol><div class="note warning"><p>公式：</p><ol><li>N点M分的夹角：<strong>Nx30度 - Mx5.5度</strong></li><li>套用路程公式<ol><li>追及问题</li><li>三点的夹角90度，19分，分针超过时针，</li><li>速度差*时间 = 路程差</li><li>路程差-90度</li></ol></li></ol></div><div class="note success">3点19分时，时钟上的时针与分针所构成的锐角为几度：<p>A．14度<br>B．14.5度<br>C．15度<br>D．15.5度</p></div></div></div><div class="tab-pane" id="时钟问题-2"><img data-src="40.png" width=80% /></div><div class="tab-pane" id="时钟问题-3"><img data-src="41.png" width=80% /></div><div class="tab-pane" id="时钟问题-4"><img data-src="42.png" width=80% /></div></div></div><h3 id="挑小球问题"><a href="#挑小球问题" class="headerlink" title="挑小球问题"></a>挑小球问题</h3><div class="note danger"><p>记住：3的n次方；<br>原理：三个小球，一次可以，超过三个的按三个一组即可。</p><img data-src="101.png" width=80% /></div><h3 id="牛吃草问题"><a href="#牛吃草问题" class="headerlink" title="牛吃草问题"></a>牛吃草问题</h3><div class="tabs" id="牛吃草"><ul class="nav-tabs"><li class="tab active"><a href="#牛吃草-1">公式</a></li><li class="tab"><a href="#牛吃草-2">实例一</a></li><li class="tab"><a href="#牛吃草-3">实例一</a></li><li class="tab"><a href="#牛吃草-4">实例一</a></li></ul><div class="tab-content"><div class="tab-pane active" id="牛吃草-1"><img data-src="39.png" width=80% /></div><div class="tab-pane" id="牛吃草-2"><img data-src="40.png" width=80% /></div><div class="tab-pane" id="牛吃草-3"><img data-src="41.png" width=80% /></div><div class="tab-pane" id="牛吃草-4"><img data-src="42.png" width=80% /></div></div></div><h3 id="溶液问题-🌈"><a href="#溶液问题-🌈" class="headerlink" title="溶液问题 🌈"></a>溶液问题 🌈</h3><div class="tabs" id="溶液问题"><ul class="nav-tabs"><li class="tab active"><a href="#溶液问题-1">公式</a></li><li class="tab"><a href="#溶液问题-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="溶液问题-1"><div class="note danger"><div class="note success">直接列方程</div><p>基本公式：</p><p>溶液（盐水）＝溶质（盐）+溶剂（水）；</p><p>浓度＝溶质÷溶液；</p><p>常考题型及入手点：</p><p>①蒸发稀释类：<strong>溶质不变</strong></p><p>②溶液混合类：<strong>混合前后总溶质相等</strong></p><p>③反复操作类：<strong>总溶液不变</strong>，计算剩余溶质</p><p><em>两杯溶液来回折腾</em></p></div></div><div class="tab-pane" id="溶液问题-2"><img data-src="43.png" width=80% /><img data-src="44.png" width=80% /><img data-src="45.png" width=80% /></div></div></div><h3 id="余数同余问题"><a href="#余数同余问题" class="headerlink" title="余数同余问题"></a>余数同余问题</h3><p><span id="inline-blue"> 特征 </span></p><p><strong>除以几余几、除以几余几、除以几余几</strong></p><p><span id="inline-purple"> 步骤 </span></p><ol><li>最小公倍数</li><li>余数相同取余数，<ol><li>9…4; 3…4</li><li><strong>27N+4</strong></li></ol></li><li>差同取差<ol><li>7…4; 9…6</li><li><strong>63N-2</strong></li></ol></li><li>和同加和<ol><li>1…4; 2…3</li><li><strong>2N+5</strong></li></ol></li><li>没有以上规律<ol><li>两两比较，看是否有以上关系，</li><li>如果各不相同</li><li>看下侧实例</li></ol></li></ol><span id="inline-purple"> 在 1000 以内，除以 3 余 2，除以 7 余 3，除以 11 余 4 的数有几个？</span><ol><li>任何两个都没有以上关系，同余、差同、和同</li><li>设 11X+4 【从大数开始】<ol><li>从 0 代入简单的数：4、15、26、37</li><li>26 除以 3 余 2</li><li>得：11&amp;3 的公倍数+26 = <strong>33N + 26</strong></li><li>从 0 代入：26、59、</li><li>59 除以 7 余 3</li><li>得：33&amp;7 的公倍数+59 = <strong>231N + 59</strong></li><li>得到最终的公式后，从 0 代入</li><li>0-4 共 5 个数字。直接用 1000/231 的个数字比较一下就可以找有几个 N 了。</li></ol></li></ol><img data-src="46.png" width=80% /><img data-src="47.png" width=80% /><h3 id="时间问题-🚩"><a href="#时间问题-🚩" class="headerlink" title="时间问题 🚩"></a>时间问题 🚩</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">基本概念</a></li><li class="tab"><a href="#-2">星期</a></li><li class="tab"><a href="#-3">日期</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><ol><li>平年：年份不能被 4 整除</li><li>闰年：<strong>年份能被 4 整除 &amp; 还能被 400 整除</strong></li><li>大月：1、3、5、7、8、10、12 【<strong>共 7 个</strong>】</li><li>小月：4、6、9、11 【<strong>共四个</strong>】</li><li>2 月：28、29</li></ol></div><div class="tab-pane" id="-2"><img data-src="48.png" width=80% /></div><div class="tab-pane" id="-3"><img data-src="49.png" width=80% /><img data-src="50.png" width=80% /></div></div></div><h2 id="排列组合与概率"><a href="#排列组合与概率" class="headerlink" title="排列组合与概率"></a>排列组合与概率</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><div class="tabs" id="排列组合与概率"><ul class="nav-tabs"><li class="tab active"><a href="#排列组合与概率-1">基本认识</a></li><li class="tab"><a href="#排列组合与概率-2">实例</a></li><li class="tab"><a href="#排列组合与概率-3">概念公式🚩</a></li><li class="tab"><a href="#排列组合与概率-4">公式🚩</a></li><li class="tab"><a href="#排列组合与概率-5">例子</a></li><li class="tab"><a href="#排列组合与概率-6">例子</a></li><li class="tab"><a href="#排列组合与概率-7">麻烦点的</a></li></ul><div class="tab-content"><div class="tab-pane active" id="排列组合与概率-1"><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652666670&idx=3&sn=f6bdfb4a1e50cda2ade6cdcd5a86d27d&chksm=f12e6d0dc659e41bf2c7b2d112887fa3c17cd887a88c59f143088dcf5fa7c67d0d3f02ca6e46&scene=21#wechat_redirect" target="_blank" rel="noopener">待学习</a></p><img data-src="52.png" width=80% /></div><div class="tab-pane" id="排列组合与概率-2"><img data-src="53.png" width=80% /></div><div class="tab-pane" id="排列组合与概率-3"><img data-src="54.png" width=80% /></div><div class="tab-pane" id="排列组合与概率-4"><img data-src="55.png" width=80% /></div><div class="tab-pane" id="排列组合与概率-5"><img data-src="56.png" width=80% /></div><div class="tab-pane" id="排列组合与概率-6"><img data-src="57.png" width=80% /></div><div class="tab-pane" id="排列组合与概率-7"><img data-src="58.png" width=80% /></div></div></div><h3 id="捆绑插空"><a href="#捆绑插空" class="headerlink" title="捆绑插空"></a>捆绑插空</h3><ol><li>捆绑：在一起、相邻、挨着</li><li>插空：不相邻</li></ol><div class="tabs" id="捆绑问题"><ul class="nav-tabs"><li class="tab active"><a href="#捆绑问题-1">理解</a></li><li class="tab"><a href="#捆绑问题-2">实例</a></li><li class="tab"><a href="#捆绑问题-3">重点词</a></li></ul><div class="tab-content"><div class="tab-pane active" id="捆绑问题-1"><img data-src="59.png" width=80% /></div><div class="tab-pane" id="捆绑问题-2"><img data-src="60.png" width=80% /></div><div class="tab-pane" id="捆绑问题-3"><img data-src="61.png" width=80% /></div></div></div><h3 id="计算反面"><a href="#计算反面" class="headerlink" title="计算反面"></a>计算反面</h3><p><strong>正面情况复杂</strong></p><img data-src="62.png" width=80% /><h3 id="错位排列-🌈"><a href="#错位排列-🌈" class="headerlink" title="错位排列 🌈"></a>错位排列 🌈</h3><div class="note success"><p><em>识别： 不能《》自己</em></p><p>不在自己原来的位置</p><div class="note primary"><p>送分题不能丢<br>送分题不能丢<br>送分题不能丢</p></div><ol><li>D2 = 1;</li><li>D3 = 2;</li><li><strong>D4 = 9;</strong></li><li><strong>D5 = 44;</strong></li><li>D6 = 265;</li></ol></div> <div class="tabs" id="错误排列"><ul class="nav-tabs"><li class="tab"><a href="#错误排列-1">牢记公式</a></li><li class="tab active"><a href="#错误排列-2">牢记公式</a></li><li class="tab"><a href="#错误排列-3">实例 🚩</a></li></ul><div class="tab-content"><div class="tab-pane" id="错误排列-1"><img data-src="63.png" width=80% /></div><div class="tab-pane active" id="错误排列-2"><img data-src="64.png" width=80% /></div><div class="tab-pane" id="错误排列-3"><div class="note warning"><p>书架某层按一定顺序摆放了8本不同的书，把这些书重新摆放后，恰好有5本书与原来顺序不相同，问有多少种可能的情况？</p><div class="note success"><ol><li>分两步计算<ol><li>三本位置相同，8选3，C8-3 = 44</li><li><em>5本书与原来顺序不相同</em>，转换为错位排列问题，D5 = 44.</li></ol></li></ol></div></div></div></div></div><h3 id="环形排列"><a href="#环形排列" class="headerlink" title="环形排列"></a>环形排列</h3><div class="tabs" id="环形排列"><ul class="nav-tabs"><li class="tab"><a href="#环形排列-1">理解</a></li><li class="tab active"><a href="#环形排列-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane" id="环形排列-1"><img data-src="65.png" width=80% /></div><div class="tab-pane active" id="环形排列-2"><img data-src="66.png" width=80% /></div></div></div><h3 id="概率-🚩"><a href="#概率-🚩" class="headerlink" title="概率 🚩"></a>概率 🚩</h3><div class="note primary"><ol><li>概率=满足要求的数量 / 总情况数量🚩</li><li>成立的概率 = 1 - 不成功的概率</li><li>分步概率 = 满足条件的每个步骤的概率<strong>之积</strong> – 类似 排列组合分步。</li><li>总体（分类）概率 = 满足条件的各个情况概率<code>之和</code>;</li></ol><p>已知概率用 234 就行；<br>数量用 1 就行；</p></div><img data-src="69.png" width=80% /><img data-src="67.png" width=80% /><img data-src="70.png" width=80% /><h2 id="行程问题"><a href="#行程问题" class="headerlink" title="行程问题"></a>行程问题</h2><img data-src="71.png" width=80% /><h3 id="火车过桥问题"><a href="#火车过桥问题" class="headerlink" title="火车过桥问题"></a>火车过桥问题</h3><div class="tabs" id="过桥问题"><ul class="nav-tabs"><li class="tab active"><a href="#过桥问题-1">概念</a></li><li class="tab"><a href="#过桥问题-2">事例一</a></li><li class="tab"><a href="#过桥问题-3">事例二</a></li></ul><div class="tab-content"><div class="tab-pane active" id="过桥问题-1"><img data-src="74.png" width=80% /><p><strong>过桥：总路程 = 桥长 + 车长</strong></p><p><strong>完全在桥上：走过的路程=桥城-车长</strong></p></div><div class="tab-pane" id="过桥问题-2"><img data-src="72.png" width=80% /></div><div class="tab-pane" id="过桥问题-3"><img data-src="107.png" width=80% /></div></div></div><h3 id="相遇问题"><a href="#相遇问题" class="headerlink" title="相遇问题"></a>相遇问题</h3><p><strong>路程和=速度和*时间</strong></p><img data-src="73.png" width=80% /><img data-src="74.png" width=80% /><img data-src="75.png" width=80% /><h3 id="环形相遇追及"><a href="#环形相遇追及" class="headerlink" title="环形相遇追及"></a>环形相遇追及</h3><div class="tabs" id="环形相遇追及"><ul class="nav-tabs"><li class="tab active"><a href="#环形相遇追及-1">环形</a></li><li class="tab"><a href="#环形相遇追及-2">实例</a></li><li class="tab"><a href="#环形相遇追及-3">追及 🚩🚩</a></li><li class="tab"><a href="#环形相遇追及-4">实例</a></li><li class="tab"><a href="#环形相遇追及-5">狗子乱跑问题 🐶</a></li></ul><div class="tab-content"><div class="tab-pane active" id="环形相遇追及-1"><div class="note danger"><ol><li>同向相遇，多N圈，（快-慢）t = 一圈的路程</li><li>相向相遇，一圈，（快+慢）t = 一圈的路程</div><img data-src="76.png" width=80% /></li></ol></div><div class="tab-pane" id="环形相遇追及-2"><img data-src="77.png" width=80% /></div><div class="tab-pane" id="环形相遇追及-3"><div class="note success"><p><strong>多次追及问题，路程总和=(2N-1)*S</strong></p><div class="note warning">分两种情况<ol><li>从两侧出发，公式<strong>路程总和=(2N-1)*S</strong></li><li>同一侧出发，第一次<strong>2S、4S、6S</strong>，<em>2N*S</em></li></ol></div></div><img data-src="79.png" width=80% /></div><div class="tab-pane" id="环形相遇追及-4"><img data-src="78.png" width=80% /><img data-src="80.png" width=80% /></div><div class="tab-pane" id="环形相遇追及-5"><div class="note success"><p>别被问题干扰了，<strong>牢记基本公式</strong>；<br><strong>S=VT</strong>， 狗子的速度有了，就缺时间了，两个相遇的时间就是<em>狗子的时间</em></p><blockquote><p>类似题目，行程确定公式，找等量关系、时间、速度。<br><img data-src="102.png" width=80% /></p></blockquote></div></div></div></div><h3 id="流水行船"><a href="#流水行船" class="headerlink" title="流水行船"></a>流水行船</h3><p>顺水速度 = 船速 + 水速</p><p>逆水速度 = 船速 - 水速</p><img data-src="81.png" width=80% /><h3 id="两岸问题"><a href="#两岸问题" class="headerlink" title="两岸问题"></a>两岸问题</h3><div class="tabs" id="两岸"><ul class="nav-tabs"><li class="tab active"><a href="#两岸-1">公式推导</a></li><li class="tab"><a href="#两岸-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="两岸-1"><img data-src="103.png" width=80% /></div><div class="tab-pane" id="两岸-2"><div class="note warning"><img data-src="104.png" width=80% /></div></div></div></div><h2 id="几何问题"><a href="#几何问题" class="headerlink" title="几何问题"></a>几何问题</h2><div class="tabs" id="几何问题"><ul class="nav-tabs"><li class="tab active"><a href="#几何问题-1">公式</a></li><li class="tab"><a href="#几何问题-2">公式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="几何问题-1"><img data-src="82.png" width=80% /></div><div class="tab-pane" id="几何问题-2"><img data-src="83.png" width=80% /><img data-src="84.png" width=80% /><img data-src="85.png" width=80% /><img data-src="86.png" width=80% /><img data-src="87.png" width=80% /><img data-src="88.png" width=80% /><img data-src="89.png" width=80% /><img data-src="90.png" width=80% /><img data-src="91.png" width=80% /><img data-src="92.png" width=80% /><img data-src="93.png" width=80% /></div></div></div><h4 id="拿分题"><a href="#拿分题" class="headerlink" title="拿分题"></a>拿分题</h4><div class="tabs" id="几何问题"><ul class="nav-tabs"><li class="tab active"><a href="#几何问题-1">公式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="几何问题-1"><div class="note danger"><p>村官小刘负责将村委会购买的一批煤分给村中的困难户，如果给每个困难户分300千克煤，则缺500千克；<br>如果给每个困难户为250千克煤，则剩余250千克。为帮助困难户，村委会购买了多少煤？（    ）</p><p>A.5500千克<br>B.5000千克<br>C.4500千克<br>D.4000千克</p><div class="note success"><ol><li>方法一，列方恒，直接求解。可能有点绕。</li><li>前后两次，<em>人数不变<em>，</em>少分N</em> 对应 <strong>总数多M</strong> ，即 <em>人数 = M/N</em></li><li>想不来第二种，就列方程，不费时间的。</li></ol></div></div></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 数量关系 </category>
          
          <category> 考点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数量关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗素--关于智慧与道德</title>
      <link href="2020/05/19/intellect_moral/"/>
      <url>2020/05/19/intellect_moral/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/029.jpg" width=70% /><span class='geyan'> 爱是明智的，恨是愚蠢的--罗素</span><a id="more"></a><p>——1959 年答英国 BBC 广播电台访谈节选</p><p>　　BBC：最后一个问题，罗素勋爵，假定这段录像将被我们的后人看到，如同死海古卷一般，在千年后被人看见，您觉得有什么应该对他们那一代人说的呢？</p><p>　　罗素：我想要说的有两点，其一关乎智慧，其二关乎道德。有关智慧，我想对他们说的是：不管你是在研究什么事物，还是在思考任何观点，只问你自己，事实是什么，以及这些事实所证实的真理是什么。永远不要让自己被自己所更愿意相信的，或者认为人们相信了，会对社会更加有益的东西所影响，只是单单地去审视，什么才是事实，这是我想说的关乎智慧的一点。</p><p>　　我想对他们说的有关道德的一点，十分简单。我要说：爱是明智的，恨是愚蠢的。在这个日益紧密相连的世界，我们必须学会容忍彼此，我们必须学会接受这样一个事实：总会有人说出我们不想听的话。只有这样，我们才有可能共同生存，而假如我们想要共存，而非共亡，我们就必须学会这种宽容与忍让。因为它们对于人类在这个星球上的存续，是至关重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数量关系-技巧</title>
      <link href="2020/05/18/civil_servant_math_skill/"/>
      <url>2020/05/18/civil_servant_math_skill/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/010.jpg" width=50% /><span class='geyan'>    凡事行，有益于理者立之，无益于理者废之。（《荀子·儒效》）</span><a id="more"></a><h2 id="代入排除法"><a href="#代入排除法" class="headerlink" title="代入排除法"></a>代入排除法</h2><p>适用代入排除法的典型题型</p><ol><li>多位数： 几个数组成的</li><li>年龄： 选择各个年龄值</li><li>不定方程：下一部分</li><li>余数：有总数、有剩余、分东西问题</li></ol><img data-src="05.png" width=50% /><h2 id="方程与不定方程"><a href="#方程与不定方程" class="headerlink" title="方程与不定方程"></a>方程与不定方程</h2><ol><li>找等量关系<ol><li>已知总和</li><li>已知 A、B 之间的关系：A 比 B..,A 是 B…,A 与 B…</li><li>隐藏在多个条件中的不变量</li></ol></li><li>根据等量关系设未知数，列方程，</li><li>解方程</li></ol><h3 id="方程"><a href="#方程" class="headerlink" title="方程"></a>方程</h3><div class="tabs" id="方程"><ul class="nav-tabs"><li class="tab active"><a href="#方程-1">特征</a></li><li class="tab"><a href="#方程-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="方程-1"><div class="note success"><img data-src="06.png" width=50% /><img data-src="07.png" width=50% /></div></div><div class="tab-pane" id="方程-2"><div class="note danger"><p><strong>缺啥设置啥</strong><br><img data-src="08.png" width=50% /><br><img data-src="09.png" width=50% /><br><img data-src="10.png" width=50% /></p></div></div></div></div><h3 id="不定方程"><a href="#不定方程" class="headerlink" title="不定方程"></a>不定方程</h3><div class="tabs" id="不定方程"><ul class="nav-tabs"><li class="tab active"><a href="#不定方程-1">特征</a></li><li class="tab"><a href="#不定方程-2">奇偶性</a></li><li class="tab"><a href="#不定方程-3">尾数</a></li><li class="tab"><a href="#不定方程-4">倍数</a></li><li class="tab"><a href="#不定方程-5">实例</a></li><li class="tab"><a href="#不定方程-6">非整数</a></li></ul><div class="tab-content"><div class="tab-pane active" id="不定方程-1"><p>识别特征：未知数的个数多于方程的个数<br>常见类型：<em>两个未知数一个方程，三个未知数两个方程</em></p><p><span id="inline-purple"> 步骤 </span></p><ol><li>列不定方程; 再简单的问题也列出来，</li><li>数据小就试试；</li><li>分析数字特征；</li></ol><hr><ol><li>如果求两个未知数，直接<strong>带入法</strong></li><li>枚举法，数据小，就一个个试试</li></ol></div><div class="tab-pane" id="不定方程-2"><p>概念</p><ol><li>偶数：一个整数可以被 2 整除</li><li>奇数：一个整数不是偶数</li><li>质数：只能被 <strong>1 &amp; 本身</strong>整除，2、3、5、7、11</li><li>合数：除了 <strong>1 &amp; 本身</strong>以外，还能被其他整数整除 4\6\8\9</li></ol><blockquote><p>2 是唯一一个偶数质数</p></blockquote><p>运算规律</p><ol><li>奇偶相加减 = 奇数</li><li>奇数+奇数 = 奇数</li><li>偶数+偶数 = 偶数</li><li>相乘有偶数 = 偶数</li><li>相乘无偶数 = 奇数</li></ol><p><strong>例：</strong> <code>3X + 2Y = 10</code></p><ol><li>2Y = 偶数</li><li>3X <code>得是偶数</code></li><li>X 只能是偶数</li></ol></div><div class="tab-pane" id="不定方程-3"><p>尾数为 0、5，可以分析尾数法</p><p><strong>3X + 10Y = 61</strong></p><ol><li>10Y 的尾数是 0</li><li>3X 的尾数只能是 1</li><li>X = 7 17</li><li>Y = 4 1</li></ol></div><div class="tab-pane" id="不定方程-4"><p><strong>3X + 8Y = 44</strong></p><ol><li>没有共同的数的倍数是 3 44</li><li>4 的倍数 8 44</li><li>得出<strong>两项都是 4 的倍数</strong>，那么 3X 也是 4 的倍数</li><li>X = 4 的倍数 [4 8 12]</li></ol></div><div class="tab-pane" id="不定方程-5"><details ><summary> <p>实例一</p> </summary>              <div class='content'>              <div class="note success"><img data-src="11.png" width=50% /><img data-src="12.png" width=50% /><img data-src="13.png" width=50% /></div>              </div>            </details><p><span id="inline-purple"> 不定方程组 </span></p><details ><summary> <p>实例二</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="13.png" width=50% /><img data-src="14.png" width=50% /><img data-src="15.png" width=50% /></div>              </div>            </details></div><div class="tab-pane" id="不定方程-6"><p>不定方程组求整体，xyz，如果不能确定✅单位是<em>正整数&amp;求整体</em></p><ol><li>可以看出来 A - B = x+y+z, 需要能看到 AB 乘几后相减才可以</li><li>赋 0<ol><li>令任意一个未知数为 0</li><li>解方程组</li><li>得出三个未知数</li><li>验证同样是因为这组值就是确定的</li><li>三维中两个平面的相交于一条线</li></ol></li></ol><img data-src="16.png" width=50% /><img data-src="17.png" width=50% /></div></div></div><h2 id="赋值法"><a href="#赋值法" class="headerlink" title="赋值法"></a>赋值法</h2><div class="tabs" id="赋值法"><ul class="nav-tabs"><li class="tab active"><a href="#赋值法-1">特征</a></li><li class="tab"><a href="#赋值法-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="赋值法-1"><p><span id="inline-purple"> 特征 </span></p><ol><li>没有具体数值</li><li>只有<ol><li>百分数：设置100</li><li>分数：分子、分母</li><li>比例：分子、分母</li><li>倍数：转变为分数，分子分母</li></ol></li></ol></div><div class="tab-pane" id="赋值法-2"><img data-src="18.png" width=50% /><img data-src="19.png" width=50% /><img data-src="20.png" width=50% /></div></div></div><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><div class="pdfobject-container" data-target="/../../../../18数量关系-技巧/math.pdf" data-height="500px"></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 数量关系 </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数量关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推理判断-图形</title>
      <link href="2020/05/17/civil_servant_graph/"/>
      <url>2020/05/17/civil_servant_graph/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/017.jpg" width=70% /><span class='geyan'> 恐惧让你沦为囚犯，希望让你重获自由。<br>Fear can hold you prisoner, hope can set you free.<br>--《肖申克的救赎》</span><a id="more"></a><hr><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><div class="tabs" id="战略"><ul class="nav-tabs"><li class="tab active"><a href="#战略-1">总揽</a></li><li class="tab"><a href="#战略-2">一</a></li><li class="tab"><a href="#战略-3">二🚩</a></li><li class="tab"><a href="#战略-4">三</a></li></ul><div class="tab-content"><div class="tab-pane active" id="战略-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <ol><li>秒杀体系：（感觉+口诀秒杀法）</li><li>长不像时：<em>封闭、曲直、对称、部分、元素、一笔画, 外加点角</em>。</li><li>长的像时：<em>叠加、位置、遍历、拆分</em>。</li></ol><div class="note danger">所有的图形都是图形，不是字、没有具体的含义</div>              </div>            </details></div><div class="tab-pane" id="战略-2"><div class="note danger"><p><strong>封闭</strong>。</p><p>封闭是指的空间封闭图形的个数。<br><em>封闭口诀</em>：先看顺序再看总和。依然是常考规律秒杀基础。</p><hr><p><strong>曲直</strong></p><p>是指曲线条数和直线条数。<br><em>曲直口诀</em>：先数曲，再数直，曲直分开数。</p><hr><p><strong>对称</strong></p><p>分为<em>轴对称</em>，和<em>中心对称</em>。</p><p>对称口诀：对称看三点，<em>条数，方向和类型</em>。<br>通杀技巧：只需把对称轴<strong>全部画出</strong>，所有考点均能秒杀</p><hr><p><strong>部分</strong></p><p><em>是指没有重合点的为一部分</em></p><p><strong>倾向</strong>：部分最常考点集中在特殊图案，比如：图案，文字。</p></div></div><div class="tab-pane" id="战略-3"><div class="note info"><p><strong>元素</strong>：🚩🚩<br>元素是指含有不同的图形特征。（最难）<strong>知识点的叠加</strong></p><p>做题思路：<br>第一步：元素种类，<br>第二步：每一种元素个数： <em>先看加再看减去</em></p><hr><p><strong>一笔画</strong>：</p><ol><li>一笔画是一个统称，更多的时候可能选项中可能会出现两笔或者三笔；</li><li>所谓一笔画，必须是一个整体， 图形不能分。 </li></ol><p>秒杀技巧：<br>第一步：能一眼看出来直接看出来；<br>第二步：公式法：<strong>奇数点÷2=笔画数</strong>。 </p><p>例外：一、0 个奇点数为一笔画；二、如果不能整出：商+1= 笔画数。</p></div></div><div class="tab-pane" id="战略-4"><div class="note primary"><p><strong>长的像的</strong><br>叠加、位置，旋转，遍历，拆分。</p><p>此类题整体秒杀思路：<strong>特殊点入手；两难做对比。</strong></p><hr><p><strong>叠加</strong></p><p>指第一个图形与第二个图形<strong>相加</strong>的变化。<br>常考点为三种：求同去异，求异去同，黑白相加。</p><p>找一个特殊点，如一个线，相加如何；</p><hr><p><strong>位置</strong></p><p>本质是图形未发生变化，与叠加的区别</p></div></div></div></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>图形推理口诀</p><img data-src="86.png" width=70% /><hr><ol><li>考点<ol><li>位置规律</li><li>样式规律</li><li>属性规律</li><li>数量规律</li><li>空间重构</li></ol></li><li>快速定位<strong>图形特征</strong></li></ol><img data-src="04.png" width=60% /><h2 id="位置规律"><a href="#位置规律" class="headerlink" title="位置规律"></a>位置规律</h2><p><span id="inline-blue"> 特征： 元素组成相同 </span></p><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><ol><li><strong>方向</strong><ol><li>直线： 上下、左右、对角线</li><li>绕圈：顺、逆时针</li></ol></li><li><strong>步数</strong><ol><li>恒定、递增（等差）</li></ol></li></ol><div class="tabs" id="位置规律-平移"><ul class="nav-tabs"><li class="tab active"><a href="#位置规律-平移-1">示例 1</a></li><li class="tab"><a href="#位置规律-平移-2">示例 2</a></li><li class="tab"><a href="#位置规律-平移-3">示例 3</a></li><li class="tab"><a href="#位置规律-平移-4">示例 4</a></li><li class="tab"><a href="#位置规律-平移-5">示例 5</a></li><li class="tab"><a href="#位置规律-平移-6">示例 6</a></li><li class="tab"><a href="#位置规律-平移-7">示例 7</a></li><li class="tab"><a href="#位置规律-平移-8">示例 8</a></li></ul><div class="tab-content"><div class="tab-pane active" id="位置规律-平移-1"><img data-src="05.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-2"><img data-src="06.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-3"><img data-src="07.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-4"><img data-src="08.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-5"><img data-src="09.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-6"><img data-src="10.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-7"><img data-src="11.png" width=70% /></div><div class="tab-pane" id="位置规律-平移-8"><img data-src="12.png" width=70% /></div></div></div><h3 id="旋转、翻转"><a href="#旋转、翻转" class="headerlink" title="旋转、翻转"></a>旋转、翻转</h3><div class="tabs" id="旋转"><ul class="nav-tabs"><li class="tab"><a href="#旋转-1">示例1</a></li><li class="tab"><a href="#旋转-2">示例2</a></li><li class="tab active"><a href="#旋转-3">示例3</a></li><li class="tab"><a href="#旋转-4">示例4</a></li><li class="tab"><a href="#旋转-5">示例5</a></li></ul><div class="tab-content"><div class="tab-pane" id="旋转-1"><img data-src="13.png" width=70% /></div><div class="tab-pane" id="旋转-2"><img data-src="14.png" width=70% /></div><div class="tab-pane active" id="旋转-3"><img data-src="15.png" width=70% /></div><div class="tab-pane" id="旋转-4"><img data-src="16.png" width=70% /></div><div class="tab-pane" id="旋转-5"><img data-src="17.png" width=70% /></div></div></div><h2 id="样式规律"><a href="#样式规律" class="headerlink" title="样式规律"></a>样式规律</h2><p><span id="inline-blue"> 特征： 元素组成<strong>相似</strong></span></p><img data-src="18.png" width=70% /><p><span id="inline-purple">考点</span></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><div class="tabs" id="遍历"><ul class="nav-tabs"><li class="tab active"><a href="#遍历-1">示例1</a></li><li class="tab"><a href="#遍历-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="遍历-1"><img data-src="19.png" width=70% /></div><div class="tab-pane" id="遍历-2"><img data-src="20.png" width=70% /></div></div></div><h3 id="加减同异"><a href="#加减同异" class="headerlink" title="加减同异"></a>加减同异</h3><div class="tabs" id="加减同异"><ul class="nav-tabs"><li class="tab active"><a href="#加减同异-1">示例1</a></li><li class="tab"><a href="#加减同异-2">示例2</a></li><li class="tab"><a href="#加减同异-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="加减同异-1"><img data-src="21.png" width=70% /></div><div class="tab-pane" id="加减同异-2"><img data-src="22.png" width=70% /></div><div class="tab-pane" id="加减同异-3"><img data-src="23.png" width=70% /></div></div></div><h3 id="黑白-运算"><a href="#黑白-运算" class="headerlink" title="黑白 运算"></a>黑白 运算</h3><div class="tabs" id="黑白运算"><ul class="nav-tabs"><li class="tab active"><a href="#黑白运算-1">示例1</a></li><li class="tab"><a href="#黑白运算-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="黑白运算-1"><img data-src="24.png" width=70% /></div><div class="tab-pane" id="黑白运算-2"><img data-src="25.png" width=70% /></div></div></div><h2 id="属性规律"><a href="#属性规律" class="headerlink" title="属性规律"></a>属性规律</h2><img data-src="26.png" width=70% /><h3 id="对称性-🚩"><a href="#对称性-🚩" class="headerlink" title="对称性 🚩"></a>对称性 🚩</h3><img data-src="27.png" width=70% /><div class="tabs" id="对称性-基本识别，1"><ul class="nav-tabs"><li class="tab active"><a href="#对称性-基本识别，1-1">示例 1</a></li><li class="tab"><a href="#对称性-基本识别，1-2">示例 2</a></li><li class="tab"><a href="#对称性-基本识别，1-3">示例 3</a></li><li class="tab"><a href="#对称性-基本识别，1-4">示例 4</a></li><li class="tab"><a href="#对称性-基本识别，1-5">示例 5</a></li><li class="tab"><a href="#对称性-基本识别，1-6">示例 6</a></li><li class="tab"><a href="#对称性-基本识别，1-7">示例 7</a></li><li class="tab"><a href="#对称性-基本识别，1-8">对称轴数量🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="对称性-基本识别，1-1"><img data-src="34.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-2"><img data-src="29.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-3"><img data-src="30.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-4"><img data-src="31.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-5"><img data-src="32.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-6"><img data-src="33.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-7"><img data-src="28.png" width=70% /></div><div class="tab-pane" id="对称性-基本识别，1-8"><div class="note danger">对称轴数量&面</div><img data-src="88.png" width=70% /></div></div></div><div class="note success">对称轴的数量、方向明显的等腰、两侧完全相同**平行四边形**、Z、S<div class="note danger"><p>点线面，<strong>相交、重合</strong>、<strong>经过</strong>多少个面<br><img data-src="87.png" width=40% /></p></div></div><h3 id="曲直性"><a href="#曲直性" class="headerlink" title="曲直性"></a>曲直性</h3><p><strong>圆 弧</strong></p><div class="tabs" id="曲直性质-1"><ul class="nav-tabs"><li class="tab active"><a href="#曲直性质-1-1">示例 1</a></li><li class="tab"><a href="#曲直性质-1-2">示例 2</a></li><li class="tab"><a href="#曲直性质-1-3">实例 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="曲直性质-1-1"><img data-src="35.png" width=70% /></div><div class="tab-pane" id="曲直性质-1-2"><img data-src="36.png" width=70% /></div><div class="tab-pane" id="曲直性质-1-3"><div class="note success"> <p>明显的曲直性质，要考虑<em>数量运算</em> </div><br><img data-src="89.png" width=70% /></p></div></div></div><h3 id="开闭性"><a href="#开闭性" class="headerlink" title="开闭性"></a>开闭性</h3><img data-src="37.png" width=70% /><h2 id="数量规律"><a href="#数量规律" class="headerlink" title="数量规律"></a>数量规律</h2><img data-src="38.png" width=70% /><h3 id="点数量"><a href="#点数量" class="headerlink" title="点数量"></a>点数量</h3><div class="tabs" id="点性质"><ul class="nav-tabs"><li class="tab"><a href="#点性质-1">性质 1</a></li><li class="tab active"><a href="#点性质-2">性质 2</a></li><li class="tab"><a href="#点性质-3">示例</a></li></ul><div class="tab-content"><div class="tab-pane" id="点性质-1"><img data-src="39.png" width=70% /></div><div class="tab-pane active" id="点性质-2"><img data-src="40.png" width=70% /></div><div class="tab-pane" id="点性质-3"><img data-src="41.png" width=70% /></div></div></div><h4 id="曲直交点-🚩"><a href="#曲直交点-🚩" class="headerlink" title="曲直交点 🚩"></a>曲直交点 🚩</h4><div class="tabs" id="曲直交点示例-1"><ul class="nav-tabs"><li class="tab active"><a href="#曲直交点示例-1-1">示例 1</a></li><li class="tab"><a href="#曲直交点示例-1-2">示例 2</a></li><li class="tab"><a href="#曲直交点示例-1-3">示例 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="曲直交点示例-1-1"><img data-src="43.png" width=70% /></div><div class="tab-pane" id="曲直交点示例-1-2"><img data-src="42.png" width=70% /></div><div class="tab-pane" id="曲直交点示例-1-3"><img data-src="44.png" width=70% /></div></div></div><h3 id="线数量"><a href="#线数量" class="headerlink" title="线数量"></a>线数量</h3><img data-src="45.png" width=70% /><h4 id="曲线数量-🚩"><a href="#曲线数量-🚩" class="headerlink" title="曲线数量 🚩"></a>曲线数量 🚩</h4><div class="tabs" id="曲线数量-1"><ul class="nav-tabs"><li class="tab active"><a href="#曲线数量-1-1">示例 1</a></li><li class="tab"><a href="#曲线数量-1-2">示例 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="曲线数量-1-1"><img data-src="46.png" width=70% /></div><div class="tab-pane" id="曲线数量-1-2"><img data-src="47.png" width=70% /></div></div></div><h4 id="一笔画问题-🚩"><a href="#一笔画问题-🚩" class="headerlink" title="一笔画问题 🚩"></a>一笔画问题 🚩</h4><div class="tabs" id="一笔画问题性质"><ul class="nav-tabs"><li class="tab"><a href="#一笔画问题性质-1">性质1</a></li><li class="tab"><a href="#一笔画问题性质-2">性质2</a></li><li class="tab active"><a href="#一笔画问题性质-3">性质3</a></li></ul><div class="tab-content"><div class="tab-pane" id="一笔画问题性质-1"><img data-src="48.png" width=70% /></div><div class="tab-pane" id="一笔画问题性质-2"><img data-src="49.png" width=70% /></div><div class="tab-pane active" id="一笔画问题性质-3"><img data-src="50.png" width=70% /></div></div></div><p><strong>十字交叉，一定是偶数，不是奇点</strong></p><div class="tabs" id="一笔画示例"><ul class="nav-tabs"><li class="tab"><a href="#一笔画示例-1">示例1</a></li><li class="tab"><a href="#一笔画示例-2">示例2</a></li><li class="tab active"><a href="#一笔画示例-3">示例3</a></li><li class="tab"><a href="#一笔画示例-4">示例4</a></li></ul><div class="tab-content"><div class="tab-pane" id="一笔画示例-1"><img data-src="51.png" width=70% /></div><div class="tab-pane" id="一笔画示例-2"><img data-src="52.png" width=70% /></div><div class="tab-pane active" id="一笔画示例-3"><img data-src="53.png" width=70% /></div><div class="tab-pane" id="一笔画示例-4"><img data-src="54.png" width=70% /></div></div></div><h3 id="角数量"><a href="#角数量" class="headerlink" title="角数量"></a>角数量</h3><div class="tabs" id="角数量-1"><ul class="nav-tabs"><li class="tab active"><a href="#角数量-1-1">示例 1</a></li><li class="tab"><a href="#角数量-1-2">示例 2</a></li><li class="tab"><a href="#角数量-1-3">示例 3</a></li><li class="tab"><a href="#角数量-1-4">示例 4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="角数量-1-1"><img data-src="55.png" width=70% /></div><div class="tab-pane" id="角数量-1-2"><img data-src="57.png" width=70% /></div><div class="tab-pane" id="角数量-1-3"><img data-src="56.png" width=70% /></div><div class="tab-pane" id="角数量-1-4"><img data-src="58.png" width=70% /></div></div></div><h3 id="面数量-🚩"><a href="#面数量-🚩" class="headerlink" title="面数量 🚩"></a>面数量 🚩</h3><div class="tabs" id="面数量"><ul class="nav-tabs"><li class="tab"><a href="#面数量-1">示例 1</a></li><li class="tab"><a href="#面数量-2">示例 2</a></li><li class="tab"><a href="#面数量-3">示例 3</a></li><li class="tab active"><a href="#面数量-4">示例 4</a></li><li class="tab"><a href="#面数量-5">示例 5</a></li><li class="tab"><a href="#面数量-6">示例 6</a></li></ul><div class="tab-content"><div class="tab-pane" id="面数量-1"><img data-src="59.png" width=70% /></div><div class="tab-pane" id="面数量-2"><img data-src="60.png" width=70% /></div><div class="tab-pane" id="面数量-3"><img data-src="61.png" width=70% /></div><div class="tab-pane active" id="面数量-4"><img data-src="62.png" width=70% /></div><div class="tab-pane" id="面数量-5"><img data-src="63.png" title="A-D" width=70% /></div><div class="tab-pane" id="面数量-6"><img data-src="64.png" title="A" width=70% /></div></div></div><h3 id="素数量-🌈"><a href="#素数量-🌈" class="headerlink" title="素数量 🌈"></a>素数量 🌈</h3><div class="tabs" id="素数量"><ul class="nav-tabs"><li class="tab"><a href="#素数量-1">示例 1</a></li><li class="tab"><a href="#素数量-2">示例 2</a></li><li class="tab active"><a href="#素数量-3">示例 3</a></li><li class="tab"><a href="#素数量-4">示例 4</a></li><li class="tab"><a href="#素数量-5">示例 5</a></li><li class="tab"><a href="#素数量-6">示例 6</a></li><li class="tab"><a href="#素数量-7">示例 7</a></li></ul><div class="tab-content"><div class="tab-pane" id="素数量-1"><img data-src="65.png" width=70% /></div><div class="tab-pane" id="素数量-2"><img data-src="66.png" width=70% /></div><div class="tab-pane active" id="素数量-3"><img data-src="67.png" width=70% /></div><div class="tab-pane" id="素数量-4"><img data-src="68.png" width=70% /></div><div class="tab-pane" id="素数量-5"><img data-src="69.png" width=70% /></div><div class="tab-pane" id="素数量-6"><img data-src="70.png" width=70% /></div><div class="tab-pane" id="素数量-7"><img data-src="71.png" width=70% /></div></div></div><h2 id="空间重构"><a href="#空间重构" class="headerlink" title="空间重构"></a>空间重构</h2><h3 id="相对面"><a href="#相对面" class="headerlink" title="相对面"></a>相对面</h3><div class="tabs" id="相对面"><ul class="nav-tabs"><li class="tab"><a href="#相对面-1">示例 1</a></li><li class="tab active"><a href="#相对面-2">示例 2</a></li><li class="tab"><a href="#相对面-3">示例 3</a></li><li class="tab"><a href="#相对面-4">示例 4</a></li></ul><div class="tab-content"><div class="tab-pane" id="相对面-1"><img data-src="72.png" width=70% /></div><div class="tab-pane active" id="相对面-2"><img data-src="73.png" width=70% /></div><div class="tab-pane" id="相对面-3"><img data-src="74.png" width=70% /></div><div class="tab-pane" id="相对面-4"><img data-src="75.png" width=70% /></div></div></div><h3 id="相临面、相对位置"><a href="#相临面、相对位置" class="headerlink" title="相临面、相对位置"></a>相临面、相对位置</h3><div class="tabs" id="相临面"><ul class="nav-tabs"><li class="tab active"><a href="#相临面-1">相临面</a></li><li class="tab"><a href="#相临面-2">相对位置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="相临面-1"><img data-src="76.png" width=70% /><img data-src="77.png" width=70% /></div><div class="tab-pane" id="相临面-2"><img data-src="78.png" width=70% /><img data-src="79.png" width=70% /></div></div></div><h3 id="画边法"><a href="#画边法" class="headerlink" title="画边法"></a>画边法</h3><div class="tabs" id="画边法"><ul class="nav-tabs"><li class="tab"><a href="#画边法-1">画边大法 🌈</a></li><li class="tab"><a href="#画边法-2">实例</a></li><li class="tab active"><a href="#画边法-3">总结</a></li></ul><div class="tab-content"><div class="tab-pane" id="画边法-1"><div class="note danger"><img data-src="80.png" width=70% /><img data-src="81.png" width=70% /><img data-src="82.png" width=70% /></div></div><div class="tab-pane" id="画边法-2"><img data-src="83.png" width=70% /><img data-src="84.png" title="C" width=70% /></div><div class="tab-pane active" id="画边法-3"><img data-src="85.png" width=70% /></div></div></div><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h2 id="图片有点大"><a href="#图片有点大" class="headerlink" title="图片有点大"></a>图片有点大</h2><div class="tabs" id="别人的汇总"><ul class="nav-tabs"><li class="tab active"><a href="#别人的汇总-1">图推</a></li><li class="tab"><a href="#别人的汇总-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="别人的汇总-1"><details ><summary>  </summary>              <div class='content'>              <img data-src="90.jpg" width=70% /><img data-src="91.jpg" width=70% /><img data-src="92.jpg" width=70% /><img data-src="93.jpg" width=70% /><img data-src="94.jpg" width=70% /><img data-src="95.jpg" width=70% /><img data-src="96.jpg" width=70% /><img data-src="97.jpg" width=70% /><img data-src="98.jpg" width=70% />              </div>            </details></div><div class="tab-pane" id="别人的汇总-2"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 推理判断 </category>
          
          <category> 图形 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推理判断-定义判断</title>
      <link href="2020/05/17/civil_servant_define/"/>
      <url>2020/05/17/civil_servant_define/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/020.jpg" width=50% /><span class='geyan'> 你以为你在合群，其实你是在浪费青春。<br>——李尚龙《你只是看起来很努力》</span><a id="more"></a><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><div class="tabs" id="逻辑判断"><ul class="nav-tabs"><li class="tab active"><a href="#逻辑判断-1">逻辑框架</a></li><li class="tab"><a href="#逻辑判断-2">因果关系</a></li><li class="tab"><a href="#逻辑判断-3">方式+目的关系</a></li><li class="tab"><a href="#逻辑判断-4">总分</a></li></ul><div class="tab-content"><div class="tab-pane active" id="逻辑判断-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note danger"><p>定义判断：每道题先给出一个概念的定义，然后分别列出四 种情况，要求报考者严格依据定义选出一个最符合或最不符合该 定义的答案。</p><p>★第一个层次：从题型叙述来说，定义的本质就是一种加强。 （包含两层论点与论据的关系） 定义判断的主要题型： 从性质上分：肯定性、否定性。 一、肯定性质：下列属于有效的 E_mail 营销的一项是？ 二、否定型题：下列行为不属于偶然防卫的一项是？ 从命题上来分类：单项和组合。 一、单项： 根据上述定义，下列属于隐性广告的是？ 二、多项题：特征：给两个以上的定义但是只考察其中一个。</p><p><strong>常考：因果关系、方式+目的关系、总分关系。</strong></p></div>              </div>            </details></div><div class="tab-pane" id="逻辑判断-2"><p>因果关系：出现较少，百分之十左右。</p><div class="note danger">例、职业枯竭是指人们在自己长期从事的工作重压之下，产 生身心能量被工作耗尽的感觉。 根据上述定义，下列属于职业枯竭状态的是（ ）。<p>A.老周不能胜任自己现有的工作，每天都会忙得焦头烂额<br>B.刚参加工作的小李觉得这份工作太累，产生了跳槽的念头<br>C.刘经理每天工作繁忙，缺乏充足的休息，情绪也越来越糟 糕<br>D.在从事过许多不同的职业之后，老王觉得所有工作都索然 无味 </p><div class="note default"><ol><li>一级考点：工作重压、耗尽的感觉。排除AD</li><li>二级考点：因的长期，排除B</div></li></ol><p>钩不了沉秒杀解析：第一步：逻辑骨架法：因：长期重压， 果：身心耗尽。第二步：符号重合法：A、因：不能胜任，果： 焦头烂额。因不符合，没有长期。B、因：刚参加工作觉得累， 果：跳槽。因不符合，没有长期。C、因：每天忙，果：情绪糟 糕，符合。D、因：不同职业，果：索然无味，因果均不符合。 秒C</p></div></div><div class="tab-pane" id="逻辑判断-3"><p>方式+目的关系：是因果关系的一种特殊情况，<strong>考察力度很大！</strong></p><p>例、差别化信贷是指对不同行业、不同群体、不同用途的信 贷额度和还贷方式采取差别对待的政策，这是国家对经济进行宏 观调控的重要手段，通过差别化信贷遏制两极分化趋势，促进社 会公平、促进经济机构调整和全面可持续发展。 根据上述定义，下列选项中属于差别化信贷的是：</p><p>A.2008 年年初，央行放宽商业银行信贷规模，全国性商业 银行在原有信贷规模基础上调增 5%，地方性商业银行在原有信 贷规模基础上调增 10%，共新增约 2000 亿元贷款</p><p>B.某商业银行规定：贷款不满一年提前还款，收取不低于实 际还款额三个月的利息;贷款满一年后提前还款，则收取不低于 实际还款额一个月的利息</p><p>C.新购房政策规定：购买首套住房，且套型建筑面积在 90 平米以下的家庭，可以享受首付款 20%的政策;如果首套住房套 型面积大于 90 平米，贷款首付款比例不得低于 30%</p><p>D.2009 年，某国际银行对中小企业的贷款总额较去年增长 14%，同时又推出“幸福时贷”无担保个人贷款，18-55 岁的本 地居民可获得最高 50 万元的贷款。</p><p>钩不了沉秒杀解析：213 读题：第一步：方式：差异贷款政 策，目的：公平。主体：国家。第二步：符号重合度：BD 主体 不符合，A：方式：全国商业与地方商业，不太符合，目的：也 没有促进社会公平。秒 C </p><p>★为什么在这里提到了主体呢，也就是主体什么时候该看？ 当主体为：国家、政府、学校、企业。这四个词时才需看主体， 其余基本不用。</p></div><div class="tab-pane" id="逻辑判断-4"></div></div></div><div class="tabs" id="关键词主体"><ul class="nav-tabs"><li class="tab active"><a href="#关键词主体-1">定义判断</a></li><li class="tab"><a href="#关键词主体-2">解题思维</a></li><li class="tab"><a href="#关键词主体-3">总体原则</a></li></ul><div class="tab-content"><div class="tab-pane active" id="关键词主体-1"><img data-src="04.png" width=70% /></div><div class="tab-pane" id="关键词主体-2"><img data-src="05.png" width=70% /></div><div class="tab-pane" id="关键词主体-3"><img data-src="06.png" width=70% /></div></div></div><h3 id="识别有效信息"><a href="#识别有效信息" class="headerlink" title="识别有效信息"></a>识别有效信息</h3><h4 id="关键词–主体、客体"><a href="#关键词–主体、客体" class="headerlink" title="关键词–主体、客体"></a>关键词–主体、客体</h4><div class="tabs" id="关键词主体"><ul class="nav-tabs"><li class="tab active"><a href="#关键词主体-1">示例 1</a></li><li class="tab"><a href="#关键词主体-2">示例 2</a></li><li class="tab"><a href="#关键词主体-3">示例 3</a></li><li class="tab"><a href="#关键词主体-4">示例 4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="关键词主体-1"><img data-src="07.png" width=70% /></div><div class="tab-pane" id="关键词主体-2"><img data-src="08.png" width=70% /></div><div class="tab-pane" id="关键词主体-3"><img data-src="09.png" width=70% /></div><div class="tab-pane" id="关键词主体-4"><img data-src="10.png" title="C" width=80% /></div></div></div><h4 id="条件-结果"><a href="#条件-结果" class="headerlink" title="条件+结果"></a>条件+结果</h4><div class="tabs" id="条件+结果"><ul class="nav-tabs"><li class="tab active"><a href="#条件+结果-1">示例 1</a></li><li class="tab"><a href="#条件+结果-2">示例 2</a></li><li class="tab"><a href="#条件+结果-3">示例 3</a></li><li class="tab"><a href="#条件+结果-4">示例 4</a></li><li class="tab"><a href="#条件+结果-5">示例 5</a></li><li class="tab"><a href="#条件+结果-6">示例 6</a></li></ul><div class="tab-content"><div class="tab-pane active" id="条件+结果-1"><img data-src="11.png" width=70% /></div><div class="tab-pane" id="条件+结果-2"><img data-src="12.png" width=70% /></div><div class="tab-pane" id="条件+结果-3"><img data-src="13.png" width=70% /></div><div class="tab-pane" id="条件+结果-4"><img data-src="14.png" title="C" width=80% /></div><div class="tab-pane" id="条件+结果-5"><img data-src="15.png" width=70% /></div><div class="tab-pane" id="条件+结果-6"><img data-src="25.png" width=70% /></div></div></div><h3 id="快速识别有效信息"><a href="#快速识别有效信息" class="headerlink" title="快速识别有效信息"></a>快速识别有效信息</h3><p>优先看概念所在的那句话</p><img data-src="16.png" width=80% /><img data-src="17.png" width=80% /><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><p>注意阅读补充说明——<strong>即、也就是说</strong></p><img data-src="18.png" width=80% /><h4 id="原理效应"><a href="#原理效应" class="headerlink" title="原理效应"></a>原理效应</h4><p>原理效应类——常见典型句式：条件/方式+结果<br><strong>故事不优先读</strong></p><img data-src="19.png" width=90% /><img data-src="20.png" width=90% /><h4 id="多定义"><a href="#多定义" class="headerlink" title="多定义"></a>多定义</h4><img data-src="21.png" width=90% /><img data-src="22.png" width=90% /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img data-src="23.png" width=90% /><h3 id="❌"><a href="#❌" class="headerlink" title="❌"></a>❌</h3><ol><li>做定义判断，不要带常识，直接对比定义&amp;选项</li><li>同构选项<ol><li>结构相似—排除</li><li>适用范围<ol><li>不属于</li><li>读不懂题干</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 推理判断 </category>
          
          <category> 定义判断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定义判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推理判断--类比</title>
      <link href="2020/05/16/civil_servant_analogy/"/>
      <url>2020/05/16/civil_servant_analogy/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/018.jpg" width=80% /><span class='geyan'> 凡斗者，必自以为是，而以人为非也。（《荀子·荣辱》）</span><a id="more"></a><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><div class="tabs" id="类比推理"><ul class="nav-tabs"><li class="tab active"><a href="#类比推理-1">类比推理 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="类比推理-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <ol><li>五种关系：并列、矛 盾、交叉、等同、包含等关系（也就是以前讲的五图关系），</li><li>生活化关系；</li></ol><div class="note danger"><p>树根︰根雕</p><p>A．陶土︰瓷器 B．纸张︰剪纸 C．竹子︰竹排 D．水泥︰砚台</p><p>钩不了沉秒杀解析：本题为二二推理的难题：</p><p>一次排除：原料关系，排除不掉任何选项。<br>二次排除：艺术加工关系，排除 CD。<br>三次排除：物理加工关系，秒 B。</p></div>              </div>            </details></div></div></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><strong>题目要求：</strong></p><p>题干给出一组相关的词，要求通过观察分析，在备选答案中找出一组与之在<strong>逻辑关系</strong>上最为贴近或<strong>相似的词</strong></p><p><strong>常见题型：</strong></p><ol><li>两词型——A∶B</li><li>三词型——A∶B∶C</li><li>填空型——A 对于（ ）相当于（ ）对于 B —&gt; <code>代入判断</code></li></ol><h3 id="语义关系"><a href="#语义关系" class="headerlink" title="语义关系"></a>语义关系</h3><h4 id="近义、反义关系"><a href="#近义、反义关系" class="headerlink" title="近义、反义关系"></a>近义、反义关系</h4><ol><li>一级关系<ol><li>近义关系<ol><li>开心-高兴</li><li>言不由衷-口是心非</li></ol></li><li>反义关系<ol><li>勤奋-懒惰</li><li>一丝不苟-粗枝大叶</li></ol></li></ol></li><li>二级关系 <strong>如果一级无法区分</strong><ol><li>感情色彩<ol><li>褒义</li><li>贬义</li><li>中性</li></ol></li></ol></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="number">1</span>（<span class="number">2017</span> 江西）精致∶粗糙</span><br><span class="line">A. 河水∶海水     C. 违背∶遵循</span><br><span class="line">B. 山峰∶深渊     D. 怀疑∶守信 [守信&lt;-&gt;失信]  [怀疑-相信]</span><br></pre></td></tr></table></figure><p><span id="inline-purple"> 解题思路 </span></p><ol><li>实例为反义词<ol><li>一般 <strong>形容词、动词</strong> 可以形成近反义词</li></ol></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="number">3</span>（<span class="number">2016</span> 吉林）大义凛然∶卑躬屈膝 D</span><br><span class="line">A. 安分守己∶好高骛远     B. 穷奢极欲∶节衣缩食</span><br><span class="line">C. 得心应手∶百无一能     D. 持之以恒∶虎头蛇尾</span><br></pre></td></tr></table></figure><p><span id="inline-blue"> 解题思路 </span></p><table><thead><tr><th>成语</th><th>含义</th><th>褒/贬</th><th>近义词</th><th>反义词</th></tr></thead><tbody><tr><td>安分守己</td><td>安于本分、规矩老师</td><td>褒</td><td>安分守常、<code>循规蹈矩</code>、奉公守法</td><td>为非作歹、胡作非为</td></tr><tr><td>好高骛远</td><td>脱离实际追求难以实现的目标</td><td><strong>贬</strong></td><td>不自量力</td><td>脚踏实地 、量力而行</td></tr><tr><td>穷奢极欲</td><td>极度奢侈、任意挥霍、纵情享受</td><td><strong>贬</strong></td><td>骄奢淫逸</td><td>节衣缩食 克勤克俭 <code>单食瓢饮</code></td></tr><tr><td>节衣缩食</td><td>省穿省吃 生活<code>节俭</code></td><td></td><td></td><td></td></tr><tr><td>得心应手</td><td>技艺纯熟、应用自如</td><td></td><td>心手相应、挥洒自如</td><td>力不从心</td></tr><tr><td>百无一能</td><td>什么都不会</td><td>贬</td><td>一无所长</td><td>无所不能</td></tr></tbody></table><ol><li>持之以恒：用恒心坚持下去 不间断不松懈<ol><li>褒义词</li><li>近义词： 契而不舍 坚持不懈</li><li>反义词：虎头蛇尾 半途而废 浅尝辄止</li></ol></li><li>虎头蛇尾：有始无终 起初声势很大 后来劲头很小<ol><li>贬义词：半途而废 浅尝辄止</li><li>近义词：</li></ol></li></ol><p>二级辨析 感情色彩</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="number">4</span>（<span class="number">2016</span> 厦门）成败∶呼吸 B</span><br><span class="line">A. 拉扯∶拖拽     B. 好歹∶始终</span><br><span class="line">C. 匆忙∶潇洒     D. 推荐∶录用</span><br></pre></td></tr></table></figure><p><span id="inline-blue"> 汇总 </span></p><ol><li>同反词</li><li>感情</li><li>拆字对比</li></ol><hr><img data-src="05.png" width=50% /><blockquote><p>全是语文基础。</p></blockquote><h4 id="比喻-amp-象征义"><a href="#比喻-amp-象征义" class="headerlink" title="比喻&amp;象征义"></a>比喻&amp;象征义</h4><p><span id="inline-blue"> 常识积累： <span></p><ol><li>“丝”指<code>弦乐器</code>，“竹”指<code>管乐器</code>，丝竹是中国古代乐器的总称，也借指 <code>音乐</code>。</li><li>“案牍”中“案”指桌子， “牍”指竹简，词语指桌上用来写字的竹简，指代公文，《陋室铭》：无丝竹之乱耳，无案牍之劳形。</li><li>汗青代指史册，古代在竹简上书写，采来青色的竹子，用火烤的冒出水后才易书写；</li><li>干戈：“干”指盾牌，“戈”指古代武器，“干戈”泛指武器</li><li>南冠：囚犯</li><li>桑梓 [zi]：家乡</li><li>青衿：读书人</li><li>浮屠：佛塔</li><li>同窗：同学</li><li>手足：兄弟</li><li>白丁/布衣：百姓</li><li>鸿雁/礼札：书信</li><li>总角/垂髫 [tiáo] : 小孩</li><li>干戈/烽烟：战争</li><li>黄发/伛偻 [yǔ lǚ]： 即腰背弯， 出自《淮南子·精神训》：子求行年五十有四，而病伛偻</li></ol><p><span id="inline-purple"> 与身体相关的 <span></p><ol><li>眉目：头绪   —-    咽喉：要塞</li><li>白发：沧桑   —-    乳牙：稚嫩</li><li>七寸：要害   —-    骨肉：亲人</li><li>手足：兄弟   —-    手腕：手段</li><li>首脑：领袖   —-    臂膀：得力助手</li><li>肝胆：勇气   —-    心脏：中心或要害</li></ol><p>真题</p><p>心腹：信任 ❌ 心腹：信任的人 !== 信任<br>耳目：刺探 ❌ 耳目：刺探消息的人 !== 刺探</p><p><span id="inline-yellow"> 颜色相关的 <span></p><ol><li>白色：纯洁   —-    蓝色：忧郁</li><li>红色：热情 [革命]     —-    绿色：环保 [和平]</li></ol><p><span id="inline-blue"> 动物相关的 <span></p><ol><li>麒麟、龙、凤凰、龟、貔貅：祥瑞</li><li>鸳鸯：爱情</li><li>蚍蜉：自不量力； 比喻 <strong>滋补两者的人，不是自不量力</strong></li><li>豺狼：凶残</li><li>蜜蜂：勤劳</li><li>鸽子：和平</li><li>仙鹤：长寿</li></ol><p><span id="inline-blue"> 植物🌳相关的 <span></p><ol><li>牡丹：富贵 [华贵] —-    莲花：纯洁无暇</li><li>松：高洁 [长寿]   —-    翠竹：高洁 [刚直]</li><li>桃李：学生   —-    折柳：惜别</li><li>红豆：相思   —-    玫瑰：爱情</li><li>四君子：梅兰菊竹 高洁</li></ol><p><span id="inline-blue"> 其他比喻 <span></p><ol><li>明镜：公正   —-    天平：公正</li><li>烛光：母爱   —-    火🔥：热情</li><li>蜡烛：老师   —-    月圆：团聚</li><li>桎梏 [zhìgù]: 舒服    —-    汗青：史册</li><li>狼烟：入侵</li></ol><img data-src="06.png" width=80% /><h3 id="矛盾关系"><a href="#矛盾关系" class="headerlink" title="矛盾关系"></a>矛盾关系</h3><h4 id="并列关系-🚩"><a href="#并列关系-🚩" class="headerlink" title="并列关系 🚩"></a>并列关系 🚩</h4><h5 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h5><h5 id="反对"><a href="#反对" class="headerlink" title="反对"></a>反对</h5><div class="tabs" id="并列关系"><ul class="nav-tabs"><li class="tab active"><a href="#并列关系-1">概念</a></li><li class="tab"><a href="#并列关系-2">实例1</a></li><li class="tab"><a href="#并列关系-3">实例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="并列关系-1"><img data-src="07.png" width=80% /></div><div class="tab-pane" id="并列关系-2"><img data-src="08.png" width=80% /></div><div class="tab-pane" id="并列关系-3"><img data-src="09.png" width=80% /></div></div></div><p>【注意】<strong>并列关系</strong>：两个词语完全不同，但属于同一级别。如“手”和“脚” 是人体的器官，二者层级一样，是并列关系；而 <strong>“手”和“手指”不是并列关系</strong>。</p><h4 id="包容关系-🚩"><a href="#包容关系-🚩" class="headerlink" title="包容关系 🚩"></a>包容关系 🚩</h4><h5 id="种属"><a href="#种属" class="headerlink" title="种属"></a>种属</h5><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><div class="tabs" id="组成"><ul class="nav-tabs"><li class="tab active"><a href="#组成-1">概念🌈</a></li><li class="tab"><a href="#组成-2">实例1</a></li><li class="tab"><a href="#组成-3">实例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="组成-1"><img data-src="10.png" width=80% /></div><div class="tab-pane" id="组成-2"><img data-src="11.png" width=80% /></div><div class="tab-pane" id="组成-3"><img data-src="12.png" width=80% /></div></div></div><h4 id="交叉关系"><a href="#交叉关系" class="headerlink" title="交叉关系"></a>交叉关系</h4><div class="tabs" id="交叉关系"><ul class="nav-tabs"><li class="tab active"><a href="#交叉关系-1">概念</a></li><li class="tab"><a href="#交叉关系-2">实例1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="交叉关系-1"><img data-src="13.png" width=80% /></div><div class="tab-pane" id="交叉关系-2"><img data-src="14.png" width=80% /></div></div></div><p><span id="inline-blue"> 常考交叉关系 </span></p><ol><li>葡萄酒∶名酒  —-    影印本∶线装本</li><li>哺乳动物∶陆生动物    —-    编剧∶诗人</li><li><strong>处长∶教授∶博士</strong>   —-    瓷器∶茶杯（花瓶）</li><li><strong>中药∶植物</strong>    —-    电视剧∶喜剧</li><li>壁画∶山水画  —-    画家∶作家</li><li>学生∶运动员  —-    党员∶干部∶青年</li><li>酒瓶∶玻璃瓶  —-    文物∶建筑</li><li>敞篷车∶跑车  —-    <strong>所得税∶地方税</strong></li><li>军人∶诗人    —-    流行∶高尚</li><li>专家∶学者   —-    <strong>唐诗∶七律</strong></li><li><strong>航天器∶交通工具</strong></li></ol><h3 id="对应关系-🚩"><a href="#对应关系-🚩" class="headerlink" title="对应关系 🚩"></a>对应关系 🚩</h3><img data-src="27.png" width=80% /><p><strong>考点比较多</strong></p><ol><li>材料：二级辨析考虑<code>直接材料/间接材料</code>，如“面粉∶面包”是直接原 材料关系，“小麦∶面包”是间接原材料关系。</li><li>工艺：二级辨析考虑物理变化（如捆扎、打磨、切）/化学变化（如煅 烧、加热、氧化、发酵）。</li><li>功能（作用）：二级辨析考虑主要/次要功能。</li><li>属性：二级辨析考虑必然/或然（可能、一定）属性。</li><li>时间顺序：出现 2-3 个行为（动词），可能考查时间顺序，细化考虑主 体是否一致。</li><li>必要条件：即没它不行，用“必须”和“可能”区分。</li><li>因果：可能考查词语拆分后仍然存在因果关系，如“人去∶楼空”。</li></ol><blockquote><p>做题时，优先考虑一级辨析，如果通过一级辨析选不出唯一答案，才 <strong>考虑二级辨析</strong>。</p></blockquote><div class="tabs" id="工艺"><ul class="nav-tabs"><li class="tab"><a href="#工艺-1">工艺 1</a></li><li class="tab"><a href="#工艺-2">工艺 2</a></li><li class="tab active"><a href="#工艺-3">工艺 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="工艺-1"><img data-src="15.png" width=80% /></div><div class="tab-pane" id="工艺-2"><img data-src="16.png" width=80% /></div><div class="tab-pane active" id="工艺-3"><img data-src="17.png" width=80% /></div></div></div><div class="tabs" id="功能"><ul class="nav-tabs"><li class="tab active"><a href="#功能-1">功能</a></li><li class="tab"><a href="#功能-2">属性</a></li><li class="tab"><a href="#功能-3">高级</a></li><li class="tab"><a href="#功能-4">时间</a></li><li class="tab"><a href="#功能-5">时间</a></li><li class="tab"><a href="#功能-6">时间</a></li><li class="tab"><a href="#功能-7">必要</a></li><li class="tab"><a href="#功能-8">因果</a></li></ul><div class="tab-content"><div class="tab-pane active" id="功能-1"><img data-src="18.png" width=80% /></div><div class="tab-pane" id="功能-2"><img data-src="19.png" width=80% /></div><div class="tab-pane" id="功能-3"><img data-src="20.png" width=80% /></div><div class="tab-pane" id="功能-4"><img data-src="21.png" width=80% /></div><div class="tab-pane" id="功能-5"><img data-src="22.png" width=80% /></div><div class="tab-pane" id="功能-6"><img data-src="23.png" width=80% /></div><div class="tab-pane" id="功能-7"><img data-src="24.png" width=80% /></div><div class="tab-pane" id="功能-8"><img data-src="25.png" width=80% /></div></div></div><p>题干是“水滴石穿”，选项是“绳锯 木断”“持之以恒”，三者均形容坚持，无法选择唯一答案。<br><strong>考虑拆词</strong>，“水滴” 是“石穿”的原因，“绳锯”是“木断”的原因，而“持之以恒”无法拆分，故 “绳锯木断”与题干更为一致。</p><img data-src="26.png" width=80% /><ol><li>兽聚鸟散：像鸟兽一样时聚时散，既指“兽”，又指“鸟”。</li><li>秦时明月汉时关：不是说秦朝的月亮、汉代的关隘，而是指秦朝和汉 代均有明月和关隘。</li><li>开我东阁门，坐我西阁床：不是说打开东边的门、做到西边的床上， 而是指花木兰当兵回来之后看看各个屋子、坐坐各个床，表达回家的欣喜之感。</li><li>东市买骏马，西市买鞍鞯，南市买辔头，北市买长鞭：不是跑来跑去 在各个集市买东西，而是指去集市上买各种各样的东西。</li><li>当窗理云鬓，对镜贴黄花：均指照着东西化妆。</li><li><code>将军百战死，壮士十年归</code>：不是指死亡的只有将军，回来的只有壮士， 而是描写战争的惨烈，将军和壮士均可能死在战场上，也都有可能回来。</li><li>明月别枝惊鹊，清风半夜鸣蝉：不是说月亮往上升吓跑了鸟，清风一 吹把蝉吵醒了，于是蝉开始鸣叫，而是指<strong>月亮和风可能把鹊和蝉惊到</strong>，描写的是 <strong>静谧的场景</strong>。</li></ol><h3 id="语法关系"><a href="#语法关系" class="headerlink" title="语法关系"></a>语法关系</h3><p>造句原则：</p><p>①造简单句：能不加字就不加字，能少加字就少加字</p><p>②加字尽量加一样的</p><img data-src="28.png" width=80% /><img data-src="29.png" width=80% />]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 推理判断 </category>
          
          <category> 类比 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类比 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推理判断--逻辑</title>
      <link href="2020/05/15/civil_servant_inference/"/>
      <url>2020/05/15/civil_servant_inference/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/019.jpg" width=80% /><span class='geyan'> 美好的东西是不会死的。<br>The good things are not dead.<br>--《肖申克的救赎》</span><a id="more"></a><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><h3 id="直言命题"><a href="#直言命题" class="headerlink" title="直言命题"></a>直言命题</h3><div class="tabs" id="推理补充一"><ul class="nav-tabs"><li class="tab active"><a href="#推理补充一-1">直言命题</a></li><li class="tab"><a href="#推理补充一-2">模态命题</a></li><li class="tab"><a href="#推理补充一-3">三段论</a></li><li class="tab"><a href="#推理补充一-4">其他类型</a></li></ul><div class="tab-content"><div class="tab-pane active" id="推理补充一-1"><details ><summary> <p>实例</p> </summary>              <div class='content'>              <div class="note danger"><div class="note info"><p>例：有些 A 是 B = 有些 B 是 A </p><p>思考题： 画文氏图</p><ol><li>“有的 A 不是 B”是否能够换位？ ❌</li><li>“所有 A 是 B” 是否能够换位？❌</li></ol></div><p><strong>推出关系</strong>：<em>小推大，大不能推出任何。</em></p><p>小集合推出大集合。</p><ol><li>“某个”、“所有” 为<em>小范围</em>。</li><li>“有的”为大范围。</li><li>但性质不变：<strong>是推是、非推非</strong>。</li></ol><div class="note success"><p>例：有些媒体很开放，所有媒体都关注民生大事。 据此，可以推出（ ）。 </p><p>A.有些很开放的媒体关注民生大事<br>B.有些关注民生大事的媒体不开放<br>C.有些媒体不开放，但关注民生大事<br>D.有些媒体很开放，但不关注民生大事</p><div class="note warning"><p>解题思路；</p><ol><li>似乎没有可关联性，</li><li>🤔直言命题–大小范围。</li><li>第一步：小推大。小范围：所有媒体关注民生=》大范围：有些媒体关注民生；<strong>排除D</strong></li><li>大范围的，因为不能推出，所以照抄，有些媒体很开放，<strong>排除：不开放</strong>。<em>排除BC</em></li><li>所有-是 和 有的非 矛盾。排除D</li></ol></div><hr><p><strong>矛盾关系</strong>：一真一假</p><ol><li>所有是–有的非</li><li>所有非–有的是</li></ol><hr><p><strong>上反对</strong>：必有一假，可同假</p><p><strong>下反对</strong>：必有一真，可同真</p></div><img data-src="87.png" width=80% /><img data-src="88.png" width=80% /><div class="note primary"><p><strong>文氏图秒杀</strong>: <em>优先画所有的，有的画交</em></p><p>例：所有的甲都属于乙，有些甲属于丙，所有乙都属于丁， 没有戊属于丁，有些戊属于丙。 以下哪项不能从上述论述中推出？<br>A、有些丙属于丁 B、没有戊属于乙<br>C、有些甲属于戊 D、所有甲都属于丁</p><img data-src="89.png" width=80% /></div></div>              </div>            </details></div><div class="tab-pane" id="推理补充一-2"><div class="note danger"><p>模态命题：一对词：<strong>必然（一定）与可能</strong></p><p>1、模态词变化：必然变成可能。<br>2、量词变化：所有变成有的。<br>3、性质词变化：是变成不是、非、并非。 </p><p><em>不一定 A = —（一定 A）=可能不 A</em></p><p><strong>秒杀口诀</strong>：<em>把“不”去掉，“不”的后面翻硬币。</em></p><div class="note success"><p>训练 1、并非所有妹子必然喜欢高富帅 = 有的妹子可能不喜欢高富帅<br>训练 2、有的妹子可能不会画画 = 并非所有妹子必然会画画。 <a href="">先说并非</a><br>训练 3、所有妹子不必然喜欢高富帅 = 所有妹子可能不喜欢高富帅。<br><em>训练 4、所有男生不都必然留胡子 = 有的男生可能不留胡子。</em> 【难】</p></div></div></div><div class="tab-pane" id="推理补充一-3"><div class="note warning"><p><strong>A=&gt;B，B=&gt;C，所以，A=&gt;C。</strong></p><div class="note primary"><p>三段论秒杀口诀总结：<br>第一步：所有法；<br>第二步：约分秒杀法；<br>第三步：从结论找 B 法。</p><p>杀手级陷阱：三个步骤是有顺序 的，不可跳跃。）</p></div><div class="note danger"><p>口诀一：“所有”秒杀法</p><p>式子中 B 符号起到传递作用，既然是<em>传递作用</em>，就要求前、后两个 <em>B 是相同的</em>，<br>即 B=&gt;C 式子中必然是<strong>“所有”的B。</strong></p><p><strong>一定有个关联词–所有。</strong></p></div><div class="note info"><p>口诀二：约分秒杀法: 每个符号出现两次</p><p>式子中<em>每个符号出现两次</em>，即 A 出现两次，B 出现两次， C 出现两次。满足约分秒杀模型的基本构成。</p><p>某些公务员是行政管理专业的。因此，某些行政管理专业的人做管理工作。</p><p>A、所有公务员都做管理工作<br>B、某些公务员不是做管理工作的<br>C、某些行政管理专业的人不是公务员<br>D、所有行政管理专业的人都是公务员<br>E、所有管理工作 都是 公务员</p><ol><li>A-&gt;B; B-&gt;C;</li><li>B起到链接作用，B相等；所有法，<em>排除BC</em> ，需要有<em>“所有”</em></li><li>约分法，B已经出现了两次，剩余两个都加1。排除D</li></ol></div><div class="note default"><p>口诀三：从结论找 B 法。</p><blockquote><p>有的A是B，有的B是A</p></blockquote><p>所以定位到问题之后，如果✅哪个是A哪个是B，<strong>关乎所有➕在谁前边。</strong></p><p>因此后，是A-&gt;C, 三个减后者的两个，就是B</p><p><strong>因为 “因此”前，A和B有可能换位。</strong></p><div class="note success"><p>某些东方考古学家是美国哈佛大学的毕业生。因此，某些美国哈佛大学的毕业生对中国古代历史很有研究。为保证上述推断的正确，以下哪项必须为真？D</p><p>A、某些东方考古学家专攻古印度历史，对中国古代历史没 有太多的研究。</p><p>B、某些对中国古代很有研究的东方考古学家不是美国哈佛 大学毕业的</p><p>C、所有对中国古代历史很有研究的人都是东方考古学家。</p><p>D、所有的东方考古学家都是对中国古代史很有研究的人。</p></div></div></div></div><div class="tab-pane" id="推理补充一-4"><div class="note success">例.“五岳归来不看山”,以下选项与上述推理方式最相近的 是：<p>A. 疑是银河落九天</p><p>B. 桂林山水甲天下</p><p>C. 稻花香里说丰年</p><p>D. 二月春风似剪刀 钩不了沉秒杀解析：</p><p>第一步，能看出逻辑关系按照逻辑关系 做。主体：五岳与山是部分与整体的关系；逻辑关系：对比，即<br>五岳优于其他山。第二步，答案中主体符合部分与整体的只有 B。 桂林山水与天下风景。逻辑关系为“甲”即“优于”。故秒杀 B</p></div><div class="note warning"><p><strong>约分，把相同的元素删除《看好位置》</strong></p><p>例.我国的<del>佛教寺庙</del>分布于全国各地，普济寺是我国的<del>佛教寺庙</del>，所以普济寺分布于我国各地。 — <del>1</del> 2 3 <del>4</del> =&gt; 3 2</p><p>下列选项中所犯逻辑错误与上述推理最为相似的是：</p><p>A.父母酗酒的孩子<del>爱冒险</del>，小华<del>爱冒险</del>，所以小华的父母酗酒 — 位置不对</p><p>B.文明公民都是<del>遵纪守法</del>的，有些大学生<del>遵纪守法</del>，所以有 些大学生是文明公民</p><p>C.<del>寒门学子</del>上大学机会减少，大学生小飞不是<del>寒门学子</del>，所以小飞上大学的机会<strong>不会</strong>减少 — 题目是肯定句，这个是否定，排除选D，</p><p>D.现在的独生子女娇生惯养，何况他还是三代单传的独苗呢 =&gt; 现在的<del>独生子女</del>娇生惯养，他是<del>独生子女</del>，所以他娇生惯养</p><ol><li>无法看出来推理关系。</li><li>标记相同的元素删除。</li><li>都转换为陈述语句；</li><li><strong>D很难</strong></div></li></ol></div></div></div><h3 id="联言、选言、假言"><a href="#联言、选言、假言" class="headerlink" title="联言、选言、假言"></a>联言、选言、假言</h3><div class="tabs" id="假设题型"><ul class="nav-tabs"><li class="tab active"><a href="#假设题型-1">联言、选言</a></li><li class="tab"><a href="#假设题型-2">假言命题</a></li><li class="tab"><a href="#假设题型-3">命题转换 🚩🚩</a></li><li class="tab"><a href="#假设题型-4">矛盾</a></li><li class="tab"><a href="#假设题型-5">特殊题型</a></li><li class="tab"><a href="#假设题型-6">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="假设题型-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note success"><p>联言：就是通过“且”这个词连结。<br>选言：“或”命题。本质是选择命题。<br>不相容选言：要么…要么…；不是…就是…</p><p>记忆：要么 P 要么 Q，长得特殊，是杨过，独臂大侠，只有 一只胳膊，即有且仅有一个要件为真。</p><p><strong>P 或 Q。矛盾公式：—（P 或 Q)=-P 且-Q。</strong><br><strong>[P 且 Q] 矛盾公式 [-p 或 -q]</strong></p></div>              </div>            </details></div><div class="tab-pane" id="假设题型-2"><div class="note info">假言命题：关联词进行连接的两句话<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果 A，那么就 B。 A&#x3D;&gt;B </span><br><span class="line">只要 A，就 B。 A&#x3D;&gt;B </span><br><span class="line">只有 A，才 B。 B&#x3D;&gt;A </span><br><span class="line">除非 A, 否则 B。 -A&#x3D;&gt;B</span><br></pre></td></tr></table></figure><p>秒杀口诀：谁是充分谁在前；谁是必要谁在后。</p><p>A=》B <strong>的逆否命题</strong></p><p>其实质是一种<strong>等价命题</strong>。我们讲过矛盾是翻动硬币一次。而 <strong>等价是翻动两次</strong>。（仍然是翻硬币体系的运用）<br>所以，变为等价命题就必须动两次。 </p><p>第一步：动符号。-A=&gt;-B<br>第二步：动位置。-B=&gt;-A</p><div class="note primary">应该看到，“少数人靠觉悟，多数人靠政策”。将各种 社会问题归结为良知不守，则有逻辑倒置和认知错位之嫌。很多 问题，是缺“法”导致缺“德”，而不是相反。如果监管和惩罚 机制能够得到严格执行，食品生产者的“投毒冲动”就能得到有效抑制：如果制度健全，使好人流血不再流泪，藏于人心的本然 良知就能够转化为见义勇为的实际行为。由此可以推出（ ）。 A．如果良知不能化为行动，说明制度仍有待完善 B．只有制度健全，才不会良知不守 C．只要守住良知，就不会有各种社会问题 D．只有制度健全，才不会有各种社会问题<div class="note success"><p>题干较长，此时用逆向做题。<strong>只看关联词</strong></p><p>一、宏观：逆向做题思维。1、逆向做题法。2、锁定关键词： 良知与制度的关系。3、代入。制度=》良知。（上课详细讲解）<br>二、微观：逆否命题，秒 A。</p></div><details ><summary> <p>实例二</p> </summary>              <div class='content'>              <div class="note warning"><p>例：记者采访时的提问要具体、简洁明了，切忌空泛、笼统、 不着边际。约翰·布雷迪在《采访技巧》中剖析了记者采访时向 访问对象提出诸如“您感觉如何？”等问题的弊端，<br>认为这些提 问“实际上在信息获取上等于原地踏步，它使采访对象没法回答，<strong>除非</strong>用含混不清或枯燥无味的话来应付。”</p><p>由此可以推出：</p><p>A．记者采访时的提问如果具体、筒洁明了，就不会给采访 对象带来回答的困难</p><p>B．采访对象如果没法回答提问，说明他没有用含混不清或 枯燥无味的话来应付</p><p>C．采访对象只有用含混不清或枯燥无味的话来应付，才能 回答那些空泛、笼统的提问</p><p>D．诸如“您感觉如何？”这样的问题，只能使采访对象抓 不住问题的要点而作泛泛的或言不由衷的回答</p><div class="note success"><p>题干太长，找到关键词，前后是个整体，不是为了懂，而是找关键词，</p><p>【实际上在信息获取上等于原地踏步，它使采访对象没法回答，<strong>除非</strong>用含混不清或枯燥无味的话来应付】</p><p><strong>推出</strong>： <em>非</em>【用含混不清或枯燥无味的话来应付】=》【实际上在信息获取上等于原地踏步，它使采访对象没法回答】</p><div class="note info">钩不了沉秒杀解析：213 读题：推出题。一、宏观：题干较 长逆向做题思维。<p>1、逆向做题法。<br>2、锁定关键词：<br>A、具体简洁与采访对象困难。<br>B、没法回答提问与含混不清或枯燥无味。<br>C、含混不清或枯燥无味的话与空回答提问。<br>D、你感觉如何与泛泛。 </p><p>发现四个选项 BC 集中在于回答与含混不清或枯燥无味的话。</p><p>3、 寻找图形符号：题干为除非用（-）含混不清或枯燥无味的话来 <strong>应付=》没法回答</strong>。B 逻辑关系反了。</p><p>二、微观：<br>逆否命题，回答=》含混不清或枯燥无味的话。 秒 C。</p></div></div></div>              </div>            </details></div></div></div><div class="tab-pane" id="假设题型-3"><div class="note warning"><p>假言：A=&gt;B<br>它的矛盾命题是联言：A 且非 B<br>而这个联言命题的矛盾命题是选言：-A 或 B<br>矛盾的矛盾是等价：硬币翻了两次。<br>所以，<strong>假言 A=&gt;B</strong> 的等价是选言 <strong>-A 或 B</strong><br>平时遇到一道题出现三种命题形式，核心考点就在于三种命题转化。</p><p>关于三种命题转化的深入探究分析，由此产生出秒杀技巧：</p><p>正负相消思维：<strong>A=&gt;B，B=&gt;C,A=&gt;C</strong> 衍生出来的东西</p><blockquote class="blockquote-center"><p>假言 A=&gt;B** 的等价是选言 <strong>-A 或 B</strong></p></blockquote><p><strong>正负约分题型</strong></p><p>正负约分题型秒杀步骤：<br>第一步，钥匙法。<br>第二步，题干或为主正负约分法。<br>第三步，题干非或为主正向代入法。</p><details ><summary> <p>难题</p> </summary>              <div class='content'>              <div class="note danger">例、滨海市政府决定上马一项园林绿化工程，政府有关部门 在调研论证的基础上，就特色树种的选择问题形成如下几项决 定： （1）樟树、柳树至少选择一样； （2）如果不种桂树，那么就要种雪松（3）如果种柳树，那么就要种桃树 （4）桃树、雪松至少要舍弃一样 <p>据此，可以推出该市应选择的特色树种是（） </p><p>A、柳树或者桃树<br>B、樟树或者桂树<br>C、雪松或者柳树<br>D、雪松或者樟树</p><div class="note success"><p><strong>没有钥匙🔑</strong></p><p>第一步：钥匙法发现无钥匙。<br>第二步： 题干或为主正负约分法：<br>（1）樟或柳 （2）桂或雪<br>（3）<strong>—柳 或 桃</strong><br>（4）<strong>—桃或—雪。</strong></p><p><strong>正负约分法，就是一正一负约去</strong></p><p>约分剩下：樟、桂。秒 B</p><div class="note danger"><p><strong>传递关系对照、原理</strong></p><p>A=&gt;B  -A或B<br>B=&gt;C  -B或C</p><p>A=&gt;C  -A或C</p></div></div></div>              </div>            </details></div></div><div class="tab-pane" id="假设题型-4"><p>逻辑学中有三大定律：<strong>同一率、排中率，矛盾率。</strong></p><ol><li>同一率找矛盾</li><li>跳出矛盾运用矛盾。</li></ol></div><div class="tab-pane" id="假设题型-5"><div class="note danger">例.甲、乙、丙三人大学毕业后选择从事各不相同的职业： 教师、律师、工程师。其他同学做了如下猜测：<p>小李：甲是工程师，乙是教师。<br>小王：甲是教师，丙是工程师。<br>小方：甲是律师，乙是工程师。</p><p>后来证实，小李，小王和小方都只猜对了一半。那么，甲、 乙、丙分别从事何种职业？</p><p>A. 甲是教师，乙是律师，丙是工程师</p><p>B. 甲是工程师，乙是律师，丙是教师</p><p>C. 甲是律师，乙是工程师，丙是教师</p><p>D. 甲是律师，乙是教师，丙是工程师</p><p>钩不了沉秒杀解析：<br>第一步：发现既不是正负约分题，又不 是矛盾题，因为题干说了各猜对一半。<br>第二步：此时，要么列表 要么代入，列表法也可以，因第五节课讲列表法，先用代入法。<br>因为题干要件不是全对，只能<strong>反向代入</strong>。</p><p>A、代入发现小方全错，<br>B 代入发现小王全错，<br>C 代入发现小李全错，<br>D 代入发现符合。 </p><p>秒 D。</p><p>此题说明了另外一个问题：代入法。<br>即正向代入与反向代入的区别，</p><p><strong>如果题干均为正确要件</strong>，则正向代入为主。</p><p><strong>如果题干本身无法确定真假，则反向代入验证题干。</strong></p></div></div><div class="tab-pane" id="假设题型-6"><div class="note info"><p><strong>归纳总结</strong>：</p><p>一、推出关系转化成“或”、“且”（也就是三种命题之间 的转化），何时转化，何时不转化。</p><ol><li>选项为判断<em>真假</em>问题的时候，推出转化为“或”、“且”；</li><li>选项为判断<em>推出</em>关系，“或”、“且”转化为推出。</li></ol><p>二、矛盾题和正负相消的区别：</p><ol><li>矛盾题题干中几句话有真有假，</li><li>正负相消题中题干的话全为真。</li></ol><p>三、矛盾题和正负相消题除了上课讲的题型以外的变态题型，都用<em>代入法或列表法</em>解决。</p></div></div></div></div><h3 id="假设题"><a href="#假设题" class="headerlink" title="假设题"></a>假设题</h3><div class="tabs" id="假设题型"><ul class="nav-tabs"><li class="tab active"><a href="#假设题型-1">包含-补全</a></li><li class="tab"><a href="#假设题型-2">相交-约分</a></li><li class="tab"><a href="#假设题型-3">相离-搭桥</a></li><li class="tab"><a href="#假设题型-4">相切-矛盾</a></li></ul><div class="tab-content"><div class="tab-pane active" id="假设题型-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note success"><p><strong>补全</strong></p><p>注意：<em>逻辑题论点非常明显，不需要特别去找，难在如何压缩</em><br><strong>步骤</strong></p><ol><li>压缩论点、论据</li><li>对比论点论据得出 <strong>模型公式</strong></li><li>从答案中确认模型结论</li></ol><div class="note warning"><ol><li>论据：a-&gt;B;  论点： A =&gt; B;</li><li><strong>隐含的条件</strong>：A = a+b;</li><li>补充的前提：b =&gt; B;</li></ol><div class="note danger">长沙妹子-漂亮； 湖南妹子-漂亮；湖南除长沙以外的妹子漂亮。</div></div><p><strong>难点</strong></p><ol><li>快速压缩论点、论据；</li><li>识别包含、相交、相离。</li><li>利用公式。</li></ol><div class="note info"><p>有专家认为，全球经济正缓慢复苏，其主要证据是，美 国的经济表现超出预期，在就业和住房方面都有不错的表现；欧 洲央行启动了融资运作计划，用比较低的利率贷款，为更多的企 业以及中小企业进行融资；全球整个大宗商品市场树立了足够的 信心。因此，这都是非常好的迹象。</p><p>如果以下各项为真，最有可能成为上述论证前提的是( )。</p><p>A.专家先前对美国经济表示不乐观</p><p>B.欧洲央行原有利率交稿，银根紧</p><p>C.非欧美国家的经济状况保持稳定</p><p>D.全球大宗商品交易缺乏信心支持</p><div class="note danger">第一步：压缩论点、论据。论据：美国 好、欧洲好。论点：全球经济好。第二步：对比论点、论据。可 知：全球=欧美+非欧美。包含关系。第三步：得出补全：非欧美 经济</div></div></div>              </div>            </details></div><div class="tab-pane" id="假设题型-2"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note danger">约分（相交用约分）。所谓相交就是论点与论据之间内容有重复。<p><strong>概念</strong></p><ol><li>论据：A=&gt;B 论点：A=&gt;C <em>约分：把 A 约掉。</em></li><li>得，B=&gt;C</li><li><strong>实质</strong>就是<em>三段论<em>。</em>每个符号都出现了两次</em></li></ol><img data-src='90.png' width='80%' /><div class="note success"><p><strong>约分，相同的约分。</strong><br>没有方法，<em>做不对</em></p></div></div>              </div>            </details></div><div class="tab-pane" id="假设题型-3"><div class="note primary"><p><strong>搭桥（相离用搭桥）。所谓相离，就是论点与 论据无关系。</strong></p><p><strong>概念</strong><br>假设：论据：A、 论点：B 。 需要补充的为：A 与 B 的关 系</p><div class="note warning"><p>（2019 年省考）自制力不仅关乎自我控制，还包括排除不相关刺激的干扰和坚持完成相关任务（即使是自己不喜欢的任务）的能力。自制力是稳定不变的，还是会被消耗的，学界各派的看法不一。心理学家把实验对象分为两组，让他们同场解决难题。一组解题时只能吃萝卜，另一组还可以吃饼干。结果只吃萝<br>卜的这组坚持时间更短，因为他们在抵制饼干的诱惑的同时，消耗了自制力。他们由此得出结论：人们的自制力是有限的，过度使用会导致自制力下降。<br>上述结论的成立需要补充以下哪项作为前提？</p><p>A 实验对象对解决难题的兴趣不完全相同</p><p>B 饼干和萝卜对实验对象的诱惑力不相同</p><p>C 饼干和萝卜补充人体能量的效果不相同</p><p>D 两组实验对象抗干扰的能力不完全相同</p><div class="note success"><p>钩不了沉秒杀解析：<br>第一步：压缩论点论据：论据：<strong>实验</strong> 论点：<strong>自制力有限</strong>。<br>第二步：分析可得，论点论据相离用搭桥。<br>第三步：搭桥：ACD 均为海绵模型，B，完善实验中自制力消耗不同。秒 B。</p><p><em>注意，此题首次将假设题型和削弱题型嫁接。</em></p></div></div></div></div><div class="tab-pane" id="假设题型-4"><div class="note warning"><p>矛盾（相切用矛盾）。所谓相切，就是论点与 论据出现矛盾的 <strong>转折词。</strong></p><p><strong>重点</strong></p><ol><li>转折词；然而、但是、但。。。</li><li>直接看挨得最近的那句话</li><li>缺A或搭桥，有时候有些晦涩。</li></ol><p><strong>概念</strong></p><ol><li>题型特征：xxx论据xxx; <strong>然而</strong>论点：A。</li><li>确认论点：A;</li><li>如果论据中没有 <strong>-A</strong>， 答案找；【缺A模型】</li><li>否则，解释 <strong>A</strong>；【架桥模型】</li><li>就是围绕论点去找、去解释。</li></ol><div class="note success"><p>（2018 年省考）宇宙加速膨胀是因为物质之间相互排斥， 减速膨胀是因为物质之间相互吸引。因此，要在此基础上解释宇 宙的加速或减速膨胀，必须要有不同特性的物质在不同的时期占 主导地位，从而产生强大的排斥力或吸引力。粒子物理标准模型 中的所有粒子都产生吸引的引力，<br><strong>然而</strong> <em>星系转动曲线</em> 的研究表明，在星系里面还有大量的、看不到的物质，这些物质可以产生非常强大的吸引性引力。</p><p>以上论证如果为真，那么<em>星系转动曲线</em>研究结论隐含了下列哪一项前提？</p><p>A. 粒子物理标准模型中的所有粒子产生的吸引性引力不足<br>B. 粒子物理标准模型中的粒子不是唯一的，存在其它粒子<br>C. 星系转动曲线的研究说明这个时期的宇宙正在加速膨胀<br>D. 星系转动曲线的研究说明存在超大质量、看不到的黑洞</p><div class="note warning"><p>钩不了沉秒杀解析</p><p>第一步：压缩论点、论据。确认题型： 在论点论据中出现了<strong>“然而”。</strong><br>第二步：对比论点、论据。</p><p>可知：<em>为矛盾关系【缺 A 模型】。</em></p><p>论点为：物质、强吸引力，要想补充矛盾，必须为 弱吸引力，秒 A。</p></div></div><div class="note warning">（2019 年国考）所有的地震都是以 P 波开始的，这些 P 波 移动快速，使地面发生上下震动，造成的破坏较小。下一个是 S 波，它的移动很慢，使地面前后、左右晃动，破坏性极大。<p>早期 预警系统通过测量 P 波沿地面移动的情况，来预测 S 波所造成的影响，然后发出<em>警报</em>。</p><p><strong>然而</strong>，从事此类系统工作的科学家们发现， 事实上人们并没有多少<em>时间</em>为大地震做好<em>准备</em>。<br>要得到上述结论，需要补充的最重要前提是（ ）</p><p>A．地球上每年大约发生 500 多万次地震，绝大多数的地震 人们根本感觉不到<br>B．根据历年大地震的记载，强震大多在夜里瞬间发生，无 法在短时间内组织有效的防御行动<br>C．地震越大，P 波与 S 波之间的间隔越短，留给人们预警 的时间不多<br>D．发生较大地震时，人们先感到上下颠簸，而后才有很强 的水平晃动，这种晃动是由 S 波造成的</p><div class="note success"><p>钩不了沉秒杀解析：213 读题：假设题。<br>第一步：压缩论点、 论据。在论点论据中出现了“然而”。<br>第二步：对比论点、论据。 论点：无时间准备。论据：可以警报（有时间）可知：为矛盾关 系架桥模型。</p><p><strong>构建，警报与无时间关系</strong>，秒 C。题干中的原理不用读，这就是逻辑关系秒杀的魅力。</p><p><em>杀手级总结：缺 A 模型其实是补全，架桥模型其实是搭桥， 回归五幅图。</em></p></div></div></div></div></div></div><hr><h3 id="加强削弱"><a href="#加强削弱" class="headerlink" title="加强削弱"></a>加强削弱</h3><div class="tabs" id="五大思维"><ul class="nav-tabs"><li class="tab active"><a href="#五大思维-1">五大思维 1</a></li><li class="tab"><a href="#五大思维-2">因果思维 🚩</a></li><li class="tab"><a href="#五大思维-3">方式+目的思维。🚩🚩</a></li><li class="tab"><a href="#五大思维-4">枚举论证</a></li><li class="tab"><a href="#五大思维-5">对比论证 🚩🚩🚩</a></li><li class="tab"><a href="#五大思维-6">类比论证</a></li></ul><div class="tab-content"><div class="tab-pane active" id="五大思维-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <p><strong>加强</strong>： 213 读题模式：</p><p>第一步：论点前置法。<br>第二步：压 缩主题法。（≥2 个主体关系）<br>第三步：符号重合度。（主题、 逻辑关系的重合）</p><p><strong>★注：加强不需要五大思维。+、－、0 体系会在习题中讲 解。</strong></p><p><strong>削弱</strong>：213 读题模式：<br>第一步：论点前置法。<br>第二步：五大 思维法。<br>第三步：答案主题骨架分析法。（大于等于 2 原则，结 合五大思维）</p>              </div>            </details></div><div class="tab-pane" id="五大思维-2"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note primary"><p>标志性：一般情况因为 A，所以 B。<br>本质：A=&gt;B</p><p>加强：符号的重合度。<br>削弱：</p><ol><li>最强削弱：A 且-B.（了解）</li><li>次之：因果倒置。（了解）B-&gt;A； -B或A</li><li>再次之：<strong>—A（否因）、隔断因果联系。（重点）</strong> </li><li>最后：—B（否果）（了解）</li></ol><div class="note danger">（2019 年省考）.长久以来，心理学家都支持“数学天赋论”：数学能力是人类自打娘胎里出来就有的能力，就连动物也有这种能力。他们认为存在一种天生的数学内核，通过自我慢慢发展，这种数学内核最后会“长”成我们所熟悉的一切数学能力。最近有反对者提出了不同的看法：数学能力没有天赋，只能是文化的产物。<p>以下哪项如果为真，最能支持反对者的看法？</p><p>A 10~12 个月的婴儿已经知道 3 个黑点和 4 个黑点是不一样的<br>B 数学是大脑的产物，而大脑的生长模式早已由基因“预设”<br>C 经过人为训练的大猩猩、海豚和大象等动物能处理数学问题<br>D 绝大多数的原始部落的居民只能表示 5 以下甚至更少的数量</p><div class="note success"><p>钩不了沉秒杀解析：213 读题：<strong>加强</strong>。<br>第一步：论点前置法。<br>第二步：主题与逻辑关系：<em>数学能力、天赋-、文化+</em>。又再考察三个主题的逻辑关系。<br>第三步：<strong>符号重合度</strong>：</p><p>A、婴儿=天赋。3、4黑点=数学能力，削弱，<br>B、数学能力、大脑。主题不一致。<br>C、大猩猩=-文化、数学能力，削弱。<br>D、原始部落=文化，5 以下=数学能力—，加强，逻辑关系也重合。<br>秒 D。</p></div><div class="note warning"><p>例、在一次考古发掘中，考古人员在一座唐代古墓中发现多 片先秦时期的夔文（音 kui,一种变体的龙文）陶片。<br>对此，专家解释说，<strong>由于</strong>雨水冲刷等原因，这些先秦时期的陶片后来被冲 至唐代的墓穴中。<br>以下哪项如果为真，最能质疑上述专家的观点？（ ）</p><p>A．在这座唐代古墓中还发现多件西汉时期的文物<br>B．这座唐代古墓保存完好，没有漏水、毁塌迹象<br>C．并非只有先秦时期才使用夔文，唐代文人以书写夔文为能事<br>D．唐代的墓葬风俗是将墓主生前喜爱的物品随同墓主一同下葬</p><div class="note success"><p>钩不了沉秒杀解析：213 读题：<br>第一步：论点前置法。<br>第二步：因果论证思维：因：雨水冲刷，果：秦陶片—唐墓。因果削 弱主流削弱是削因。<br>第三步：答案主题分析法：A、唐墓—西汉文物。无关。B、—雨水冲刷。削因。C、唐人—夔文。无关。D、 唐墓主—随葬物品。无关。秒 B</p><div class="note danger"><p>引申分两种</p><ol><li>必然性引申</li><li>可能性引申</li></ol><p>十大陷阱之二：<strong>引诱可能性引申</strong></p></div></div></div><details ><summary> <p>实例</p> </summary>              <div class='content'>              <div class="note primary"><p>某市为了发展文化强市战略，在 2008 年、2010 年先后 建成了两个图书馆，2008 年底共办理市民借书证 7 万余个，到 2010 年底共办理市民借书证 13 万个，2011 年，该市又在新区建 立了第三个图书馆，于 2012 年初落成开放，截止 2012 年底，全 市共计办理市民借书证 20 余万个。<br>市政府由此认为，该项举措是有实效的，因为在短短的 4 年间，光顾图书馆的市民增加了近两倍。</p><p>以下哪项如果为真，最能<strong>削弱</strong>上述结论？</p><p>A．图书馆要不断购置新书，维护成本也很高，这会影响该 市其他文化设施建设<br>B．该市有两所高等学校，许多在校生也办理了这 3 个图书 馆的借书证<br>C．很多办理了第一个图书馆借书证的市民又办理了另外两个图书馆的借书证<br>D．该市新区建设发展迅速，4 年间很多外来人口大量涌入 新区</p><p>钩不了沉秒杀解析：213 读题：<br>第一步：论点前置法。<br>第二步：因果论证思维：因：市民增加两倍，果：措施有效。因果削弱主流削弱是削因。<br>第三步：答案主题分析法：</p><p>A、维护成本高其他建设。无关。<br>B、两所高校。不是市民。<br>C、市民办理多个证 件，削因。无关。<br>D、<em>外来人口涌入，并没有说人多看出就多。</em></p><p>引诱间接引申。秒 C。</p></div><div class="note default">。研究者认为，尽管“互<p>联网+科普”令科学知识的获取和传播方式发生了很大变化，但这不是对科普传播的一种颠覆，而是显示了公民科学素养的提升。</p><p>以下哪项如果为真，最能质疑研究者的观点？</p><p>A 新闻应用、微博等资讯类媒体是用户了解科学热点事件的最主要渠道<br>B 在许多科学热点事件的传播过程中，公众很难见到权威科学家的身影<br>C 数据表明，用户普遍乐于通过图文资讯这样轻松愉悦的形式获取知识<br>D 比起明星八卦，在社交媒体转发科普内容更能为转发者本人形象加分</p><p>钩不了沉秒杀解析：213 读题：第一步：论点前置法。第二 步：因果论证思维：因：科学素养提升，果：传播方式变化。主流是削因，注意论点里出现三个主题的逻辑关系。<br>第三步：答案 主题分析法：<br>A、加强果。<br>B、强调科学素养的突出，加强因。<br>C、加强果。<br>D、强调科学素养并没提升，削因。秒 D。</p><p>三个主题的 逻辑关系知识点再逐步凸显。</p></div>              </div>            </details></div></div>              </div>            </details></div><div class="tab-pane" id="五大思维-3"><div class="note danger"><p>标志性：通过 A 达到了 B 的目的。为了 B 这个目的，我们采 用 A 这种手段,出现目的、手段、达到、政策等词。</p><p><strong>本质</strong>：A=》B。与因果的区别在于这个 A 是一个方式、手段。 </p><p><strong>加强</strong>：符号<em>重合度。</em><br><strong>削弱</strong>：其核心会从以下几个方面做考点：</p><ol><li>最强削弱：方式不能达到目的。（重点掌握） </li><li>次之削弱：方式不可执行（重点掌握） </li><li>最弱削弱：方式没有意义、有负面效果（了解即可，考察概率小）</li></ol><p>命题<strong>陷阱</strong>角度分析：</p><ol><li>顾左右而言他；</li><li>弱加强选项。</li></ol><div class="note warning"> 海洋中珊瑚的美丽颜色来自于其体内与之共存的藻类生物，其中虫黄藻是最重要的一类单细胞海藻。二者各取所需，想 互提供食物。全球气候变暖造成的海水升温导致虫黄藻等藻类大 量死亡，进而造成珊瑚本身死亡，引发珊瑚礁白化现象，然而研 究发现，珊瑚能通过选择耐热的其他藻类生物等途径，来应对气 候变暖带来的挑战。<p>以下哪项如果为真，将削弱这一研究发现？（ ）<br>A．一些虫黄藻能够比耐热的其他藻类耐受更高的海水温度<br>B．有些藻类耐热性的形成需要一个长期的过程<br>C．有些虫黄藻逐渐适应了海水温度的升高并存活下来<br>D．有些已白化的珊瑚礁中也发现了死去的耐热藻类生物</p><div class="note success">钩不了沉秒杀解析：213 读题：削弱：第一步：论点前置法。 第二步：五大思维法：*方式：耐热藻类。目的：应对气候变暖。 *第三步：答案主题分析法：A 虫黄藻与耐热藻类的对比，顾左右 而言他。虫黄藻与耐论点有毛线关系！B、需要很长时间，仍然 是能够形成。经常出现“很长时间”这种命题模式，属于弱加强 选项。C、加强，无需赘述。D、选择耐热藻类仍然热死。方式达 不到目的。秒 D</div></div></div></div><div class="tab-pane" id="五大思维-4"><p>标志性：枚举论证是指一个一个的列举出来。抓住这个核心 就能区分出这种题型的特点。<br><strong>本质</strong>：<em>个体—整体；特性—共性；一般性—普遍性。</em><br><strong>加强削弱</strong>：<em>样本是否具有科学性、代表性</em>。</p><div class="note warning">例、为了调查当前人们的识字水平，其实验者列举了 20 个 词语，请 30 位文化人士识读，这些人的文化程度都在大专以上。 识读结果显示，多数人只读对 3 到 5 个词语，极少数人读对 15 个以上，甚至有人全部读错。其中，“蹒跚”的辨识率最高，30 人中有 19 人读对;“呱呱坠地”所有人都读错。20 个词语的整 体误读率接近 80%。该实验者由此得出，当前人们的识字水平并 没有提高，甚至有所下降。<p>以下哪项如果为真，最能对该实验者的结论构成质疑?</p><p>A.实验者选取的 20 个词语不具有代表性<br>B.实验者选取的 30 位识读者均没有博士学位<br>C.实验者选取的 20 个词语在网络流行语言中不常用<br>D.“呱呱坠地”这个词的读音有些大学老师也经常读错 </p><p>钩不了沉秒杀解析：213 读题：削弱：<br>第一步：论点前置法。 发现答案无论点叙述，且有样本和代表性标志性字眼。<br>第二步： 五大思维法：枚举思维：样本：抽样对词语调查。共性：当代的 识字水平。<br>第三步：不具有代表性，秒 A </p><p>★本题属于典型的枚举思维考察，本题还有另外一个用意， 有些学生会认为 B 也是对样本不具有代表性削弱。B 有两个问题： 1、没有博士学位没有不具有代表性削弱严谨。2、本题中心在于对识字水平的削弱，而不是在于对学位问题探讨。本题综合性较 强，综合了枚举思维的普通点和难点，故不再用多余习题赘述。</p></div></div><div class="tab-pane" id="五大思维-5"><div class="note danger"><p><strong>标志性</strong>：两个主体。<em>A 比 B 好</em>；<br>本质：A&gt;B A &lt; B A=B A 不等于 B；<br>加强：符号重合度。<br><strong>削弱</strong>： </p><ol><li>最强削弱：A 是否比 B 好，<strong>论点削弱</strong>。 </li><li>次之削弱：<strong>海绵模型</strong>：对比的样本被污染，对论据的削弱。</li></ol><p><strong>陷阱</strong></p><ol><li>对比范围</li><li>中庸选项</li></ol><ol><li>什么是海绵模型；<ol><li>对比的样本不纯正、有污染；</li><li>作用针对：<strong>削弱题</strong>，削弱论据。</li></ol></li><li>海绵模型选项特征；<ol><li>污染论据，污染样本；</li><li>去海绵🧽，是对论据的加强</li></ol></li><li>对比的范围<ol><li>a &gt; b</li><li>a = b</li><li>a &lt; c</li></ol></li><li>海绵模型逆向<ol><li>加强论据</li></ol></li></ol><div class="note primary"><p>★注：从加强削弱的题型上来说，分为<strong>肯定性与否定型</strong>。</p><ol><li>肯定性：最能加强、最能削弱，选最优的；</li><li>否定型：最不能加强或者最不能削弱<ol><li>最不能加强：可能是削弱，可能是无关 </li><li>最不能削弱：可能是加强，可能是无关</li></ol></li></ol><p>削弱主要看模型；<br>加强主要看论点；</p><p>加强题做题步骤：</p><ol><li>论点前置；</li><li></li></ol><p>削弱题做题步骤：</p></div><blockquote class="blockquote-center"><p>难题—好好思考🤔</p></blockquote><details ><summary> <p>难题🚩🚩</p> </summary>              <div class='content'>              <div class="note warning"><p>例.某研究团队让两批测试者分别进入睡眠实验室里睡上一 夜, 第一批被安排睡得很晚, 从而减少总睡眠时间; 第二批被 安排睡得早, 但在睡眠过程中多次被吵醒。第二晚过后, 结果就 已经显现: 第二批测试者的积极情绪受到严重影响。他们的精力 水平较低, 同情心和友善度等积极情绪指数有所下滑、部分研究 者据此认为, 被吵醒导致了测试者无法得到足够的慢波睡眠, 而慢波睡眠是恢复精力感的关键, 但也有研究者对此项研究的 可信度提出质疑。以下哪项如果为真， 最能<strong>反驳质疑者</strong>？</p><p>A. 第一批测试者积极情绪的指数下滑程度不太明显<br>B. 第二批测试者中大部分人长期以来情绪不够积极<br>C. 两批测试者的健康状况和心理素质原本就很接近<br>D. 两批测试者在参与睡眠实验前精力水平参差不齐</p><div class="note primary"><p>自我理解：</p><ol><li><strong>反驳质疑者</strong>：负负得正，是加强论点的题目；</li><li>选项，首先BD海绵模型，排除，因为海绵是针对削弱题型的；</li><li>C是去海绵，加强<strong>论据</strong>；</li><li>A直接加强论点，侧面说明论点正确，做铺垫。</li></ol><p>钩不了沉秒杀解析：213 读题：<br>第一步：论点前置法。<br>第二步：五大思维法：因答案中出现实验对比，基本确定对比论证思 维中的海绵模型。<br>第三步：答案主题法：<strong>本题最大的亮点在于， 题干为最能反驳质疑者，其实是加强题干实验</strong>，<br>所以 B 选项和 D 选项很好排除，因为均为<strong>海绵模型</strong>，是<strong>削弱</strong>，<br>而本题实质<strong>考察加强</strong>，按道理此题应该是去海绵，就是使得样本在同一起跑线，应该选 C，大错特错，<em>海绵模型是对比源头，削弱时力度强</em>，<br>但<strong>加强时 A 直接加强结论，更强</strong>，秒 A。此题应当好好研究。</p></div></div>              </div>            </details><details ><summary> <p>事例</p> </summary>              <div class='content'>              <div class="note default">例、一般情况下，女性比男性更为健谈。而一项涉及交谈习 惯的报告显示，许多时候男性比女性更能主导谈话，在讨论中平 均说出更多的词汇。因此，有人认为，以话语量衡量，两性在语 言方面的差异并不大。以下哪项如果为真，最不能支持上述结论?<p>A．成年人中，女性在和同学、父母、子女谈话时，大多占 据主导地位，而男性则较为收敛，要稍逊一筹<br>B．在辩论赛或一些富有争议的话题中，男性往往滔滔不绝， 而在涉及情感的话题中，女性则发言更多<br>C．研究发现，在夫妻之间的交谈中，男女双方的平均谈话 量差异不大，只是因地域不同而有差异<br>D．一般年纪小的女孩比男孩平均说话更多，这与其语言学 习速度较快有关：但 13 岁以后，男孩平均比女孩说话更多</p><div class="note info"><p>钩不了沉秒杀解析：213 读题：<br>第一步：论点前置法。<br>第二步：压缩主题法：<strong>男话语量≈女话语量</strong>。<br>第三步：符号重合法： B、C、D、<strong>均不在同一范围</strong>进行对比，不符合。秒 A。</p></div></div>              </div>            </details></div></div><div class="tab-pane" id="五大思维-6"><p>这个考点在加强削弱中可能会出现在答案中，结合练习题 讲。</p><p>主要标志： A：abcd ,B:abc =&gt;B 中也有 d</p><p>★章节补充考点：</p><p>1、可能性选项：如果考题中出现可能性 选项，即出现“可能”、“大概”等字眼，一般不选，除非其他 选项均不靠谱。因为逻辑的削弱和加强最优需要观点明确和严谨。</p><p>2、两面性选项：如果选项中出现两面性选项，即 A 好，但 A 有一些问题。这种选项本身观点不明确，根据最优原则，一般 不入选。但要知道，整体选项的观点是在强调“但是”后面。</p></div></div></div><div class="tabs" id="加强"><ul class="nav-tabs"><li class="tab active"><a href="#加强-1">加强 1</a></li><li class="tab"><a href="#加强-2">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="加强-1"><details ><summary> <p>解释</p> </summary>              <div class='content'><pre><code>  &lt;/div&gt;&lt;/details&gt;</code></pre></div><div class="tab-pane" id="加强-2"></div></div></div><div class="tabs" id="假设题"><ul class="nav-tabs"><li class="tab active"><a href="#假设题-1">假设题 1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="假设题-1"><details ><summary> <p>解释</p> </summary>              <div class='content'><pre><code>  &lt;/div&gt;&lt;/details&gt;</code></pre></div></div></div><div class="tabs" id="特殊题型"><ul class="nav-tabs"><li class="tab active"><a href="#特殊题型-1">解释类</a></li><li class="tab"><a href="#特殊题型-2">列表法 难🚩</a></li></ul><div class="tab-content"><div class="tab-pane active" id="特殊题型-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note danger"><p>★解释类题型本质在于题干中出现<strong>前后矛盾</strong>的情况，需要你加入一个<strong>桥梁</strong>使得矛盾两方面均能够成立，故正确选项必须<strong>兼顾两方面</strong>。</p><div class="note info">例、二氧化硫是造成酸雨的主要原因。某地区饱受酸雨困扰， 为改善这一状况，该地区 1—6 月累计减排 11.8 万吨二氧化硫， 同比下降 9.1%．根据监测，虽然本地区空气中的二氧化硫含量 降低，但是酸雨的频率却上升了 7.1%,以下最能解释这一现象的 是：（ ）<p>A．该地区空气中的部分二氧化硫是从周围地区漂移过来的</p><p>B．虽然二氧化硫的排放得到控制，但其效果要经过一段时 间才能实现。</p><p>C．机动车的大量增加加剧了氮氧化物的排放，而氮氧化物 也是造成酸雨的重要原因</p><p>D．尽管二氧化硫的排放总量减少了，但二氧化硫在污染物 中所占的比重没有变</p><p>钩不了沉秒杀解析：<br>第一步：寻找矛盾点：前提：硫酸降低， 结果：酸雨升高，矛盾。<br>第二步：兼顾矛盾法：<br>A、违背硫酸降 低前提。不兼顾。<br>B、前提符合，结果不符合：一段时间实现， 至多酸雨持平，不可能上升。<br>C、前提符合：可满足硫酸降低的 可能，结果符合：氮氧化物造成酸雨上升。<br>D、前提符合，结果不符合：比重没有变的情况下，二氧化硫减少，证明总量减少。 不符合酸雨上升，秒 C 。</p></div></div>              </div>            </details></div><div class="tab-pane" id="特殊题型-2"></div></div></div><ol><li>言语 逻辑 分开</li><li>数量 资料 分开</li><li>做个模块，图一次卡</li><li>考前<ol><li>晚上，做一套行测试卷；不要对答案；</li><li></li></ol></li></ol><hr><h1 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h1><h2 id="翻译推理"><a href="#翻译推理" class="headerlink" title="翻译推理"></a>翻译推理</h2><hr><div class="tabs" id="推理补充二"><ul class="nav-tabs"><li class="tab active"><a href="#推理补充二-1">联言与选言</a></li></ul><div class="tab-content"><div class="tab-pane active" id="推理补充二-1"><details ><summary> <p>联言与选言</p> </summary>              <div class='content'>              <div class="note danger">联言：就是通过“且”这个词连结。<p>相容选言：“或”命题。本质是选择命题。<br>不相容选言：要么…要么…；不是…就是…</p><p>假言命题：关联词进行连接的两句话。 内在的逻辑关系是“=》”推出关系 例如：</p><ol><li>如果 A，那么就 B。 A=&gt;B </li><li>只要 A，就 B。 <strong>A=&gt;B</strong></li><li>只有 A，才 B。<strong>B=&gt;A</strong></li><li><strong>除非 A,否则 B。 -A=&gt;B</strong></li></ol><p><strong>秒杀口诀：谁是充分谁在前；谁是必要谁在后。</strong></p></div>              </div>            </details></div></div></div><hr><div class="tabs" id="加强消弱-补充二"><ul class="nav-tabs"><li class="tab active"><a href="#加强消弱-补充二-1">加强消弱</a></li><li class="tab"><a href="#加强消弱-补充二-2">速选</a></li></ul><div class="tab-content"><div class="tab-pane active" id="加强消弱-补充二-1"><p>【注意】论点有 A 也有 B，即 A→B。加强可以说“没有 A 就没有 B”，削弱 可以说“没有 A 但有 B”。</p></div><div class="tab-pane" id="加强消弱-补充二-2"><div class="note success"><p>（2018 辽宁）某校招聘专任教师时有张强、李颖、王丹、赵雷、钱萍 5 名 博士应聘。3 人毕业于美国高校，2 人毕业于英国高校；2 人发表过 SSCI 论文， 3 人没有发表过 SSCI 论文。已知，张强和王丹毕业院校所在国家相同，而赵雷 和钱萍毕业院校所在国家不同；李颖和钱萍发表论文的情况相同，但王丹和赵雷 发表论文的情况不同。最终，英国高校培养的一位发表过 SSCI 论文的博士被录 取。</p><p>由此可以推出：</p><p>A.张强没发过 SSCI 论文</p><p>C.王丹毕业于英国院校</p><p>B.李颖发表过 SSCI 论文</p><p>D.赵雷毕业于英国院校</p></div><p>相同归大，要小排相同<br><strong>不同里边出现两次的被选中</strong></p><p>【注意】</p><ol><li>只有 5 人，被分为“3+2”的形式，才可以使用该方法。“相同归大”的“大” 指 3 人，如上题（2018 辽宁）选择“英国”，是 2 人中的；“发表过 SSCI”也是 2 人中的，选择的都是小的，所以要把“相同”的“大”（3 人）排除掉。</li><li>但凡做题遇到 2 次的题目，一定有“套路”。</li><li></li></ol></div></div></div><hr><div class="tabs" id="前推后"><ul class="nav-tabs"><li class="tab active"><a href="#前推后-1">前推后</a></li><li class="tab"><a href="#前推后-2">等价</a></li><li class="tab"><a href="#前推后-3">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="前推后-1"><details ><summary> <p>前推后</p> </summary>              <div class='content'>              <div class="note success"><p><span id="inline-purple"> 题型特征 </span></p><ol><li>题干和选项中出现比较明显的逻辑关联词</li><li>提问方式是“可以推出”“不能推出”等</li></ol><p><span id="inline-bule"> 解题思维 </span></p><ol><li>先翻译 == （逻辑关系词 翻译为 A =&gt; B )</li><li>再推理 == （根据逻辑公式进行推导）</li></ol><h3 id="前推后"><a href="#前推后" class="headerlink" title="前推后"></a>前推后</h3><p>关联词</p><ol><li>如果。那么/就。</li><li>若。则。</li><li>只要。就。</li><li>所有。都。</li><li>为了。一定/必须。</li><li>。是。的充分条件</li></ol><img data-src="04.png" width=80% /></div>              </div>            </details></div><div class="tab-pane" id="前推后-2"><img data-src="05.png" width=80% /></div><div class="tab-pane" id="前推后-3"><img data-src="06.png" titie="串起来" width=80% /></div></div></div><h3 id="后推前"><a href="#后推前" class="headerlink" title="后推前"></a>后推前</h3><div class="tabs" id="后推前"><ul class="nav-tabs"><li class="tab active"><a href="#后推前-1">公式</a></li><li class="tab"><a href="#后推前-2">实例</a></li><li class="tab"><a href="#后推前-3">实例</a></li><li class="tab"><a href="#后推前-4">变形</a></li><li class="tab"><a href="#后推前-5">谁必不可少</a></li></ul><div class="tab-content"><div class="tab-pane active" id="后推前-1"><img data-src="07.png" width=80% /></div><div class="tab-pane" id="后推前-2"><img data-src="08.png" title="答案：B" width=80% /></div><div class="tab-pane" id="后推前-3"><img data-src="09.png" width=80% /></div><div class="tab-pane" id="后推前-4"><div class="note danger"><p>除非 A 否则 B =》 -B -&gt; A<br>除非 A 否则不 B =》 B -&gt; A</p></div><img data-src="10.png" width=80% /><img data-src="11.png" width=80% /></div><div class="tab-pane" id="后推前-5"><p><strong>谁必不可少</strong> 就放在箭头后边</p><img data-src="12.png" width=80% /><img data-src="13.png" width=80% /></div></div></div><h3 id="且-或"><a href="#且-或" class="headerlink" title="且 或"></a>且 或</h3><div class="tabs" id="且或"><ul class="nav-tabs"><li class="tab active"><a href="#且或-1">概念</a></li><li class="tab"><a href="#且或-2">概念 1</a></li><li class="tab"><a href="#且或-3">实例</a></li><li class="tab"><a href="#且或-4">实例</a></li><li class="tab"><a href="#且或-5">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="且或-1"><img data-src="14.png" width=80% /></div><div class="tab-pane" id="且或-2"><img data-src="15.png" width=80% /></div><div class="tab-pane" id="且或-3"><img data-src="16.png" title="答案：C" width=80% /></div><div class="tab-pane" id="且或-4"><img data-src="17.png" title="答案：C" width=80% /></div><div class="tab-pane" id="且或-5"><img data-src="18.png" width=80% /></div></div></div><h3 id="德-摩根定律"><a href="#德-摩根定律" class="headerlink" title="德 摩根定律"></a>德 摩根定律</h3><div class="tabs" id="摩根定律"><ul class="nav-tabs"><li class="tab active"><a href="#摩根定律-1">概念</a></li></ul><div class="tab-content"><div class="tab-pane active" id="摩根定律-1"><details ><summary> <p>实例</p> </summary>              <div class='content'>              <img data-src="19.png" width=80% /><img data-src="20.png" width=80% />              </div>            </details></div></div></div><h3 id="推理方式"><a href="#推理方式" class="headerlink" title="推理方式"></a>推理方式</h3><p>提问方式：以下哪项中的推理形式/结构与题干中的推理形式/结构相同？</p><p>照这写就行</p><img data-src="22.png" width=80% /><hr><img data-src="21.png" width=80% /><h2 id="真假判断"><a href="#真假判断" class="headerlink" title="真假判断"></a>真假判断</h2><div class="tabs" id="真假判断"><ul class="nav-tabs"><li class="tab"><a href="#真假判断-1">矛盾关系 原理🌈</a></li><li class="tab active"><a href="#真假判断-2">矛盾关系 🚩 🚩</a></li><li class="tab"><a href="#真假判断-3">实例 🚩</a></li><li class="tab"><a href="#真假判断-4">实例一 矛盾</a></li><li class="tab"><a href="#真假判断-5">实例二</a></li></ul><div class="tab-content"><div class="tab-pane" id="真假判断-1"><div class="note warning"><p><a href="https://zhuanlan.zhihu.com/p/60356208" target="_blank" rel="noopener">直言命题</a></p><img data-src="78.png" width=80% /><img data-src="79.jpg" width=80% /><details danger><summary> <p>直言命题</p> </summary>              <div class='content'>              <div class="note success"><p><strong>矛盾关系</strong></p><p>特点：矛盾关系<em>必有一真一假</em></p><p>“所有A是B”与“有的A不是B”是矛盾关系</p><p>“所有A不是B”与“有的A是B”是矛盾关系</p><div class="note danger"><p>一个命题前面加“并非”，等值于这个命题的矛盾命题，表示如下：</p><p>并非“所有A是B”=有的A不是B</p><p>并非“有的A不是B”=所有A是B</p><p>并非“所有A不是B”=有的A是B</p><p>并非“有的A是B”=所有A不是B</p><p>可记为：“所有”与“有的”互换，有“不”的去掉，没“不”的加上。</p></div></div><div class="note default"><p><strong>反对关系</strong><br>特点：反对关系<strong>必有一假，可以同假</strong><br>“所有A是B”与“所有A不是B”是反对关系</p></div><div class="note info"><p><strong>下反对关系</strong></p><p>特点：下反对关系<strong>必有一真，可以同真</strong></p><p>“有的A是B”与“有的A不是B”是下反对关系</p></div><div class="note primary"><p><strong>推出关系</strong><br>特点：推出关系<em>可以同真，也可以同假</em></p><p>“所有A是B”与“有的A是B”是推出关系</p><p>“所有A不是B”与“有的A不是B”是推出关系</p></div>              </div>            </details></div></div><div class="tab-pane active" id="真假判断-2"><img data-src="81.png" title="必备 秒杀" width=80% /></div><div class="tab-pane" id="真假判断-3"><img data-src="85.png" title="必备 秒杀" width=80% /><img data-src="80.png" width=80% /></div><div class="tab-pane" id="真假判断-4"><img data-src="77.png" width=80% /><img data-src="84.png" width=80% /></div><div class="tab-pane" id="真假判断-5"><img data-src="83.png" width=80% /><img data-src="82.png" width=80% /><img data-src="86.png" titile="别怕" width=80% /></div></div></div><h2 id="组合排列"><a href="#组合排列" class="headerlink" title="组合排列"></a>组合排列</h2><p><span id="inline-purple"> 题型特征 </span></p><ol><li>题干给出两组以及两组以上对象</li><li>给出几组对象之间的关系</li></ol><h3 id="排除法、代入法"><a href="#排除法、代入法" class="headerlink" title="排除法、代入法"></a>排除法、代入法</h3><ol><li>何时用：题干条件为真，选项信息充分。</li><li>如何用：读一句，排一句</li></ol><div class="tabs" id="排除法"><ul class="nav-tabs"><li class="tab active"><a href="#排除法-1">排除法</a></li><li class="tab"><a href="#排除法-2">实例</a></li><li class="tab"><a href="#排除法-3">实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="排除法-1"><img data-src="23.png" width=80% /></div><div class="tab-pane" id="排除法-2"><img data-src="24.png" width=80% /></div><div class="tab-pane" id="排除法-3"><img data-src="25.png" width=80% /></div></div></div><h3 id="辅助技巧"><a href="#辅助技巧" class="headerlink" title="辅助技巧"></a>辅助技巧</h3><div class="tabs" id="辅助技巧"><ul class="nav-tabs"><li class="tab active"><a href="#辅助技巧-1">技巧</a></li><li class="tab"><a href="#辅助技巧-2">实例</a></li><li class="tab"><a href="#辅助技巧-3">实例</a></li><li class="tab"><a href="#辅助技巧-4">实例</a></li><li class="tab"><a href="#辅助技巧-5">复杂</a></li><li class="tab"><a href="#辅助技巧-6">选丙</a></li></ul><div class="tab-content"><div class="tab-pane active" id="辅助技巧-1"><img data-src="27.png" width=80% /></div><div class="tab-pane" id="辅助技巧-2"><img data-src="26.png" width=80% /></div><div class="tab-pane" id="辅助技巧-3"><img data-src="28.png" title="列公式" width=80% /></div><div class="tab-pane" id="辅助技巧-4"><img data-src="29.png" titile="好好看" width=80% /></div><div class="tab-pane" id="辅助技巧-5"><img data-src="30.png" titile="有点复杂" width=100% /></div><div class="tab-pane" id="辅助技巧-6"><img data-src="31.png" titile="还不定项" width=80% /></div></div></div><img data-src="32.png" width=80% /><h2 id="日常结论"><a href="#日常结论" class="headerlink" title="日常结论"></a>日常结论</h2><span id="inline-purple"> 类似于言语的细节判断</span><p>题干： 言语、无逻辑关联词</p><p>提问：由此可以推出、不能推出</p><span id="inline-bule"> 解题思路</span><ol><li><strong>不选</strong><ol><li>逻辑错误</li><li>无中生有</li><li>偷换概念</li></ol></li><li><code>慎选</code><ol><li>比较关系：比。, 越来越。、更</li><li>绝对词：一定、必须、肯定、只要就、只有才</li><li>程度：最、极大、很。</li><li>范围的扩大</li></ol></li><li><span id="inline-purple"> 优选 </span><ol><li>词汇：可能、有的、有些。</li></ol></li></ol><div class="note danger"><p><strong>警惕</strong>五大坑王：更！最！越！首！极！</p></div><hr><div class="tabs" id="日常，3"><ul class="nav-tabs"><li class="tab active"><a href="#日常，3-1">实例 1</a></li><li class="tab"><a href="#日常，3-2">实例 2</a></li><li class="tab"><a href="#日常，3-3">实例 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="日常，3-1"><img data-src="33.png" titile="" width=80% /></div><div class="tab-pane" id="日常，3-2"><img data-src="34.png" titile="" width=80% /></div><div class="tab-pane" id="日常，3-3"><img data-src="35.png" titile="" width=100% /></div></div></div><h2 id="逻辑论证-🚩"><a href="#逻辑论证-🚩" class="headerlink" title="逻辑论证 🚩"></a>逻辑论证 🚩</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><div class="note danger">消弱题型：反对<div class="note success">加强题型：赞同</div></div><div class="tabs" id="逻辑论证"><ul class="nav-tabs"><li class="tab active"><a href="#逻辑论证-1">概念</a></li><li class="tab"><a href="#逻辑论证-2">定位</a></li><li class="tab"><a href="#逻辑论证-3">快速</a></li><li class="tab"><a href="#逻辑论证-4">定位</a></li><li class="tab"><a href="#逻辑论证-5">定位</a></li></ul><div class="tab-content"><div class="tab-pane active" id="逻辑论证-1"><img data-src="36.png" titile="" width=80% /></div><div class="tab-pane" id="逻辑论证-2"><img data-src="37.png" titile="" width=80% /><img data-src="38.png" titile="" width=80% /></div><div class="tab-pane" id="逻辑论证-3"><img data-src="39.png" titile="" width=80% /><img data-src="40.png" titile="" width=80% /></div><div class="tab-pane" id="逻辑论证-4"><img data-src="41.png" titile="" width=80% /><img data-src="42.png" titile="" width=80% /></div><div class="tab-pane" id="逻辑论证-5"><img data-src="43.png" titile="" width=80% /><img data-src="44.png" titile="优选：B" width=80% /></div></div></div><h3 id="加强"><a href="#加强" class="headerlink" title="加强"></a>加强</h3><h4 id="解释原因-amp-举例子"><a href="#解释原因-amp-举例子" class="headerlink" title="解释原因 &amp; 举例子"></a>解释原因 &amp; 举例子</h4><div class="note success">解释说明 ｜｜ 举例子</div><ol><li><em>只有论点</em></li><li><em>论点与论据话题不一致</em></li></ol><div class="tabs" id="解释原因"><ul class="nav-tabs"><li class="tab active"><a href="#解释原因-1">举例子</a></li><li class="tab"><a href="#解释原因-2">解释说明</a></li></ul><div class="tab-content"><div class="tab-pane active" id="解释原因-1"><img data-src="45.png" titile="" width=80% /></div><div class="tab-pane" id="解释原因-2"><img data-src="46.png" titile="" width=80% /></div></div></div><h4 id="论点-amp-论据搭桥"><a href="#论点-amp-论据搭桥" class="headerlink" title="论点&amp;论据搭桥"></a>论点&amp;论据搭桥</h4><div class="note info">论点 论据不一致<div class="note warning">   搭桥： *去同存异*</div><div class="note primary">必要条件</div></div><div class="tabs" id="搭桥，2"><ul class="nav-tabs"><li class="tab active"><a href="#搭桥，2-1">搭桥，2 1</a></li><li class="tab"><a href="#搭桥，2-2">搭桥，2 2</a></li><li class="tab"><a href="#搭桥，2-3">搭桥，2 3</a></li><li class="tab"><a href="#搭桥，2-4">搭桥，2 4</a></li><li class="tab"><a href="#搭桥，2-5">搭桥，2 5</a></li></ul><div class="tab-content"><div class="tab-pane active" id="搭桥，2-1"><img data-src="50.png" width=80% /></div><div class="tab-pane" id="搭桥，2-2"><img data-src="51.png" width=80% /></div><div class="tab-pane" id="搭桥，2-3"><img data-src="52.png" width=80% /></div><div class="tab-pane" id="搭桥，2-4"><img data-src="53.png" title="答案：C"  width=80% /></div><div class="tab-pane" id="搭桥，2-5"><img data-src="54.png" width=80% /></div></div></div><h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><blockquote><p>属于补充论据</p></blockquote><div class="tabs" id="必要条件，1"><ul class="nav-tabs"><li class="tab active"><a href="#必要条件，1-1">必要条件，1 1</a></li><li class="tab"><a href="#必要条件，1-2">必要条件，1 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="必要条件，1-1"><img data-src="55.png" width=80% /></div><div class="tab-pane" id="必要条件，1-2"><img data-src="56.png" width=80% /></div></div></div><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><div class="tabs" id="总结"><ul class="nav-tabs"><li class="tab active"><a href="#总结-1">提分方式</a></li><li class="tab"><a href="#总结-2">步骤🚩</a></li><li class="tab"><a href="#总结-3">错误❌</a></li></ul><div class="tab-content"><div class="tab-pane active" id="总结-1"><img data-src="57.png" width=80% /></div><div class="tab-pane" id="总结-2"><img data-src="58.png" width=80% /></div><div class="tab-pane" id="总结-3"><img data-src="59.png" width=80% /></div></div></div><div class="note danger"><div class="note primary"><p>示例–解释说明<br>    1. 论点：伐木 &amp; 文明<br>    2. 解释说明：伐木 与 文明的关系</p></div><div class="note success"><p>示例–搭桥<br>    1. 论点：文明。<br>    2. 论据：伐木。<br>    3. 搭桥：伐木 与 文明的关系</p></div></div><h3 id="削弱"><a href="#削弱" class="headerlink" title="削弱"></a>削弱</h3><img data-src="60.png" width=80% /><h4 id="否论点-amp-举反例"><a href="#否论点-amp-举反例" class="headerlink" title="否论点 &amp; 举反例"></a>否论点 &amp; 举反例</h4><div class="tabs" id="否论点"><ul class="nav-tabs"><li class="tab active"><a href="#否论点-1">漂亮的实例👌</a></li><li class="tab"><a href="#否论点-2">排除法</a></li><li class="tab"><a href="#否论点-3">有难度</a></li><li class="tab"><a href="#否论点-4">技巧</a></li><li class="tab"><a href="#否论点-5">难🚫</a></li></ul><div class="tab-content"><div class="tab-pane active" id="否论点-1"><img data-src="61.png" width=80% /><!-- enttab --><!-- tab 别加戏 --><img data-src="62.png" width=80% /></div><div class="tab-pane" id="否论点-2"><img data-src="63.png" width=80% /></div><div class="tab-pane" id="否论点-3"><img data-src="64.png" width=80% /></div><div class="tab-pane" id="否论点-4"><img data-src="65.png" width=80% /></div><div class="tab-pane" id="否论点-5"><div class="note danger">用代替的方法</div><img data-src="66.png" width=80% /></div></div></div><h4 id="拆桥-论点-amp-论据"><a href="#拆桥-论点-amp-论据" class="headerlink" title="拆桥-论点&amp;论据"></a>拆桥-论点&amp;论据</h4><div class="tabs" id="拆桥"><ul class="nav-tabs"><li class="tab active"><a href="#拆桥-1">对比搭桥</a></li><li class="tab"><a href="#拆桥-2">拆桥 2</a></li><li class="tab"><a href="#拆桥-3">拆桥 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="拆桥-1"><img data-src="67.png" width=80% /></div><div class="tab-pane" id="拆桥-2"><img data-src="68.png" width=80% /></div><div class="tab-pane" id="拆桥-3"><img data-src="69.png" width=80% /></div></div></div><div class="note danger"><p>注意<br><img data-src="70.png" width=80% /></p></div><h4 id="否定论据"><a href="#否定论据" class="headerlink" title="否定论据"></a>否定论据</h4><div class="tabs" id="否定论据"><ul class="nav-tabs"><li class="tab active"><a href="#否定论据-1">特征</a></li><li class="tab"><a href="#否定论据-2">排除</a></li><li class="tab"><a href="#否定论据-3">直截了当</a></li><li class="tab"><a href="#否定论据-4">麻烦</a></li><li class="tab"><a href="#否定论据-5">漂亮的实例</a></li><li class="tab"><a href="#否定论据-6">排除</a></li></ul><div class="tab-content"><div class="tab-pane active" id="否定论据-1"><div class="note danger">论点特征，预测、建议；</div><img data-src="71.png" width=80% /></div><div class="tab-pane" id="否定论据-2"><img data-src="72.png" width=80% /></div><div class="tab-pane" id="否定论据-3"><img data-src="73.png" width=80% /></div><div class="tab-pane" id="否定论据-4"><img data-src="74.png" title="B" width=80% /></div><div class="tab-pane" id="否定论据-5"><img data-src="75.png" title="很好的综合选项" width=80% /></div><div class="tab-pane" id="否定论据-6"><img data-src="76.png" width=80% /></div></div></div><h2 id="❌易错点❌"><a href="#❌易错点❌" class="headerlink" title="❌易错点❌"></a>❌易错点❌</h2><p><span id="inline-purple"> 对策 <span></p><p>选项中出现<strong>对策</strong>类的词汇，并不知道对策是否执行，所以一定要注意，<code>有问题</code>–不选择<br>如：</p><ol><li>法律 <strong>应该</strong> 制定 …</li><li>企业 <strong>应当</strong> 担负 …</li></ol><p><span id="inline-blue"> 诉诸无知 == 不知道 <span></p><p>不知道的<strong>论据</strong>，不能当论据了，<code>不选择</code>。如：</p><ol><li><strong>没有实际数据显示。..</strong></li><li><strong>没有研究表明。…</strong></li><li>我们<code>没注意</code>到。..</li></ol><p><span id="inline-yellow"> 超出范围 <span></p><p>如果讨论的是 [A, B], 结果来了个论据是 <strong>还有更好的</strong>，超出谈论范围，<strong>不选择</strong></p><p><span id="inline-purple"> 无关选项 <span></p><p>和<strong>话题、主体</strong>不一致的不选择</p><p><span id="inline-blue"> 类比的选项 <span></p><p>类比一般比较弱，<strong>慎选</strong> 如：<code>两者类似</code></p>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 推理判断 </category>
          
          <category> 逻辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱因斯坦--我的世界观</title>
      <link href="2020/05/15/worldview/"/>
      <url>2020/05/15/worldview/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/016.jpg" width=66% /><span class='geyan'> 世上只有一种英雄主义——就是在认清生活的真相之后依然热爱生活——罗曼.罗兰 （作家 诺贝尔奖得主）</span><a id="more"></a><blockquote><p>（之前说“本文是爱因斯坦在1921年诺贝尔奖颁奖典礼上的演说辞”有误，查了资料订正如下：此文最初发表在1930年出版的《论坛和世纪》（Forum and century）84卷，193-194页。当时用的标题是“我的信仰”（What I believe）。这里译自《思想和见解》8-11页和《我的世界观》英译本237-242页，许良英、赵中立、张宜三编译，选自商务印书馆《爱因斯坦文集第三卷》。）</p></blockquote><p>　　我们这些总有一死的人，命运是多么的奇特！我们每个人在这个世界上都只作一个短暂的逗留；目的何在，却无从知道，尽管有时自以为对此若有所感。但是，不必深思，只要从日常生活中就可以明白：人是为别人而生存的──首先是为那样一些人，我们的幸福全部依赖于他们的喜悦和健康；其次是为许多我们所不认识的人，他们的命运通过同情的纽带同我们密切结合在一起。我每天上百次的提醒自己：我的精神生活和物质生活都是以别人（包括生者和死者）的劳动为基础的，我必须尽力以同样的分量来报偿我所领受了的和至今还在领受着的东西。我强烈地向往着俭朴的生活。并且时常发觉自己占用了同胞的过多劳动而难以忍受。我认为阶级的区分是不合理的，它最后所凭借的是以暴力为根据。我也相信，简单淳朴的生活，无论在身体上还是在精神上，对每个人都是有益的。</p><p>　　我完全不相信人类会有那种在哲学意义上的自由。每个人的行为不仅受着外界的强制，而且要适应内在的必然。叔本华说：“人虽然能够做他所想做的，但不能要他所想要的。”这句格言从我青年时代起就给了我真正的启示；在我自己和别人的生活面临困难的时候，它总是使我们得到安慰，并且是宽容的持续不断的源泉。这种体会可以宽大为怀地减轻那种容易使人气馁的责任感，也可以防止我们过于严肃地对待自己和别人；它导致一种特别给幽默以应有地位的人生观。</p><p>　　要追究一个人自己或一切生物生存的意义或目的，从客观的角度来看，我总觉得是愚蠢可笑的。可是每个人都有一些理想，这些理想决定着他的努力和判断的方向。就在这个意义上，我从来不把安逸和享乐看作生活目的本身──我把这种伦理基础叫做“猪栏的理想”。照亮我的道路，是善、美和真。要是没有志同道合者之间的亲切感情，要不是全神贯注于客观世界──那个在艺术和科学工作领域里永远达不到的对象，那么在我看来，生活就会是空虚的。我总觉得，人们所努力追求的庸俗目标──财产、虚荣、奢侈的生活──都是可鄙的。</p><p>　　我有强烈的社会正义感和社会责任感，但我又明显地缺乏与别人和社会直接接触的要求，这两者总是形成古怪的对照。我实在是一个“孤独的旅客”，我未曾全心全意地属于我的国家、我的家庭、我的朋友，甚至我最为接近的亲人；在所有这些关系面前，我总是感觉到有一定距离而且需要保持孤独──而这种感受正与年俱增。人们会清楚地发觉，同别人的相互了解和协调一致是有限度的，但这不值得惋惜。无疑，这样的人在某种程度上会失去他的天真无邪和无忧无虑的心境；但另一方面，他却能够在很大程度上不为别人的意见、习惯和判断所左右，并且能够避免那种把他的内心平衡建立在这样一些不可靠的基础之上的诱惑。</p><p>　　我的政治理想是民主政体。让每一个人都作为个人而受到尊重，而不让任何人成为被崇拜的偶像。我自己一直受到同代人的过分的赞扬和尊敬，这不是由于我自己的过错，也不是由于我自己的功劳，而实在是一种命运的嘲弄。其原因大概在于人们有一种愿望，想理解我以自已微薄的绵力，通过不断的斗争所获得的少数几个观念，而这种愿望有很多人却未能实现。我完全明白，一个组织要实现它的目的，就必须有一个人去思考，去指挥、并且全面担负起责任来。但是被领导的人不应当受到强迫，他们必须能够选择自己的领袖。在我看来，强迫的专制制度很快就会腐化堕落。因为暴力所招引来的总是一些品德低劣的人；而且我相信，天才的暴君总是由无赖来继承的，这是一条千古不易的规律。就是由于这个缘故，我总强烈地反对今天在意大利和俄国所见到的那种制度。像欧洲今天所存在的情况，已使得民主形式受到怀疑，这不能归咎于民主原则本身，而是由于政府的不稳定和选举制度中与个人无关的特征。我相信美国在这方面已经找到了正确的道路。他们选出了一个任期足够长的总统，他有充分的权力来真正履行他的职责。另一方面，在德国政治制度中，为我所看重的是它为救济患病或贫困的人作出了可贵的广泛的规定。在人生的丰富多彩的表演中，我觉得真正可贵的，不是政治上的国家，而是有创造性的、有感情的个人，是人格；只有个人才能创造出高尚的和卓越的东西，而群众本身在思想上总是迟钝的，在感觉上也总是迟钝的。</p><p>　　讲到这里，我想起了群众生活中最坏的一种表现，那就是使我厌恶的军事制度。一个人能够洋洋得意的随着军乐队在四列纵队里行进，单凭这一点就足以使我对他鄙夷不屑。<code>他所以长了一个大脑，只是出于误会；光是骨髓就可满足他的全部需要了</code>。文明的这种罪恶的渊薮，应当尽快加以消灭。任人支配的英雄主义、冷酷无情的暴行，以及在爱国主义名义下的一切可恶的胡闹，所有这些都使我深恶痛绝！在我看来，战争是多么卑鄙、下流！我宁愿被千刀万剐，也不愿参与这种可憎的勾当。尽管如此，我对人类的评价还是十分高的。我相信，要是人民的健康感情没有遭到那些通过学校和报纸而起作用的商业利益和政治利益的蓄意败坏，那么战争这个妖魔早就该绝迹了。</p><p>　　我们能拥有的最美好的体验是探求奥秘的体验。它是坚守在真正艺术和真正科学发源地上的基本感情。谁要是体会不到它，谁要是不再有好奇心，也不再有惊讶的感觉，谁就无异于行尸走肉，他的眼睛便是模糊不清的。就是这种奥秘的体验──虽然掺杂着恐惧──产生了宗教。我们认识到有某种为我们所不能洞察的东西存在，感觉到那种只能以其最原始的形式接近我们的心灵的最深奥的理性和最灿烂的美──正是这种认识和这种情感构成了真正的宗教感情；在这个意义上，而且也只是在这个意义上，我才是一个具有深挚的宗教感情的人。我无法想象存在这样一个上帝，它会对自己的创造物加以赏罚，会具有我们在自己身上所体验到的那种意志。我不能也不愿去想象一个人在肉体死亡以后还会继续活着；让那些脆弱的灵魂，由于恐惧或者由于可笑的唯我论，去拿这种思想当宝贝吧！我自己只求满足于生命永恒的奥秘，满足于觉察现存世界的神奇结构，窥见它的一鳞半爪，并且以诚挚的努力去领悟在自然界中显示出来的那个理性的一部分，倘若真能如此，即使只领悟其极小的一部分，我也就心满意足了。</p><hr><p>The World as I See It</p><p>A. Einstein</p><p>“How strange is the lot of us mortals! Each of us is here for a brief sojourn; for what purpose he knows not, though he sometimes thinks he senses it. But without deeper reflection one knows from daily life that one exists for other people – first of all for those upon whose smiles and well-being our own happiness is wholly dependent, and then for the many, unknown to us, to whose destinies we are bound by the ties of sympathy. A hundred times every day I remind myself that my inner and outer life are based on the labors of other men, living and dead, and that I must exert myself in order to give in the same measure as I have received and am still receiving…</p><p>“I have never looked upon ease and happiness as ends in themselves – this critical basis I call the ideal of a pigsty. The ideals that have lighted my way, and time after time have given me new courage to face life cheerfully, have been Kindness, Beauty, and Truth. Without the sense of kinship with men of like mind, without the occupation with the objective world, the eternally unattainable in the field of art and scientific endeavors, life would have seemed empty to me. The trite objects of human efforts – possessions, outward success, luxury – have always seemed to me contemptible.</p><p>“My passionate sense of social justice and social responsibility has always contrasted oddly with my pronounced lack of need for direct contact with other human beings and human communities. I am truly a ‘lone traveler’ and have never belonged to my country, my home, my friends, or even my immediate family, with my whole heart; in the face of all these ties, I have never lost a sense of distance and a need for solitude…”</p><p>“My political ideal is democracy. Let every man be respected as an individual and no man idolized. It is an irony of fate that I myself have been the recipient of excessive admiration and reverence from my fellow-beings, through no fault, and no merit, of my own. The cause of this may well be the desire, unattainable for many, to understand the few ideas to which I have with my feeble powers attained through ceaseless struggle. I am quite aware that for any organization to reach its goals, one man must do the thinking and directing and generally bear the responsibility. But the led must not be coerced, they must be able to choose their leader. In my opinion, an autocratic system of coercion soon degenerates; force attracts men of low morality… The really valuable thing in the pageant of human life seems to me not the political state, but the creative, sentient individual, the personality; it alone creates the noble and the sublime, while the herd as such remains dull in thought and dull in feeling.</p><p>“This topic brings me to that worst outcrop of herd life, the military system, which I abhor… This plague-spot of civilization ought to be abolished with all possible speed. Heroism on command, senseless violence, and all the loathsome nonsense that goes by the name of patriotism – how passionately I hate them!</p><p>“The most beautiful experience we can have is the mysterious. It is the fundamental emotion that stands at the cradle of true art and true science. Whoever does not know it and can no longer wonder, no longer marvel, is as good as dead, and his eyes are dimmed. It was the experience of mystery – even if mixed with fear – that engendered religion. A knowledge of the existence of something we cannot penetrate, our perceptions of the profoundest reason and the most radiant beauty, which only in their most primitive forms are accessible to our minds: it is this knowledge and this emotion that constitute true religiosity. In this sense, and only this sense, I am a deeply religious man… I am satisfied with the mystery of life’s eternity and with a knowledge, a sense, of the marvelous structure of existence – as well as the humble attempt to understand even a tiny portion of the Reason that manifests itself in nature.”</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解-考点2</title>
      <link href="2020/05/13/civil_servant_speech3/"/>
      <url>2020/05/13/civil_servant_speech3/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/014.jpg" width=80% /><span class='geyan'> 虽有戈矛之刺，不如恭俭之利也。故与人善言，暖于布帛；伤人之言，深于矛戟（《荀子·荣辱》）</span><a id="more"></a><h2 id="第一节-逻辑填空"><a href="#第一节-逻辑填空" class="headerlink" title="第一节 逻辑填空"></a>第一节 逻辑填空</h2><p>【题型分类】</p><ol><li>实词辨析</li><li>成语辨析 ——高频成语</li><li>关联词辨析 ——关联词语</li></ol><p>【做题原则】</p><ol><li>排除选项<ol><li>感情色彩：贬义/褒义；<strong>倾向性</strong>（<code>积极/消极</code>）<ol><li>如果确定了倾向性，对比答案，排除不一致的</li></ol></li><li><strong>语义轻重</strong>：<ol><li>批评/批判；损坏/破坏；骚动/骚乱；妨碍/妨害；</li></ol></li><li>表达风格：语体风格；文体风格；俗语和正式语需要根据文本来决定</li></ol></li><li>确定答案<ol><li>搭配范围</li><li>语素差异</li><li>词性功能</li></ol></li></ol><blockquote><p>剩余的就好好补欠的语文词汇吧</p></blockquote><h2 id="第二节-成语解析"><a href="#第二节-成语解析" class="headerlink" title="第二节 成语解析"></a>第二节 成语解析</h2><blockquote><p>欠的还是要还的。<br>剩余的就好好补欠的语文词汇吧</p></blockquote><h2 id="第三节-篇章阅读"><a href="#第三节-篇章阅读" class="headerlink" title="第三节 篇章阅读"></a>第三节 篇章阅读</h2><p>【文章载体】</p><ol><li><p>社会科学类</p></li><li><p>科技说明类</p></li></ol><p>【考查题型】</p><ol><li>词句理解题<ol><li>词语理解题</li><li>语句理解题</li></ol></li><li>代词指代题</li><li>细节理解题</li><li>标题填入题</li><li>语句衔接题</li><li>逻辑填空题</li><li>病句解析题</li></ol><p>【做题原则】</p><ol><li>带着问题选择性阅读原文<ol><li>先作答能够在文中快速明确定位有效信息的题目<ol><li>看哪个<strong>明显</strong>，直接能在文段中找到，在就近就可以看到答案的<ol><li>如：横线、代词、逻辑填空等</li></ol></li><li>综合分析、<strong>通读文章</strong><ol><li>如：主旨概括题、意图判断题、细节判断题</li></ol></li></ol></li></ol></li><li>关注文章、段落六大要点<ol><li>文章、段落<code>首尾句</code></li><li>每个段落<strong>首句之间</strong>的关系</li><li>转折、递进、结论、条件等引出主题句和观点</li><li>标点符号引出的语句信息：<ol><li>分号、顿号 <strong>并列关系</strong></li><li>双引号 <code>反语、援引、强调</code></li><li>问号 <strong>设问、疑问、反问</strong></li><li>破折号、冒号 <strong>解释说明</strong></li><li>援引中的<code>正向</code>援引</li><li>略读：人名、数字、英文、术语。</li></ol></li></ol></li></ol><p>【篇章范例一】</p><p><strong>知识</strong>经济的发展无疑给发展中国家带来赶超发达国家的巨大机遇（如可以借鉴发达国家 的经验，缩短工业化阶段的进程，即发挥后发优势），但同时也使这些国家面临严峻挑战。</p><p><strong>挑战</strong>首先来自“知识”这一生产要素本身。经济学家保罗·罗默指出，知识的生产、应用 和扩散的效率与知识的积累及人力资本正相关。而正是在这两点，发展中国家同发达国家存 在着巨大差距，这种差距虽然使发展中国家在知识的选择和应用方面可以有较大的回旋余地， 但同时使得他们与发达国家在国际分工中因位势的不同形成垂直分工的关系，因而处于不利 地位，甚至随着新的技术壁垒的形成而形成新的“中心—依附”关系，加大贫富差距。例如， 有迹象表明，近 20 年来，在全球的收入分配方面，情况逐渐恶化。从 1960 年到 80 年代末， 世界人均国民生产总值（以购买力平价计算）的基尼系数呈上升趋势，从 1960 年的 0.44 到 1989 年的 0.55。又据统计，世界最富的 20%的人口的所得收入与最穷的 20%的人口的收入 比从 1960 年的 11.1∶1 增加到 1989 年的 17.1∶1。可见，全球增长的好处并没有平均扩散 到所有国家，贫富差距还在加大。正如托夫勒所说：“知识的分配比武器和财富的分配更不 平等。因此知识（尤其是关于知识的知识）的重新分配更加重要。它能改变其他主要权力资 源的分配。”</p><p><strong>挑战</strong>更来自自身准备的不足，因为 。知识经济对于已完成工业化的发达国家而 言是生产力发展的自然结果，顺理成章；对于首先要通过工业化改变二元经济结构的发展中 国家而言，则意味着要不甘落后、抓住机遇，就必须将工业化与知识化两步并作一步走，即 如果说在上一个百年，后发国家还有可能通过加速工业化过程追赶发达国家，那么在当今新 的世纪交替之际，由于科学技术的加速发展以及科技进步转化为经济增长的过程不断加快， 后发国家已经没有了从容实现工业化的可能。发展中国家面临的挑战显然更加严峻。</p><p><strong>中国</strong>正处在从计划经济向社会主义市场经济体制转变的过程中，这使得在应对知识经济 的挑战、加速发展的同时，还必须完成制度的变革，因而任务异常艰巨。</p><p><strong>我们</strong>初步实现了邓小平同志提出的“三步走”战略的前两步目标，正在开始实施第三步战 略。与前两步战略相比，第三步战略不是自己和自己的比较，不是要达到“温饱”“小康”这样 相对明确的指标，而是要“达到中等发达国家水平”。这是一个更加开放的、[a]指标，因而也 是一个更加艰巨的任务。</p><p><strong>目前</strong>，与发达国家相比，我国还没有摆脱传统产业的束缚，经济增长方式仍以外延扩张为主，以消耗稀缺自然资源和污染环境为代价。尽管我们多次强调“经济增长方式的根本转 变”，但是，以高技术为产业支柱，以智力资源为主要的新型经济，还没有成为我国内涵式 经济增长方式的主题，就全国范围而言，以高科技为基础的第三产业就业人员占全国就业人 员总数不到 5%，其产值占国内生产总值不到 15%，以知识密集型为主的服务贸易出口占全 部出口不到 10%。但是，这并不意味着中国不具备发展知识经济的条件。就整体而言，由于 中国东西部经济发展的非均衡性，东部沿海地区某些大城市在某些方面还是具有发展知识经 济的条件的。</p><p><code>1. 知识经济对于发展中国家的挑战主要来自（ ）。</code></p><ol><li>知识的生产、应用和扩散的效率与知识的积累及人力资本正相关</li><li>发展中国家在知识的积累和人力资本方面落后于发达国家</li><li>发展中国家面临更多的制度问题</li><li>发展中国家自身准备不足 </li></ol><p><code>2. 与知识经济比较而言，工业化经济发展最大的弊端是（ ）。</code></p><ol><li>消耗稀缺的资源、污染环境</li><li>造成了全球贫富差距过大</li><li>形成了技术壁垒 </li><li>无法拉开发达与发展中国家的差距 </li></ol><p><code>3. 从对待机遇的角度看，发展中国家应当如何应对知识经济的挑战？（ ）</code></p><ol><li>注意知识的积累</li><li>工业化和知识化并进</li><li>发展新型经济</li><li>快速实现体制改变 </li></ol><p><code>4. 下列说法，不符合全文意思的一项是（ ）。</code></p><ol><li>知识经济是以知识为基础的经济，它的核心在于创新</li><li>知识经济既有正面效应，也有负面效应</li><li>当代经济的发展紧密地依赖知识的生产、传播和应用</li><li>知识在现代经济发展中对其他资源具有强大支配力、控制力、渗透力 </li></ol><p><code>5. 下列对我国的现状描述正确的一项是（ ）。</code></p><ol><li>我国东部广大沿海地区已经具备发展知识经济的某些有利条件</li><li>我国只有西部地区还没有摆脱传统产业的束缚</li><li>我国西部地区没有以高技术为产业支柱的新型经济</li><li>中国部分地区已经初步具备发展知识经济的条件 </li></ol><p><code>6. 文中[a]处应填入的词语是（ ）。</code></p><ol><li>艰巨的 </li><li>活跃的</li><li>紧迫的 </li><li>动态的</li></ol><p><code>7．下列选项适合作为本文结束语的一项是（)</code></p><ol><li>知识经济的时代已经来临</li><li>总之，面对知识经济带来的挑战，我们必须认真对待</li><li>总之，我们必须发展知识经济</li><li>知识经济真是让人欢喜，让人忧呀 </li></ol><p><code>8．根据上文，下列对基尼系数表述不正确的一项是（)</code></p><ol><li>基尼系数为 0，则表示收入分配完全平等</li><li>基尼系数是衡量分配平等程度的指标</li><li>基尼系数越高，收入的差距则越悬殊</li><li>基尼系数是最富有人群的收入和最贫困人群收入的比值 </li></ol><p><code>9．下列选项中，适合填在文中横线上的一项是（ ）。</code></p><ol><li>路遥知马力</li><li>磨刀不误砍柴工</li><li>机会只偏爱有准备者</li><li>只有站在巨人的肩上才能看得更远</li></ol><span id="inline-purple">解题步骤: 先确定问题、先容后难、拆解为小题目</span><ol><li>先读题目，确定哪些先做后做</li><li>先写可以不通读解决的题目</li><li>读题目的时候，遇到某个问题，就回头再看下题目，再继续读</li></ol><p><strong>答案</strong><br>1-5 DABAD<br>5-9 DBDC</p>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 言语理解 </category>
          
          <category> 考点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解-考点1</title>
      <link href="2020/05/11/civil_servant_speech2/"/>
      <url>2020/05/11/civil_servant_speech2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/012.jpg" width=80% /><span class='geyan'>     望时而待之，孰与应时而使之。（《荀子·天论》）</span><a id="more"></a><h2 id="第一节-片段阅读"><a href="#第一节-片段阅读" class="headerlink" title="第一节 片段阅读"></a>第一节 片段阅读</h2><h3 id="主旨概括–关联词语"><a href="#主旨概括–关联词语" class="headerlink" title="主旨概括–关联词语"></a>主旨概括–关联词语</h3><blockquote><p>言语理解中的重点<br>基础、重点</p></blockquote><p>✅<code>标志</code></p><ol><li>这段话主要讲述（谈论、强调、说明、阐明、阐述、介绍）的是？</li><li>这段文字的主旨、关键词、中心议题、旨在说明什么？</li><li>对这段文字的<code>概括（复述、归纳、总结）</code>最准确的是？</li></ol><p>🚩做题的原则</p><ol><li>找题眼，文段主题句</li><li>对比选项进行转换，【同意替换、精简压缩】</li><li>通常为对策或核心观点<ol><li>题眼为问题，找对策</li><li>题眼为观点，归纳核心观点</li></ol></li><li>优选忠于原文的题眼的选项。</li></ol><p>🚩解题技巧</p><ol><li>宏观–<code>行文脉络</code>–&gt; 文章结构</li><li>微观–<code>关联词</code> –&gt; 逻辑标志</li></ol><img data-src="04.png" style="zoom: 50%;"/><h4 id="转折复句"><a href="#转折复句" class="headerlink" title="转折复句"></a>转折复句</h4><p>【典型格式】</p><p>➢ 虽然……但是……</p><p>➢ 其实=事实上=实际上=只是=当然</p><p>【关联词语】<br>➢ 虽然=尽管=虽说=固然</p><p>➢ 但是=可是=不过=然而=却</p><p>【总结】</p><p><code>重点在转折之后</code></p><img data-src="05.png" style="zoom: 50%;"/><img data-src="05.png" style="zoom: 50%;"/><h4 id="结论复句"><a href="#结论复句" class="headerlink" title="结论复句"></a>结论复句</h4><p>【典型格式】</p><p>因为……所以……</p><p>【关联词语】</p><p>➢ 因为=由于</p><p>➢ 所以=因此=因而=可见=看来=导致=造成=<code>使得</code>=致使=总之=故而=<code>言而总之</code>=综上所述=概而言之=<code>概而论之</code></p><p>【特殊格式】</p><p><code>之所以……是因为。..</code> ===&gt; <code>强调原因</code></p><p>【典型例句】</p><ol><li>物价上涨关系到每一个消费者的切身利益，影响着相当一部分普通百姓的日常生活，并且可能给低收入家庭带来沉重压力。<code>因此</code>对物价上涨不能掉以轻 心。</li></ol><p>2.《淮南子·人间训》云：“众人皆知利利而病病，唯圣人知病之为利，利之为病 也。”<code>看来</code>古人已经注意到利弊的辩证关系。</p><img data-src="07.png" title="答案：D" style="zoom: 50%;"/><p><code>于是</code>的作用</p><ol><li>结论</li><li>顺城时间、背景；</li></ol><img data-src="08.png" title="答案：D" style="zoom: 50%;"/><h4 id="递进复句"><a href="#递进复句" class="headerlink" title="递进复句"></a>递进复句</h4><p>【典型格式】</p><p>不但……而且…… 如：大别山区不但矿产很丰富，而且自然景色很美。</p><p>【关联词语】</p><p>➢ 不但=不仅=不单=不独=不只=不光</p><p>➢ 而且=并=并且=也=还</p><p>➢ 甚至=更=特别=尤其=重要的是=关键的是=核心的是</p><p>【多重递进】</p><p>不但……而且……甚至……</p><p>【典型例句】</p><ol><li>黄金<code>不只</code>是一种名贵的金属，<code>也是一种不需要翻译的万能语言</code>。</li><li>寿昌<code>不仅</code>学习戏里的唱腔身段，<code>还从母亲那里弄些碎布学剪戏中的人物</code>。</li><li>来这家大型食品超市购物的不仅有当地的家庭主妇，而且有附近街区的居民，<code>甚至京津地区也有驱车前来采购的</code>。</li></ol><p>【总结】</p><ol><li>递进复句重点在递进之后</li><li>一级递进与二级递进同时出现，<code>二级递进是重点</code></li></ol><img data-src="09.png" title="答案：C" style="zoom: 50%;"/><p>这个题目的答案是 C，<code>但是选择了 D，是因为看到了最后一句话</code></p><p>经过对比</p><ol><li>要说的是雷锋相关，D 项说的是人们</li><li>任何时代，这个过于夸大</li><li>在 C、D 中选择，C 项更合适。</li></ol><img data-src="10.png" title="自己的思路" style="zoom: 50%;"/><img data-src="11.png" title="答案：D" style="zoom: 50%;"/><p>✅解题过程</p><ol><li>确定了主题词–汽车行业，递进-不仅-而且，重点在后边，</li><li>得出结论 汽车行业 &amp; 相关产业 的关系。</li></ol><p>❌错误分析</p><ol><li>整体找的重点没有错</li><li>递进之后很长，需要概括，不能直接取其中一部分，就要对比选项。</li><li>A B 是部分，C 是背景</li><li>D 是完整的<code>概括递进之后的内容</code></li></ol><h4 id="必要条件复句"><a href="#必要条件复句" class="headerlink" title="必要条件复句"></a>必要条件复句</h4><p>【典型格式】</p><p>只有…【<code>重点</code>】…才……</p><p>【关联词语】</p><p>显性：只有=必须=<code>需要</code>=应该=<code>应当</code>=务必=<code>除非</code>=如何=<code>怎样</code>等</p><p>隐性：<code>才</code></p><p>【典型例句】</p><ol><li>传统相声艺术只有<code>回到群众，回归生活</code>，才能获得新的生命力。</li><li>汽车企业在发展的同时采取新的技术措施，尽量减少对环境的污染，符合社会发展大趋势，<code>才</code>是长久之策。</li></ol><p>【总结】</p><ol><li>重点是<code>必要条件</code></li><li>主要找 <code>才</code>， 显性/隐性 都在<code>才</code>之前</li></ol><p>【转换格式】</p><p><code>只有 A，才 B</code></p><p>B 必须 A = 不 A 则不 B = A 是 B 的必要条件（必备要素、不可 或缺、必不可少、前提、基础、保证、保障） = <code>B 以 A 为必要条件</code></p><img data-src="12.png" title="答案：C" style="zoom: 50%;"/><p>✅解题过程&amp;注意事项⚠️</p><ol><li>主题词、重点位置找对了，思路也还行。</li><li>根据主题词，可以排除 A D，【可以优化思路–排除】</li><li><code>快速读题</code>有待加强</li></ol><img data-src="13.png" title="答案：B" style="zoom: 50%;"/><h4 id="并列复句"><a href="#并列复句" class="headerlink" title="并列复句"></a>并列复句</h4><p>【典型格式】</p><blockquote><p>既……又……</p></blockquote><p><code>申论也可以用</code></p><p>1．表示相关的几种情况<code>并存</code>。</p><p>【关联词语】</p><p>单用：而=又=同样=同时=与此同时=<code>另外</code>=此外=<code>再说</code>=并且=<code>加上</code>等。</p><p>双用：也……也；<code>又……又</code>；既……又；一边……一边；<code>有的……有的</code>；一方面…… 另一方面。</p><p>2．表示两种<code>相反或相对</code>的情况。</p><p>【关联词语】</p><p>不是……而是：不是 A，而是 B =》 A = -B</p><p>有的……有的</p><p>【表现形式】</p><ol><li>关联词语</li><li>标点符号：顿号、分号、逗号（句式一致）</li><li>表达并列内容的分句关系（隐性并列，藏于句中）</li></ol><p>【总结】</p><ol><li>重点：没有重点，主旨是 A + B</li><li>没有语序要求，可以调整前后关系</li><li>分句间的并列关系、标点负号的使用。</li></ol><img data-src="14.png" title="答案：B" style="zoom: 50%;"/><p>✅解题过程&amp;注意事项⚠️</p><ol><li>么有找到并列的关键词</li></ol><h3 id="主旨概括–行文脉络"><a href="#主旨概括–行文脉络" class="headerlink" title="主旨概括–行文脉络"></a>主旨概括–行文脉络</h3><ol><li>总–分–总<ol><li>点明观点–阐述原因/举例论证–重申观点 –&gt; <code>重点</code> 首尾句需要结合</li><li>提出问题–分析问题/举例论证–解决问题 –&gt; <code>重点</code> 解决问题</li></ol></li><li>分–总</li><li>总–分</li><li>分–总–分</li></ol><h4 id="总–分–总"><a href="#总–分–总" class="headerlink" title="总–分–总"></a>总–分–总</h4><img data-src="15.png" title="" style="zoom: 50%;"/><img data-src="16.png" title="" style="zoom: 50%;"/><img data-src="17.png" title="" style="zoom: 50%;"/><h4 id="总–分"><a href="#总–分" class="headerlink" title="总–分"></a>总–分</h4><ol><li>提出观点–解释说明 –&gt; <code>重点</code> 观点</li><li>提出问题–举例论证 –&gt; <code>重点</code> 问题</li></ol><img data-src="19.png" title="" style="zoom: 50%;"/><img data-src="20.png" title="答案：A" style="zoom: 50%;"/><img data-src="21.png" title="" style="zoom: 50%;"/><img data-src="22.png" title="" style="zoom: 50%;"/><img data-src="24.png" title="答案：D" style="zoom: 50%;"/><img data-src="25.png" title="" style="zoom: 50%;"/><img data-src="26.png" title="" style="zoom: 50%;"/><p><span id="inline-blue"> 分论点中的转折不重要 </span></p><h4 id="分–总"><a href="#分–总" class="headerlink" title="分–总"></a>分–总</h4><img data-src="23.png" title="答案：A" style="zoom: 50%;"/><h4 id="分–总–总"><a href="#分–总–总" class="headerlink" title="分–总–总"></a>分–总–总</h4><p><img data-src="27.png" alt=""></p><img data-src="28.png" title="答案：C" style="zoom: 50%;"/><img data-src="29.png" title="" style="zoom: 50%;"/><img data-src="30.png" title="" style="zoom: 50%;"/><h4 id="难度提升"><a href="#难度提升" class="headerlink" title="难度提升"></a>难度提升</h4><blockquote><p>无关键词，需要归纳概括</p></blockquote><p><span id="inline-blue">整体概括法</span><br><span id="inline-green"> 关注主体</span><br><br><br><span id="inline-purple">重现关键词</span><br><span id="inline-yellow"> 关注重复出现的词汇</span></p> <img data-src="31.png" title="" style="zoom: 50%;"/><blockquote><p>提问方式变化，方法依旧</p></blockquote><ol><li><p>关键词语类</p></li><li><p>其他提问类</p><img data-src="32.png" title="" style="zoom: 50%;"/><img data-src="33.png" title="" style="zoom: 50%;"/></li></ol><h3 id="意图判断"><a href="#意图判断" class="headerlink" title="意图判断"></a>意图判断</h3><blockquote><p>意图题基于主旨题</p></blockquote><p><span id="inline-purple">辨别标志</span></p><p>➢ 这段文字意在说明（阐明、强调）的是？</p><p>➢ 通过这段话，作者想表达（说明）的是？</p><p>➢ 通过这段话，我们可以知道？</p><p>➢ 这段话告诉我们？</p><p>➢ 从这段文字中可以推出的是？</p><p>➢ 根据这段文字，可以看出作者的意图是？</p><p><span id="inline-blue">做题原则</span></p><ol><li>通读原文，把握文段重点</li><li><code>优选</code> 作者的 <code>目的、意图、出发点</code></li><li><code>次选</code> 主旨类型的答案</li><li>排除<code>引申过度</code>、<code>表意肤浅</code>、不符合生活规律、社会主旋律的选贤</li></ol><p><span id="inline-yellow">社会现象类</span></p><h4 id="社会现象类"><a href="#社会现象类" class="headerlink" title="社会现象类"></a>社会现象类</h4><ol><li><p>消极社会问题–针对<code>现象、问题</code>找<code>对策</code></p></li><li><p>积极/中性社会问题–总结归纳观点</p><img data-src="34.png" title="" style="zoom: 50%;"/><img data-src="35.png" title="" style="zoom: 50%;"/><img data-src="36.png" title="" style="zoom: 50%;"/></li></ol><p><span id="inline-green">错误分析</span></p><ol><li>没有按步骤解题<ol><li>通读+重点：<code>高房价 生活质量 90后</code></li><li>围绕重点，D项扩大了范围</li><li><strong>意图题选项都得看👀</strong></li></ol></li></ol><img data-src="37.png" title="" style="zoom: 50%;"/><h4 id="故事寓意类"><a href="#故事寓意类" class="headerlink" title="故事寓意类"></a>故事寓意类</h4><ol><li>寓意主体往往在故事<code>3/4</code>处的结尾有所反应，常有<code>于是、后来</code>的词引出故事的高潮；</li><li>寓意选项要与文段关联</li></ol><img data-src="38.png" title="有趣， 选择：B" style="zoom: 50%;"/><p>C有点过度了，主要是幽默。</p><img data-src="39.png" title="有趣， 选择：A" style="zoom: 50%;"/><img data-src="40.png" title="有趣， 选择：D" style="zoom: 50%;"/><h4 id="排除选项"><a href="#排除选项" class="headerlink" title="排除选项"></a>排除选项</h4><img data-src="41.png" title="" style="zoom: 50%;"/><h4 id="意图判断主旨化——两个并非，一个标准"><a href="#意图判断主旨化——两个并非，一个标准" class="headerlink" title="意图判断主旨化——两个并非，一个标准"></a>意图判断主旨化——两个并非，一个标准</h4><img data-src="42.png" title="" style="zoom: 50%;"/><img data-src="44.png" title="" style="zoom: 50%;"/><h3 id="态度观点"><a href="#态度观点" class="headerlink" title="态度观点"></a>态度观点</h3><p>【辨别标志】</p><p>➢ 作者支持的观点是？ </p><p>➢ 作者认为 XXXX 有无道理/是否正确？</p><p>➢ 作者对 XXXX 的态度是？ </p><p>➢ 符合作者观点/原意的一项是？ </p><p>➢ 下列说法与文章作者态度不符合的是？</p><p>【做题原则】</p><ol><li>明确观点：提炼引导词 + 抓住关联词<ol><li>笔者认为、XX认为、我希望等</li></ol></li><li>隐含观点：提炼倾向性<ol><li>关联词、设问、含有倾向性的词、反问【你怎么能这样】</li></ol></li><li>没有观点：仅为客观陈述<ol><li>没有任何评价</li></ol></li></ol><p>【杂糅观点的特殊句式】</p><ol><li>笔者认为A <code>有观点</code>， 至于 B <code>无观点</code> 就见人见智了</li><li>无论A <code>无观点</code> 怎么样，B <code>有观点</code>都怎么样</li></ol><img data-src="45.png" title="答案 D" style="zoom: 50%;"/><blockquote><p>这一类题目，仔细分析主旨</p></blockquote><h3 id="细节理解"><a href="#细节理解" class="headerlink" title="细节理解"></a>细节理解</h3><blockquote><p>认真读！ 认真读！</p></blockquote><p>【题目类型】</p><p>➢ 典型的细节理解题 </p><p>➢ 主旨化的细节理解题</p><p>【辨别标志】</p><p>➢ 下列说法正确/不正确的一项是？ </p><p>➢ 下列表述符合/不符合文意的一项是？ </p><p>➢ 下列理解正确/有误的一项是？</p><p>【做题原则】</p><ol><li>错误选项的特点<ol><li>无中生有</li><li>曲解文意</li><li>概念混搭</li></ol></li></ol><img data-src="46.png" title="" style="zoom: 50%;"/><h4 id="偷换概念"><a href="#偷换概念" class="headerlink" title="偷换概念"></a>偷换概念</h4><p>➢ 偷换时态</p><ol><li>已然性时态：已经、曾经、了、过去、虽然。。。但是<code>【已经发生】</code></li><li>未然性时态：将、要、立即、马上、如果、即使。。也<code>【将要发生】</code></li><li>进行式时态：正、正在、在。。中、现在、着</li></ol><img data-src="47.png" title="" style="zoom: 50%;"/><blockquote><p>任何时态上的偷换，直接就是❌错误！</p></blockquote><p>➢ 偷换数量 </p><ol><li>较多量：较多、许多、大量、大多数、一片、不少等</li><li>较少量：较少、很少、少量、不多</li><li>中间量：某些、一些、部分</li></ol><img data-src="48.png" title="" style="zoom: 50%;"/><p>➢ 偷换逻辑关系 </p><ol><li>充分条件和必要条件的混淆</li><li>因果倒置</li><li>并列混淆为条件或因果关系</li></ol><img data-src="49.png" title="" style="zoom: 50%;"/><img data-src="50.png" title="" style="zoom: 50%;"/><p>➢ 偷换概念/话题 </p><img data-src="51.png" title="" style="zoom: 50%;"/><p>➢ 偷换确定性表述与不确定性表述</p><ol><li>不确定性表达：预测、断言、推测、可能、未必、也许、大概、大约</li><li><strong>科技说明文</strong></li></ol><img data-src="53.png" title="" style="zoom: 50%;"/><img data-src="54.png" title="" style="zoom: 50%;"/><h4 id="主旨化的细节理解题"><a href="#主旨化的细节理解题" class="headerlink" title="主旨化的细节理解题"></a>主旨化的细节理解题</h4><ol><li>正确表述是对于整个文段的归纳概括</li><li>错误表述是对于原文句子的偷换和曲解</li></ol><img data-src="55.png" title="" style="zoom: 50%;"/><img data-src="56.png" title="" style="zoom: 50%;"/><p><strong>问号</strong></p><ol><li>设问：有问有答案</li><li>反问：没有回答，但已经回答了</li><li>疑问：提问</li></ol><h4 id="变形的细节理解题"><a href="#变形的细节理解题" class="headerlink" title="变形的细节理解题"></a>变形的细节理解题</h4><ol><li>原因考查类：属于原因、不属于原因<ol><li>了解文段陈述的状况，然后根据<code>“因为、由于” &quot;因此、所以&quot;</code>等词去判断</li></ol></li><li>目的考查类：主要是为了满足、主要作用、其目的是<ol><li>寻找<code>为了、目的是、其作用为、结果是、</code>等标志词</li></ol></li><li>特点考查类： 最突出的特点、区别主要体现在、差异是<ol><li>对比陈述主体特征、进行归纳概括</li></ol></li><li>信息推断类：提问方式差异较大<ol><li>特定语句寻找</li></ol></li></ol><img data-src="57.png" title="" style="zoom: 50%;"/><img data-src="58.png" title="" style="zoom: 50%;"/><img data-src="59.png" title="" style="zoom: 50%;"/><img data-src="61.png" title="" style="zoom: 50%;"/><img data-src="62.png" title="" style="zoom: 50%;"/><h2 id="第二节-语句表达"><a href="#第二节-语句表达" class="headerlink" title="第二节 语句表达"></a>第二节 语句表达</h2><h3 id="词句理解题"><a href="#词句理解题" class="headerlink" title="词句理解题"></a>词句理解题</h3><p>【题目类型】</p><ol><li>词语理解题</li><li>语句理解题 <ol><li>名言警句：短 + 常识判断</li><li>划线语句：小语境</li></ol></li></ol><p>【辨别标志】 </p><ol><li>文中“XXX”如何理解？</li><li>“XXX”指的是？ </li></ol><p>【做题原则】</p><ol><li>定位原文，有效利用<code>冒号、破折号以及关联词</code></li><li>根据<code>上下文、前后句</code>的小语境推测词语含义</li><li>排除<code>字面意思</code></li></ol><img data-src="63.png" title="" style="zoom: 50%;"/><img data-src="64.png" title="" style="zoom: 50%;"/><img data-src="65.png" title="" style="zoom: 50%;"/><img data-src="66.png" title="" style="zoom: 50%;"/><h3 id="词语指代题"><a href="#词语指代题" class="headerlink" title="词语指代题"></a>词语指代题</h3><p>【辨别标志】</p><p>文中“XXX”<code>指代</code>的是？</p><p>【做题原则】</p><ol><li>定位原文</li><li><code>就近原则</code>，前后句的<code>主宾</code></li><li>区分类型</li><li>注意提问的提示信息</li></ol><img data-src="67.png" title="答案：D" style="zoom: 50%;"/><img data-src="68.png" title="答案：D" style="zoom: 50%;"/><h3 id="语句表达"><a href="#语句表达" class="headerlink" title="语句表达"></a>语句表达</h3><p>【考查能力】</p><p>➢ 规范表达—— 病句辨析题 </p><p>➢ 优化表达</p><ol><li>语句排序题</li><li>语句衔接题</li><li>下文推断题</li></ol><h4 id="语句排序题"><a href="#语句排序题" class="headerlink" title="语句排序题"></a>语句排序题</h4><p>【辨别标志】</p><p>将以上 6 个句子重新排列，语序正确的是?</p><p>【做题原则】</p><img data-src="69.png" title="" style="zoom: 50%;"/><img data-src="70.png" title="" style="zoom: 50%;"/><img data-src="71.png" title="答案：B" style="zoom: 50%;"/><img data-src="72.png" title="" style="zoom: 50%;"/><img data-src="73.png" title="" style="zoom: 50%;"/><img data-src="74.png" title="" style="zoom: 50%;"/><blockquote><p>寻头不断尾＋差异句判断+紧密度验证</p></blockquote><ol><li>寻头断尾，AABC，排除BC，<strong>少数服从多数</strong></li><li>在两个AA中，找到第一个不一样的，区分，<strong>时空、关联词、重复词</strong></li></ol><blockquote><p>判断发语词 ＋ 紧密度验证</p></blockquote><ol><li>援引观点、背景铺垫、设问等常为<strong>发语词</strong></li><li>不适合做发语词<ol><li>反面论证：否则、不然、如果没有、如果不</li><li>补充类：当然、也、又</li><li>结论类：因此、所以、最终、终于</li><li>指代类表述：这、此</li></ol></li></ol><img data-src="75.png" title="" style="zoom: 50%;"/><img data-src="76.png" title="" style="zoom: 50%;"/><img data-src="77.png" title="" style="zoom: 50%;"/><img data-src="78.png" title="" style="zoom: 50%;"/><img data-src="79.png" title="好好思索下" style="zoom: 50%;"/><blockquote><p>解题思路汇总</p></blockquote><ol><li>对比1&amp;4， 两句话<strong>无法判断</strong>谁做开头</li><li>1的关键词是 【大脑🧠】，4的关键词是【研究】，进而-&gt;整体看<strong>重复词</strong>–大脑</li><li>排除 A B</li><li>1-6 &amp; 1-3 对比，<ol><li>1-3: <code>太过于紧密</code>，没有喘气的机会，没有解释1的空隙，</li><li>1-6: 紧接1的结尾–环境中有哪些威胁</li><li>6-2: 6的结尾<code>电刺激</code> -&gt; 2中的 回击、逃跑</li></ol></li><li>3中的 <strong>还</strong>， 与 6 <strong>并列</strong></li></ol><img data-src="80.png" title="好好思索下" style="zoom: 50%;"/><blockquote><p>解题思路</p></blockquote><ol><li>对比3-5，都可以做开头</li><li><strong>假设法</strong><ol><li>假如5开头<ol><li>5-2: 但是2中的<code>也是</code>，在1中并没有做铺垫，排除D</li><li>5-3: 啰嗦：5: 屈原是。。 3: 屈原是。。排除C</li></ol></li><li>假如3开头<ol><li>3-2-1-5是相同的</li><li>看 5-4 或是 5-6<ol><li>5-4: 5的优秀和 <strong>而是</strong>接不上</li><li>5-6: 5的优秀 对应 <strong>学而优则仕</strong></li></ol></li></ol></li></ol></li><li>这道题太麻烦了。。。。</li></ol><img data-src="81.png" title="好好思索下" style="zoom: 50%;"/><blockquote><p>解题思路</p></blockquote><ol><li>四个选项各不相同</li><li>对比选项<ol><li>3 反面论证的意思 排除B</li><li>5 总，有点像</li><li>6 假设，排除D</li><li>7 最终。。排除A</li></ol></li><li>验证C项</li><li>要求有点高啊。。。。</li></ol><img data-src="82.png" title="好好思索下" style="zoom: 50%;"/><blockquote><p>解题思路</p></blockquote><ol><li>四个选项各不相同</li><li>对比选项<ol><li>3 这些，排除 A</li><li>5 不确定，保留</li><li>4 不是，排除C</li><li>1 不确定保留</li></ol></li><li>对比 1 - 5<ol><li>1中的新内涵 与 3中的新内涵 有关联，<strong>1-3 在一块</strong>，就可以选B了</li></ol></li><li>排序有点麻烦。。。</li></ol><h2 id="🚩快速读题"><a href="#🚩快速读题" class="headerlink" title="🚩快速读题"></a>🚩快速读题</h2>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 言语理解 </category>
          
          <category> 考点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解-技巧</title>
      <link href="2020/05/10/civil_servant_speech1/"/>
      <url>2020/05/10/civil_servant_speech1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/011.jpg" width=80% /><span class='geyan'>    有兼听之明，而无奋矜之容；有兼覆之厚，而无伐德之色。（《荀子·正名》）</span><a id="more"></a><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><h3 id="主旨类"><a href="#主旨类" class="headerlink" title="主旨类"></a>主旨类</h3><div class="tabs" id="主旨类"><ul class="nav-tabs"><li class="tab active"><a href="#主旨类-1">大纲</a></li><li class="tab"><a href="#主旨类-2">总结</a></li><li class="tab"><a href="#主旨类-3">内容逻辑</a></li></ul><div class="tab-content"><div class="tab-pane active" id="主旨类-1"><details ><summary> <p>总</p> </summary>              <div class='content'>              <div class="note default"><img data-src="34.png" width="80%" /><img data-src="35.png" width="80%" /><img data-src="36.png" width="80%" /><img data-src="37.png" width="80%" /><img data-src="38.png" width="80%" /><img data-src="39.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="主旨类-2"><details ><summary> <p>总</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="40.png" width="80%" /><img data-src="41.png" width="80%" /><img data-src="42.png" width="80%" /><img data-src="43.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="主旨类-3"><div class="note danger"><p><strong>内容逻辑</strong></p><p>特点：<strong>没有特殊的标点，没有逻辑关联词</strong></p><p>分类</p><ol><li>举例关系</li><li>解释关系</li><li>主题关系</li><li>定性</li></ol></div></div></div></div><div class="tabs" id="第二节"><ul class="nav-tabs"><li class="tab active"><a href="#第二节-1">总结</a></li></ul><div class="tab-content"><div class="tab-pane active" id="第二节-1"><details ><summary> <p>总</p> </summary>              <div class='content'>              <div class="note danger"><p>问主旨选问题<br>问意在选对策</p></div>              </div>            </details></div></div></div><div class="tabs" id="第3节"><ul class="nav-tabs"><li class="tab active"><a href="#第3节-1">语句表达</a></li><li class="tab"><a href="#第3节-2">细节理解题</a></li><li class="tab"><a href="#第3节-3">上下文</a></li><li class="tab"><a href="#第3节-4">特定理解题</a></li></ul><div class="tab-content"><div class="tab-pane active" id="第3节-1"><details ><summary> <p>解释</p> </summary>              <div class='content'>              <div class="note danger"><img data-src="44.png" width="80%" /><img data-src="46.png" width="80%" /></div>              </div>            </details></div><div class="tab-pane" id="第3节-2"><div class="note warning"><p>特征：<strong>与原文相符的、正确的</strong></p><p>解题思路<br>第一步：逆向做题法；<br>第二步：压缩答案主体<br>第三步：代入法</p><p>以句子为单位，勾画每句主语，快速代入。</p><p>从A开始，找一个关键词，去题干找，找不到就跳过，找到再看第二个主题然后看逻辑关系。</p><p>不需要画句子，是代入排除法</p><img data-src="45.png" width="80%" /></div></div><div class="tab-pane" id="第3节-3"><div class="note warning"><ol><li>填空</li><li>推断下文</li></ol></div></div><div class="tab-pane" id="第3节-4"><div class="note warning"><img data-src="47.png" width="80%" /></div></div></div></div><blockquote class="blockquote-center"><p>——分界——</p></blockquote><blockquote><p>如果你可以把一个复杂的事物通俗的讲出来，就是真的理解了。</p></blockquote><p>鉴于言语理解题量大【30道】&amp; 正确率低【60% ↓】&amp; 没有整体与部分的概念</p><p>必须重来一遍，形成资料分析的那种思维。</p><h2 id="言语理解备考策略"><a href="#言语理解备考策略" class="headerlink" title="言语理解备考策略"></a>言语理解备考策略</h2><h3 id="大纲解读"><a href="#大纲解读" class="headerlink" title="大纲解读"></a>大纲解读</h3><div class="note success"><div class="note danger">*要保证正确率，而非速度*</div><div class="note info"><p>时间安排</p><ol><li>40道题35分钟</li><li><em>30道题27分钟</em></div></li></ol></div><h3 id="逻辑填空备考"><a href="#逻辑填空备考" class="headerlink" title="逻辑填空备考"></a>逻辑填空备考</h3><div class="note primary"><p>重在找规律</p><ol><li>前期不要在乎时间，主要找规律，巩固基础</li><li><em>积累实词与成语</em> </li><li>一定要明白<strong>考的是什么</strong>，是哪个知识点！！！</div></li></ol><div class="note warning">【实例】现代传媒尤其是电子传媒有着比传统纸质传媒更宽广的尺度，（    ）更多批判的意识和更多的异端。无数专家、学者在电子传媒会客厅中针对各种社会现象接受访谈，发表意见，甚至不乏（    ）的声音。分析之深、论证之严密、言论之犀利，传统媒体均无法（    ）。<p><em>依次填入空缺部分最恰当的一项是：</em></p><p>A.鼓励 特立独行 相提并论<br>B.滋生 针锋相对 同日而语<br>C.允许 振聋发聩 一目了然<br>D.容纳 惊世骇俗 望其项背</p><div class="note success"><p>粉笔解析<br>拿到题首先我们发现考查三个空。</p><details warning><summary> <p>解析</p> </summary>              <div class='content'>              <div class="note info"><p>从第一空看起来，句子中出现 <strong>“和”表并列</strong>，空缺部分需搭配两个词，分别为 <em>“批判的意识”和“更多的异端”</em> </p><p>“批判的意识”在社会中是鼓励、希望出现的，<br>“异端”可联想到异端邪说、排斥异己，偏消极。</p><p>A项“鼓励”只能搭配好的；B项“滋生”通常搭配不好的，比如滋生腐败、滋生细菌，均不符合文意，排除。C项“允许”、D项“容纳”均可保留。由此我们知道，</p><p><em>第一个空考查的是搭配。</em></p><p><strong>在空的前后，寻找关键词</strong></p></div><div class="note default"><p>第二空，<em>“甚至”表程度的加重</em>，C项“振聋发聩”意为让聋子都听见、瞎子都看见，强调语言文字的作用非常大；D项“惊世骇俗”指让世俗都震惊了，程度均偏重，均保留。这里我们知道，</p><p><em>第二个空考查的是程度的轻重。</em></p></div><div class="note success"><p>第三空，“分析之深、论证之严密、言论之犀利”论述现代传媒的优点，传统媒体则无法比得上，空缺部分应强调赶得上，对应D项“望其项背”。C项“一目了然”指一眼看得很清楚，不能体现比得上，排除。B项“同日而语”强调时间的对比。</p><p><em>第三个空考查的是语句的理解</em></p></div></div>              </div>            </details><p><strong>语感是最不靠谱的</strong><br><strong>语感是最不靠谱的</strong><br><strong>语感是最不靠谱的</strong></p></div><h3 id="中心理解题"><a href="#中心理解题" class="headerlink" title="中心理解题"></a>中心理解题</h3><div class="note primary"><p>每次做题要切记，先看<em>提问明题意</em><br>转折因果定 <em>其后<em>，</em>略读</em> 先前碎碎语<br>对策 <em>对策要警惕</em> ，内容契合文主题<br>没有关联没关系，或许它是 <em>并列句</em><br>对比，<strong>对比</strong>，才能做对言语题</p></div><div class="note success">1. 对策是否要选择</div><h3 id="语句表达"><a href="#语句表达" class="headerlink" title="语句表达"></a>语句表达</h3><p>主要包含：<em>排序、填空、接语</em></p><img data-src="31.png" width="80%"><h2 id="技巧一-分步解题"><a href="#技巧一-分步解题" class="headerlink" title="技巧一 分步解题"></a>技巧一 分步解题</h2><p><strong>这个技巧是贯穿全部的重点，是一种思维方式</strong></p><img data-src="05.png"  width="80%" /><h2 id="技巧二-压缩替换法"><a href="#技巧二-压缩替换法" class="headerlink" title="技巧二 压缩替换法"></a>技巧二 压缩替换法</h2><blockquote><p>长句转短句</p></blockquote><ol><li>长句转换为短句</li><li>依赖于关联词</li></ol><img data-src="07.png" width="80%"/><img data-src="06.png" width="80%"/><h2 id="技巧三-成分分析法"><a href="#技巧三-成分分析法" class="headerlink" title="技巧三 成分分析法"></a>技巧三 成分分析法</h2><blockquote><p>理解长难句</p></blockquote><p>长难句找 <strong>主谓宾</strong>，宾语通常是一个复合结构或小句。</p><blockquote><p>标志词, 每个句子都可以分开找重点</p></blockquote><ol><li>的—-定语（前置）</li><li>地—-状语（前置）</li><li>得—-补语（后置）</li></ol><img data-src="08.png" width="80%"/><img data-src="09.png" title="答案：C" width="80%"/><img data-src="10.png" title="答案：D" width="80%"/><h2 id="技巧四-背景铺垫法"><a href="#技巧四-背景铺垫法" class="headerlink" title="技巧四 背景铺垫法"></a>技巧四 背景铺垫法</h2><p>背景为了引出重点，背景不重要</p><img data-src="11.png" title="答案：A" width="80%"/><img data-src="12.png" title="" width="80%"/><img data-src="13.png" title="" width="80%"/><h2 id="技巧五-主体排除法"><a href="#技巧五-主体排除法" class="headerlink" title="技巧五 主体排除法"></a>技巧五 主体排除法</h2><blockquote><p>选项的陈述主体要与原文保持一致</p></blockquote><p>什么是主体？</p><ol><li>可以是主语</li><li>文章围绕这个东西展开，类似：主题。</li></ol><p>找到主体后，就可以直接排除一些选项。</p><ol><li>找主体</li><li>排除非主体选项</li><li>对比剩余选项差异</li><li>从题干中找关键词 与 第三步 对比</li></ol><img data-src="14.png" title="答案：D" width="80%"/><img data-src="15.png" width="80%"/><img data-src="16.png" title="答案：B" width="80%"/><img data-src="17.png" width="80%"/><p> 视频中排除A B 后，直接根据 <strong>厂家</strong> 二字排除 D。。。</p><h2 id="技巧六-指代引导法"><a href="#技巧六-指代引导法" class="headerlink" title="技巧六 指代引导法"></a>技巧六 指代引导法</h2><p>文章中有出现 <strong>宏观指代</strong>【指代上文的宏观内容】，则该句重要，往往承担文段的主要观点。</p><p>🔺并非所有的代词都重要！ <strong>必须是宏观指代</strong></p><img data-src="18.png" width="80%"/><img data-src="19.png" width="80%"/><img data-src="20.png" width="80%"/><h2 id="技巧七-援引观点法"><a href="#技巧七-援引观点法" class="headerlink" title="技巧七 援引观点法"></a>技巧七 援引观点法</h2><blockquote><p>引出来的是重点！</p></blockquote><ol><li>作用：为了引出之后作者的观点，重点阅读援引之后的语句</li><li>类型<ol><li>正向援引：正如 XXXX， 因此/所以</li><li>反向援引：一家之言【有人、大多数人、有看法、通常、传统。。】 <strong>然而、但是等</strong></li></ol></li></ol><table><thead><tr><th></th><th>前半句</th><th>后半句</th></tr></thead><tbody><tr><td>正向援引</td><td>正如 XXXX</td><td>因此/所以</td></tr><tr><td>反向援引</td><td>一家之言 <br>  【有人、大多数人、有看法、通常、传统】</td><td>然而、但是等</td></tr></tbody></table><p>🔺🔺<br><img data-src="21.png" width="80%"/></p><img data-src="22.png" width="80%"/><img data-src="23.png" width="80%"/><h2 id="技巧八-表达倾向性"><a href="#技巧八-表达倾向性" class="headerlink" title="技巧八 表达倾向性"></a>技巧八 表达倾向性</h2><ol><li>注意把握文中的表达倾向性</li><li>类型<ol><li>积极的倾向性</li><li>消极的倾向性<ol><li>从表面上看</li><li>看上去</li><li>似乎、好像</li><li>所谓</li><li>遗憾的是</li></ol></li></ol></li></ol><blockquote><p>积极的 =》 上箭头 ⬆️<br>消极的 =》 下箭头 ⬇️</p></blockquote><img data-src="24.png" width="80%"/><img data-src="25.png" width="80%"/><h2 id="技巧九-举例论证法"><a href="#技巧九-举例论证法" class="headerlink" title="技巧九 举例论证法"></a>技巧九 举例论证法</h2><ol><li>作用<ol><li>为了证明【前后】出现的观点，例子本身不重要，可以忽略或快速浏览</li><li>围绕例子的选项不是主旨题的答案</li></ol></li><li>类型<ol><li>显性：比如、例如、XX就是一个例证、以XX为例</li><li>隐性：数据、年份、人名、地名、术语。</li></ol></li></ol><img data-src="26.png" width="80%"/><img data-src="27.png" width="80%"/><img data-src="28.png" width="80%"/><h2 id="技巧十-反面论证法"><a href="#技巧十-反面论证法" class="headerlink" title="技巧十 反面论证法"></a>技巧十 反面论证法</h2><ol><li>作用<ol><li>为了说明证明观点的权威性与合理性</li></ol></li><li>类型<ol><li>正 + 反： 不要看反面论证，直接看前面<ol><li>你今天要带伞，不带伞会淋雨【后半句不需要看】</li></ol></li><li>(正) + 反：通过反面论证退出正面观点<ol><li>如果不。。那么不。。</li><li>如果没有。。那么没有</li><li>例子<ol><li>如果不带伞就淋雨 —&gt; 需要带伞</li></ol></li></ol></li></ol></li></ol><img data-src="29.png" width="80%"/><img data-src="30.png" width="80%"/>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 言语理解 </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析-考点</title>
      <link href="2020/05/07/civil_servant_analysis2/"/>
      <url>2020/05/07/civil_servant_analysis2/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/009.jpg" width=80% /><span class='geyan'>         言而当，知也；默而当，亦知也。（《荀子·非十二子》）</span><a id="more"></a><hr><h2 id="高频易错"><a href="#高频易错" class="headerlink" title="高频易错"></a>高频易错</h2><h3 id="a-gt-b-推导公式"><a href="#a-gt-b-推导公式" class="headerlink" title="a%&gt;b% 推导公式"></a>a%&gt;b% 推导公式</h3><div class="tabs" id="推导公式"><ul class="nav-tabs"><li class="tab active"><a href="#推导公式-1">示例1</a></li><li class="tab"><a href="#推导公式-2">解析</a></li><li class="tab"><a href="#推导公式-3">示例2</a></li><li class="tab"><a href="#推导公式-4">解析</a></li></ul><div class="tab-content"><div class="tab-pane active" id="推导公式-1"><div class="note danger">考场上不要幻想一步步计算出来</div><img data-src="65.png" title="简单问题不要做错了" width="80%"><img data-src="61.png" width="80%"></div><div class="tab-pane" id="推导公式-2"><img data-src="61.png" width="80%"><div class="note danger"><p>第一步用于是要确定 <strong>问的什么</strong><br>🤔思考步骤🤔</p><ol><li>比重问题</li><li>增长率问题</li><li>比重增长率比较问题</li><li>所需要的公式可能是：<em>两期比重差公式</em></li></ol><div class="note warning"><p>第二步：列公式，和 <em>比重</em>， <strong>增长率</strong> 相关的公式</p><div class="note success">部分增长率大于整体的增长率可以推出来，比重上升；<p>是因为 A/B x <em>a% - b%</em> / 1+a% 中的分母决定的。</p></div><p>第三步骤，</p><ol><li>常规做法，计算各自的增速，前者还好算，后者确需要用比重计算总量后再计算增速；</li><li>有 <em>比重、部分</em>，可以思考推导公式的逆向运用；</li><li>如果比重上升可以推出 a%&gt;b%； 即 后推前。<ol><li>2005年比重下降 ==》 a% &lt; b% <strong>部分增速 小于 GDP增速， 排除</strong></li></ol></li></ol></div></div></div><div class="tab-pane" id="推导公式-3"><div class="note success"><p>2014年，某省全社会研发经费达122.13亿元，研发经费占GDP的比重达0.68%，比2013年下降0.02个百分点。<br>若2014年该省GDP同比增速为7.8%，则当年该省全社会研发经费同比增速为（    ）。</p><p>A．1%<br>B．5%<br>C．10%<br>D．18%</p></div></div><div class="tab-pane" id="推导公式-4"><div class="note danger"><p>2014年，某省全社会研发经费达122.13亿元，研发经费占GDP的<strong>比重</strong>达0.68%，<strong>比2013年下降</strong>0.02个百分点。<br>若2014年该省GDP同比增速为7.8%，则当年该省全社会研发经费同比<em>增速</em>为（    ）。</p><p>A．1%<br>B．5%<br>C．10%<br>D．18%</p><img data-src="63.png" width="80%"><div class="note primary"><p>第一步，先看题目，求的是增长率问题</p><p>增长率的所需</p><ol><li>基本的<ol><li>增量、现量、基量</li></ol></li><li>比重相关的<ol><li>比重、整体、部分、增长率</div></li></ol></li></ol><div class="note success"><p>这道问题，看起来像是 <strong>假设问题</strong>，和一般的题目有点差异。抛开其余的不说，找关键的</p><ol><li>已知<ol><li>整体增长率《问题中的》</li><li>2014年比重是 <em>下降的</em> –&gt; A/B ⬇️《题目中的》</li></ol></li><li>求部分增长率</li></ol><div class="note info"><ol><li>由 <strong>下降</strong> 得出 =》 a% &lt; b%， <em>排除C D</em></li><li>由 两期比重差 公式得出 <ol><li>差 = A/B x a% - b% / 1 + a%</li><li>-0.02 = 0.68 x a% - 7.8% / 1 + a%</li><li>代入法，分别计算选项 A、B</li></ol></li></ol></div></div>  </div></div></div></div><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="增长率常考题型"><a href="#增长率常考题型" class="headerlink" title="增长率常考题型"></a>增长率常考题型</h2><h3 id="增长率"><a href="#增长率" class="headerlink" title="增长率"></a>增长率</h3><p>如果确定是求增长率，</p><ol><li>快速找到【基期、现期、增长量】</li><li>列公式</li><li>看选项是否需要注意量级，</li><li>选择直除、截位计算</li></ol><p><strong>遇到百分点，加减操作</strong><br>低-》加<br>高-》减</p><img data-src="06.png" width="80%"/><img data-src="61.png" title="增长率&倍数" width="80%"/><p><strong>解题步骤</strong></p><div class="tabs" id="步骤"><ul class="nav-tabs"><li class="tab active"><a href="#步骤-1">步骤 1</a></li><li class="tab"><a href="#步骤-2">步骤 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="步骤-1"><img data-src="07.png" width="80%"/></div><div class="tab-pane" id="步骤-2"><img data-src="08.png" width="80%"/></div></div></div><p>判断量级，画线可以根据选项来划两位、三位</p><img data-src="09.png" width="80%"/><h3 id="增长率判断"><a href="#增长率判断" class="headerlink" title="增长率判断"></a>增长率判断</h3><p>增长率判断、比较，题型：柱状图、条形图</p><ol><li>时间段内是否达到、超过某个数据</li></ol><p><strong>不需要全部计算完。</strong></p><p>解法</p><ol><li>确定问题</li><li>基量*比值 + 基量 对比 现量</li></ol><h3 id="增长率大小比较"><a href="#增长率大小比较" class="headerlink" title="增长率大小比较"></a>增长率大小比较</h3><p><strong>变幅 = 变化幅度 = 增长率的绝对值</strong></p><h3 id="混合增长率🌈"><a href="#混合增长率🌈" class="headerlink" title="混合增长率🌈"></a>混合增长率🌈</h3><img data-src="51.png" width="50%" title="部分+部分=整体" /><img data-src="52.png" width="50%" title="十字交叉" /><img data-src="53.png" width="50%" title="十字交叉变形" /><p>注意点</p><ol><li>该法用来解决两者之间的比例关系问题；</li><li>得出的比例关系<strong>是 AB 之比</strong>，而不是 ab 之比（这点经常有同学弄混）；</li><li>总均值放中央，对角线上<strong>大数减小数</strong>，结果放对角线上</li></ol><div class="note primary"><span id="inline-blue">结论</span><ol><li>总体增速 r 介于部分增速 a 和 b 之间。</li><li>总体增速 r 靠近基期值 A/(1+a)、B/(1+b) 较大的部分。</li></ol><p><span id="inline-blue">题型</span></p><ol><li>已知部分增速，求总体增速。</li><li>已知总体增速、部分增速，求另外一个部分增速。</div></li></ol><h4 id="仔细品-❌"><a href="#仔细品-❌" class="headerlink" title="仔细品 ❌"></a>仔细品 ❌</h4><div class="tabs" id="混合增长率"><ul class="nav-tabs"><li class="tab"><a href="#混合增长率-1">看特征🔺</a></li><li class="tab"><a href="#混合增长率-2">蒙对 ⭕️</a></li><li class="tab active"><a href="#混合增长率-3">漂亮的实例💯</a></li></ul><div class="tab-content"><div class="tab-pane" id="混合增长率-1"><div class="note danger">【例 1 江西 2017】江西省 2015 年财政总收入 3021.5 亿元，比上年增长 12.7%，财政总收入占生产总值的比重为 18.1%，比上年提高 1.0 个百分点。其中，税收收入 2373.0 亿元，增长 8.9%，占财政总收入比重为 78.5%。其它收入 648.5 亿元。<p>问题：2015 年江西省财政总收入中的其它收入比上年：<br>A. 减少了 2.9%    B. 减少了 29.2%  C. 增加了 2.9%  D. 增加了 29.2% </p><div class="note success">【解析】<ol><li>看选项 <strong>增加+%</strong> 是增长率的问题</li><li>✅是混合增长率<ol><li>已知 总+部分<ol><li>财政总收入比上年增长 12.7% =&gt; 总的 <strong>r=12.7</strong></li><li>税收收入增长 8.9%，即 <strong>a = 8.9%</strong></li></ol></li><li>求部分</li></ol></li><li>解法<ol><li>整体介于部分之间 =》选 D</div></li></ol></li></ol></div></div><div class="tab-pane" id="混合增长率-2"><div class="note info"><p><a href="https://www.jianshu.com/p/1c2230198493" target="_blank" rel="noopener"><em>——来源—–</em></a></p><p>【例 2 江苏 2016】2015 年前 7 个月，中国对欧盟的出口额为 12180.2，同比增长 -4.4%；中国对美国的出口额为 13973.8，同比增长 7.2%。</p><p>问题：2015 年前 7 个月，中国对欧盟和美国的出口额同比平均增长：</p><p>A.-1.8%  B.-1.5%  C.1.5%  D.1.8% </p><p>【解析】</p><p>因为中国对欧盟的出口额 &lt; 中国对美国的出口额，所以平均增长速度更趋向于 7.2%，-4.4%和 7.2%的中间值为 (-4.4% + 7.2%)/2 = 1.4%，那么平均增长速度肯定大于 1.4%，先排除 A 和 B。</p><p>接下来还是需要列式简单计算：</p><img data-src="54.png" width="60%"/></div></div><div class="tab-pane active" id="混合增长率-3"><div class="note warning"><p>【例子】2008 年，某省农产品进出口贸易总额为 7.15 亿美元，比上年增长 25.2%。其中，出口额为 5.02 亿美元，增长 22.1%; 进口额为 2.13 亿美元，增长 33.2%。</p><p>2008 年，该省农产品外贸顺差比上年增长了：</p><p>A.5% B.15% C.25% D.35%</p><div class="note success"><p><span id="blue">【解析】</span></p><ol><li>求增长率问题<ol><li>方法一: 分别计算 08、07 顺差，增量/基量，<strong>如果想不到简单的方法</strong></li><li>方法二：<ol><li>顺差 = 出口-进口；</li><li>出口&lt;22.1%&gt; = 顺差 + 进口 &lt;33.2%&gt;</li><li>出口应该介于：顺差与进口之间 =&gt; 顺差小于 22.1%</li><li></li></ol></li><li></li><li>这样不是混合增长率，但是我们可以这样思考：出口 = 贸易顺差 + 进口，这样就变成了混合增长率的相关计算，只是变成了已知整体推导部分而已。所以很容易根据混合增长率的两个规则推导出贸易顺差处于 11.1%~22.1%，选 B。</li></ol></li></ol></div></div></div></div></div><hr><h4 id="十字交叉"><a href="#十字交叉" class="headerlink" title="十字交叉"></a>十字交叉</h4><div class="tabs" id="十字交叉"><ul class="nav-tabs"><li class="tab active"><a href="#十字交叉-1">问题来源</a></li><li class="tab"><a href="#十字交叉-2">实质问题</a></li></ul><div class="tab-content"><div class="tab-pane active" id="十字交叉-1"><div class="note success">目前只会用&猜，仅限于资料分析中的混合增长率问题，数量关系还不会用。<div class="note primary"><p><a href="https://bbs.qzzn.com/forum.php?mod=viewthread&tid=15325500&highlight=%CA%AE%D7%D6%BD%BB%B2%E6" target="_blank" rel="noopener">问题&amp;解释来源</a></p><p>A 值为 1513.12，比上年同期增长 28%；B 值 3120，比上年同期增长 32.5%。求 A、B 的和比上年同期增长了多少个百分点？<br>A 、29           B、30                C、31             D、32</p><p>十字交叉反应到资料分析里  就是跷跷板  跷跷板就是哪边重偏向那一边</p><ol><li>28%和 32.5%的中间值是 30.25% =&gt; 两边一样重  那就在 30.25%  </li><li>这个题 32.5%一侧达到 3120 为重的一侧  因此偏向 32.5% =&gt; 但是 cd 都符合</li><li>看看重量在 2:1 左右【一共重量 3 份】    28 和 32.5 中间差 4.5  这 4.5 分成 3 份 每份 1.5  则 2:1：3:1.5   32.5-1.5 或者 28+3 都可得到答案</li><li>或者直接带入； 如果是 32% 意味着 比值啊 32-28  :  32.5-32=<code>8:1</code>  明显不符合题意</li></ol><p><span id="inline=blue">交叉是浓度在交叉</span></p><ol><li>A、B 都是浓度（假设 A&gt;B）    混合后浓度 C</li><li>因此这两种<code>溶液的质量比</code>是 <code>C-B ： A-C</code>   所以这个比值加起来就是 <code>C-B+A-C=A-B</code> 就是<code>浓度的差值</code></li><li><strong>浓度的差值就是按照比值来分下去的</strong><br>比如：20%的甲和 50%的乙混合成 30%<br>正着来都知道 甲：乙= 乙差：甲差=50-30 ： 30-20   那么来想一想  这两个比值加起来就是 50-30+30-20=50-20 就是浓度的差值</li></ol><p>如果说 20%和 50%按照 2:1 混合  浓度是多少呢？<br>20%和 50%中间差 30%  混合的浓度以上在这 30%里面游动 对不对<br>但是具体怎么个游动法  就是跟比值相关了<br>比值是 2:1  那么就说明往一边游 2 份，往一边游 1 份   一共是 30%的游动区间  那么就是 20%或 10%   50-20 或者 30+10</p></div></div></div><div class="tab-pane" id="十字交叉-2"><div class="note info"><p><a href="https://bbs.qzzn.com/forum.php?mod=viewthread&tid=15860759&highlight=%CA%AE%D7%D6%BD%BB%B2%E6" target="_blank" rel="noopener">十字交叉–估算-是谁的比值</a></p><p>当然不能是现期了<br>因为是增长率来交叉， 而增长率是建立在基期基础之上的<br>其实  只需记住  十字交叉 都是分母之比<br>比如 浓度交叉 大家都知道是溶液之比  为什么呢？  因为浓度=溶质/溶液 溶液是那个分母！<br>同样的道理  两个班级平均分交叉  大家也知道 是人数之比， 还是因为平均分=总分/人数<br>人数是那个分母！</p><p>那你想想  你资料分析中 用增长率来交叉<br>增长率 =  增长量/基期<br>你就明白 为什么要是基期之比了<br>当然 大部分时候 是估算的 或者近似看做现期</p><hr><p><span id="inline=blue">结论</span></p><ol><li>已知部分求整体<ol><li>知道两端的<code>率</code> 20%、50%，求中间的<code>率</code></li><li>如果<code>量</code>有一定的<code>比例</code>，如2：1，则<code>率</code>的差值 / 比例和 =&gt; 50-20 / (1+2) = 10<ol><li>左右游荡1或2个位置，整体靠近大的一方</li></ol></li><li>如果<code>量</code>相近，找<code>率</code>的中间值，(a+b)/2<ol><li>直接摘抄ab</li><li>中间靠近大的一方即可</li></ol></li></ol></li><li>已知部分&amp;整体，求部分<ol><li></li></ol></li></ol><hr></div></div></div></div><h2 id="基期量常考题型"><a href="#基期量常考题型" class="headerlink" title="基期量常考题型"></a>基期量常考题型</h2><p>X: 现期量<br>r: 增长率</p><p>$$<br>\frac{X}{1+r}<br>$$</p><p>考点识别：</p><p><strong>已知“现在”，求“过去”</strong></p><div class="tabs" id="基期量常考题型"><ul class="nav-tabs"><li class="tab active"><a href="#基期量常考题型-1">计算基期量</a></li><li class="tab"><a href="#基期量常考题型-2">基期量做差</a></li><li class="tab"><a href="#基期量常考题型-3">基期量比较</a></li></ul><div class="tab-content"><div class="tab-pane active" id="基期量常考题型-1"><div class="note primary"><ol><li>化为乘法</li><li>消百分号</li><li>在消小数点</li><li>因为选项差别小，所以可以仔细算</li></ol></div><img data-src="10.png" width="80%"></div><div class="tab-pane" id="基期量常考题型-2"><div class="note success"><ol><li>确定题目是基期量做差</li><li>看选项<ol><li>两组数：先算现期差, <em>排除法</em></li><li>四个数：分别直除计算</div></li></ol></li></ol><img data-src="11.png" title="漂亮的实例" width="80%"><img data-src="12.png" title="漂亮的实例" width="80%"></div><div class="tab-pane" id="基期量常考题型-3"><div class="note success"><ol><li>化除为乘，前提：减法 &amp; 增长率很小</li><li>增长倍数可以直接用</li><li><em>利用分数性质</em> </div></li></ol><img data-src="13.png" title="漂亮的实例" width="80%"><img data-src="14.png" title="漂亮的实例" width="80%"></div></div></div><img data-src="59.png" title="必备" width="80%"><img data-src="60.png" title="必备" width="80%"><h2 id="增长量常考题"><a href="#增长量常考题" class="headerlink" title="增长量常考题"></a>增长量常考题</h2><h3 id="🚩公式"><a href="#🚩公式" class="headerlink" title="🚩公式"></a>🚩公式</h3><p>已知 <strong>现期</strong>&amp;<strong>增长率</strong>， 求增长量。</p><p>X： 现期<br>r： 增长率<br>Z: 增长量<br>n: 增长率转换为 1 / n</p><p>$$<br>Z = \frac{X}{r+1} * r<br>$$</p><p>增长率为正数</p><p>$$<br>Z = \frac{X}{n+1}<br>$$</p><p>增长率为负数</p><p>$$<br>Z = \frac{X}{n-1}<br>$$</p><h3 id="增长量计算"><a href="#增长量计算" class="headerlink" title="增长量计算"></a>增长量计算</h3><h4 id="小率"><a href="#小率" class="headerlink" title="小率"></a>小率</h4><div class="note success"><p>特征：<em>小于 5%</em><br>目标为了好算。<strong>将百分数转为分数</strong></p><ol><li>1% 2% 3%</li><li>可以直接 2 ÷ 100 = 1/50</li></ol></div><p><img data-src="15.png" alt=""></p><div class="note danger"><p>转换分数–乘 100</p><p>将 2.5% 转化为分数：</p><ol><li>2.5% * 10 = 25% = 1 / 4</li><li>加 0，得 1 / 40</li></ol><p>4.X 5.X 可以乘 2。</p><p>掌握不熟练，可以用上一种方式</p></div><h4 id="大率"><a href="#大率" class="headerlink" title="大率"></a>大率</h4><div class="note primary"><p>特征：<strong>超过 50%</strong></p><p>直除法计算</p></div><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><div class="note warning"><p>已知 <em>增长率【百分数】</em> &amp; 现量，求 <strong>基量</strong>；<br>为了简单，将百分数转为分数，可以不精确</p><div class="note success"><p>某个增长率化接近两个两个分数</p><ol><li>选项差别大，取哪个分数都行</li><li>选项值接近，取两个分数中间的</div></li></ol></div><div class="tabs" id="特殊情况"><ul class="nav-tabs"><li class="tab active"><a href="#特殊情况-1">随意</a></li><li class="tab"><a href="#特殊情况-2">选中间</a></li></ul><div class="tab-content"><div class="tab-pane active" id="特殊情况-1"><img data-src="15.png" width="80%" /></div><div class="tab-pane" id="特殊情况-2"><img data-src="16.png" width="80%" /></div></div></div><h3 id="增长量倍数"><a href="#增长量倍数" class="headerlink" title="增长量倍数"></a>增长量倍数</h3><div class="note danger"><p>可以分别求增长量，也不慢</p><div class="note success">增长率相差10个百分点以内<p><em>(A ÷ B)现 * 现(a% ÷ b%)</em></p></div><img data-src="17.png" titile="漂亮的实例" width="80%" /></div><h3 id="🚩增长量大小比较"><a href="#🚩增长量大小比较" class="headerlink" title="🚩增长量大小比较"></a>🚩增长量大小比较</h3><div class="note danger"><div class="note success">类比 基期量的大小比较、做差<ol><li>大大则大，一大一小看倍数</li><li>注意分数的性质</div></li></ol><img data-src="18.png" width="80%" /></div><div class="note warning"><div class="note primary"><blockquote><p>特殊情况：</p></blockquote><ol><li>【增长率如果大于<code>50%</code>】<ol><li>大大则大 — <strong>可以用</strong></li><li>【一大一小就不要用口诀！】— <strong>错误</strong></li></ol></li><li>不能用口诀，就用直除，图：19</li><li>倍数相近也不可以用口诀。</li></ol></div><img data-src="19.png" title="直除法" width="80%" /></div><h4 id="绝对值问题"><a href="#绝对值问题" class="headerlink" title="绝对值问题"></a>绝对值问题</h4><div class="tabs" id="绝对值问题"><ul class="nav-tabs"><li class="tab active"><a href="#绝对值问题-1">不能忽略绝对值</a></li><li class="tab"><a href="#绝对值问题-2">直除</a></li></ul><div class="tab-content"><div class="tab-pane active" id="绝对值问题-1"><img data-src="20.png" width="80%" /></div><div class="tab-pane" id="绝对值问题-2"><p>增率 10% 以内【负数】，大于 10%，就直除<br><img data-src="21.png" title="直除法" width="80%" /></p></div></div></div><h2 id="比重常考题型"><a href="#比重常考题型" class="headerlink" title="比重常考题型"></a>比重常考题型</h2><img data-src="62.png" title="必备" width="80%" /><div class="note success"><p>识别：</p><ol><li>A【部分】 <code>占</code> B【整体】 的比重</li><li>A【部分】所<code>占</code>比重</li><li>已知 整体 &amp; 比重，求部分 = 整体 * 比重</li><li>已知 部分 &amp; 比重，求整体 = 部分 / 比重</li></ol></div><h3 id="比重"><a href="#比重" class="headerlink" title="比重"></a>比重</h3><img data-src="26.png" width=80% /><div class="note danger"><p>图形：12 点顺时针看图</p><div class="note success"><ol><li>计算某一个部分的比重，比重 * 360˚， 扇形的圆心角度</li><li>大小关系，倍数关系</div></li></ol></div><h3 id="🔺基期比重"><a href="#🔺基期比重" class="headerlink" title="🔺基期比重"></a>🔺基期比重</h3><div class="note info"><blockquote><p>已知 【现在】求【过去】的比重</p></blockquote><p>主要采用<strong>估算</strong>的方式</p><div class="note primary"><ol><li>前一部分，直除法算得<strong>首位</strong></li><li>第二部分，四舍五入计算<ol><li>是否在 1 附近</li><li>是否有倍数，有倍数关系就要大一点</div></li></ol></li></ol></div><p><img data-src="31.png" alt=""></p><div class="tabs" id="基期比重"><ul class="nav-tabs"><li class="tab active"><a href="#基期比重-1">两个基期🔺🔺</a></li><li class="tab"><a href="#基期比重-2">解析</a></li><li class="tab"><a href="#基期比重-3">示例</a></li><li class="tab"><a href="#基期比重-4">单一计算</a></li><li class="tab"><a href="#基期比重-5">单一计算</a></li><li class="tab"><a href="#基期比重-6">技巧</a></li><li class="tab"><a href="#基期比重-7">技巧</a></li></ul><div class="tab-content"><div class="tab-pane active" id="基期比重-1"><img data-src="55.png" title="漂亮的实例" width=80% /></div><div class="tab-pane" id="基期比重-2"><div class="note warning"><p>基期比重问题。因为涉及 <em>题目太长</em>、<strong>不明所以</strong>不知道怎么做。</p><ol><li>利用基期比重公式，分别计算；</li><li>相减</li></ol><div class="note success"><p>思考 <em>比重与增长率之间的关系</em>，此消彼长的关系。<strong>估算才是王道</strong></p></div></div><img data-src="56.png" width=80% /></div><div class="tab-pane" id="基期比重-3"><div class="note success">*注意倍数*，看到不要懵逼</div><img data-src="32.png" width="80%" /></div><div class="tab-pane" id="基期比重-4"><img data-src="33.png" width="80%" /></div><div class="tab-pane" id="基期比重-5"><img data-src="32.png" width="80%" /></div><div class="tab-pane" id="基期比重-6"><img data-src="35.png" width="80%" /></div><div class="tab-pane" id="基期比重-7"><img data-src="36.png" width="80%" /></div></div></div><h3 id="🔺🔺两期比重之差"><a href="#🔺🔺两期比重之差" class="headerlink" title="🔺🔺两期比重之差"></a>🔺🔺两期比重之差</h3><p><img data-src="47.png" alt=""></p><div class="tabs" id="两期比重差"><ul class="nav-tabs"><li class="tab active"><a href="#两期比重差-1">原理</a></li><li class="tab"><a href="#两期比重差-2">读数</a></li></ul><div class="tab-content"><div class="tab-pane active" id="两期比重差-1"><img data-src="38.png" width="80%" /></div><div class="tab-pane" id="两期比重差-2"><img data-src="39.png" width="80%" /></div></div></div><div class="note primary"><div class="note success"><p><strong>步骤</strong></p><ol><li>判断 比重变化的方向，a% 大小对比 b%</li><li>选择<ol><li>时间不够，选【小】的</li><li>百分点 远远 小于 |a% - b%|</div></li></ol></li></ol><p>【例 4】 2010 年，我国出口贸易总额为 15779.3 亿美元，同比增长 31.3%。 2010 年，我国机电产品出口 9334.3 亿美元，同比增加 30.9%; 高新技术产品出口 4924.1 亿美元，同比增长 30.7%。<em>2010 年</em> <code>高新技术产品出口额</code> <strong>占</strong> <code>到出口总额的</code> <strong>比重</strong> 与上年<em>相比</em>约：( )。</p><p>A. 增加了 10 个百分点 B. 减少了 10 个百分点<br>C. 增加了 0.1 个百分点 D. 减少了 0.1 个百分点</p><div class="note warning"><p>【解析】两期比重问题，先看上升下降，2010 年高新技术产品出口额增长率是 <strong>30.7%(a%)</strong>，我国出口贸易总额增长率 <strong>31.3%(b%)</strong>。整体增长率大，所以下降了。然后选个最小值 D 选项。</p></div></div><h3 id="比重增长率"><a href="#比重增长率" class="headerlink" title="比重增长率"></a>比重增长率</h3><h2 id="平均数"><a href="#平均数" class="headerlink" title="平均数"></a>平均数</h2><div class="note danger"><ol><li>牢记公式；</li><li>牢记推理过程，两个公式运算。</li></ol><img data-src="50.png" title="必备"  width="100%" /></div><h3 id="平均数-1"><a href="#平均数-1" class="headerlink" title="平均数"></a>平均数</h3><div class="note info"><p><span id="inline-blue"> 平均数：平均、均、每、单位； </span></p><p>单位面积产量 =》面积/单位</p><div class="note danger"><p><strong>后 / 前</strong></p><p>每万元 GDP 的能耗 =》 能耗 / GDP</p><p>每单位取水量的耗水 =》 耗水 / 取水量</p></div><img data-src="43.png" width="70%" /></div><h3 id="基期平均数"><a href="#基期平均数" class="headerlink" title="基期平均数"></a>基期平均数</h3><h3 id="两期平均数之差"><a href="#两期平均数之差" class="headerlink" title="两期平均数之差"></a>两期平均数之差</h3><h3 id="平均数增长率"><a href="#平均数增长率" class="headerlink" title="平均数增长率"></a>平均数增长率</h3><div class="note warning"><div class="note success">不能忽略文字<p>平均数增长率计算题目特征：题目中同时出现 <strong>“均、每、单位”此类平均数特征词汇</strong>以及 <strong>增长率题目特征“增长/减少 (%)”</strong>，直接找到<code>总数和总个数</code>对应增长率数据，代入公式求解即可。</p></div><p>【例】2014 年，新登记注册外商投资企业 3.84 万户，同比增长 5.76%。投资总额 2763.31 亿美元，同比增长 15.0%；注册资本 1796.39 亿美元，同比增长 23.87%。</p><p>2014 年，新登记注册外商投资企业 <strong>户均注册资本</strong> 约<code>比</code>上年同期<code>增长</code>（    ）。</p><p>A.17%   B.12%   C.8%    D.4%</p><div class="note info"><p>【解析】问题主语为 <strong>“户均注册资本”，是平均数</strong>，问的是增长率（选项为百分数），容易判断题型属于平均数的增长率。<em>户均注册资本=注册资本 / 注册户数</em> ，注册资本增长率为 23.87% 【 <em>a%</em> 】，注册户数增长率为 5.76% 【 <em>%b</em> 】</p><p>套用公式，所求增长率=(23.87%-5.76%)÷(1+5.76%)=18.11%÷1.0576，比 18.11%略小，故本题答案为 A 选项。</p></div></div><div class="tabs" id="平均数增长率"><ul class="nav-tabs"><li class="tab active"><a href="#平均数增长率-1">平均数增长率 💯</a></li><li class="tab"><a href="#平均数增长率-2">解析 💯</a></li></ul><div class="tab-content"><div class="tab-pane active" id="平均数增长率-1"><img data-src="57.png" title="漂亮的实例" width=80% /></div><div class="tab-pane" id="平均数增长率-2"><img data-src="58.png" width=80% /></div></div></div><h2 id="倍数"><a href="#倍数" class="headerlink" title="倍数"></a>倍数</h2><div class="note danger"><blockquote><p>倍数： A 是（为）B 的多少倍<br>A / B</p></blockquote></div><img data-src="44.png" width="80%" /><p>公式扩展</p><div class="tabs" id="倍数"><ul class="nav-tabs"><li class="tab active"><a href="#倍数-1">对比基期</a></li><li class="tab"><a href="#倍数-2">a b</a></li></ul><div class="tab-content"><div class="tab-pane active" id="倍数-1"><img data-src="45.png" width="80%" /></div><div class="tab-pane" id="倍数-2"><img data-src="46.png" width="80%" titie="B"/></div></div></div><h3 id="倍数与增长结合"><a href="#倍数与增长结合" class="headerlink" title="倍数与增长结合"></a>倍数与增长结合</h3><h3 id="倍数与比重结合"><a href="#倍数与比重结合" class="headerlink" title="倍数与比重结合"></a>倍数与比重结合</h3><h3 id="倍数与平均数结合"><a href="#倍数与平均数结合" class="headerlink" title="倍数与平均数结合"></a>倍数与平均数结合</h3><h2 id="🔴蒙题技巧-💯"><a href="#🔴蒙题技巧-💯" class="headerlink" title="🔴蒙题技巧 💯"></a>🔴蒙题技巧 💯</h2><h3 id="出现多的"><a href="#出现多的" class="headerlink" title="出现多的"></a>出现多的</h3><p><img data-src="25.png" alt=""></p><h3 id="选小的"><a href="#选小的" class="headerlink" title="选小的"></a>选小的</h3><p>比重变化<br><img data-src="42.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 资料分析 </category>
          
          <category> 考点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析-技巧</title>
      <link href="2020/05/07/civil_servant_analysis1/"/>
      <url>2020/05/07/civil_servant_analysis1/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/008.jpg" width=80% /><span class='geyan'>    知之而不行，虽敦必困。（《荀子·儒效》）</span><a id="more"></a><h1 id="速算技巧"><a href="#速算技巧" class="headerlink" title="速算技巧"></a>速算技巧</h1><h2 id="第一节-速算技巧–直除法"><a href="#第一节-速算技巧–直除法" class="headerlink" title="第一节 速算技巧–直除法"></a>第一节 速算技巧–直除法</h2><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>画出三要素</p><ol><li>时间 ⭕️</li><li>主体 直线</li><li>关键字 三角</li></ol><hr><p>增长量 =（ 现 / 1 + 率 ）* 率</p><hr><h3 id="材料阅读与数据查找"><a href="#材料阅读与数据查找" class="headerlink" title="材料阅读与数据查找"></a>材料阅读与数据查找</h3><ol><li>文字材料<ol><li>时间、每段首句</li></ol></li><li>表格<ol><li>标题、横/纵标目、单元</li></ol></li><li>折线图图形<ol><li>标题、横/纵轴、图例、单位</li></ol></li><li>饼状图<ol><li>标题、单位、类别【12 点顺时针方向】</li></ol></li></ol><h3 id="常用速算技巧"><a href="#常用速算技巧" class="headerlink" title="常用速算技巧"></a>常用速算技巧</h3><h4 id="直除法"><a href="#直除法" class="headerlink" title="直除法"></a>直除法</h4><p>考虑的步骤</p><ol><li><p>看选项</p><ol><li>首位不同，算第一位</li><li>第二位不一样，算到第二位</li></ol></li><li><p>截位【需要几位算几位】</p><ol><li><p>根据第一步，决定四舍五入，取前两位/三位</p></li><li><p>截【默认截三位】</p><ol><li>两位：首位不同</li><li>三位：首位相同，第二位不同</li></ol></li><li><p>除的时候忽略小数点</p><ol><li>选项差 10 倍 100 关系</li></ol></li></ol></li></ol><p>4407 / 1 + 17.7%</p><ul><li>4280</li><li>3744</li><li>2983</li><li>5347</li></ul><p>截两位<br>$$ \frac{4407}{12} $$</p><p>题：7.84 / 1 + 7.4%</p><p>784 / 107 = 7.3</p><p>1882.5  / 4219.1 </p><p>1880 / 422 得到 45 排除 40<br>如果差别大，就 45</p><p><strong>特殊情况：截位&amp;小数</strong></p><p><img data-src="04.png" alt=""></p><p><strong>保留所有单位，取相同位数划线</strong></p><p><img data-src="05.png" alt=""></p><p><strong>左溢一位</strong></p><p><img data-src="06.png" alt=""></p><p><strong>比值问题</strong></p><p><img data-src="07.png" alt=""></p><h2 id="第二节-速算技巧–特殊分数化简"><a href="#第二节-速算技巧–特殊分数化简" class="headerlink" title="第二节 速算技巧–特殊分数化简"></a>第二节 速算技巧–特殊分数化简</h2><p><a href="http://latex.codecogs.com/eqneditor/editor.php" target="_blank" rel="noopener">http://latex.codecogs.com/eqneditor/editor.php</a></p><h3 id="特殊分数"><a href="#特殊分数" class="headerlink" title="特殊分数"></a>特殊分数</h3><h4 id="背熟"><a href="#背熟" class="headerlink" title="背熟"></a>背熟</h4><blockquote><p>考试可以先默写到草稿纸</p></blockquote><p>前提：背熟 分数转百分数： </p><p>$$<br>\frac{1}{2} - \frac{1}{15}<br>$$</p><p><strong>Plan B</strong><br>当场计算</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">14</span>% = <span class="number">100</span> / <span class="number">14</span> = <span class="number">1</span>/<span class="number">7</span></span><br></pre></td></tr></table></figure><p><img data-src="08.png" alt=""></p><h4 id="用途一-增长量"><a href="#用途一-增长量" class="headerlink" title="用途一 增长量"></a>用途一 增长量</h4><ol><li>现 &amp; 率</li></ol><p>X: 现期量<br>r：增率<br>Z：增量</p><p>$$<br>Z = \frac{X}{r+1}<br>$$</p><p><img data-src="09.png" alt=""></p><h4 id="用途二-A-B"><a href="#用途二-A-B" class="headerlink" title="用途二 A * B"></a>用途二 A * B</h4><h5 id="比重-【部分-整体-比重】"><a href="#比重-【部分-整体-比重】" class="headerlink" title="比重 【部分 = 整体 * 比重】"></a>比重 【部分 = 整体 * 比重】</h5><h5 id="现期-【现-基-率】"><a href="#现期-【现-基-率】" class="headerlink" title="现期 【现 = 基 * 率】"></a>现期 【现 = 基 * 率】</h5><p><img data-src="10.png" alt=""></p><h3 id="分数比较"><a href="#分数比较" class="headerlink" title="分数比较"></a>分数比较</h3><h4 id="直除法-1"><a href="#直除法-1" class="headerlink" title="直除法"></a>直除法</h4><p>量级一致，直除计算<strong>首位</strong></p><p><strong>量级一致</strong></p><p><img data-src="11.png" alt=""></p><p><strong>量级不一致</strong></p><p><img data-src="12.png" alt=""></p><h4 id="利用分数性质"><a href="#利用分数性质" class="headerlink" title="利用分数性质"></a>利用分数性质</h4><p>上边的问题，可以用量级计算，但是特别麻烦。采用分数性质做。</p><h5 id="1-大小不同"><a href="#1-大小不同" class="headerlink" title="1. 大小不同"></a>1. 大小不同</h5><p><img data-src="13.png" alt=""></p><p><img data-src="14.png" alt=""></p><h5 id="2-找接近"><a href="#2-找接近" class="headerlink" title="2. 找接近"></a>2. 找接近</h5><p><img data-src="15.png" alt=""></p><p><strong>分子分母都一倍多点，就直除</strong></p><p><img data-src="16.png" alt=""></p><h5 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h5><p><img data-src="17.png" alt=""></p><h3 id="特殊公式口诀"><a href="#特殊公式口诀" class="headerlink" title="特殊公式口诀"></a>特殊公式口诀</h3><h4 id="化除为乘"><a href="#化除为乘" class="headerlink" title="化除为乘"></a>化除为乘</h4><p>⚠️ ：  <strong>5%</strong></p><p><img data-src="18.png" alt=""></p><p><img data-src="19.png" alt=""></p><h4 id="🚩笑脸公式【隔年增长率】"><a href="#🚩笑脸公式【隔年增长率】" class="headerlink" title="🚩笑脸公式【隔年增长率】"></a>🚩笑脸公式【隔年增长率】</h4><p>三个时间 + 两个增长率， 求隔年增长率</p><p><img data-src="20.png" alt=""></p><p><img data-src="21.png" alt=""></p><p>🚩⚠️事项</p><ol><li>乘积部分省略：【 |X%| |Y%| 均小于 10%】</li><li>增长率正负均可以使用</li><li>时间间隔–&gt;隔月也行，三个时间点两个增长率</li></ol><blockquote><p>正负问题，遇到补充</p></blockquote><p><img data-src="22.png" alt=""></p><p><img data-src="23.png" alt=""></p><h4 id="🚩合成增长率【两部分合成整体】"><a href="#🚩合成增长率【两部分合成整体】" class="headerlink" title="🚩合成增长率【两部分合成整体】"></a>🚩合成增长率【两部分合成整体】</h4><p><strong>整体增长率一定在于两者之间。且偏向于基数【现期量】较大的一方</strong></p><p>如果问 1-3 月的增长率，估算，两者之间。</p><p><img data-src="24.png" alt=""></p><h2 id="第三节-🔴技巧"><a href="#第三节-🔴技巧" class="headerlink" title="第三节 🔴技巧"></a>第三节 🔴技巧</h2><h3 id="高频易错"><a href="#高频易错" class="headerlink" title="高频易错"></a>高频易错</h3><div class="tabs" id="高频易错一"><ul class="nav-tabs"><li class="tab active"><a href="#高频易错一-1">增长率相关</a></li></ul><div class="tab-content"><div class="tab-pane active" id="高频易错一-1"><details ><summary> <p>笑脸公式</p> </summary>              <div class='content'>              <div class="note danger"><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652669711&idx=1&sn=6d1627ad99367d93ba2b6691285223a7&scene=0#wechat_redirect&rd2werd=1#wechat_redirect" target="_blank" rel="noopener">高频易错题精选001–公考齐麟</a></p><p><strong>莫名其妙（时间点很奇怪）的增长率</strong>，可以把<em>已知条件中的时间点</em>和<em>问题中的时间点</em>从前到后写<strong>成一行</strong>，再将已知的数据列出来，分析问题。</p><div class="note success"><p>笑脸公式：<strong>x%+y%+x%×y%</strong></p><p>注意：</p><p>①x%×y%一般选择将其中一个<strong>增长率化为1/N</strong>，避免出错；</p><p>②<em>x%、y%均小于10%时，乘积直接忽略；</em></p><p>③x%、y%的取值正负均可，<em>增长率为负数时，直接将负数套入公式即可</em>。</p></div></div>              </div>            </details></div></div></div><div class="tabs" id="高频易错二"><ul class="nav-tabs"><li class="tab active"><a href="#高频易错二-1">计算</a></li><li class="tab"><a href="#高频易错二-2">特殊词汇</a></li><li class="tab"><a href="#高频易错二-3">比大小</a></li></ul><div class="tab-content"><div class="tab-pane active" id="高频易错二-1"><div class="note warning"><p><strong>难受的是，列出来公式，不知道从何算起</strong></p><div class="note warning">受访市民中，“不了解”邻居的有（ ）。 A．275 人 B．365 人 C．412 人 D．418 人<p>134735×9.1%-134091×8.9%</p><p>A.124 B.249  C.327  D.467</p><p>【例】2514.2×47.9%-2315.1×45.8%是否大于100</p><p>8291.1×671.1≈<br>A．375万<br>B．556万<br>C．481万<br>D．590万</p><div class="note success"><p>遇到精确计算问题，方法有一下几个：</p><ol><li>往特殊百分号靠近，不足的补充；<strong>用多位数x分数 + 多位数x百分数</strong><ol><li>借位，多位数x百分数，2315 * 3.2% =&gt; 23 * 3.2</li></ol></li><li>提取公因数，一般拆分百分数<ol><li>≥四位数 * 百分数，差0.1；就会误差很大；</li><li>提取公因数，大的百分数 * 小的整数 + 大的整数 * 小的百分数，误差都不会很大。</li><li>速算，心算继续。</li></ol></li><li>整数*整数<ol><li>可以化为特殊分数，</li><li>只是移动小数点</li></ol></li></ol></div></div></div></div><div class="tab-pane" id="高频易错二-2"><details ><summary> <p>特殊词</p> </summary>              <div class='content'>              <div class="note warning"><p><strong>XX率</strong></p><ol><li>除增长率外，都朝<strong>比重</strong>方向思考，转换为A/B=r</li><li>找注解，注释就可能<strong>是公式</strong></li><li>关键字查找经验，找关键字，在关键字附近找数据，</li><li>步骤<ol><li>先明白考试的是啥，列出来公式。确定是基期、现期</li><li>找关键字，定位数据；</li><li>百化分，截位，一直关注选项，能确定就别算。</li><li>形成习惯！！</li></ol></li></ol><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652669711&idx=1&sn=6d1627ad99367d93ba2b6691285223a7&scene=0#wechat_redirect&rd2werd=1#wechat_redirect" target="_blank" rel="noopener">高频易错题精选002–公考齐麟</a></p><hr></div>              </div>            </details></div><div class="tab-pane" id="高频易错二-3"><div class="note success">【例 2】2012 年末，中国大陆总人口 135404 万人，全年出生人口 1635 万人，死亡人口 966 万人。从性别结构看，男性人口 69395 万人，同比增加 327 万人，女性人口 66009 万人， 同比增加 342 万人；从城乡结构看，城镇人口 71182 万人，同比增加 2103 万人；乡村人口 64222 万人，同比减少 1434 万人。 2012 年中国男性人口、女性人口、城镇人口的同比增长率按大小顺序正确的是： A．城镇人口＞女性人口＞男性人口 B．城镇人口＞男性人口＞女性人口  C．女性人口＞男性人口＞城镇人口 D．女性人口＞城镇人口＞男性人口<div class="note warning"><p>比较大小，如果能不计算精确值，就不要计算；</p><p><strong>327/69xxx ; 342/65xxx; 2103/50xxx</strong></p><p>前两者，分子视为相同，三个看分母视为相同。</p><p><strong>求基期量，前两位就行了</strong></p></div></div></div></div></div><div class="tabs" id="高频易错三--猜题"><ul class="nav-tabs"><li class="tab active"><a href="#高频易错三--猜题-1">猜题一</a></li></ul><div class="tab-content"><div class="tab-pane active" id="高频易错三--猜题-1"><details ><summary> <p>反向思考</p> </summary>              <div class='content'>              <div class="note warning"><p><strong>两期比重差</strong></p><p>《资料分析高频错题精选 004》</p><ol><li>a &gt; b ⬆️</li><li>a &lt; b ⬇️</li></ol><p><strong>类型一</strong></p><p>今年比去年，相邻年份、月份等；</p><p>判断上升下降，后，直接猜小的</p><p><strong>类型二</strong></p><p>今年🆚前年，中间隔年，需要用到笑脸公式的。</p><ol><li>第一步：快速计算识别，a 🆚 b 关系，是上升还是下降。记住那个数字。</li><li>排除那个数字的两项</li><li>排除下降/⬆️的一项</li><li>最后一个直接选择，<strong>没有时间算</strong></li><li>笑脸公式+两期比重差，太耗时了，<strong>猜猜猜猜</strong></li></ol></div>              </div>            </details></div></div></div><div class="tabs" id="高频易错三"><ul class="nav-tabs"><li class="tab active"><a href="#高频易错三-1">比重</a></li></ul><div class="tab-content"><div class="tab-pane active" id="高频易错三-1"><details ><summary> <p>比重与倍数</p> </summary>              <div class='content'>              <p><strong>整体相同时，可以用比重代替实际值计算倍数关系~</strong></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTExNTA4NA==&mid=2652668948&idx=3&sn=1ef4188daf4847b69a5452eee957360c&chksm=f12e9237c6591b2182a3f42020989248d5055b5000ef188d9f55640968c61d55228d62ab7e97&scene=21#wechat_redirect" target="_blank" rel="noopener">实例</a></p>              </div>            </details></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 公考 </category>
          
          <category> 资料分析 </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React实战系列-布局与组件【1】</title>
      <link href="2020/04/23/react_layout/"/>
      <url>2020/04/23/react_layout/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/007.jpg" width=60% /><p>民之从事，常于几成而败之。慎终如始，则无败事。— 《道德经》第64章</p><a id="more"></a><blockquote><p>原本打算做的网易音乐后台要搁浅了<br>首先我觉得这个并不适合我</p></blockquote><p>原因有以下几个方面：</p><ol><li>跳跃过大</li><li>自定义模块过多</li></ol><p>虽说跟着一遍做一遍摸索，可以完成，但我觉得太浪费时间，终究没有个流程。</p><blockquote><p>我的目标是：</p></blockquote><ol><li>掌握数据流管理方案–redux及其配套设施；</li><li>熟悉react、react-router-dom、react-router的应用场景以及注意事项；</li><li>熟练使用antd的组件；</li><li>—-完成前端应用—–</li><li>Eggjs + Mysql 提供数据服务</li><li>进一步完善前后端</li></ol><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>以上的目标打算抽时间逐步完成，这个系列博客，尽量写明白写清楚，也算是职业生涯中的值得回忆的一个成就。<br>因为是一边学习一边记录，所以采取由浅入深的开发流程。</p><blockquote><p>说明</p></blockquote><p>为了完成目标，确定的目标项目是开源的—-<a href="https://github.com/karakal-FET/react-admin" target="_blank" rel="noopener">react-admin</a>；打算在此基础上<strong>进行改写</strong>并完成一个相对完善的后端项目。</p><p>这篇文章说明的文字较多。</p><blockquote><p>原生化</p></blockquote><ol><li>尽可能的<strong>只用</strong>原生组件，目光始终在完成需求上；</li><li>尽可能用不同的方式完成同样的需求；</li><li>尽可能好的组织代码方式</li></ol><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>大致分为以下几类，还会涉及其余的相关模块等，后续会在相关位置添加链接或单独写文章整理。</p><ol><li>语言：<ol><li><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">TS</a>、</li><li><a href="http://lesscss.cn/" target="_blank" rel="noopener">Less</a></li></ol></li><li>React：<ol><li><a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noopener">React</a></li><li><a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="noopener">react-router</a></li><li><a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom" target="_blank" rel="noopener">react-router-dom</a></li></ol></li><li>状态管理：<ol><li><a href="https://www.redux.org.cn/" target="_blank" rel="noopener">Redux</a></li><li><a href="https://cn.redux.js.org/docs/react-redux/" target="_blank" rel="noopener">React-Redux</a></li><li><a href="https://redux-saga-in-chinese.js.org/" target="_blank" rel="noopener">Redux-Saga</a></li><li><a href="https://github.com/immerjs/immer" target="_blank" rel="noopener">Immer</a></li></ol></li><li>UI：<ol><li><a href="https://ant.design/docs/resources-cn" target="_blank" rel="noopener">Antd</a></li><li><a href="https://www.echartsjs.com/zh/option.html#title" target="_blank" rel="noopener">echartsjs</a></li><li><a href="https://github.com/hustcc/echarts-for-react" target="_blank" rel="noopener">echarts-for-react</a></li></ol></li></ol><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p>采用官方脚手架–<a href="https://www.html.cn/create-react-app/docs/getting-started/" target="_blank" rel="noopener">create-react-app</a>；</p><blockquote><p>为何不用<a href="https://dvajs.com/guide/" target="_blank" rel="noopener">dvajs</a>?</p></blockquote><p>综合性很强，但我认为应该<strong>先难后易</strong></p><blockquote><p>为何不用<a href="https://umijs.org/zh-CN/docs/getting-started" target="_blank" rel="noopener">umi</a>?</p></blockquote><p>综合性更强，仍旧认为应该<strong>先难后易</strong></p><p>学习node，我觉得先了解express，再写koa，最后采用egg 是个不错的选择。</p><blockquote><p>建议不要eject!</p></blockquote><p>初心是学习react全家桶，不是webpack【后期有空再学】, 至于less相关配置，可以<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">换个做法</a></p><h2 id="开动"><a href="#开动" class="headerlink" title="开动"></a>开动</h2><p>由于打算写这个系列的文章的时候，基本的UI框架已经搭建好，现在就把文件目录罗列出来，并加以说明，针对这个过程中遇到的问题，会在之后一一罗列，代码中几乎都会有注释。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README\ 2.md    <span class="comment"># 说明文件</span></span><br><span class="line">├── README.md       <span class="comment"># 说明文件</span></span><br><span class="line">├── config-overrides.js     <span class="comment"># less 相关配置</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public      <span class="comment"># 资源文件</span></span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── logo192.png</span><br><span class="line">│   ├── logo512.png</span><br><span class="line">│   ├── manifest.json</span><br><span class="line">│   └── robots.txt</span><br><span class="line">├── src         <span class="comment"># 代码区</span></span><br><span class="line">│   ├── App.less        <span class="comment"># 布局文件</span></span><br><span class="line">│   ├── App.test.tsx    <span class="comment"># 测试文件</span></span><br><span class="line">│   ├── App.tsx         <span class="comment"># 入口布局</span></span><br><span class="line">│   ├── Page.tsx        <span class="comment"># 入口文件</span></span><br><span class="line">│   ├── components          <span class="comment">#组件</span></span><br><span class="line">│   │   ├── HeaderCustom.tsx    <span class="comment"># 头部组件</span></span><br><span class="line">│   │   ├── SiderCustom.tsx     <span class="comment"># 侧边栏</span></span><br><span class="line">│   │   ├── SiderMenu.tsx       <span class="comment"># 侧边栏菜单</span></span><br><span class="line">│   │   ├── forms                   <span class="comment"># 文件夹--表单</span></span><br><span class="line">│   │   ├── index.tsx           <span class="comment"># 组件统一导出文件</span></span><br><span class="line">│   │   ├── pages               <span class="comment"># 单页面，如404</span></span><br><span class="line">│   │   └── widget              <span class="comment"># 小组件，如copyright</span></span><br><span class="line">│   ├── containers  <span class="comment"># 容器组件</span></span><br><span class="line">│   │   └── XXX     <span class="comment"># 后期会增加</span></span><br><span class="line">│   ├── images  <span class="comment"># 图片</span></span><br><span class="line">│   ├── index.css</span><br><span class="line">│   ├── index.tsx <span class="comment"># 入口配置文件</span></span><br><span class="line">│   ├── react-app-env.d.ts <span class="comment"># .d.ts文件</span></span><br><span class="line">│   ├── redux   <span class="comment"># redux 相关</span></span><br><span class="line">│   │   ├── configureStore.ts <span class="comment"># 统一配置redux</span></span><br><span class="line">│   │   └── modules <span class="comment"># redux modules 文件夹</span></span><br><span class="line">│   ├── routes  <span class="comment"># 路由配置文件夹</span></span><br><span class="line">│   │   ├── config.ts   <span class="comment"># 路由的配置文件</span></span><br><span class="line">│   │   └── index.tsx   <span class="comment"># 遍历配置文件，并初始化路由</span></span><br><span class="line">│   ├── serviceWorker.ts</span><br><span class="line">│   ├── setupTests.ts</span><br><span class="line">│   ├── style   <span class="comment"># 样式文件夹</span></span><br><span class="line">│   │   ├── antd</span><br><span class="line">│   │   ├── imgs</span><br><span class="line">│   │   └── index.less</span><br><span class="line">│   ├── test.js</span><br><span class="line">│   └── utils   <span class="comment"># 小功能</span></span><br><span class="line">│       ├── antdValidate.ts</span><br><span class="line">│       └── index.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><p>采用 <a href="https://www.html.cn/create-react-app/docs/adding-typescript/" target="_blank" rel="noopener">Create React App TS</a>.</p><h3 id="步骤一-初始化"><a href="#步骤一-初始化" class="headerlink" title="步骤一 初始化"></a>步骤一 初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --- 初始化</span></span><br><span class="line">$ npx create-react-app react-project --typescript</span><br><span class="line">$ <span class="comment"># 或者</span></span><br><span class="line">$ yarn create react-app react-project --typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- TS相关依赖</span></span><br><span class="line">$ npm install --save typescript @types/node @types/react @types/react-dom @types/jest</span><br><span class="line">$ <span class="comment"># 或者</span></span><br><span class="line">$ yarn add typescript @types/node @types/react @types/react-dom @types/jest</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 启动</span></span><br><span class="line">$ <span class="built_in">cd</span> react-project</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>以上构建好&amp;启动了项目。</p><h3 id="步骤二-下载相关依赖"><a href="#步骤二-下载相关依赖" class="headerlink" title="步骤二 下载相关依赖"></a>步骤二 下载相关依赖</h3><p>其实应该用到啥配置啥，这样更能明白，但是现在只能罗列下，建文件夹、下载、、、都太简单了.</p><blockquote><p>换个思路，把目前需要的包罗列出来，然后逐步完善代码。</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认生成的文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-project"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@ant-design/icons"</span>: <span class="string">"^4.0.6"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/jest-dom"</span>: <span class="string">"^4.2.4"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/react"</span>: <span class="string">"^9.5.0"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/user-event"</span>: <span class="string">"^7.2.1"</span>,</span><br><span class="line">    <span class="attr">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^12.12.36"</span>,</span><br><span class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^16.9.34"</span>,</span><br><span class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^16.9.6"</span>,</span><br><span class="line">    <span class="attr">"antd"</span>: <span class="string">"^4.1.4"</span>,</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-redux"</span>: <span class="string">"^7.2.0"</span>,</span><br><span class="line">    <span class="attr">"react-router-config"</span>: <span class="string">"^5.1.1"</span>,</span><br><span class="line">    <span class="attr">"react-router-dom"</span>: <span class="string">"^5.1.2"</span>,</span><br><span class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"3.4.1"</span>,</span><br><span class="line">    <span class="attr">"redux"</span>: <span class="string">"^4.0.5"</span>,</span><br><span class="line">    <span class="attr">"redux-thunk"</span>: <span class="string">"^2.3.0"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.7.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;  <span class="comment">// 下边会更改这个部分</span></span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"react-app"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: &#123;</span><br><span class="line">    <span class="attr">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前为止，配置文件内容</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-project-ts"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@ant-design/icons"</span>: <span class="string">"^4.0.6"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/jest-dom"</span>: <span class="string">"^4.2.4"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/react"</span>: <span class="string">"^9.5.0"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/user-event"</span>: <span class="string">"^7.2.1"</span>,</span><br><span class="line">    <span class="attr">"@types/echarts"</span>: <span class="string">"^4.4.6"</span>,</span><br><span class="line">    <span class="attr">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^12.12.36"</span>,</span><br><span class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^16.9.34"</span>,</span><br><span class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^16.9.6"</span>,</span><br><span class="line">    <span class="attr">"@types/react-redux"</span>: <span class="string">"^7.1.7"</span>,</span><br><span class="line">    <span class="attr">"@types/react-router-config"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"@types/react-router-dom"</span>: <span class="string">"^5.1.4"</span>,</span><br><span class="line">    <span class="attr">"@types/redux-thunk"</span>: <span class="string">"^2.1.0"</span>,        <span class="comment">// 以上都是针对ts的</span></span><br><span class="line">    <span class="attr">"antd"</span>: <span class="string">"^4.1.4"</span>,       <span class="comment">// antd</span></span><br><span class="line">    <span class="attr">"babel-plugin-import"</span>: <span class="string">"^1.13.0"</span>,   <span class="comment">// 按需加载组件代码和样式的 babel 插件， 对应的是 config-overrides.js</span></span><br><span class="line">    <span class="attr">"customize-cra"</span>: <span class="string">"^0.9.1"</span>,   <span class="comment">// 加载 less 样式； 配置config-overrides.js</span></span><br><span class="line">    <span class="attr">"echarts"</span>: <span class="string">"^4.7.0"</span>,  <span class="comment">// 百度图表</span></span><br><span class="line">    <span class="attr">"echarts-for-react"</span>: <span class="string">"^2.0.15-beta.1"</span>, <span class="comment">// 百度图表 react版本</span></span><br><span class="line">    <span class="attr">"less"</span>: <span class="string">"^3.11.1"</span>,      <span class="comment">// less</span></span><br><span class="line">    <span class="attr">"less-loader"</span>: <span class="string">"^5.0.0"</span>,    <span class="comment">// less 加载</span></span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-app-rewired"</span>: <span class="string">"^2.1.5"</span>, <span class="comment">// 对 create-react-app 的默认配置进行自定义，更改的是 package.json 中的scripts：start、build、test</span></span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-redux"</span>: <span class="string">"^7.2.0"</span>,    <span class="comment">// react &lt;-&gt; redux</span></span><br><span class="line">    <span class="attr">"react-router-config"</span>: <span class="string">"^5.1.1"</span>,    <span class="comment">// 路由配置</span></span><br><span class="line">    <span class="attr">"react-router-dom"</span>: <span class="string">"^5.1.2"</span>,</span><br><span class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"3.4.1"</span>,</span><br><span class="line">    <span class="attr">"redux"</span>: <span class="string">"^4.0.5"</span>,</span><br><span class="line">    <span class="attr">"redux-logger"</span>: <span class="string">"^3.0.6"</span>, <span class="comment">// 日志</span></span><br><span class="line">    <span class="attr">"redux-thunk"</span>: <span class="string">"^2.3.0"</span>,    <span class="comment">// 异步</span></span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.7.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"react-app"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: &#123;</span><br><span class="line">    <span class="attr">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结，这部分主要添加一些所需模块，没啥东西。</p><h4 id="⚠️注意事项"><a href="#⚠️注意事项" class="headerlink" title="⚠️注意事项"></a>⚠️注意事项</h4><blockquote><p>疑问1🤔️： 如何按需加载antd组件？</p></blockquote><ol><li>babel-plugin-import：<ol><li>目标：按需引用antd</li><li>如何做：<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">antd说明–搜：babel-plugin-import</a></li></ol></li></ol><blockquote><p>疑问2🤔️：如何加载less文件？？</p></blockquote><ol><li>react-app-rewired<ol><li>目标：自定义启动服务</li><li>如何做：<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">antd说明–搜react-app-rewired</a></li></ol></li></ol><p>针对这两个问题，由于只是配置，仔细看下<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">antd说明</a><strong>完全可以搞定。</strong></p><p>本来写了个demo，感觉太简单了，没必要。。。</p><h3 id="步骤三-自定义布局"><a href="#步骤三-自定义布局" class="headerlink" title="步骤三 自定义布局"></a>步骤三 自定义布局</h3><blockquote><p>这个部分主要采用antd的布局方式</p></blockquote><p>常规布局，<strong>sider、header、 content、footer</strong></p><p>侧边栏布局效果如下</p><p><img data-src="03.png" alt="整体布局与首页"></p><h3 id="步骤四-表单页面"><a href="#步骤四-表单页面" class="headerlink" title="步骤四 表单页面"></a>步骤四 表单页面</h3><p><img data-src="04.png" alt="表单页面"></p><p>之后单文件的注意事项会在代码首部写明，便于之后复习。<br>因为表单页面场景比较多，结合注册登录页面将常规使用、触发，模拟触发交互数据的动作，过程中主要遇到的问题</p><h4 id="⚠️注意事项-1"><a href="#⚠️注意事项-1" class="headerlink" title="⚠️注意事项"></a>⚠️注意事项</h4><ol><li><p>函数组件路由如何跳转?</p><ol><li>路由跳转的几种方式：<ol><li>路由组件<ol><li>this.props.history.push()</li></ol></li><li>非路由组件 ✍️<ol><li>useHistory: react-router-dom中的hook–useHistory(): 可以获取到history</li><li>withRouter: 添加withRouter，参数中包含props</li></ol></li></ol></li></ol></li><li><p>函数组件中form如何在antion中获取到/验证 form value?</p><ol><li>✍️ 利用Form.useForm()，可以获取到form, 进一步获取到form.validateFields()、form.getFieldValue(‘phone’)</li><li>验证方法<ol><li>点击实例代码看控制台</li><li>看代码中的注释</li></ol></li></ol></li></ol><h2 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h2><p>这篇文章跨度有点大，但是并不涉及数据流相关操作，故不懂的就看代码吧，里边有注释，其中还有些布局问题，先解决大问题，具体细节之后再修仔补。</p><blockquote><p>之后的章节都会以不同的分支作为与文章对应的代码。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>仓库： <a href="mailto:git@github.com">git@github.com</a>:simuty/react-project.git<br>分支： origin/chapter1/step2</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22React实战系列-介入数据管理【2】</title>
      <link href="2020/04/23/react_db/"/>
      <url>2020/04/23/react_db/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/007.jpg" width=60% /><p>民之从事，常于几成而败之。慎终如始，则无败事。— 《道德经》第64章</p><a id="more"></a><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>redux</li><li>redux-saga</li><li>immer</li><li>normalizr</li></ol><p>第一节结合antd搭建了页面框架、常见的表单、列表等，侧重点在于UI层面，完整的项目离不开<strong>UI与数据流</strong>，这节开始介入数据管理，之后根据具体的需求，综合开发；</p><p>这个部分内容量有点大，尽可能明朗一些。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
            <tag> Redux-Saga </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express Koa Redux 中间件对比</title>
      <link href="2020/04/16/Express_Koa_Redux_Middleware/"/>
      <url>2020/04/16/Express_Koa_Redux_Middleware/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/006.jpg" width=80% /><a id="more"></a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = compose</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 每个中间件都是一个 generator or async , 接收 【context 和 next】 两个参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="comment">// 取出第 index 个中间件并执行</span></span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="comment">// 如果所有中间件都执行完跳出，并返回一个 Promise</span></span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 每个中间件都是一个 generator or async , 接收 context 和 next 两个参数</span></span><br><span class="line">        <span class="comment">// 每个中间件调用都会在 next 调用处卡住知道递归执行下一个 dispatch ，取出下一个中间件</span></span><br><span class="line">        <span class="comment">// 这样只有后面的中间件的 dispatch resolve掉，前面的中间件才会继续执行，最外层的 dispatch(0) 才会 resolve 掉</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看源码可以得出：</p><ol><li><p>dispatch方法是递归调用；</p></li><li><p>最重要的一行</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br></pre></td></tr></table></figure><p>一步步解读</p><ol><li><strong>fn</strong> ： 是指中间件，即函数，包含（context 和 next）两个参数；</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中间件实例</span></span><br><span class="line"><span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B--'</span>)</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--B'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>context</strong> ： 不作处理，直接采用外部传进来的；</p></li><li><p><strong>dispatch.bind(null, i + 1)</strong>：下一个中间件；</p></li></ol><p>因为dispatch是<code>递归调用</code>，进入下次调用，获取到中间件。</p><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa 实例</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A_M = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'A--'</span>)</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--A'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B_M = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B--'</span>)</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--B'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> C_M = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'C--'</span>)</span><br><span class="line">  ctx.body = <span class="string">'hello'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--C'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(A_M);</span><br><span class="line">app.use(B_M);</span><br><span class="line">app.use(C_M);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请打开: http://127.0.0.1:5000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>dispatch(0)，Promise.resolve(fn(context, dispatch.bind(null, 0 + 1)))执行，第一个中间件内容将一直运行到 <code>await next()</code></li><li>执行<code>await next()</code>， next() = dispatch.bind(null, 0 + 1)，这是第二个中间件</li><li>第二个中间件将一直运行到 await next()</li><li>next()= dispatch.bind(null, 1 + 1)，这是第三个中间件</li><li>第三中间件将一直运行到 await next()</li><li>next()= dispatch.bind(null, 2 + 1)，没有第四种中间件，它将立即返回if (!fn) return Promise.resolve()，</li><li>await next()在第三个中间件中解析后，执行第三种中间件中的剩余代码。</li><li>await next()在第二中间件resolve了，剩余的则执行第二中间件的代码。</li><li>await next()在第一中间件resolve了，剩下的是执行在第一中间件代码。</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这也就让我们看到了next函数到底是什么，是dispatch.bind(null, i + 1)。也正是通过dispatch将控制权移交给了下一个中间件。在use中await next()正式将控制权移交给下一个中间件，第一个 &#x3D;&gt; 第二个 &#x3D;&gt; ... &#x3D;&gt; 最后一个，当最后一个中间件执行完毕时，此时，开始执行栈将当前栈顶执行环境出栈，最后一个 &#x3D;&gt; 倒数第二个 &#x3D;&gt; ... &#x3D;&gt;第一个。也就形成了洋葱模型。</span><br><span class="line"></span><br><span class="line">作者：菩提谛听</span><br><span class="line">链接：</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>next方法相当于dispatch.bind(null, i+1),如果中间件不调用next()方法的话，程序执行流将会中断，说的直白一点就是下面一个中间件只有声明的机会却没有执行的机会</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> koa入口文件，<span class="string">`new Koa`</span> -&gt; <span class="string">`use(中间件)`</span>-&gt; <span class="string">`listen()`</span></span><br><span class="line"><span class="number">2.</span> listen回调函数中会触发**compose**</span><br><span class="line">   <span class="number">1.</span> 生成[A_M, B_M, C_M]数组；</span><br><span class="line"><span class="number">3.</span> 调用递归函数, 以下步骤主要涉及：**洋葱模型**</span><br><span class="line">   <span class="number">1.</span> 调用dispatch(<span class="number">0</span>), 获取到：<span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, <span class="number">0</span> + <span class="number">1</span>))); 即获取中间件 A_M;</span><br><span class="line">   <span class="number">2.</span> 输出中间件中的：A--</span><br><span class="line">   <span class="number">3.</span> 触发中间件中的： <span class="keyword">await</span> next(), 因为<span class="string">`next() = dispatch.bind(null, 0 + i)`</span></span><br><span class="line">   <span class="number">4.</span> 回调<span class="number">3.1</span> dispatch(<span class="number">1</span>), 得到中间件 B_M;</span><br><span class="line">   <span class="number">5.</span> 执行<span class="number">3.2</span> <span class="number">3.3</span>;</span><br><span class="line">   <span class="number">6.</span></span><br></pre></td></tr></table></figure><p>参考链接<br><a href="https://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener">JavaScript 的 this 原理</a><br><a href="https://segmentfault.com/a/1190000016843275" target="_blank" rel="noopener">傻瓜式解读koa中间件处理模块koa-compose</a><br><a href="https://juejin.im/post/5e19beca5188252c6c477b94" target="_blank" rel="noopener">koa-compose源码解读</a><br><a href="http://perkinzone.cn/2017/08/15/Redux,Koa,Express%E4%B9%8Bmiddleware%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94/#2-koa%E7%9A%84middleware%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">Redux,Koa,Express之middleware机制对比</a><br><a href="https://www.jianshu.com/p/70fb2405b281" target="_blank" rel="noopener">Express, Koa, Redux中间件的区别,写法和执行流程</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
            <tag> Express </tag>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React实战系列-网易音乐&lt;1&gt;</title>
      <link href="2020/04/15/music_one/"/>
      <url>2020/04/15/music_one/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/006.jpg" width=80% /><a id="more"></a><blockquote><p>声明<br>本系列参考<a href="https://juejin.im/book/5da96626e51d4524ba0fd237" target="_blank" rel="noopener">React Hooks 与 Immutable 数据流实战</a>完成，每一章节都将整合：遇到的问题、个人思考、知识点汇总等。<br>在原有代码之上进行了修改。</p></blockquote><p>目标</p><ol><li><p>本系列目标</p><ol><li><p>熟悉前端开发流程</p></li><li><p>熟练掌握一种框架目录结构，熟练使用 React+Router+Redux 相关插件</p></li><li><p>掌握Redux数据流及其相关，如immer</p></li><li><p><strong>不打算掌握布局相关</strong>，因为实例不允许。。。</p></li></ol></li><li><p>本文目标</p><ol><li><p>构建项目、目录结构划分</p></li><li><p>router-config配置、react-thunk基本使用</p></li><li><p>、PureComponent+memo+Component相关</p></li><li><p>接入redux、immer使用</p></li></ol></li></ol><h1 id="第一部分-初始化"><a href="#第一部分-初始化" class="headerlink" title="第一部分 初始化"></a>第一部分 初始化</h1><p>代码会放在<a href="">github</a>上，以不同的分支来区分。</p><blockquote><p>该部分不属于重点</p></blockquote><h2 id="构建项目以及目录结构"><a href="#构建项目以及目录结构" class="headerlink" title="构建项目以及目录结构"></a>构建项目以及目录结构</h2><p>采用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a>进行构建。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>整理目录结构如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├─api                   <span class="comment">// 网路请求代码、工具类函数和相关配置</span></span><br><span class="line">├─application           <span class="comment">// 项目核心功能</span></span><br><span class="line">│   └── Singers         <span class="comment">// 其中一个实例</span></span><br><span class="line">│       ├── index.js    <span class="comment">// 该路由入口文件</span></span><br><span class="line">│       ├── store       <span class="comment">// 存储相关</span></span><br><span class="line">│       │   ├── actionCreators.js   <span class="comment">// action 获取数据相关</span></span><br><span class="line">│       │   ├── constants.js    <span class="comment">// 常量</span></span><br><span class="line">│       │   ├── index.js    <span class="comment">// 导出配置</span></span><br><span class="line">│       │   └── reducer.js  <span class="comment">// reduer 接受action请求，整合数据，触发更新UI</span></span><br><span class="line">│       └── style.js</span><br><span class="line">├─assets                <span class="comment">// 字体配置及全局样式</span></span><br><span class="line">├─baseUI                <span class="comment">// 基础 UI 轮子</span></span><br><span class="line">├─components            <span class="comment">// 可复用的 UI 组件</span></span><br><span class="line">├─routes                <span class="comment">// 路由配置文件</span></span><br><span class="line">└─store                 <span class="comment">// redux 相关文件</span></span><br><span class="line">  App.js                <span class="comment">// 根组件</span></span><br><span class="line">  index.js              <span class="comment">// 入口文件</span></span><br><span class="line">  serviceWorker.js      <span class="comment">// PWA 离线应用配置</span></span><br><span class="line">  style.js              <span class="comment">// 默认样式</span></span><br></pre></td></tr></table></figure><p>该部分主要是采用了独立文件夹的方式存放文件、目录作用域划分等操作。属于习惯问题。</p><h2 id="第二部分-让框架跑起来"><a href="#第二部分-让框架跑起来" class="headerlink" title="第二部分 让框架跑起来"></a>第二部分 让框架跑起来</h2><p>该项目包含react+router+redux+dom等主要模块的引用，故，如何安排相应的模块以及配置是个问题。</p><h3 id="router-config"><a href="#router-config" class="headerlink" title="router-config"></a>router-config</h3><p>首先配置路由，在浏览器中可以见到不同的URL对应不同的页面，在此主要贴代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="comment">// 第一步，引用配置</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderRoutes &#125; <span class="keyword">from</span> <span class="string">'react-router-config'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;HashRouter&gt;</span><br><span class="line">                &#123;renderRoutes(routes)&#125;</span><br><span class="line">            &lt;<span class="regexp">/HashRouter&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Provider&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="react-router-config究竟做了什么？"><a href="#react-router-config究竟做了什么？" class="headerlink" title="react-router-config究竟做了什么？"></a>react-router-config究竟做了什么？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// !源码</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderRoutes</span>(<span class="params">routes, extraProps = &#123;&#125;, switchProps = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> routes ? (</span><br><span class="line">    &lt;Switch &#123;...switchProps&#125;&gt;</span><br><span class="line"><span class="comment">// !主要是这句！</span></span><br><span class="line">      &#123;routes.map(<span class="function">(<span class="params">route, i</span>) =&gt;</span> (</span><br><span class="line">        &lt;Route</span><br><span class="line">          key=&#123;route.key || i&#125;</span><br><span class="line">          path=&#123;route.path&#125;</span><br><span class="line">          exact=&#123;route.exact&#125;</span><br><span class="line">          strict=&#123;route.strict&#125;</span><br><span class="line">          render=&#123;props =&gt;</span><br><span class="line">            route.render ? (</span><br><span class="line">              route.render(&#123; ...props, ...extraProps, <span class="attr">route</span>: route &#125;)</span><br><span class="line">            ) : (</span><br><span class="line">              &lt;route.component &#123;...props&#125; &#123;...extraProps&#125; route=&#123;route&#125; /&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  ) : null;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default renderRoutes;</span></span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="comment">// renderRoutes 这个方法只渲染一层路由, 需要在【父】【component】中加 &#123;renderRoutes(routes)&#125;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">exact</span>: <span class="literal">true</span>, <span class="attr">render</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">page1</span>'&#125; /&gt;</span></span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/page1'</span>, <span class="attr">component</span>: Page1 &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/page2'</span>,</span><br><span class="line">        component: Page2,</span><br><span class="line">        routes: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'/page2/child'</span>,</span><br><span class="line">                component: Child,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;HashRouter&gt;</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &#123;renderRoutes(routes)&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/HashRouter&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>renderRoutes只渲染一层，故包含子路由的需要，需要在【父】【component】中加 {renderRoutes(routes)}</p></li><li><p>哈希路由 <code>#</code>, 是否重新获取资源？</p></li></ol><h3 id="Component-VS-PureComponent-VS-memo"><a href="#Component-VS-PureComponent-VS-memo" class="headerlink" title="Component VS  PureComponent VS memo"></a>Component VS  PureComponent VS memo</h3><blockquote><p>整个部分涉及React优化性能内容</p></blockquote><p>React核心开发团队一直都努力地让React变得更快。在React中可以用来优化组件性能的方法大概有以下几种:</p><ol><li>组件懒加载(React.lazy(…)和 <Suspense />)</li><li>PureComponent</li><li>shouldComponentUpdate(…){…} 生命周期函数</li><li>React.memo()</li></ol><h4 id="Component-VS-PureComponent"><a href="#Component-VS-PureComponent" class="headerlink" title="Component VS  PureComponent"></a>Component VS  PureComponent</h4><ol><li>默认Component遇到state Props 变化时，父子组件都更新。</li><li>Component通过shouldComponentUpdate生命周期函数进行判断是否更新组件；</li><li>PureComponent组件<strong>没有</strong>shouldComponentUpdate生命周期函数，组件内部自动判断时候需要更新。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._compositeType === CompositeTypes.PureClass) &#123;</span><br><span class="line">  shouldUpdate = !shallowEqual(prevProps, nextProps) || ! shallowEqual(inst.state, nextState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React源码中很容易看到：shadowEqual只会”浅”检查组件的props和state，这就意味着嵌套对象和数组是不会被比较的。</p><p>PureComponent适合用于5展示的组件。</p><h4 id="PureComponent-VS-memo"><a href="#PureComponent-VS-memo" class="headerlink" title="PureComponent VS memo"></a>PureComponent VS memo</h4><p>函数组件没有state、shouldComponentUpdate，故无法采用 <strong>生命周期｜｜自动浅比较</strong>的方式。</p><blockquote><p>React v16.6 引入 React.memo()</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// !需求》：现在有一个显示时间的组件,每一秒都会重新渲染一次</span></span><br><span class="line"><span class="comment">// ?对于Child组件我们肯定不希望也跟着渲染，所有需要用到PureComponent || React.momo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent</span></span><br><span class="line"><span class="keyword">import</span> React  <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            date : <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                date:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child seconds=&#123;<span class="number">1</span>&#125;/&gt;</span><br><span class="line">                &lt;div&gt;&#123;<span class="keyword">this</span>.state.date.toString()&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Child</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123;seconds&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am rendering'</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;I am update every &#123;seconds&#125; seconds&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;*&#125; prevProps 组件将会接收的下一个参数props</span><br><span class="line"> * @param &#123;*&#125; nextProps 组件的下一个状态state </span><br><span class="line"> * @returns</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function areEqual(prevProps, nextProps) &#123;</span></span><br><span class="line"><span class="regexp">    if (prevProps.seconds === nextProps.seconds) &#123;</span></span><br><span class="line"><span class="regexp">        return true;</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第一个参数为纯函数的组件，</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第二个参数用于对比props控制是否刷新，</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/      与shouldComponentUpdate()功能类似。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default React.memo(Child, areEqual);</span></span><br><span class="line"><span class="regexp">/</span>* -------- React.memo ----------- *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>PureComponent  🆚 VS  🆚 memo</p><ul><li>React.PureComponent是银</li><li>React.memo(…)是金</li><li>React.PureComponent是给ES6的类组件使用的</li><li>React.memo(…)是给函数组件使用的</li><li>React.PureComponent减少ES6的类组件的无用渲染</li><li>React.memo(…)减少函数组件的无用渲染</li></ul><h4 id="redux-devtools-extension-调试工具"><a href="#redux-devtools-extension-调试工具" class="headerlink" title="redux-devtools-extension 调试工具"></a>redux-devtools-extension 调试工具</h4><p><a href="http://extension.remotedev.io/" target="_blank" rel="noopener">redux-devtools-extension 官网</a></p><p><img data-src="09.png" alt="redux-devtools-extension"></p><p><img data-src="10.png" alt="使用说明"><br>图片来源：<a href="https://blog.csdn.net/achenyuan/article/details/80884895" target="_blank" rel="noopener">https://blog.csdn.net/achenyuan/article/details/80884895</a></p><h2 id="第三部分-数据链路"><a href="#第三部分-数据链路" class="headerlink" title="第三部分 数据链路"></a>第三部分 数据链路</h2><p>redux在之前的文章中已经有过学习，包含了主要的步骤以及概念。可以参考前几天的<a href="https://simuty.com/2020/04/10React%E7%B3%BB%E5%88%97-Redux/">—-React系列-Redux&lt;2&gt;</a>。</p><p>可以参考下册两个图，加以回忆。</p><p><img data-src="04.gif" alt="流程"></p><p><img data-src="03.png" alt="代码主要步骤"></p><p>按照之前的理解就可以直接上手，初始化<br>action -&gt; dispatch -&gt; reducer =&gt; new state =&gt; update UI.</p><p>其中有个问题，如何 <strong>高效</strong> 的处理state事关 <strong>性能优劣</strong>。前一节，对<a href="https://simuty.com/2020/04/13React%E7%B3%BB%E5%88%97-immutable%E4%B8%8A%E4%B8%8B%E6%96%87/"></a></p><h3 id="react-amp-redux-amp-react-redux"><a href="#react-amp-redux-amp-react-redux" class="headerlink" title="react &amp; redux &amp; react-redux"></a>react &amp; redux &amp; react-redux</h3><p>三者之间的关系可以看下册官方说明</p><ol><li>React：负责组件的UI界面渲染；</li><li>Redux：数据处理中心； <a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="noopener">redux 官网</a></li><li>React-Redux：连接组件和数据中心，也就是把React和Redux联系起来。 <a href="https://react-redux.js.org/" target="_blank" rel="noopener">react-redux 官网</a></li></ol><p><img data-src="05.jpg" alt="回顾下react生命周期"></p><p><img data-src="06.jpg" alt="redex核心"></p><p><strong>React-Redux</strong></p><p>Redux 本身和React没有关系，只是数据处理中心，是React-Redux让他们联系在一起。</p><p>React-Redux提供两个方法：</p><ol><li><p>connect: connect连接React组件和Redux store。connect实际上是一个<strong>高阶函数</strong>，返回一个新的已与Redux store连接的<strong>容器组件</strong>。</p></li><li><p>Provider: 实现store的全局可访问，将store传给每个组件。<strong>原理</strong>：使用React的context，context可以实现跨组件之间的传递。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><p>复制代码TodoList是 <strong>UI 组件</strong>，VisibleTodoList就是由 react-redux 通过connect方法自动生成的<strong>容器组件</strong>。</p><ol><li>mapStateToProps：从Redux状态树中提取需要的部分作为props传递给当前的组件。</li><li>mapDispatchToProps：将需要绑定的响应事件（action）作为props传递到组件上。</li></ol><p><img data-src="07.jpg" alt="connent"></p><h4 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h4><p><img data-src="08.jpg" alt="关系"></p><h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><p><a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a><br>With a plain basic Redux store, you can only do simple synchronous updates by dispatching an action. Middleware extend the store’s abilities, and let you write async logic that interacts with the store.</p><p>Thunks are the recommended middleware for basic Redux side effects logic, including complex synchronous logic that needs access to the store, and simple async logic like AJAX requests.</p><p>学习 <a href="https://zhuanlan.zhihu.com/p/85403048" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85403048</a></p><h2 id="第四部分-注意事项⚠️"><a href="#第四部分-注意事项⚠️" class="headerlink" title="第四部分 注意事项⚠️"></a>第四部分 注意事项⚠️</h2><p>函数组件<code>mapStateToProps</code>拿到的数据是整个state<br>普通组件<code>mapStateToProps</code>拿到的数据是createRouter()中的reducer导出的默认值。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
            <tag> Immer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021/01/秒杀汇总</title>
      <link href="2020/04/14/null/"/>
      <url>2020/04/14/null/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/022.jpg" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><p>时间问题</p><ol><li>前后端显示的时间不一致问题</li><li></li></ol><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/92341906" target="_blank" rel="noopener">经验：一个秒杀系统的设计思考</a><br><a href="https://github.com/wengjq/Blog/issues/26" target="_blank" rel="noopener"> 如何让秒杀、活动倒计时更“精确”? </a><br><a href="https://segmentfault.com/a/1190000020913187?utm_source=sf-related" target="_blank" rel="noopener">活动倒计时实现方案、setInterview和setTimeout的对比</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React系列-immutable上下文&lt;4&gt;</title>
      <link href="2020/04/13/immutable/"/>
      <url>2020/04/13/immutable/</url>
      
        <content type="html"><![CDATA[<img data-src="01.jpg" width=80% /><p>真正的无知不是知识的贫乏, 而是拒绝获取知识!<br>——波普尔 (哲学家 思想家)</p><a id="more"></a><blockquote><p>优化之减少渲染</p></blockquote><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>diff算法</li><li>优化方式</li><li>Immutable以及替代品【重点】</li></ul><p>文章流程</p><blockquote><p>React -&gt; 遇到问题 -&gt; 优化 -&gt; 优化方式 -&gt; 原理以及选择</p></blockquote><h2 id="第一部分-diff算法以及问题"><a href="#第一部分-diff算法以及问题" class="headerlink" title="第一部分 diff算法以及问题"></a>第一部分 diff算法以及问题</h2><p>React 采用的是虚拟 DOM (即 VDOM )，每次属性 (props) 和状态 (state) 发生<strong>变化</strong>的时候，render 函数返回不同的元素树，React 会检测当前返回的元素树和上次渲染的元素树之前的差异，然后针对差异的地方进行更新操作，最后渲染为真实 DOM，这就是整个 Reconciliation 过程，其<strong>核心就是进行新旧 DOM 树对比的 diff 算法。</strong></p><p><img data-src="03.jpg" alt="03"></p><blockquote><p>为了获得更优秀的性能，首当其冲的工作便是 <strong>减少 diff</strong> 的过程，那么在保证应该更新的节点能够得到更新的前提下，这个 diff 的过程如何来避免呢？</p></blockquote><p>答案是利用 shouldComponentUpdate 这个生命周期函数。这个函数做了什么事情呢？</p><p><img data-src="02.jpg" alt="Diff 原理全解析"></p><h2 id="第二部分-解决方案"><a href="#第二部分-解决方案" class="headerlink" title="第二部分 解决方案"></a>第二部分 解决方案</h2><p>由第一部分中的流程图以及生命周期函数shouldComponentUpdate可知，如果想要<strong>该渲染的时候才渲染</strong>，就只能在此做操作。</p><blockquote><p>重点就在于：属性 (props) 和状态 (state) 什么时候发生变化。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> PureComponent (memo) 进行浅层比较</span><br><span class="line"><span class="number">2.</span> shouldComponentUpdate 中进行深层比对</span><br><span class="line"><span class="number">3.</span> immutable 数据结构 + SCU (memo) 浅层比对</span><br></pre></td></tr></table></figure><h3 id="深浅比较"><a href="#深浅比较" class="headerlink" title="深浅比较"></a>深浅比较</h3><p>PureComponent (memo) 进行<strong>浅层比较</strong>。源码中有段代码中，一旦<strong>属性的值为引用类型</strong>的时候浅比较就失灵了。这种方式仅仅适用于无状态组件或者状态数据非常简单的组件，对于大量的应用型组件，它是无能为力的。</p><p>那么，如果在shouldComponentUpdate进行<strong>深层比较</strong>，即全比较，如果数据量大，则性能损耗严重。</p><blockquote><p>怎么解决这个问题?</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowEqual</span> (<span class="params">objA: mixed, objB: mixed</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 下面的 is 相当于 === 的功能，只是对 + 0 和 - 0，以及 NaN 和 NaN 的情况进行了特殊处理</span></span><br><span class="line">  <span class="comment">// 第一关：基础数据类型直接比较出结果</span></span><br><span class="line">  <span class="keyword">if</span> (is (objA, objB)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第二关：只要有一个不是对象数据类型就返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> objA !== <span class="string">'object'</span> ||</span><br><span class="line">    objA === <span class="literal">null</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> objB !== <span class="string">'object'</span> ||</span><br><span class="line">    objB === <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三关：在这里已经可以保证两个都是对象数据类型，比较两者的属性数量</span></span><br><span class="line">  <span class="keyword">const</span> keysA = <span class="built_in">Object</span>.keys (objA);</span><br><span class="line">  <span class="keyword">const</span> keysB = <span class="built_in">Object</span>.keys (objB);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (keysA.length !== keysB.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第四关：比较两者的属性是否相等，值是否相等</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keysA.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !hasOwnProperty.call (objB, keysA [i]) ||</span><br><span class="line">      !is (objA [keysA [i]], objB [keysA [i]])</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态对比"><a href="#状态对比" class="headerlink" title="状态对比"></a>状态对比</h3><p>关于如何做对比以及采用何种方式，在第三部分由始说起</p><h2 id="第三部分-Immutable-Data-相关"><a href="#第三部分-Immutable-Data-相关" class="headerlink" title="第三部分 Immutable Data 相关"></a>第三部分 Immutable Data 相关</h2><p>鉴于上述问题，针对数据罗列主要的几种类型的数据结构，如下：</p><ul><li>不可变（Immutable）数据<ul><li>新数据结构<ul><li><a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noopener">facebook/immutable-js</a></li></ul></li></ul></li><li>不可变更新（Immutable Update）实用程序<ul><li><a href="https://github.com/mweststrate/immer" target="_blank" rel="noopener">mweststrate/immer</a></li></ul></li><li>Immutable/Redux 互操作<ul><li><a href="https://github.com/gajus/redux-immutable" target="_blank" rel="noopener">gajus/redux-immutable</a></li></ul></li></ul><h3 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable-js"></a>immutable-js</h3><p><strong>参考来源</strong> <a href="https://github.com/camsong/blog/issues/3" target="_blank" rel="noopener">Immutable 详解及 React 中实践</a></p><blockquote><p>Shared mutable state is the root of all evil（共享的可变状态是万恶之源）<br>– Pete Hunt</p></blockquote><p><img data-src="04.png" alt="04"></p><p>JavaScript 中的对象一般是<strong>可变的（Mutable）</strong>，因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 foo={a: 1}; bar=foo; bar.a=2 你会发现此时 foo.a 也被改成了 2。</p><p>虽然这样做可以<strong>节约内存</strong>，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。</p><p>为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。</p><blockquote><p>Immutable 可以很好地解决这些问题。</p></blockquote><h4 id="Immutable-Data"><a href="#Immutable-Data" class="headerlink" title="Immutable Data"></a>Immutable Data</h4><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个<strong>新的 Immutable 对象</strong>。</p><p>Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），也就是使用旧数据创建新数据时，要<strong>保证旧数据同时可用且不变。</strong></p><p>同时为了<strong>避免 deepCopy</strong> 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。请看下面动画：</p><p><a href="05.gif">05</a></p><p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 <strong>Persistent Data Structure</strong>，还有很多易用的数据类型。像 Collection、List、Map、Set、Record、Seq。有非常全面的<code>map、filter、groupBy、reduce、find</code>函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。</p><p>其中有 3 种最重要的数据结构说明一下：（Java 程序员应该最熟悉了）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>：键值对集合，对应于 <span class="built_in">Object</span>，ES6 也有专门的 <span class="built_in">Map</span> 对象</span><br><span class="line">List：有序可重复的列表，对应于 <span class="built_in">Array</span></span><br><span class="line"><span class="built_in">Set</span>：无序且不可重复的列表</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line">bar.a.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo.a.b);  <span class="comment">// 打印 2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 immutable.js 后</span></span><br><span class="line"><span class="keyword">import</span> Immutable <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line">foo = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;);</span><br><span class="line">bar = foo.setIn([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="number">2</span>);   <span class="comment">// 使用 setIn 赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getIn([<span class="string">'a'</span>, <span class="string">'b'</span>]));  <span class="comment">// 使用 getIn 取值，打印 1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 false</span></span><br></pre></td></tr></table></figure><p><strong>Immutable.is</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> map2 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">// 比较内存地址</span></span><br><span class="line">map1 === map2;             <span class="comment">// false</span></span><br><span class="line"><span class="comment">// Immutable.is 比较的是两个对象的 hashCode 或 valueOf（对于 JavaScript 对象）</span></span><br><span class="line">Immutable.is(map1, map2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ol><li>Immutable 降低了 Mutable 带来的复杂度</li><li>节省内存</li><li>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</li><li>并发安全</li></ol><hr><ol><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line">shouldComponentUpdate: <span class="function">(<span class="params">nextProps = &#123;&#125;, nextState = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;, thisState = <span class="keyword">this</span>.state || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</span><br><span class="line">      <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!is(thisProps[key], nextProps[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thisState[key] !== nextState[key] &amp;&amp; !is(thisState[key], nextState[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图</p><p><img data-src="06.png" alt=""></p><h3 id="immerjs"><a href="#immerjs" class="headerlink" title="immerjs"></a>immerjs</h3><p><a href="https://immerjs.github.io/immer/docs/introduction" target="_blank" rel="noopener">immer官网</a></p><p><a href="https://juejin.im/post/5aaf6d596fb9a028d207be00" target="_blank" rel="noopener">以下摘录–精读《Immer.js》源码</a></p><p>Immer 想解决的问题，是利用元编程简化 Immutable 使用的复杂度。<br>immer 是使用原生数据结构的 API 而不是内置的 API.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> produce = <span class="built_in">require</span>(<span class="string">'immer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  done: <span class="literal">false</span>,</span><br><span class="line">  val: <span class="string">'string'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newState = produce(state, (draft) =&gt; &#123;</span><br><span class="line">  draft.done = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state.done)    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(newState.done) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">produce(obj, draft =&gt; &#123;</span><br><span class="line">  draft.count++</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>整体思路：draft 是 obj 的<strong>代理</strong>，对 draft mutable 的修改都会流入到<strong>自定义 setter 函数</strong>，它并不修改原始对象的值，而是递归父级不断<strong>浅拷贝</strong>，最终返回新的<strong>顶层对象</strong>，作为 produce 函数的<strong>返回</strong>值。</p><h4 id="构建代理"><a href="#构建代理" class="headerlink" title="构建代理"></a>构建代理</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  modified, <span class="comment">// 是否被修改过</span></span><br><span class="line">  finalized, <span class="comment">// 是否已经完成（所有 setter 执行完，并且已经生成了 copy）</span></span><br><span class="line">  parent, <span class="comment">// 父级对象</span></span><br><span class="line">  base, <span class="comment">// 原始对象（也就是 obj）</span></span><br><span class="line">  copy, <span class="comment">// base（也就是 obj）的浅拷贝，使用 Object.assign(Object.create(null), obj) 实现</span></span><br><span class="line">  proxies, <span class="comment">// 存储每个 propertyKey 的代理对象，采用懒初始化策略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个代理对象上，绑定了自定义的 getter setter，然后直接将其扔给 <strong>produce 执行</strong>。</p><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><p>produce 回调函数中包含了<code>用户的 mutable 代码</code>。所以现在入口变成了 getter 与 setter。</p><p>getter 主要用来懒初始化代理对象，也就是<strong>当代理对象子属性被访问</strong>的时候，才会生成其代理对象。</p><ol><li>不浪费资源；</li><li>子对象可以被访问到。</li></ol><h4 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h4><p>当对 draft 修改时，会对 base 也就是原始值进行<strong>浅拷贝</strong>，保存到 copy 属性，同时将 modified 属性设置为 true。这样就完成了最重要的 Immutable 过程，而且浅拷贝并不是很消耗性能，加上是按需浅拷贝，因此 Immer 的性能还可以。</p><p>同时为了保证整条链路的对象都是新对象，会根据 parent 属性递归父级，不断浅拷贝，直到这个叶子结点到根结点整条链路对象都换新为止。</p><p>完成了 modified 对象再有属性被修改时，会将这个新值保存在 copy 对象上。</p><h4 id="生成-Immutable-对象"><a href="#生成-Immutable-对象" class="headerlink" title="生成 Immutable 对象"></a>生成 Immutable 对象</h4><p>当<strong>执行完 produce</strong> 后，用户的所有修改已经完成（所以 Immer 没有支持异步），如果 <strong>modified</strong> 属性为 false，说明用户根本没有改这个对象，那直接返回原始 base 属性即可。</p><p>如果 modified 属性为 <strong>true</strong>，说明对象发生了修改，返回 <strong>copy 属性</strong>即可。但是 setter 过程是递归的，draft 的子对象也是 draft（包含了 base copy modified 等额外属性的代理），我们必须一层层递归，拿到真正的值。</p><p>所以在这个阶段，所有 draft 的 <strong>finalized</strong> 都是 <strong>false，copy</strong> 内部可能还存在大量 draft 属性，因此递归 base 与 copy 的子属性，如果相同，就直接返回；如果不同，递归一次整个过程（从这小节第一行开始）。</p><p>最后返回的对象是由 base 的一些属性（没有修改的部分）和 copy 的一些属性（修改的部分）最终拼接而成的。最后使用 freeze 冻结 copy 属性，将 <strong>finalized</strong> 属性设置为 <strong>true。</strong></p><p>至此，返回值生成完毕，我们将最终值保存在 copy 属性上，并将其冻结，返回了 Immutable 的值。</p><p>Immer 因此完成了不可思议的操作：Create the next immutable state by mutating the current one。</p><blockquote><p>源码读到这里，发现 Immer 其实可以支持异步，只要支持 produce 函数返回 Promise 即可。最大的问题是，最后对代理的 revoke 清洗，需要借助全局变量，这一点阻碍了 Immer 对异步的支持。</p></blockquote><p><img data-src="07.png" alt=""></p><p><a href="https://immerjs.github.io/immer/docs/introduction" target="_blank" rel="noopener">immer官网</a></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutability with normal JavaScript objects, arrays, Sets and Maps. No new APIs to learn!</span><br><span class="line">Strongly typed, no string based paths selectors etc.</span><br><span class="line">Structural sharing out of the box</span><br><span class="line">Object freezing out of the box</span><br><span class="line">Deep updates are a breeze</span><br><span class="line">Boilerplate reduction. Less noise, more concise code.</span><br><span class="line">First class support for patches</span><br><span class="line">Small: 3KB gzipped</span><br></pre></td></tr></table></figure><p>参考阅读：<br><a href="https://github.com/camsong/blog/issues/3" target="_blank" rel="noopener">Immutable详解及 React 中实践</a><br><a href="https://juejin.im/entry/59b5e4916fb9a00a3b3bd52d" target="_blank" rel="noopener">精读 Immutable 结构共享</a><br><a href="https://juejin.im/post/5b9b30a35188255c6418e67c" target="_blank" rel="noopener">深入探究Immutable.js的实现机制（一）</a><br><a href="https://juejin.im/post/5ba4a6b75188255ca1537b19" target="_blank" rel="noopener">深入探究immutable.js的实现机制（二）</a><br><a href="https://zhangzhao.name/posts/immer-immutable/" target="_blank" rel="noopener">immer.js 简介及源码简析</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES系列-数据类型&lt;1&gt;</title>
      <link href="2020/04/12/dataType/"/>
      <url>2020/04/12/dataType/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/001.jpg" width=80% /><p>Software is like sex; it’s better when it’s free.<br>——Linus Torvalds (Linux之父)</p><a id="more"></a><h1 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型"></a>JS 数据类型</h1><h3 id="第一部分-JS的数据类型及其检测"><a href="#第一部分-JS的数据类型及其检测" class="headerlink" title="第一部分 JS的数据类型及其检测"></a>第一部分 JS的数据类型及其检测</h3><h4 id="JS数据类型总揽"><a href="#JS数据类型总揽" class="headerlink" title="JS数据类型总揽"></a>JS数据类型总揽</h4><p><img data-src="03.jpg" alt="07adp2x1cp.jpeg"></p><p><img data-src="04.png" alt="image.png"></p><blockquote><p>简述，值类型与引用类型的图解示例。</p></blockquote><p><img data-src="05.png" alt="截屏2020-03-25上午10.19.46.png"></p><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><blockquote><p>只能区分基本类型</p></blockquote><p><img data-src="06.png" alt="image.png"></p><h4 id="栈堆"><a href="#栈堆" class="headerlink" title="栈堆"></a>栈堆</h4><p><strong><a href="http://www.ruanyifeng.com/blog/2013/11/stack.html" target="_blank" rel="noopener">来源：Stack的三种含义</a></strong><br>**<br>程序运行的时候，需要内存空间存放数据。一般来说，系统会划分出两种不同的内存空间：</p><ol><li>一种叫做stack（栈），</li><li>一种叫做heap（堆）。</li></ol><p>它们的主要区别是：</p><ol><li>stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；</li><li>heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。</li></ol><p>其他的区别还有，一般来说，每个线程分配一个stack，每个进程分配一个heap，也就是说，stack是线程独占的，heap是线程共用的。此外，stack创建的时候，大小是确定的，数据超过这个大小，就发生stack overflow错误，而heap的大小是不确定的，需要的话可以不断增加。</p><p>根据上面这些区别，数据存放的规则是：<strong>只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面</strong>。请看下面这段代码（来源）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">2</span>;</span><br><span class="line">    class1 cls1 = <span class="keyword">new</span> class1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="07.png" alt="image.png"></p><blockquote><p>当Method1方法运行结束，会发生什么事？</p></blockquote><p>回答是<strong>整个stack被清空</strong>，i、y和cls1这三个变量消失，因为它们是局部变量，区块一旦运行结束，就没必要再存在了。而<strong>heap之中的那个对象实例继续存在</strong>，直到系统的垃圾清理机制（garbage collector）将这块内存回收。因此，<strong>一般来说，内存泄漏都发生在heap，即某些内存空间不再被使用了，却因为种种原因，没有被系统回收。</strong></p><h3 id="第二部分-类型转换"><a href="#第二部分-类型转换" class="headerlink" title="第二部分 类型转换"></a>第二部分 类型转换</h3><h4 id="ToString-ValueOf"><a href="#ToString-ValueOf" class="headerlink" title="ToString ValueOf"></a>ToString ValueOf</h4><p>Javascript 中几乎所有类型都具有<strong>toString和valueOf属性</strong>。几乎所有的类型对象比如<strong>Number,String,Boolean,Array,Function,Object,Date,RegExp</strong>的原型对象上都有各自的toString或valueOf方法的实现,故它们的实例化的对象自然就继承了这两个方法。下面看一下这些类型的原型对象上是否有这两个方法的实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出false </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出false</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出false</span></span><br></pre></td></tr></table></figure><p>上面代码中，只有<strong>Array,Function,RegExp的原型上没有valueOf属</strong>性,但是为什么其实例化对象能调用该方法呢？<br>我们都知道上面所有列举的类型的原型(prototype)都是继承于Object的原型(prototype)的，当Array,Function,RegExp的实例化对象找不到某个属性时会沿着原型链往上找，直到找到或给出undefined。<strong>其实例对象调用的是Object原型上的valueOf，<br>**<br>**valueOf()作用</strong></p><p><img data-src="08.png" alt="image.png"></p><h4 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h4><p>抽象方法ToPrimitive将对象值转换为相应的基本类型值。该方法会<br>首先检查该值是否有valueOf()方法，如果有并且返回基本类型值，就使用该值进行强制类型转换；<br>如果没有就使用toString()的返回值(如果存在)来进行强制类型转换；<br>如果valueOf()和toString()均不返回基本类型值，会产生TypeError错误。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a + b   <span class="comment">//"1,23,4"</span></span><br></pre></td></tr></table></figure><ol><li>数组的valueOf()操作无法得到<strong>简单基本类型值</strong>，于是调用toString()，</li><li>因此两个数组变成了”1,2”和”3,4”</li><li><ul><li>将它们拼接后返回。</li></ul></li></ol><h4 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h4><p>可以参考下册两张图，好好研究下</p><p><img data-src="09.png" alt="image.png"></p><p><img data-src="10.png" alt="image.png"></p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><h5 id="1"><a href="#1" class="headerlink" title="1. [] == ![]"></a><code>1. [] == ![]</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. []作为对象ToPrimitive得到 &#39;&#39;  </span><br><span class="line">2. ![]作为boolean转换得到0 </span><br><span class="line">a. ![] 等价于 !Boolean([])，除了六种情况外，Boolean()都是true</span><br><span class="line">3. &#39;&#39; &#x3D;&#x3D; 0 </span><br><span class="line">4. 转换为 0&#x3D;&#x3D;0 &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h5 id="2-undefined-false"><a href="#2-undefined-false" class="headerlink" title="2. [undefined] == false"></a><code>2. [undefined] == false</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 第一步，应用 规则5 ，[undefined]通过toString变成 &#39;&#39;,</span><br><span class="line">  题目变成  &#39;&#39; &#x3D;&#x3D; false</span><br><span class="line">- 第二步，应用 规则2 ，题目变成  &#39;&#39; &#x3D;&#x3D; 0</span><br><span class="line">- 第三步，应用 规则3 ，题目变成  0 &#x3D;&#x3D; 0</span><br><span class="line">- 所以， 答案是 true ！</span><br><span class="line">&#x2F;&#x2F; 但是 if([undefined]) 又是个true！</span><br></pre></td></tr></table></figure><p>参考文章<br><a href="https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/" target="_blank" rel="noopener">Javascript 隐式类型转换，一篇就够了！</a><br><a href="https://juejin.im/post/5b076c006fb9a07aa43c9fda#heading-8" target="_blank" rel="noopener">你可能忽略的js类型转换</a><br><a href="https://juejin.im/post/5b3b76de5188251afc25567f#heading-3" target="_blank" rel="noopener">JavaScript中的强制类型转换</a><br><a href="https://www.jianshu.com/p/91ffaf79de1c" target="_blank" rel="noopener">深入理解JavaScript中的toString，valueOf属性</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React系列-setState&lt;3&gt;</title>
      <link href="2020/04/12/setState/"/>
      <url>2020/04/12/setState/</url>
      
        <content type="html"><![CDATA[<img data-src="01.jpg" width=80% /><p>我唯一能确定的就是自己的无知<br>——苏格拉底 (哲学之父)</p><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>理解setState为何知道更新</li><li>理解hooks的执行者</li></ul><hr><p>原文链接： <a href="https://overreacted.io/zh-hans/how-does-setstate-know-what-to-do/" target="_blank" rel="noopener">How Does setState Know What to Do?</a></p><hr><h3 id="疑惑🤔："><a href="#疑惑🤔：" class="headerlink" title="疑惑🤔："></a>疑惑🤔：</h3><blockquote></blockquote><p>当你在组件中调用&gt; <code>setState</code>&gt; 的时候，你认为发生了些什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line"></span><br><span class="line">class Button extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123; clicked: false &#125;;</span><br><span class="line">    this.handleClick &#x3D; this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">  &#x2F;&#x2F; setState</span><br><span class="line">    this.setState(&#123; clicked: true &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    if (this.state.clicked) &#123;</span><br><span class="line">      return &lt;h1&gt;Thanks&lt;&#x2F;h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;</span><br><span class="line">        Click me!</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Button &#x2F;&gt;, document.getElementById(&#39;container&#39;));</span><br></pre></td></tr></table></figure><p>当然是：React根据下一个状态<code>{clicked：true}</code>重新渲染组件，同时更新DOM以匹配返回的<code>&lt;h1&gt;Thanks&lt;/ h1&gt;</code>元素啊。</p><p>看起来很直白。但是等等，<strong>是 _React_做了这些吗 ？还是_React DOM _？</strong><br>**</p><hr><blockquote><p>疑惑🤔：<br>我们或许会认为：<code>React.Component</code>类包含了DOM更新的逻辑。</p></blockquote><p>但是如果是这样的话，<code>this.setState()</code>又如何能在其他环境下使用呢？举个例子，React Native app中的组件也是继承自<code>React.Component</code>。他们依然可以像我们在上面做的那样调用<code>this.setState()</code>，而且React Native渲染的是安卓和iOS原生的界面而不是DOM。<br>因此，<strong><code>React.Component</code>以某种未知的方式将处理状态（state）更新的任务委托给了特定平台的代码。</strong>在我们理解这些是如何发生的之前，让我们深挖一下包（packages）是如何分离的以及为什么这样分离。<br>**</p><hr><blockquote><p>疑惑😂：<br>有一个很常见的误解就是React“引擎”是存在于<code>react</code>包里面的。 然而事实并非如此。</p></blockquote><p>**<br>实际上从<a href="https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages" target="_blank" rel="noopener">React 0.14</a>我们将代码拆分成多个包以来，<code>react</code>包故意只暴露一些定义组件的API。绝大多数React的_实现_都存在于“渲染器（renderers）”中。</p><blockquote><p><code>react-dom</code>、<code>react-dom/server</code>、 <code>react-native</code>、 <code>react-test-renderer</code>、 <code>react-art</code>都是常见的渲染器（当然你也可以<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples" target="_blank" rel="noopener">创建属于你的渲染器</a>）。    </p></blockquote><p>这就是为什么不管你的目标平台是什么，<code>react</code>包都是可用的。从<code>react</code>包中导出的一切，比如<code>React.Component</code>、<code>React.createElement</code>、 <code>React.Children</code> 和（最终的）<a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Hooks</a>，都是独立于目标平台的。无论你是运行React DOM，还是 React DOM Server,或是 React Native，你的组件都可以使用同样的方式导入和使用。<br>**<br>相比之下，渲染器包暴露的都是特定平台的API，比如说：<code>ReactDOM.render()</code>，可以让你将React层次结构（hierarchy）挂载进一个DOM节点。每一种渲染器都提供了类似的API。理想状况下，绝大多数_组件_都不应该从渲染器中导入任何东西。只有这样，组件才会更加灵活。</p><hr><blockquote><p><strong>✌️</strong><br><strong>和大多数人现在想的一样，React “引擎”就是存在于各个渲染器的内部。</strong></p></blockquote><p>**<br>很多渲染器包含一份同样代码的复制 —— 我们称为<a href="https://github.com/facebook/react/tree/master/packages/react-reconciler" target="_blank" rel="noopener">“协调器”(“reconciler”)</a>。<a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler" target="_blank" rel="noopener">构建步骤(build step)</a>将协调器代码和渲染器代码平滑地整合成一个高度优化的捆绑包（bundle）以获得更高的性能。（代码复制通常来说不利于控制捆绑包的大小，但是绝大多数React用户同一时间只会选用一个渲染器，比如说<code>react-dom</code>。）</p><p>这里要注意的是： <code>react</code>包仅仅是让你<em>使用</em> React 的特性，但是它完全不知道这些特性是_如何_实现的。而渲染器包(<code>react-dom</code>、<code>react-native</code>等)提供了React特性的实现以及平台特定的逻辑。这其中的有些代码是共享的(“协调器”)，但是这就涉及到各个渲染器的实现细节了。<br>**</p><hr><blockquote><p>🤩：<br>现在我们知道为什么当我们想使用新特性时，<code>react</code> 和 <code>react-dom</code><em>都</em>需要被更新。</p></blockquote><p>**<br>举个例子，当React 16.3添加了Context API，<code>React.createContext()</code>API会被React包暴露出来。<br>但是<code>React.createContext()</code> 其实并没有<em>实现</em> context。因为在React DOM 和 React DOM Server 中同样一个 API 应当有不同的实现。所以<code>createContext()</code>只返回了一些普通对象：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 简化版代码</span><br><span class="line">function createContext(defaultValue) &#123;</span><br><span class="line">  let context &#x3D; &#123;</span><br><span class="line">    _currentValue: defaultValue,</span><br><span class="line">    Provider: null,</span><br><span class="line">    Consumer: null</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Provider &#x3D; &#123;</span><br><span class="line">    $$typeof: Symbol.for(&#39;react.provider&#39;),</span><br><span class="line">    _context: context</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Consumer &#x3D; &#123;</span><br><span class="line">    $$typeof: Symbol.for(&#39;react.context&#39;),</span><br><span class="line">    _context: context,</span><br><span class="line">  &#125;;</span><br><span class="line">  return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**<br>**<br>当你在代码中使用 <code>&lt;MyContext.Provider&gt;</code> 或 <code>&lt;MyContext.Consumer&gt;</code>的时候， 是**_渲染器决定如何处理这些接口。React DOM也许用某种方式追踪context的值，但是React DOM Server用的可能是另一种不同的方式。</p><p><strong>所以，如果你将<code>react</code>升级到了16.3+，但是不更新<code>react-dom</code>，那么你就使用了一个尚不知道<code>Provider</code> 和 <code>Consumer</code>类型的渲染器。</strong>这就是为什么一个老版本的<code>react-dom</code>会<a href="https://stackoverflow.com/a/49677020/458193" target="_blank" rel="noopener">报错说这些类型是无效的</a>。</p><hr><blockquote><p><code>疑问😑😑</code><br><code>react</code>包并不包含任何有趣的东西，除此之外，具体的实现也是存在于<code>react-dom</code>，<code>react-native</code>之类的渲染器中。但是这并没有回答我们的问题。<code>React.Component</code>中的<code>setState()</code>如何与正确的渲染器“对话”？</p></blockquote><p>**<br><strong>答案是：每个渲染器都在已创建的类上设置了一个特殊的字段。</strong>这个字段叫做<code>updater</code>。这并不是<em>你</em>要设置的的东西——而是，React DOM、React DOM Server 或 React Native在创建完你的类的实例之后会立即设置的东西：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; React DOM 内部</span><br><span class="line">const inst &#x3D; new YourComponent();</span><br><span class="line">inst.props &#x3D; props;</span><br><span class="line">inst.updater &#x3D; ReactDOMUpdater;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; React DOM Server 内部</span><br><span class="line">const inst &#x3D; new YourComponent();</span><br><span class="line">inst.props &#x3D; props;</span><br><span class="line">inst.updater &#x3D; ReactDOMServerUpdater;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; React Native 内部</span><br><span class="line">const inst &#x3D; new YourComponent();</span><br><span class="line">inst.props &#x3D; props;</span><br><span class="line">inst.updater &#x3D; ReactNativeUpdater;</span><br></pre></td></tr></table></figure><p>**<br>查看<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67" target="_blank" rel="noopener"> <code>React.Component</code>中<code>setState</code>的实现</a>， <code>setState</code>所做的一切就是委托渲染器创建这个组件的实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 适当简化的代码</span><br><span class="line">setState(partialState, callback) &#123;</span><br><span class="line">  &#x2F;&#x2F; 使用&#96;updater&#96;字段回应渲染器！</span><br><span class="line">  this.updater.enqueueSetState(this, partialState, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**<br>这就是this.setState()<code>尽管定义在React包中，却能够更新DOM的原因。它读取由React DOM设置的</code>this.updater`，让React DOM安排并处理更新。</p><h3 id="✌️✌️✌️小结"><a href="#✌️✌️✌️小结" class="headerlink" title="✌️✌️✌️小结"></a>✌️✌️✌️小结</h3><ol><li>setState缘由</li><li>存放位置以及如何通信</li><li>渲染器被指派处理state的变化。</li></ol><hr><h3 id="疑惑🤔🤔🤔："><a href="#疑惑🤔🤔🤔：" class="headerlink" title="疑惑🤔🤔🤔："></a>疑惑🤔🤔🤔：</h3><blockquote><p>当使用Hooks时，<code>useState是</code>怎么 “知道要做什么”的 ？</p></blockquote><p>当人们第一次看见<a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Hooks proposal API</a>，他们可能经常会想： <code>useState是</code>怎么 “知道要做什么”的？然后假设它比那些包含<code>this.setState()</code>的<code>React.Component</code>类更“神奇”。</p><p>但是正如我们今天所看到的，<strong>基类中**</strong><code>setState()</code><strong>**的执行一直以来都是一种错觉。它除了将调用转发给当前的渲染器外，什么也没做</strong>。<code>useState</code> Hook<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56" target="_blank" rel="noopener">也是做了同样的事情</a>。<br>**<br><strong>Hooks使用了一个“dispatcher”对象，代替了<code>updater</code>字段。</strong>当你调用<code>React.useState()</code>、<code>React.useEffect()</code>、 或者其他内置的Hook时，这些调用被转发给了当前的dispatcher。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; React内部(适当简化)</span><br><span class="line">const React &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 真实属性隐藏的比较深，看你能不能找到它！</span><br><span class="line">  __currentDispatcher: null,</span><br><span class="line"></span><br><span class="line">  useState(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useState(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  useEffect(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useEffect(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>各个渲染器会在渲染你的组件之前设置dispatcher：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; React DOM 内部</span><br><span class="line">const prevDispatcher &#x3D; React.__currentDispatcher;</span><br><span class="line">React.__currentDispatcher &#x3D; ReactDOMDispatcher;</span><br><span class="line">let result;</span><br><span class="line">try &#123;</span><br><span class="line">  result &#x3D; YourComponent(props);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  &#x2F;&#x2F; 恢复原状</span><br><span class="line">  React.__currentDispatcher &#x3D; prevDispatcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>举个例子， React DOM Server的实现是在[这里](https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354)，还有就是React DOM 和 React Native共享的协调器的实现在[这里](https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js)。</code></pre><p>这就是为什么像<code>react-dom</code>这样的渲染器需要访问那个你调用Hooks的<code>react</code>包。否则你的组件将不会“看见”dispatcher！如果在一个组件树中存在<a href="https://github.com/facebook/react/issues/13991" target="_blank" rel="noopener">React的多个副本</a>，也许并不会这样。但是，这总是导致了一些模糊的错误，因此Hooks会强迫你在出现问题之前解决包的重复问题。</p><p>在高级工具用例中，你可以在技术上覆盖dispatcher，尽管我们不鼓励这种操作。（对于<code>__currentDispatcher</code>这个名字我撒谎了，但是你可以在React仓库中找到真实的名字。）比如说， React DevTools将会使用<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214" target="_blank" rel="noopener">一个专门定制的dispatcher</a>通过捕获JavaScript堆栈跟踪来观察Hooks树。<em>请勿模仿。</em></p><p>这也意味着Hooks本质上并没有与React绑定在一起。如果未来有更多的库想要重用同样的原生的Hooks, 理论上来说dispatcher可以移动到一个分离的包中，然后暴露成一个一等（first-class）的API，然后给它起一个不那么“吓人”的名字。但是在实践中，我们会尽量避免过早抽象，直到需要它为止。</p><p><code>updater</code>字段和<code>__currentDispatcher</code>对象都是称为<strong><em>依赖注入</em></strong>的通用编程原则的形式。在这两种情况下，渲染器将诸如<code>setState</code>之类的功能的实现“注入”到通用的React包中，以使组件更具声明性。</p><p>使用React时，你无需考虑这其中的原理。我们希望React用户花更多时间考虑他们的应用程序代码，而不是像依赖注入这样的抽象概念。但是如果你想知道<code>this.setState()</code>或<code>useState()</code>是如何知道该做什么的，我希望这篇文章会有所帮助。</p><p>参考链接<br><a href="https://juejin.im/post/5c31b814f265da612b13bf23" target="_blank" rel="noopener">react 渲染器了解一下？</a><br><a href="https://juejin.im/post/5ae2a019f265da0b736d5f46" target="_blank" rel="noopener">Dependency Injection-依赖注入详解</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reac实战系列-单页面&lt;1&gt;</title>
      <link href="2020/04/11/singlePage/"/>
      <url>2020/04/11/singlePage/</url>
      
        <content type="html"><![CDATA[<img data-src="01.jpg" width=80% /><p>知识上的投资总能得到最好的回报。<br>——本杰明.富兰克林 (美国开国元勋 物理学家 作家)</p><a id="more"></a><p>目标: 结合前几篇文章，汇总一个小Demo.</p><h1 id="React实战"><a href="#React实战" class="headerlink" title="React实战"></a>React实战</h1><p>本示例依照<a href="https://www.yuque.com/ant-design/course/wybhm9" target="_blank" rel="noopener">Ant Design 实战教程（beta 版）</a>进行编写，非常感谢各位大佬的倾情付出！谢谢🙏</p><blockquote><p>正是江南好风景，落花时节学代码</p></blockquote><p><img data-src="03.gif" alt="react1.gif"></p><p>有了前两节的铺垫，这个<a href="https://www.yuque.com/ant-design/course/wybhm9" target="_blank" rel="noopener">Ant Design 实战教程（beta 版）</a>也觉得挺顺手的，汇总下编写的流程以及接下来要进一步学习的内容。</p><h3 id="第一部分-整体概述"><a href="#第一部分-整体概述" class="headerlink" title="第一部分 整体概述"></a>第一部分 整体概述</h3><p>该demo是个典型的SPA项目，实现功能如布局、侧边栏、列表、表格、弹窗等，其中包含：</p><ul><li>应用框架：<a href="https://umijs.org/zh-CN/docs" target="_blank" rel="noopener">Umi</a></li><li>数据流：<a href="https://dvajs.com/guide/" target="_blank" rel="noopener">DvaJs</a></li><li>UI: <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Antd</a></li></ul><blockquote><p><a href="https://umijs.org/zh-CN/docs" target="_blank" rel="noopener">Umi</a>，中文可发音为<strong>乌米</strong>, 是可扩展的企业级前端应用框架。Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。</p></blockquote><blockquote><p><a href="https://dvajs.com/guide/" target="_blank" rel="noopener">DvaJs</a>首先是一个基于 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a> 和 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a> 的数据流方案，然后为了简化开发体验，dva 还额外内置了 <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a> 和 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">fetch</a>，所以也可以理解为一个轻量级的应用框架。</p></blockquote><blockquote><p><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Antd</a> 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">hhw-4:antd-course hhw$ tree -L 4 -I node_modules</span><br><span class="line">.</span><br><span class="line">├── config #配置文件</span><br><span class="line">│   └── config.js</span><br><span class="line">├── dist</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── umi.js</span><br><span class="line">├── mock</span><br><span class="line">│   └── articleMock.js</span><br><span class="line">├── package.json</span><br><span class="line">└── src</span><br><span class="line">    ├── layout</span><br><span class="line">    │   └── index.js</span><br><span class="line">    ├── models</span><br><span class="line">    │   ├── articleModel.js</span><br><span class="line">    │   ├── chartModel.js</span><br><span class="line">    │   └── complexArticleModel.js</span><br><span class="line">    ├── pages</span><br><span class="line">    │   ├── Chart</span><br><span class="line">    │   │   └── ChartClass.js</span><br><span class="line">    │   ├── Complex</span><br><span class="line">    │   │   ├── Article.js</span><br><span class="line">    │   │   └── ComplexArticle.js</span><br><span class="line">    │   ├── Dashboard</span><br><span class="line">    │   │   ├── Analysis.js</span><br><span class="line">    │   │   ├── Monitor.js</span><br><span class="line">    │   │   └── Workplace.js</span><br><span class="line">    │   └── HelloWorld.js</span><br><span class="line">    ├── service</span><br><span class="line">    │   └── chart.js</span><br><span class="line">    └── util</span><br><span class="line">        └── request.js</span><br></pre></td></tr></table></figure><p>其实有了React、Redux的基础，示例代码很容易看懂，在这里就不贴代码了，罗列一些操作中疑惑的地方。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="一、DvaJs–Effect"><a href="#一、DvaJs–Effect" class="headerlink" title="一、DvaJs–Effect"></a>一、DvaJs–Effect</h3><p>Reducer如果做了异步操作，将破坏redux中reducer是纯函数的机制，effect 就是专门处理这些具有 “副作用” 的操作的执行单元。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'some_namespace'</span>,</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  effects: &#123; <span class="comment">// 定义 effects 成员</span></span><br><span class="line">    <span class="string">'someEffect'</span>: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="string">'someOtherEffect'</span>: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>宏观上看，effect 是一层中间件。</p></li><li><p>局部上看 effect 就是一个一个的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noopener">generator function</a>。</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="1-中间层"><a href="#1-中间层" class="headerlink" title="1. 中间层"></a>1. 中间层</h4><blockquote><p>什么是中间层？<br>“ Middleware is some code you can put between the framework receiving a request, and the framework generating a response. “</p></blockquote><pre><code>当 action 被 dispatch 之后，会先到达 effect 处理副作用，然后该 effect 最终会促使新的 action 发送出去，这个新的 action 可能被其他的 effect 再捕获继续处理，也可能被 reducer 捕获并结束，无论怎样，最终处理逻辑的终点都将是 reducer。</code></pre><h4 id="2-generator-function。"><a href="#2-generator-function。" class="headerlink" title="2. generator function。"></a>2. generator function。</h4></li></ul><p><img data-src="02.png" alt="image.png"></p><p>异步的实质是事件发生促使程序的执行点来回跳转。我们使用 callback 本质上是描述跳转的一种手段。generator function 并没有改变异步的本质，只是改变了描述的方式，使得程序看起来像是同步一样。<br>一个 generator function 在执行时有 <strong>两方</strong>。一方是 generator function 本身，另一方是 generator function 的句柄持有者，而这一般都是框架所持有。我们姑且称这个句柄为 genStub。当框架调用 genStub.next() 时，generator function 会执行到下一个 <code>yield</code> 然后暂停，并把 yield 后面表达式的计算值返还给框架，同时把程序执行权交给框架。框架拿到值后做处理，比如就是异步处理，处理结束拿到结果，再次调用 genStub.next()，返还值给 generator function 同时驱动它恢复执行。当恢复执行时，你可以认为 <strong>返回的处理结果会整体替换 <code>yield &lt;expression&gt;</code></strong>，然后程序继续执行到下一个 yield。</p><blockquote><p>yield 这个单词用在这里特别形象：yield 本身有「让步」的意思，也有「产出」的意思。</p></blockquote><p><strong>「generator function yield 到外部的值」和「外部返还给 generator function 的值」不是一回事！！！</strong><br>**</p><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><p>入参有两个对象，第一个对象就是匹配这个 effect 的 action 对象，因此可以取到约定的 <strong>payload</strong> 这个字段，第二个对象是** <em>effect 原语集</em>**，其中 <code>call</code>, <code>put</code> 最为常用，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">call: 阻塞 用于调用异步逻辑，支持 promise</span><br><span class="line">put: 不阻塞 用于触发 action,一般来触发reducer改变state</span><br><span class="line">select: 不阻塞 用于从 state 里获取数据</span><br><span class="line">take: 阻塞 dva封装了take，可以监听action的开始和结束阶段，take会阻塞到监听的事件触发，才执行下一步</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img data-src="04.png" alt="image.png"></p><h3 id="二、代理"><a href="#二、代理" class="headerlink" title="二、代理"></a>二、代理</h3><p>在前端开发中，一种常见的规避跨域的方法就是：把 ajax 请求发送到你的本地开发服务器，然后本地开发服务器再把 ajax 请求转发到远端去，从网络拓扑上看本地开发服务器起着「反向代理」的作用。本地服务器和远端服务器是「服务器和服务器间的通信」，就不存在跨域问题了。</p><p>配置代理也很简单，只需要您在配置文件 config/config.js 中与 routes 同级处增加 proxy 字段，代码如下，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+  proxy: &#123;</span><br><span class="line">+    <span class="string">'/dev'</span>: &#123;</span><br><span class="line">+      target: <span class="string">'https://08ad1pao69.execute-api.us-east-1.amazonaws.com'</span>,</span><br><span class="line">+      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">+    &#125;,</span><br><span class="line">+  &#125;,</span><br></pre></td></tr></table></figure><p>配置的含义是：去往本地服务器 localhost:8000 的 ajax 调用中，如果是以 <code>/dev</code> 开头的，那么就转发到远端的 <code>https://08ad1pao69.execute-api.us-east-1.amazonaws.com</code> 服务器当中，<code>/dev</code> 也会保留在转发地址中。</p><p><img data-src="05.png" alt="image.png"></p><h3 id="三、二次封装"><a href="#三、二次封装" class="headerlink" title="三、二次封装"></a>三、二次封装</h3><p>Antd真的很赞！对于开发者而言，公共的代码其实可以二次封装一下，比如from表单等，可以减少不少的代码。</p><h3 id="四、CSS-Modules"><a href="#四、CSS-Modules" class="headerlink" title="四、CSS Modules"></a>四、CSS Modules</h3><p><img data-src="06.png" alt="image.png"></p><p><a href="https://github.com/camsong/blog/issues/5" target="_blank" rel="noopener">CSS Modules 详解及 React 中实践</a><br><a href="">CSS MODULES用法教程</a></p><p><strong>CSS modules</strong> 将生成全局唯一的hash值【标签实际的class】。通过全局唯一的class name 变相的就可以获取到<strong>局部作用域【scoped css】，</strong>如果一个 CSS 文件仅仅是作用在某个局部的话，我们称这样一个 CSS 文件为 _CSS module_。<br><strong>注意：很多 CSS 选择器是不会被 CSS Modules 处理的，比如 body、div 、a 这样的 HTML 标签名就不会。我们推荐如果要定义局部 css 样式/动画， 只使用 class 或 @keyframe。</strong></p><p><strong><a href="https://less.bootcss.com/" target="_blank" rel="noopener">Less 官方文档</a></strong><br>**</p><blockquote><p><a href="http://lesscss.org/usage/" target="_blank" rel="noopener">Less</a> 是一个 CSS 的超集，Less 允许我们<strong><em>定义变量</em></strong>，使用<strong><em>嵌套式声明，定义函数</em></strong>等。严格说 Less 包含两部分：1. Less 的语法。2. Less 预处理器（Less preprocessor）。浏览器终究只认识 CSS，所以 Less 文件需要经过 Less 预处理器编译成为 CSS。</p><p>在工具的支持下，一个 Less 文件首先会经过 CSS modules 的编译，把类名全局唯一化，然后才被 Less preprocessor 编译成为 CSS 文件。正因此，Less 文件可以和 CSS modules 无缝联合使用。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// less 文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 常量</span><br><span class="line">@grey-color: rgba(0, 0, 0, 0.25);</span><br><span class="line"></span><br><span class="line">// 类嵌套</span><br><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#30b767</span>;</span><br><span class="line">  .deleted &#123;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">line-through</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="keyword">@grey-color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重写Antd样式</span><br><span class="line"><span class="selector-class">.override-ant-btn</span> &#123;</span><br><span class="line">  // CSS Modules 允许使用:global(.className)的语法，声明一个全局规则。凡是这样声明的class，都不会被编译成哈希字符串。</span><br><span class="line">  <span class="selector-pseudo">:global(.ant-btn)</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;commonStyles.hello&#125;</span>&gt;</span> css module <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;lessStyles.hello&#125;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;lessStyles.deleted&#125;</span>&gt;</span>Less class 嵌套<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;lessStyles[</span>'<span class="attr">override-ant-btn</span>']&#125;&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">Button</span>&gt;</span>圆角样式按妞<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">Button</span>&gt;</span>antd 原始按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="07.png" alt="image.png"></p><p>最后强调，global 不应该被滥用，特别地我们建议：若想在某个文件中覆盖 antd 样式，请加上一个类似 <code>.override-ant-btn</code> 的类包裹住 global 修饰的名称，以避免全局样式声明分散在项目各处。</p><p>还有很多待补充的内容，边做边学</p><p>参考链接</p><ul><li>阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">redux 三部曲</a>。</li><li>redux-saga 的<a href="http://leonshi.com/redux-saga-in-chinese/docs/api/index.html" target="_blank" rel="noopener">中文文档</a>。</li><li><a href="https://dvajs.com/guide/develop-complex-spa.html#%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDmodel" target="_blank" rel="noopener">使用 Dva 开发复杂 SPA</a></li><li><a href="https://dvajs.com/guide/source-code-explore.html#%E9%9A%90%E8%97%8F%E5%9C%A8-package-json-%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86" target="_blank" rel="noopener">Dva源码解析</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列-Redux&lt;2&gt;</title>
      <link href="2020/04/10/redux/"/>
      <url>2020/04/10/redux/</url>
      
        <content type="html"><![CDATA[<img data-src="01.jpg" width=80% /><p>预测未来最好的方法就是去创造未来<br>——林肯 (美国前总统)</p><a id="more"></a><h1 id="React-通信之-Redux"><a href="#React-通信之-Redux" class="headerlink" title="React 通信之 Redux"></a>React 通信之 Redux</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>React 组件 componentDidMount 的时候初始化 Model，并监听 Model 的 change 事件，当 Model 发生改变时调用 React 组件的 setState 方法重新 render 整个组件，最后在组件 componentWillUnmount 的时候取消监听并销毁 Model。<br><img data-src="03.png" alt="image.png"></p><p>图片来源：<a href="https://www.processon.com/view/5db55958e4b0e433944fdc87" target="_blank" rel="noopener">https://www.processon.com/view/5db55958e4b0e433944fdc87</a></p><h3 id="第一部分-Redux的出现"><a href="#第一部分-Redux的出现" class="headerlink" title="第一部分 Redux的出现"></a>第一部分 Redux的出现</h3><blockquote><p>存在即合理</p></blockquote><p>如<strong>下图左侧</strong>所示，react单向流动的特性，导致在复杂的状态管理面前，会越来越麻烦。Redux的出现就是为了解决state里面的数据问题。<br>如<strong>下图右侧</strong>所示，redux维护单一状态库。</p><p>Redux三大特性：<br>1 唯一数据源<br>2 保持只读状态<br>3 数据改变只能通过纯函数来执行</p><p><img data-src="04.png" alt="image.png"></p><h3 id="第二部分-Redux概念"><a href="#第二部分-Redux概念" class="headerlink" title="第二部分 Redux概念"></a>第二部分 Redux概念</h3><h4 id="一、粗略认识"><a href="#一、粗略认识" class="headerlink" title="一、粗略认识"></a>一、粗略认识</h4><p>首先回想下，曾经你去图书馆借书的场景+上图右侧树图。</p><ul><li><strong>你</strong>去图书馆；</li><li><strong>询问</strong>管理员是否有《西部世界iii》这本书；</li><li>管理员<strong>查阅</strong>库存；</li><li>_<strong>反馈</strong>_给你，自己网上找资源去；</li><li>你去网上找资源。</li></ul><p>这个流程其实包含了Redux的整个流程。<br><strong>询问 + **</strong>查阅<strong>** = **_</strong>反馈。<strong>__</strong>即：action + state = new state**_</p><blockquote><p><em><strong>有果必有因</strong></em></p></blockquote><p><img data-src="05.png" alt="image.png"><br><img data-src="06.png" alt="image.png"><br><img data-src="07.png" alt="image.png"></p><h4 id="二、具体的概念"><a href="#二、具体的概念" class="headerlink" title="二、具体的概念"></a>二、具体的概念</h4><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。</p><blockquote><p><strong>UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑</strong></p></blockquote><p>你可能会问，如果一个组件既有 UI 又有业务逻辑，那怎么办？回答是，将它拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。<br>React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。</p><p>**<br>以上摘录自—<a href="https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">阮一峰的网络日志</a>，建议初学者多读几遍。</p><ul><li><strong>Action：</strong> 把数据从应用传到 store 的有效载荷；</li><li><strong>Store</strong>: 保存数据的地方；</li><li><strong>Dispatcher</strong>: view发出Action的唯一办法；</li><li><strong>Reducer：</strong> Store收到Action以后，必须给出一个新的state，这样view才会发生变化。<strong>Reducer即根据Action计算state；</strong></li><li><strong>State</strong>: store里面存储的数据。</li></ul><p><img data-src="08.gif" alt="redux1.gif"></p><p><img data-src="09.gif" alt="redux2.gif"></p><h4 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h4><p>Redux一个简单的加数操作，涉及完整的流程。<br>其中涉及</p><ul><li>redux各个概念；</li><li>UI组件 &amp; 容器组件 的相互关系；</li><li>Provider的使用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  value: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">  onIncreaseClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 定义action</span></span><br><span class="line"><span class="regexp">const increaseAction = &#123; type: "increase" &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * Reducer函数</span><br><span class="line"> * @param &#123;*&#125; state 默认值</span><br><span class="line"> * @param &#123;*&#125; action 根据action来计算state.</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function counter(state = &#123; count: 0 &#125;, action) &#123;</span></span><br><span class="line"><span class="regexp">  const count = state.count;</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case "increase":</span></span><br><span class="line"><span class="regexp">      return &#123; count: count + 1 &#125;;</span></span><br><span class="line"><span class="regexp">    default:</span></span><br><span class="line"><span class="regexp">      return state;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 创建store -&gt; 需要reducer -&gt; 默认值+action</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">const store = createStore(counter);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。</span><br><span class="line"> * @param &#123;*&#125; state</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    value: state.count</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 建立 UI 组件的参数到store.dispatch方法的映射</span><br><span class="line"> * 定义了哪些用户的操作应该当作 Action，传给 Store。</span><br><span class="line"> * 它可以是一个函数，也可以是一个对象。</span><br><span class="line"> *</span><br><span class="line"> * <span class="number">1.</span> 函数：</span><br><span class="line"> *      - 参数：</span><br><span class="line"> *        可以拿到dispatch和ownProps（容器组件的props对象）两个参数；</span><br><span class="line"> *      - 返回值</span><br><span class="line"> *        一个对象，每个键值对都是一个映射，[键名对应函数名]</span><br><span class="line"> *         定义了 UI 组件的参数怎样发出 Action。</span><br><span class="line"> * <span class="number">2.</span> 对象</span><br><span class="line"> *      它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，</span><br><span class="line"> *      会被当作 Action creator ，返回的 Action 会由 Redux 自动发出。</span><br><span class="line"> * @param &#123;*&#125; dispatch</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 同名函数 onIncreaseClick， dispatch 一个action</span></span><br><span class="line"><span class="regexp">    onIncreaseClick: () =&gt; dispatch(increaseAction)</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * connect 自动生成容器组件，将UI组件[Counter]与[容器组件]即关联起来。</span><br><span class="line"> * Counter: UI 组件</span><br><span class="line"> * mapStateToProps： 输入逻辑：外部的数据（即state对象）如何转换为 UI 组件的参数</span><br><span class="line"> * mapDispatchToProps： 用户发出的动作如何变为 Action 对象，从 UI 组件传出去。</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">const App = connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(Counter);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ React-Redux 提供Provider组件，可以让容器组件拿到state。</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 原理： React中的context属性，</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>结合下图理解<br><img data-src="10.png" alt="image.png"></li></ul><p>图片来源：<a href="https://juejin.im/post/5acdbe8f51882548fe4a7af1" target="_blank" rel="noopener">https://juejin.im/post/5acdbe8f51882548fe4a7af1</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个例子中，最外层的Provider利用react-redux中的provider组件，<em><strong>那么究竟provider组件做了什么？为何provider子组件能够或许context属性？</strong></em></p><blockquote><p>上篇文章利用context进行传值，并未过多的解释说明。</p></blockquote><p>Provider 本身是一个 react 组件，这一点首先要搞清楚。它的实现原理非常简单，利用了 React 的 context 这一特性。文档<a href="https://react.docschina.org/docs/context.html" target="_blank" rel="noopener">Context - React</a>, 只要在最外层的组件实现一个 getChildContext 这个方法，返回一个对象，内部的组件都可以通过 this.context 拿到这个对象。所以一个简单的 Provider 实现是这样的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">store</span>: <span class="keyword">this</span>.props.store &#125;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">const</span> store = createStore();</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">, document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure><p>那么整个页面的逻辑流程就是：</p><ol><li>创建Store，createStore(), 接受reducers&amp;默认值；</li><li>createStore 对每一个reducer进行dispatch一个action.type=@@redux/INTT类型的action，然后返回state默认值；</li><li>render()进行渲染，每个子组件通过传入的this.context.store.getState()方法获取state对象+ownProps给mapStateToProps方法，构建props，应用到子组件上；</li><li>UI组件触发action, 随即mapDispatchToProps触发相应的action；</li><li>strore接收到action进行reduce，得到新的state，然后再调用所有子组件的mapDispatchToProps生成props.</li><li>最后provider进行重新渲染需要更新的组件。<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3>react-redux示例–<a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos" target="_blank" rel="noopener">TodoList demo</a><br>试着从头到位实现一边，会更加深对本文的理解。鉴于代码太多&amp;上述的理解，应该是没问题的，但不要眼高手低。</li></ol><p><img data-src="11.png" alt="image.png"></p><h4 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h4><p><a href="https://juejin.im/post/5acdbe8f51882548fe4a7af1" target="_blank" rel="noopener">一幅图明白React-Redux的原理</a><br><a href="https://www.cnblogs.com/liuheng/p/11796819.html" target="_blank" rel="noopener">解析：让你弄懂redux原理</a><br><a href="https://www.cnblogs.com/nayek/p/12369418.html" target="_blank" rel="noopener">https://www.cnblogs.com/nayek/p/12369418.html</a><br><a href="https://www.processon.com/view/5db55958e4b0e433944fdc87" target="_blank" rel="noopener">https://www.processon.com/view/5db55958e4b0e433944fdc87</a><br><a href="https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React系列-生命周期&lt;1&gt;</title>
      <link href="2020/04/09/lifecycle/"/>
      <url>2020/04/09/lifecycle/</url>
      
        <content type="html"><![CDATA[<img data-src="01.jpg" width=80% /><p>一个人的价值, 在于他贡献了什么, 而不在于他获得了什么。<br>——爱因斯坦</p><a id="more"></a><h1 id="React生命周期-amp-原生通信"><a href="#React生命周期-amp-原生通信" class="headerlink" title="React生命周期&amp;原生通信"></a>React生命周期&amp;原生通信</h1><h6 id="由四张图引发的一系列事件。。。。"><a href="#由四张图引发的一系列事件。。。。" class="headerlink" title="由四张图引发的一系列事件。。。。"></a>由四张图引发的一系列事件。。。。</h6><p><img data-src="03.png" alt="image.png"></p><p><img data-src="04.png" alt="image.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="本文主要根据原生传参展开，顺带温故下生命周期，接下来就是Redux"><a href="#本文主要根据原生传参展开，顺带温故下生命周期，接下来就是Redux" class="headerlink" title="本文主要根据原生传参展开，顺带温故下生命周期，接下来就是Redux."></a>本文主要根据原生传参展开，顺带温故下生命周期，接下来就是Redux.</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="第一部分-生命周期"><a href="#第一部分-生命周期" class="headerlink" title="第一部分 生命周期"></a>第一部分 生命周期</h3><h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><p>在组件<strong>创建、加载运行、被销毁</strong>的过程中，总是伴随着各种各样的事件，组件在特定时期触发对应的事件，都属于组件的生命周期范畴。</p><p><strong>生命周期的三种状态：</strong></p><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM</li></ul><p>完整的生命周期如下图所示，可以在代码中，尝试一下，各个方法在什么时候会触发，触发效果是什么。<br><img data-src="05.png" alt="生命周期.png"><br>图片来源：<a href="https://www.cnblogs.com/ygjzs/p/12203390.html" target="_blank" rel="noopener">https://www.cnblogs.com/ygjzs/p/12203390.html</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="keyword">this</span>.props.count</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在组件即将挂载到页面上的时候执行，此时，组件尚未挂载到页面</span></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在内存中开始渲染DOM，未展示</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// ⚠️在此如果更新state, 则会进入死循环</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是 Counter 计数器组件&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="button" value="加1" onClick=&#123;this.increment&#125; /</span>&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;h3 id=<span class="string">"content"</span> ref=<span class="string">"h3"</span>&gt;</span><br><span class="line">          当前的数量是：&#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断组件是否需要更新</span></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(nextProps, nextState);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件将要更新，但Dom, state还是旧的</span></span><br><span class="line">  componentWillUpdate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">"WillUpdate: "</span> +</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).innerHTML +</span><br><span class="line">        <span class="string">". state: "</span> +</span><br><span class="line">        <span class="keyword">this</span>.state.count</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件完成了更新，此时，state 中的数据、虚拟DOM、页面上的DOM，都是最新的</span></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">"DidUpdate: "</span> +</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).innerHTML +</span><br><span class="line">        <span class="string">". state: "</span> +</span><br><span class="line">        <span class="keyword">this</span>.state.count</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二部分-原生通信"><a href="#第二部分-原生通信" class="headerlink" title="第二部分 原生通信"></a>第二部分 原生通信</h3><p><strong>以下示例codesandbox地址</strong>：<a href="https://codesandbox.io/s/gifted-grothendieck-2wsy3" target="_blank" rel="noopener">https://codesandbox.io/s/gifted-grothendieck-2wsy3</a><br>主要实现以下功能：</p><ul><li>父子组件通过props互相传值；</li><li>孙子组件通过context传参数。</li></ul><p><img data-src="06.gif" alt="Kapture 2020-03-18 at 16.28.13.gif"></p><h4 id="一、父子组件互相传值"><a href="#一、父子组件互相传值" class="headerlink" title="一、父子组件互相传值"></a>一、父子组件互相传值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./Son"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      content: <span class="string">""</span>,</span><br><span class="line">      inputMsg: <span class="string">""</span>,</span><br><span class="line">      receiveMsg: <span class="string">""</span>,</span><br><span class="line">      contextMsg: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** ------使用props传值----------- */</span></span><br><span class="line">  <span class="comment">// 更改状态</span></span><br><span class="line">  inputMsg = <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      inputMsg: item.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  sendMsg = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">this</span>.state.inputMsg;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      content: text</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 父组件将一个函数作为 props 传递给子组件，</span></span><br><span class="line"><span class="comment">   * 子组件调用该回调函数，便可以向父组件通信。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  handleCallBack = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      receiveMsg: msg</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/** ------使用props传值----------- */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** ------使用context传值----------- */</span></span><br><span class="line">  <span class="comment">// 父组件声明自己支持 context</span></span><br><span class="line">  <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">    callback: PropTypes.func</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 父组件提供一个函数，用来返回相应的 context 对象</span></span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      callback: <span class="keyword">this</span>.callback.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callback(msg) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      contextMsg: msg</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** ------使用context传值----------- */</span></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;父子组件互相传值&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input value=&#123;this.state.inputMsg&#125; onChange=&#123;this.inputMsg&#125; /</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.sendMsg&#125;&gt; 传给子组件 &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;hr /</span>&gt;</span><br><span class="line">        &lt;label&gt; 将要发送的数据： &#123;<span class="keyword">this</span>.state.inputMsg&#125; &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;hr /</span>&gt;</span><br><span class="line">        &lt;label&gt; 接受props方式的数据： &#123;<span class="keyword">this</span>.state.receiveMsg&#125; &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;hr /</span>&gt;</span><br><span class="line">        &lt;label&gt; 接受Context方式的数据： &#123;<span class="keyword">this</span>.state.contextMsg&#125; &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;hr /</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Son</span><br><span class="line">          content=&#123;<span class="keyword">this</span>.state.content&#125;</span><br><span class="line">          handleCallBack=&#123;<span class="keyword">this</span>.handleCallBack.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> GrandSon <span class="keyword">from</span> <span class="string">"./GrandSon"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 回调父组件的handleCallBack方法，向上传值</span></span><br><span class="line">  callBack = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.handleCallBack(msg);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      <span class="comment">// 1. 接受父组件传过来的值</span></span><br><span class="line">        &lt;h4&gt;子组件接受的值：&#123;<span class="keyword">this</span>.props.content&#125;&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 2. 向父组件传值</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.callBack("发送： " + this.props.content)&#125;&gt;</span></span><br><span class="line"><span class="regexp">          向父组件传值</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;GrandSon /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="二、跨级组件"><a href="#二、跨级组件" class="headerlink" title="二、跨级组件"></a>二、跨级组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandSon</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 子组件声明自己需要使用 context</span></span><br><span class="line">  <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">    callback: PropTypes.func</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 回调函数</span></span><br><span class="line">  cb = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.context.callback(msg);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.cb(<span class="string">"发消息"</span>)&#125;&gt; 孙子向爷爷发消息 。&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>官方文档一看就会，一写就蒙圈。。<br>通过以上这两个示例，主要加深了对React的理解，将组件与数据串联起来，页面很丑，数据来凑，示例中没有数据校验与代码优化。<br>接下来对剩余的几张图【Redux、Dva】以示例的方式展示出来，应该快轮到antd了。</p><h6 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h6><p><a href="https://www.cnblogs.com/ygjzs/p/12203390.html" target="_blank" rel="noopener">React 生命周期</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-格言</title>
      <link href="2020/01/17/geyan/"/>
      <url>2020/01/17/geyan/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/001.jpg" width=80% /><span class='geyan'> 你以为你在合群，其实你是在浪费青春。<br>——李尚龙《你只是看起来很努力》</span><a id="more"></a><hr><ul><li>言而当，知也；默而当，亦知也。（《荀子·非十二子》）</li><li>凡事行，有益于理者立之，无益于理者废之。（《荀子·儒效》）</li><li>有兼听之明，而无奋矜之容；有兼覆之厚，而无伐德之色。（《荀子·正名》）</li><li>望时而待之，孰与应时而使之。（《荀子·天论》）</li><li>虽有戈矛之刺，不如恭俭之利也。故与人善言，暖于布帛；伤人之言，深于矛戟（《荀子·荣辱》）</li><li>凡斗者，必自以为是，而以人为非也。（《荀子·荣辱》）</li><li>务本节用财无极。（《荀子·成相》）</li><li>是是非非谓之智，非是是非谓之愚。（《荀子·修身》）</li><li>善学者尽其理，善行者究其难。（《荀子·大略》）</li><li>学不可以已。（《荀子·劝学》）</li><li>学所以益才也，砺所以致刃也。（《说苑·建本》）</li><li>川泽纳污，山薮藏疾，瑾瑜匿瑕。（《左传·宣公十五年》）</li><li>任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</li><li>不仁之至忽其亲，不忠之至倍其君，不信之至欺其友。（《韩诗外传》）</li><li>兽穷则啮，鸟穷则啄，人穷则诈。（《韩诗外传》）</li><li>喜名者必多怨，好与者必多辱。（《韩诗外传》）</li><li>新沐者必弹冠，新浴者必振衣。（屈原《渔父》）</li><li>剑虽利，不厉不断；材虽美，不学不高。（《韩诗外传》）</li><li>君子学以聚之，问以辩之，宽以居之，仁以行之。（《周易·䷀乾·文言》）</li><li>居上位而不骄，在下位而不忧。（《周易·䷀乾·文言》）</li><li>君子终日乾乾，夕惕若，厉，无咎。（《周易·䷀乾》）</li><li>夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。（《周易·䷀乾·文言》）</li><li>劳而不伐，有功而不德，厚之至也。（《周易·系辞上》）</li><li>形而上者谓之道；形而下者谓之器。（《周易·系辞上》）</li><li>劳谦君子，万民服也。（《周易·䷎谦》）</li><li>乱之所生也，则言语以为阶。（《周易·系辞上》）    </li><li>时止则止，时行则行，动静不失其时，其道光明。（《周易·䷳艮·彖传》）</li><li>不恒其德，或承之羞，（《周易·䷟恒》）</li><li>三人行，则损一人；一人行，则得其友。（《周易·䷨损》）</li><li>形相虽善而心术恶，无害为小人也。（《荀子·非相》）</li><li>观棋不语真君子，把酒多言是小人。（冯梦龙《醒世恒言·陈多寿生死夫妻》）</li><li></li></ul><hr><ul><li>世上只有一种英雄主义——就是在认清生活的真相之后依然热爱生活 ——罗曼。罗兰 （作家 诺贝尔奖得主）</li></ul><hr><ul><li>恐惧让你沦为囚犯，希望让你重获自由。–《肖申克的救赎》</li></ul><hr><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">【名句·出处】</span><br><span class="line">    虽有戈矛之刺，不如恭俭之利也。故与人善言，暖于布帛；伤人之言，深于矛戟（《荀子·荣辱》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    憍泄者，人之殃也；恭俭者，偋五兵也。虽有戈矛之刺，不如恭俭之利也。</span><br><span class="line">                ——《荀子·荣辱》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    戈矛：古代兵器。刺：兵器的锋刃。恭俭：恭谨谦逊。利：锋利，锐利；引申为获取利益。这句话的意思是：即便持有戈矛一样的锋刃，也不如有恭谨谦逊那样的态度“锐利”，更容易获取利益。</span><br><span class="line"></span><br><span class="line">故：所以。矛戟：矛和戟，古兵器。“故与人善言，暖于布帛；伤人之言，深于矛戟”的前一句为“虽有戈矛之刺，不如恭俭之利也”。意思是：即便持有戈矛一样的锋刃，也不如有恭谨谦逊那样的态度“锐利”，更容易获取利益。所以用好话与人交流，像布帛一样给人温暖；伤害人的话，比矛戟伤人还要深重。</span><br><span class="line"></span><br><span class="line">兼听：广泛听取意见。奋矜：骄傲自大。兼覆：恩泽广覆，无所遗漏。伐德：夸耀自己的德行。</span><br><span class="line">    意思是：有广泛听取各种意见的明智，而没有傲慢自大的姿态；有恩泽万物的宽厚，而没有自我夸耀的得意形貌。</span><br><span class="line">　 “有兼听之明，而无奋矜之容；有兼覆之厚，而无伐德之色”，说的是“圣人”在面对歪门邪说与其辩论时所持的态度。</span><br><span class="line"></span><br><span class="line">盼望时令而等待其降福，怎么比得上适应时令而利用它呢。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    凡斗者，必自以为是，而以人为非也。（《荀子·荣辱》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    凡斗者，必自以为是，而以人为非也。己诚是也，人诚非也，则是己君子，而人小人也；以君子与小人相贼害也，忧以忘其身，内以忘其亲，上以忘其君，岂不过甚矣哉！</span><br><span class="line">                ——《荀子·荣辱》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    意思是：大凡斗殴的人，一定自认为自己是对的，而认为对方是错的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    务本节用财无极。（《荀子·成相》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    请成相，言治方，君论有五约以明。君谨守之，下皆平正，国乃昌。臣下职，莫游食，务本节用财无极。</span><br><span class="line">                ——《荀子·成相》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    意思是：致力于农业生产，节约用度，财富就会不断积累没有极限。务本：指务农。《汉书·文帝纪》：“农，天下之大本也，民所恃以生也。”</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    知之而不行，虽敦必困。（《荀子·儒效》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    圣人也者，本仁义，当是非，齐言行，不失豪厘，无他道焉，已乎行之矣。故闻之而不见，虽博必谬；见之而不知，虽识必妄；知之而不行，虽敦必困。</span><br><span class="line">                ——《荀子·儒效》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    敦：丰富，丰厚。困：阻碍。“知之而不行，虽敦必困”的意思是：理解了而不去实行，虽然懂的很多也一定进步不了。“知之而不行，虽敦必困”强调的是实践的重要性。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    是是非非谓之智，非是是非谓之愚。（《荀子·修身》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    是是非非谓之智，非是是非谓之愚。伤良曰谗，害良曰贼。是谓是，非谓非曰直。</span><br><span class="line">                ——《荀子·修身》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    是是：前一“是”表示肯定；后一“是”表示对的、正确的。非非：前一“非”表示否定；后一“非”表示不对、错误的。</span><br><span class="line">    肯定正确的，否定不正确的，叫作智慧，否定正确的，肯定不正确的，叫作愚蠢。</span><br><span class="line"></span><br><span class="line">名句·出处】</span><br><span class="line">    善学者尽其理，善行者究其难。（《荀子·大略》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    君子之学如蜕，幡然迁之。故其行效，其立效，其坐效，其置颜色、出辞气效。无留善，无宿问。</span><br><span class="line">    善学者尽其理，善行者究其难。</span><br><span class="line">                     ——《荀子·大略》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    意思是：善于学习的人会彻底了解其中的道理，善于实践的人会探究其中的艰难之处。</span><br><span class="line">    习近平《共同构建人类命运共同体》：</span><br><span class="line">    中国古人说：“善学者尽其理，善行者究其难。”构建人类命运共同体是一个美好的目标，也是一个需要一代又一代人接力跑才能实现的目标。中国愿同广大成员国、国际组织和机构一道，共同推进构建人类命运共同体的伟大进程。</span><br><span class="line">原文·语境】</span><br><span class="line">    君子曰：学不可以已。</span><br><span class="line">                ——《荀子·劝学》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    已：停止。学习是不可以停止的。也就是说，学无止境，永远会有可学的东西。</span><br><span class="line"></span><br><span class="line">【原文·语境】</span><br><span class="line">    无稽之言，不见之行，不闻之谋，君子慎之。</span><br><span class="line">                ——《荀子·正名》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    稽：查核。行：行为，做法。谋：计谋，谋略。</span><br><span class="line">    这句话的意思是：没有核验过的话，没有见过的做法，没有听说过的计谋，君子要慎重对待。</span><br><span class="line"></span><br><span class="line">    【名句·出处】</span><br><span class="line">    学所以益才也，砺所以致刃也。（《说苑·建本》）</span><br><span class="line">【原文·语境】</span><br><span class="line">　　子思曰：学所以益才也，砺所以致刃也。吾尝幽处而深思，不若学之速；吾尝跂而望，不若登高之博见。故顺风而呼，声不加疾而闻者众；登丘而招，臂不加长而见者远。</span><br><span class="line">                ——《说苑·建本》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    砺：磨刀石。所以：所用，用来。“学所以益才也，砺所以致刃也”的意思是：学习是用来增长才干的，磨刀石是用来使刀刃锋利的。</span><br><span class="line">    习近平《之江新语——要善于学典型》：</span><br><span class="line">    “学所以益才也。砺所以致刃也”。我们就是要善于向先进典型学习，在一点一滴中完善自己，从小事小节上修炼自己，以自己的实际行动学习先进、保持先进、赶超先进。</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    川泽纳污，山薮藏疾，瑾瑜匿瑕。（《左传·宣公十五年》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    十五年，春，公孙归父会楚子于宋。宋人使乐婴齐告急于晋，晋侯欲救之。伯宗曰：“不可，古人有言曰‘虽鞭之长，不及马腹’。天方授楚，未可与争。虽晋之强，能违天乎？谚曰：‘高下在心，川泽纳污，山薮藏疾，瑾瑜匿瑕。’国君含垢，天之道也，君其待之。”乃止。</span><br><span class="line">                ——《左传·宣公十五年》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    山薮(sǒu)：山深林密的地方。瑾瑜：美玉。“川泽纳污，山薮藏疾，瑾瑜匿瑕”的意思是：江河湖泽会容纳污水，深山密林会藏瘴疠之气，美玉也会藏有瑕疵。比喻伟大美好的事物也会有不尽如人意的一面，不可能尽善尽美。</span><br><span class="line">    《汉书·贾邹枚路传》：</span><br><span class="line">    臣闻乌鸢之卵不毁，而后凤凰集；诽谤之罪不诛，而后良言进。故古人有言：“山薮藏疾，川泽纳污，瑾瑜匿恶，国君含诟。”唯陛下除诽谤以招切言，开天下之口，广箴谏之路，扫亡秦之失，尊文武之德，省法制，宽刑罚，以废治狱，则太平之风可兴于世，永履和乐，与天亡极，天下幸甚。</span><br><span class="line">    国平《制度机制是贯彻群众路线的重要保障》：</span><br><span class="line">    中国共产党自建党以来，极为重视自身建设，很早就提出了“三大作风”，把群众路线放在特别突出的位置。然而，“川泽纳污，山薮藏疾，瑾瑜匿瑕”，一支庞大的队伍在长期的斗争中难免有理想丧失、斗志颓唐、精神松懈的落伍者，“四风”问题的出现也不可避免。</span><br><span class="line">【名句·出处】</span><br><span class="line">    任重道远者，不择地而息；家贫亲老者，不择官而仕。（《韩诗外传》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    曾子仕于莒，得粟三秉，方是之时，曾子重其禄而轻其身；亲没之后，齐迎以相，楚迎以令尹，晋迎以上卿，方是之时，曾子重其身而轻其禄。怀其宝而迷其国者，不可与语仁；窘其身而约其亲者，不可与语孝；任重道远者，不择地而息；家贫亲老者，不择官而仕。故君子桥褐趋时，当务为急。</span><br><span class="line">                ——韩婴《韩诗外传》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    意思是：负担重、路途远的人，不选择地方就会休息；家里贫穷、双亲又年老的人，不选择官职就应出仕。</span><br><span class="line">    也就是说君子修身齐国治国平天下，要分得出轻重缓急，不可固守教条。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    不仁之至忽其亲，不忠之至倍其君，不信之至欺其友。（《韩诗外传》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    传曰：不仁之至忽其亲，不忠之至倍其君，不信之至欺其友。此三者、圣王之所杀而不赦也。《诗》曰：“人而无礼，不死何为！”</span><br><span class="line">                ——韩婴《韩诗外传》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    至：极点。忽：忽视。倍：同“背”。</span><br><span class="line">    最不仁的行为是忽视自己的双亲，最不忠的行为是背叛自己的君主，最不信的行为是欺骗自己的朋友。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    喜名者必多怨，好与者必多辱。（《韩诗外传》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    传曰：喜名者必多怨，好与者必多辱，唯灭迹于人，能随天地自然，为能胜理，而无爱名；名兴则道不用，道行则人无位矣。夫利为害本，而福为祸先，唯不求利者为无害，不求福者为无祸。《诗》曰：“不忮不求，何用不臧。”</span><br><span class="line">                ——韩婴《韩诗外传》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    与：赞许。</span><br><span class="line">    贪图名声的人一定会招致许多怨恨，喜好赞许的人一定会招致许多羞辱。</span><br><span class="line">    这是富于哲理的一句话，顺其自然才是正道，违情背理的行为其结果往往适得其反。</span><br><span class="line">【释义·点评】</span><br><span class="line">    意思是：刚洗完头的人一定会掸一掸帽子，刚洗完澡的人一定会抖一抖衣裳。比喻不愿以洁净的身心，蒙受外界的尘污。</span><br><span class="line">    韩婴《韩诗外传》：</span><br><span class="line">    传曰：君子洁其身而同者合焉，善其音而类者应焉。马鸣而马应之，牛鸣而牛应之，非知也，其势然也。故新沐者必弹冠，新浴者必振衣，莫能以己之皭皭，容人之混污然。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    剑虽利，不厉不断；材虽美，不学不高。（《韩诗外传》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    剑虽利，不厉不断；材虽美，不学不高。虽有旨酒嘉淆，不尝，不知其旨；虽有善道，不学，不达其功。故学然后知不足，教然后知不究。不足，故自愧而勉，不究、故尽师而熟。由此观之，则教学相长也。</span><br><span class="line">                ——韩婴《韩诗外传》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    厉：通“砺”，磨。材：资质。</span><br><span class="line">    剑虽然很锋利，不磨就不能砍断东西；资质虽然很好，不学习就不能提高才能。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    君子学以聚之，问以辩之，宽以居之，仁以行之。（《周易·䷀乾·文言》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    君子学以聚之，问以辩之，宽以居之，仁以行之。《易》曰“见龙在田、利见大人”，君德也。</span><br><span class="line">                ——《周易·䷀乾·文言》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    辩：通“辨”，辨别。居：居位；指当下自己的位置。君子通过学习积累知识，通过问询辨别疑难，以宽恕厚道之心居位，用仁爱之心行事。“乾”卦为天道刚健，自强不息之象，“君子学以聚之，问以辩之，宽以居之，仁以行之”，意在表明君子应蓄学养德，以备“飞龙在天”之用。</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    居上位而不骄，在下位而不忧。（《周易·䷀乾·文言》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    九三曰：“君子终日乾乾、夕惕若厉，无咎。”何谓也？子曰：“君子进德修业，忠信，所以进德也，修辞立其诚，所以居业也。知至至之，可与几也，知终终之，可与存义也。是故居上位而不骄，在下位而不忧，故乾乾因其时而惕，虽危无咎矣。”</span><br><span class="line">                ——《周易·䷀乾·文言》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    处在尊贵的位置而不骄傲，处在卑微的位置而不忧愁。“居上位而不骄，在下位而不忧”，体现的是儒家“用之则行，舍之则藏”的处世态度</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    君子终日乾乾，夕惕若，厉，无咎。（《周易·䷀乾》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    九三：君子终日乾乾，夕惕若厉，无咎。</span><br><span class="line">                ——《周易·䷀乾》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    乾乾：自强不息貌。惕：小心谨慎。厉：危险。咎：凶。</span><br><span class="line">    意思是：君子整天自强不息，夜晚也小心谨慎若处险境，就不会有凶灾。</span><br><span class="line">（杨新华 释评）</span><br><span class="line"></span><br><span class="line">    夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。（《周易·䷀乾·文言》）</span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    劳而不伐，有功而不德，厚之至也。（《周易·系辞上》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    “劳谦君子，有终吉。”子曰：“劳而不伐，有功而不德，厚之至也，语以其功下人者也。德言盛，礼言恭，谦也者，致恭以存其位者也。”</span><br><span class="line">                ——《周易·系辞上》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    劳：劳苦。伐：夸耀。不德：不自以为有恩德。厚：敦厚。至：极点。</span><br><span class="line">    辛劳而不夸耀，有功绩而不自以为是恩德，这是敦厚的极致境界。</span><br><span class="line">    赵炎《辽兴宗曾因吃菜汤泡饭取消御驾亲征》：</span><br><span class="line">    就为官而言，张俭身上的闪光点确乎不少，毕生廉洁自不在话下，能够“劳而不伐，有功而不德”，心系社稷，造福百姓，这种实干精神与实干意识，当得起一代贤相之名。</span><br><span class="line"></span><br><span class="line">原文·语境】</span><br><span class="line">    九三：劳谦，君子有终，吉。</span><br><span class="line">    象传：劳谦君子，万民服也。</span><br><span class="line">                ——《周易·䷎谦》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    意思是：勤劳而谦虚的君子，民众都会敬重服从他。</span><br><span class="line">    “劳谦君子，万民服也”，道出了领导者应该具有的基本素质，即勤劳而又谦逊，才能赢得民众的真诚拥戴和服从</span><br><span class="line">【名句·出处】</span><br><span class="line">    乱之所生也，则言语以为阶。（《周易·系辞上》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    “不出户庭，无咎。”子曰：“乱之所生也，则言语以为阶。君不密，则失臣；臣不密，则失身；几事不密，则害成。是以君子慎密而不出也。”</span><br><span class="line">                ——《周易·系辞上》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    阶：凭借。祸乱产生的原由，就是把说话当作凭借的。也就是说，“祸从口出”，所以君子应该保持一种“慎密”状态，“不出户庭”就不会有过失</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【名句·出处】</span><br><span class="line">    时止则止，时行则行，动静不失其时，其道光明。（《周易·䷳艮·彖传》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    艮，止也。时止则止，时行则行，动静不失其时，其道光明。艮其止，止其所也。上下敌应，不相与也。是以不获其身，行其庭不见其人，无咎也。</span><br><span class="line">                ——《周易·䷳艮·彖传》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    时：时间，时机。道：道路，前途。在该停止的时间就停止，在该行动的时间就行动，行动静止都掌握好时机，这样所走的道路就是光明的。</span><br><span class="line">    李凯《苟利于民，不必法古；苟周于事，不必循俗》：</span><br><span class="line">    变要看准时机，并不是所有时机都适合变。所以古人又提出了“时”的概念。《周易》“艮”卦《彖》言“时止则止，时行则行”，只有“动静不失其时”，才能前途光明。</span><br><span class="line">    王彬《北京建城历史：布局规划与井田制密切相关》：</span><br><span class="line">    光熙门，东垣北门，艮卦。《周易》：“艮，止也。时止则止，时行则行，动静不失其时，其道光明。”熙，与光同意，有天光之象。日光来自东方，亦有生长意，与西北肃清门相对。</span><br><span class="line">名句·出处】</span><br><span class="line">    不恒其德，或承之羞，（《周易·䷟恒》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    九三：不恒其德，或承之羞，贞吝。</span><br><span class="line">    象传:不恒其德，无所容也。</span><br><span class="line">                ——《周易·䷟恒》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    恒：保持，守常。承：承受，遭受。不能恒守德行的人，或许会受到羞辱。九三属于阳爻居刚位，会出现躁动盲进、守恒不终的情况，“凡无恒者，皆不能保其德”，不能长久地保持自己的美德，有时就会蒙受羞辱。</span><br><span class="line">    《论语·子路》：</span><br><span class="line">    子曰：“南人有言曰：‘人而无恒，不可以作巫医。’善夫！”“不恒其德，或承之羞。”子曰：“不占而已矣。”</span><br><span class="line">【名句·出处】</span><br><span class="line">    三人行，则损一人；一人行，则得其友。（《周易·䷨损》）</span><br><span class="line">【原文·语境】</span><br><span class="line">    六三：三人行，则损一人；一人行，则得其友。</span><br><span class="line">                ——《周易·䷨损》节选</span><br><span class="line">【释义·点评】</span><br><span class="line">    三个人同行，就会有一人被排斥；一个人独行，就会遇到朋友。</span><br><span class="line">    “三人行，则损一人；一人行，则得其友”，揭示了人性的弱点：人多则相疑，故三人做事必有一人被“损”；但人又是群居动物，耐不得孤独，故一人做事，就希望找个伴，就容易得到朋友。</span><br><span class="line">    “三人行，则损一人；一人行，则得其友”也可理解为是讲阴阳平衡的男女关系：两个同性一个异性，就会有一个同性离开；独自一人就会遇到自己的异性配偶。</span><br><span class="line">    《周易·系辞下》：</span><br><span class="line">    子曰：“颜氏之子，其殆庶几乎？有不善未尝不知，知之未尝复行也。易曰：‘不远复，无祇悔，元吉。’”</span><br><span class="line">    “天地絪縕，万物化醇，男女构精，万物化生，易曰：‘三人行，则损一人；一人行，则得其友。’言致一也。”</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 格言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列X 项目</title>
      <link href="2020/01/01/redis_x/"/>
      <url>2020/01/01/redis_x/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/050.jpg" width=80% /><span class='geyan'>纸上得来终觉浅，绝知此事要躬行——出自《冬夜读书示子聿》，作者陆游</span><a id="more"></a><p>本着学以致用的原则，设想一个场景，把redis相关用法汇总到一个项目中，达到灵活运用的目标。</p><ol><li>位图适合打卡</li><li>有序集合适合排序、评论、成绩</li><li>限流</li><li>geo查找附近的人</li><li>消息队列，发送短信</li><li>锁，争抢资源，redis 抢红包 ：<a href="http://c.biancheng.net/view/4544.html" target="_blank" rel="noopener">http://c.biancheng.net/view/4544.html</a></li><li>秒杀、红包 <a href="https://github.com/Heroicai0101/seckill/blob/master/seckill-api/src/main/resources/lua/seckill/cancel_reduce.lua" target="_blank" rel="noopener">https://github.com/Heroicai0101/seckill/blob/master/seckill-api/src/main/resources/lua/seckill/cancel_reduce.lua</a></li></ol><p>[参考]<br><a href="https://blog.csdn.net/qq_36850813/article/details/89641846" target="_blank" rel="noopener">egg结合sequelize–模型定义中去除 createAt、updateAt字段，驼峰</a><br><a href="https://segmentfault.com/a/1190000003987871" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003987871</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列X 项目</title>
      <link href="2020/01/01/redis_x/"/>
      <url>2020/01/01/redis_x/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/052.jpg" width=80% /><span class='geyan'>纸上得来终觉浅，绝知此事要躬行——出自《冬夜读书示子聿》，作者陆游</span><a id="more"></a><ol><li>传值</li><li>dva用法<ol><li>models问题</li><li>ts生成问题</li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机--Chrome使用</title>
      <link href="2019/06/15/useChrome/"/>
      <url>2019/06/15/useChrome/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/004.jpg" width=80% /><p>只有两样东西可能是无限的: 宇宙的大小和人类的愚蠢。不过, 对于前者我不太确定 :)<br>——爱因斯坦</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img data-src="15606166007495.jpg?200x200" alt="-w204"></p><p><img data-src="digital-transformation-in-50-soundbites-19-638.jpg" alt="digital-transformation-in-50-soundbites-19-638-w319"></p><p><strong>目标</strong></p><p>以更高效的方式去领略人类的智慧。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>除了程序员以外，好像没有别的行业，流行分享自己的知识</strong>。相反的，这个世界上大部分行业，强调的都是保密，千万不能让别人知道我的独家信息和知识。</p><p>由此看来，<strong>程序员世界的开源和分享，其实是例外</strong>。正常情况下，这些东西都应该是标价出售的，花了钱才能拿到手。</p><p>经济学有一个假定，每个人都是自私的，追求自己的利益最大化，从而才能让这个世界变得有效率。那么，当我们鼓励开源和分享的时候，可不可以说我们正在做一件反人性的事情呢？[摘录自：<a href="http://www.ruanyifeng.com/blog/2019/05/weekly-issue-57.html" target="_blank" rel="noopener">阮一峰技术博客</a>]</p><blockquote><p>知识是无价的，每个人都应该有平等的权利去享用教育资源</p></blockquote><p>对于浏览器，强烈推荐正版<strong>firefox</strong>其次 <strong>chrome</strong>，没有别的了。</p><p>还没从chrome转换成firefox,使用方法都类似，就写chrome了，该文<code>不涉及技术实现</code>,只叙述<code>使用方法</code>;</p><p>本文没有先后顺序，可任意跳转查看</p><blockquote><p>每个人有权利获取有效的信息<br>爱学习的人是幸运的，送给你们</p></blockquote><h3 id="第一部分-基本使用"><a href="#第一部分-基本使用" class="headerlink" title="第一部分 基本使用"></a>第一部分 基本使用</h3><p><img data-src="15605977689367.jpg" alt="-w1141"></p><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h4><p><a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">首推官网下载</a>。如果访问不了，相信百度还是可以访问的，虽说有点不尽人意。。。</p><h4 id="2-基本配置-使用"><a href="#2-基本配置-使用" class="headerlink" title="2. 基本配置/使用"></a>2. 基本配置/使用</h4><p>试想你买回来个手机，虽说电话、短信、音乐等基本功能已经可供使用，似乎是不言而喻的东西。也正是这些不言而喻的东西，才让你再使用的时候自然而然。</p><blockquote><p>为了那些自然而然，从0开始认识她吧<br>她提供给你可能远超你所想到的。 </p></blockquote><p><img data-src="15605986047101.jpg" alt="-w500"> </p><p><img data-src="15605989584660.jpg" alt="-w500"></p><p><img data-src="15605994447444.jpg" alt="-w500"></p><blockquote><p><strong>安全是相对的。</strong></p></blockquote><p><img data-src="15606003797177.jpg" alt="-w600"></p><p>到此已经把浏览器的各种设置罗列，如需满足需求，找到相应的地方更改即可。<br><strong>接下来是如何有效的搜索。</strong></p><h3 id="第二部分-高效的搜索"><a href="#第二部分-高效的搜索" class="headerlink" title="第二部分 高效的搜索"></a>第二部分 高效的搜索</h3><p>该部分主要针对搜索技巧的汇总，整理了个思维导图，然后对相应的技巧进行实例化、场景化解释。这又是<strong>长长长长长的一篇文章</strong></p><p><img data-src="%E6%90%9C%E7%B4%A2%E6%98%AF%E9%97%A8%E8%89%BA%E6%9C%AF.png" alt="搜索是门艺术"></p><h4 id="1-指令类"><a href="#1-指令类" class="headerlink" title="1. 指令类"></a>1. 指令类</h4><blockquote><p>不要忘了，页面中搜索关键字—-cmd/ctrl+f</p></blockquote><h5 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h5><h6 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h6><p><img data-src="15606070892238.jpg" alt=""></p><p><img data-src="15606071440188.jpg" alt=""></p><p><img data-src="15606071858867.jpg" alt=""></p><h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><p><img data-src="15606074332900.jpg" alt="-w300"></p><p><img data-src="15606074698417.jpg" alt="-w300"><br><img data-src="15606075069026.jpg" alt="-w300"></p><h5 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h5><p><img data-src="15606078626881.jpg" alt="-w400"><br><img data-src="15606079520059.jpg" alt="-w400"></p><p><img data-src="15606082742367.jpg" alt="-w400"><br><img data-src="15606083219251.jpg" alt="-w400"></p><p>在标题中搜索</p><p><img data-src="15606084266580.jpg" alt="-w400"></p><p>在指定URL【统一资源定位符】对应的内容中找【关键字】<br><img data-src="15606086652706.jpg" alt="-w400"></p><h4 id="2-搜索技巧"><a href="#2-搜索技巧" class="headerlink" title="2. 搜索技巧"></a>2. 搜索技巧</h4><h5 id="搜索思维"><a href="#搜索思维" class="headerlink" title="搜索思维"></a>搜索思维</h5><blockquote><p>不论你用不用，资源都在那里</p><p>这一块只是引导类</p></blockquote><p>如何搜到所需内容，需要的不仅是基本技巧【前面部分内容】，还需要<strong>思考发布者是如何思考的</strong>，他的思考<code>决定了</code>使用哪些的<strong>关键字、语句、分词</strong>。</p><p>发布者总会采用<strong>标题党</strong>的套路,如：</p><p><img data-src="15606091535164.jpg" alt=""></p><p>最近在学Python，寻思着总会有人做总结、思维导图之类的，就可以搜索<code>python学习</code> 选择<strong>image</strong></p><p>看，全都是，找几个好点的，照着学就是了<strong>just do it</strong><br><img data-src="15606093683902.jpg" alt=""></p><p>还有搜索，可以切换中英文去搜，对吧✅</p><blockquote><p>好了，到此为止，搜索的技巧基本结束了</p></blockquote><p><strong>类似于如下这种操作</strong></p><p><img data-src="15606095648889.jpg" alt=""></p><p>但是不能<code>知其然不知其所以然</code>，只会用接下来的工具。</p><p><img data-src="15606097550656.jpg" alt=""></p><h5 id="工具网址推荐"><a href="#工具网址推荐" class="headerlink" title="工具网址推荐"></a>工具网址推荐</h5><blockquote><p>终于进入智人时代了。</p><p>点点鼠标就行了。。</p></blockquote><p>百宝箱—<a href="http://www.miguyu.com/" target="_blank" rel="noopener">咪咕鱼</a><br><img data-src="15606103935215.jpg" alt="-w400"></p><p>Mac工具下载—<a href="https://xclient.info/" target="_blank" rel="noopener">精品Mac应用</a><br>美剧—-<a href="http://www.zmz2019.com/" target="_blank" rel="noopener">YYeTs 人人影视字幕组</a></p><p>电子书—-<a href="https://bookset.me/4983.html" target="_blank" rel="noopener">六千本电子书📚。。。</a><br><img data-src="15606104541759.jpg" alt=""></p><h3 id="第三部分-插件"><a href="#第三部分-插件" class="headerlink" title="第三部分 插件"></a>第三部分 插件</h3><p>交了钱，车漏不<code>漏油</code>不知道，反正是可以开回家了。</p><blockquote><p>此时，拿了驾照、读过说明书。你就是<code>司机</code>了。</p></blockquote><p>和<code>老司机</code>相比，区别可能是<code>技巧、装备</code>；<br>和<code>大神</code>相比，区别是：<code>民科</code>与<strong>科班</strong></p><p><strong>不可能把所有的插件都罗列，再次罗列一些常用的</strong></p><p>装备达到一定程度就是累赘了，<strong>如果家大业大，请随意</strong></p><p><img data-src="15606127596203.jpg" alt="-w250"></p><h4 id="1-安装方式"><a href="#1-安装方式" class="headerlink" title="1.安装方式"></a>1.安装方式</h4><h5 id="官方安装"><a href="#官方安装" class="headerlink" title="官方安装"></a>官方安装</h5><p>建议直接上<a href="https://chrome.google.com/webstore/category/extensions?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">chrome 网上应用店</a>进行下载相关插件，Firefox也有类似的商店</p><p><img data-src="15606114775300.jpg" alt=""></p><p>直接点击相应的下载安装即可。</p><h5 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h5><p>针对打不开第一种方式的，可以参考<a href="http://www.cnplugins.com/" target="_blank" rel="noopener">插件网</a>，</p><blockquote><p>步骤：</p></blockquote><ol><li>下载</li><li>打开chrome拓展程序</li><li>拖插件到浏览器</li></ol><p><img data-src="15606117112223.jpg" alt="-w400"></p><p><strong>还得提交验证码。。。</strong></p><h4 id="2-插件推荐"><a href="#2-插件推荐" class="headerlink" title="2.插件推荐"></a>2.插件推荐</h4><p>默认为官方链接，也可以在3.1.2对应的网址中搜索相应的名字</p><h5 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h5><p>1.去广告<a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener">Adblock Plus</a></p><p><img data-src="15606123732369.jpg" alt=""></p><p>2.下载器—<a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn/reviews" target="_blank" rel="noopener">Chrono下载管理器</a></p><p><img data-src="15606123265811.jpg" alt=""></p><p>3.新标签页面风景图—<a href="https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn" target="_blank" rel="noopener">远方 New Tab</a></p><p><img data-src="15606124466544.jpg" alt=""></p><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><p>1.网页截图—<a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg" target="_blank" rel="noopener">FireShot</a></p><p><img data-src="15606123438949.jpg" alt=""></p><p>2.标签整理—-<a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="noopener">oneTab</a></p><p><strong>省内存小能手</strong></p><p><img data-src="15606125863364.jpg" alt=""></p><p>3.英语翻译—-<a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg?hl=en" target="_blank" rel="noopener">沙拉查词-聚合词典划词翻译</a></p><p><img data-src="15606128832337.jpg" alt=""></p><blockquote><p>先分享这几个吧</p></blockquote><h3 id="第四部分-油候"><a href="#第四部分-油候" class="headerlink" title="第四部分 油候"></a>第四部分 油候</h3><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h4><h5 id="油候"><a href="#油候" class="headerlink" title="油候"></a>油候</h5><p><strong>某文库、解除某云限制、VIP视频、蚊香高清音乐。。。。</strong></p><p>这是令人苦恼却不得不面对的问题，只不过你没学会用浏览器而已。</p><p>【油猴脚本】就是一个<strong>浏览器插件</strong>，它本身也可以添加很多<strong>不同的脚本。</strong></p><p>chrome地址—-<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a>。也可以第三方搜索下载</p><p><img data-src="15606133501778.jpg" alt=""></p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><p>这个是插件，但插件内部还需下载脚本。</p><p>这个是脚本商店—-<a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">greasyfork</a></p><p><img data-src="15606135370111.jpg" alt=""></p><h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><p>主要就是对网页数据进行相应的操作，比如插件可以屏蔽广告，脚本也可以。</p><blockquote><p>注释：不能保证每个插件、脚本都安全。</p></blockquote><p><img data-src="15606141541781.jpg" alt=""></p><h4 id="2-推荐脚本"><a href="#2-推荐脚本" class="headerlink" title="2.推荐脚本"></a>2.推荐脚本</h4><p>直接截个图吧，因为名字就是功能。</p><p><img data-src="15606161539539.jpg" alt=""></p><blockquote><p>特别喜欢的一个两个：<strong>豆瓣的、汇总</strong></p></blockquote><p><img data-src="15606157139291.jpg" alt=""></p><p><strong>怎么用</strong></p><ol><li>点击安装；</li><li>刷新网页</li><li>找到新增的标签即可</li></ol><p><img data-src="15606164981912.jpg" alt=""><br><img data-src="15606165328233.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模块系列之--模块与包【18】</title>
      <link href="2019/06/10/useChrome/"/>
      <url>2019/06/10/useChrome/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/005.jpg" width=80% /><p>真正的无知不是知识的贫乏, 而是拒绝获取知识!<br>——波普尔 (哲学家 思想家)</p><a id="more"></a><p>[toc]</p><p>##目标</p><ul><li>掌握常用的文件目录操作</li><li>学习with关键字</li><li>练习题</li></ul><h3 id="第一部分-os模块"><a href="#第一部分-os模块" class="headerlink" title="第一部分 os模块"></a>第一部分 os模块</h3><p>os模块是Python标准库中的一个用于访问操作系统相关功能的模块，os模块提供了一种可移植的使用操作系统功能的方法。</p><h4 id="1-os模块的主要功能："><a href="#1-os模块的主要功能：" class="headerlink" title="1. os模块的主要功能："></a>1. os模块的主要功能：</h4><ol><li>系统相关</li><li>目录及文件操作</li><li>执行命令和管理进程</li></ol><h4 id="2-文件及目录相关"><a href="#2-文件及目录相关" class="headerlink" title="2. 文件及目录相关"></a>2. 文件及目录相关</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>os.mkdir</td><td>创建目录</td></tr><tr><td>os.rmdir</td><td>删除目录</td></tr><tr><td>os.rename</td><td>重命名</td></tr><tr><td>os.remove</td><td>删除文件</td></tr><tr><td>os.getcwd</td><td>获取当前工作路径</td></tr><tr><td>os.walk</td><td>遍历目录</td></tr><tr><td>os.path.join</td><td>连接目录与文件名</td></tr><tr><td>os.path.split</td><td>分割文件名与目录</td></tr><tr><td>os.path.abspath</td><td>获取绝对路径</td></tr><tr><td>os.path.dirname</td><td>获取路径</td></tr><tr><td>os.path.basename</td><td>获取文件名或文件夹名</td></tr><tr><td>os.path.splitext</td><td>分离文件名与扩展名</td></tr><tr><td>os.path.isfile</td><td>判断给出的路径是否是一个文件</td></tr><tr><td>os.path.isdir</td><td>判断给出的路径是否是一个目录</td></tr></tbody></table><p>背诵这种真的没啥意义，不如来个实例记得快些。网上找了个实例，来源<a href="https://blog.csdn.net/weixin_44251129/article/details/87449170" target="_blank" rel="noopener">python 文件操作练习题</a>, 稍加改动，<strong>还有bug</strong>，但包含了一些常用的方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pylint: disable=no-member</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    mulu = input(<span class="string">'请输入目录：'</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(mulu):  <span class="comment"># 判断是否存在此目录</span></span><br><span class="line">        os.chdir(mulu)  <span class="comment"># 改变当前脚本工作目录；相当于shell下cd</span></span><br><span class="line">        ret = os.listdir(os.getcwd())  <span class="comment"># 打印出此目录的所有文件</span></span><br><span class="line">        print(ret)</span><br><span class="line">        lst1 = []</span><br><span class="line">        lst2 = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(i):  <span class="comment"># 判断是否是文件</span></span><br><span class="line">                lst1.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lst2.append(i)</span><br><span class="line">        print(<span class="string">'文件：%s'</span> % lst1)</span><br><span class="line">        print(<span class="string">'文件夹：%s'</span> % lst2)</span><br><span class="line">        ret1 = input(<span class="string">'请选择操作：全部文件添加前缀（a） 全部删除前缀(s) 添加文件(d) 删除文件(f) 单个文件重命名(g):'</span>)</span><br><span class="line">        <span class="keyword">if</span> ret1.upper() == <span class="string">'A'</span>:</span><br><span class="line">            a = input(<span class="string">'请输入所要添加的前缀：'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> ret:  <span class="comment"># 便利所有文件，</span></span><br><span class="line">                os.rename(i, a + i)  <span class="comment"># 使用字符串拼接，添加前缀</span></span><br><span class="line">            print(<span class="string">'添加成功'</span>)</span><br><span class="line">        <span class="keyword">elif</span> ret1.upper() == <span class="string">'S'</span>:</span><br><span class="line">            a = input(<span class="string">'请输入所要删除的前缀：'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">                os.rename(i, i.replace(a, <span class="string">''</span>, <span class="number">1</span>))</span><br><span class="line">            print(<span class="string">'删除前缀成功'</span>)</span><br><span class="line">        <span class="keyword">elif</span> ret1.upper() == <span class="string">'D'</span>:</span><br><span class="line">            file_name = input(<span class="string">'请输入所要添加文件名称：'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(file_name, mode=<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            print(<span class="string">'添加文件成功'</span>)</span><br><span class="line">        <span class="keyword">elif</span> ret1.upper() == <span class="string">'F'</span>:</span><br><span class="line">            del_name = input(<span class="string">'请输入所要删除的文件名：'</span>)</span><br><span class="line">            os.remove(del_name)</span><br><span class="line">            print(<span class="string">'删除文件成功'</span>)</span><br><span class="line">        <span class="keyword">elif</span> ret1.upper() == <span class="string">'G'</span>:</span><br><span class="line">            name = input(<span class="string">'请输入原始文件名[old name]:'</span>)</span><br><span class="line">            <span class="keyword">if</span> name.strip() == <span class="string">''</span>:</span><br><span class="line">                name = input(<span class="string">'不可为空，请输入原始文件名[old name]:'</span>)</span><br><span class="line"></span><br><span class="line">            newName = input(<span class="string">'请输入新的文件名[new name]:'</span>)</span><br><span class="line">            <span class="keyword">if</span> newName.strip() == <span class="string">''</span>:</span><br><span class="line">                newName = input(<span class="string">'不可为空，请输入新的文件名[old name]:'</span>)</span><br><span class="line"></span><br><span class="line">            os.rename(name, newName)</span><br><span class="line">            print(<span class="string">'修改成功'</span>)</span><br><span class="line">        os.chdir(<span class="string">'..'</span>)  <span class="comment"># 留在当前目录 以防输入两次文件夹名称报错</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'输入有误，请重新输入'</span>)</span><br></pre></td></tr></table></figure><h3 id="第二部分-with关键字"><a href="#第二部分-with关键字" class="headerlink" title="第二部分 with关键字"></a>第二部分 with关键字</h3><blockquote><p>第一部分中的with究竟是什么意思？为何要用with呢？</p></blockquote><p>pyhton2.5中加入<code>with</code>, 常用来替换<code>try ... except ... finally ...</code>.</p><p>我们采用事务链接时，会着这样判断</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.begin()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># do some actions</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    db.commit()</span><br></pre></td></tr></table></figure><p>如果将发起事务请求的操作变成可以支持with关键字的，那么用像这样的代码就可以了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> transaction(db):</span><br><span class="line">    <span class="comment"># do some actions</span></span><br></pre></td></tr></table></figure><p>第一部分的<code>with</code>就是保证读取文件内容时，不论出现什么意外，都保证最终关闭。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br></pre></td></tr></table></figure><h4 id="with-的一般执行过程"><a href="#with-的一般执行过程" class="headerlink" title="with 的一般执行过程"></a>with 的一般执行过程</h4><p>一段基本的with表达式，其结构是这样的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> EXPR <span class="keyword">as</span> VAR:</span><br><span class="line">    BLOCK</span><br></pre></td></tr></table></figure><p>其中：EXPR可以是任意表达式；as VAR是可选的。其一般的执行过程是这样的：</p><ol><li>计算EXPR，并获取一个上下文管理器。</li><li>上下文管理器的<strong>exit()</strong>方法被保存起来用于之后的调用。</li><li>调用上下文管理器的<strong>enter()</strong>方法。</li><li>如果with表达式包含as VAR，那么EXPR的返回值被赋值给VAR。</li><li>执行BLOCK中的表达式。</li><li>调用上下文管理器的<strong>exit()</strong>方法。如果BLOCK的执行过程中发生了一个异常导致程序退出，那么异常的type、value和traceback(即sys.exc_info()的返回值)将作为参数传递给<strong>exit()</strong>方法。否则，将传递三个None。</li></ol><h4 id="实现类似的with过程"><a href="#实现类似的with过程" class="headerlink" title="实现类似的with过程"></a>实现类似的with过程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">transaction</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, db)</span>:</span></span><br><span class="line">        self.db = db</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.db.begin()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            db.commit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            db.rollback()</span><br></pre></td></tr></table></figure><p>基于装饰器的方法或更相信教程可参考<a href="http://yuez.me/python-zhong-de-guan-jian-zi-with-xiang-jie/" target="_blank" rel="noopener">Python 中的关键字with详解</a></p><h3 id="第三部分-习题"><a href="#第三部分-习题" class="headerlink" title="第三部分 习题"></a>第三部分 习题</h3><p>狗东二面笔试题</p><ol><li>生成一个大文件ips.txt,要求1200行，每行随机为172.25.254.0/24段的ip;</li><li>读取ips.txt文件统计这个文件中ip出现频率排前10的ip;</li></ol><p><strong>分析</strong></p><ol><li>172.25.254.0/24，前24位为网络号，后八位为主机号，[0-255)；</li><li>1200行，写入ips.txt文件</li><li>统计次数，抽出前十条</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_ip_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># 172.25.254.[0,255)</span></span><br><span class="line">    ip = [<span class="string">'172.25.254.'</span> + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">255</span>)]</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># print(random.sample(ip,1))</span></span><br><span class="line">        <span class="comment"># 随机从数组中取第一个</span></span><br><span class="line">        [f.write(random.sample(ip, <span class="number">1</span>)[<span class="number">0</span>] + <span class="string">'\n'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1200</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_ip_file(<span class="string">'ips.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted_by_ip</span><span class="params">(filename, count=<span class="number">10</span>)</span>:</span></span><br><span class="line">    ips_dict = dict()</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> ip <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> ip <span class="keyword">in</span> ips_dict:</span><br><span class="line">                ips_dict[ip] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ips_dict[ip] = <span class="number">1</span></span><br><span class="line">    print(ips_dict.items())</span><br><span class="line">    sorted_ip = sorted(</span><br><span class="line">        ips_dict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[:count]</span><br><span class="line">    <span class="keyword">return</span> sorted_ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sorted_by_ip(<span class="string">'ips.txt'</span>))</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">'172.25.254.49\n'</span>, <span class="number">14</span>), (<span class="string">'172.25.254.80\n'</span>, <span class="number">12</span>), (<span class="string">'172.25.254.172\n'</span>, <span class="number">11</span>), (<span class="string">'172.25.254.65\n'</span>, <span class="number">11</span>), (<span class="string">'172.25.254.45\n'</span>, <span class="number">10</span>), (<span class="string">'172.25.254.30\n'</span>, <span class="number">10</span>), (<span class="string">'172.25.254.8\n'</span>, <span class="number">10</span>), (<span class="string">'172.25.254.196\n'</span>, <span class="number">9</span>), (<span class="string">'172.25.254.53\n'</span>, <span class="number">9</span>), (<span class="string">'172.25.254.121\n'</span>, <span class="number">9</span>)]</span><br></pre></td></tr></table></figure><p>参考<br><a href="http://yuez.me/python-zhong-de-guan-jian-zi-with-xiang-jie/" target="_blank" rel="noopener">Python 中的关键字with详解</a><br><a href="https://blog.csdn.net/weixin_40543283/article/details/87538401" target="_blank" rel="noopener">python文件操作练习题</a></p>]]></content>
      
      
      <categories>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> sys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络系列之IP地址相关计算【1】</title>
      <link href="2019/06/06/index/"/>
      <url>2019/06/06/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>温故知新<br>推荐一本书 —《网络是怎样连接的》</p><blockquote><p>本系列为学习该书📚的学习汇总</p></blockquote><blockquote><p>同时会包含一些补充</p></blockquote><blockquote><p>完整内容可购买阅读相关该📚</p></blockquote></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>回顾 HTTP 请求消息</li><li>掌握 ip地址、子网掩码、子网的计算</li></ul><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img data-src="1.jpg" alt="目录"></p><blockquote><p>接下来会围绕第一章进行学习</p></blockquote><p><img data-src="15598029663358.jpg" alt="-w545"></p><h3 id="第一部分-整体概述"><a href="#第一部分-整体概述" class="headerlink" title="第一部分 整体概述"></a>第一部分 整体概述</h3><h4 id="HTTP-请求消息"><a href="#HTTP-请求消息" class="headerlink" title="HTTP 请求消息"></a>HTTP 请求消息</h4><p>URL： Uniform Resource Locator，统一资源定位符。<br>FTP： File Transfer Protocol， 文件传送协议。 这是一种在上传、下载文件时使用的协议。使用 FTP 协议来传送文件的程序也被叫作 FTP。</p><h4 id="常见的URL分类"><a href="#常见的URL分类" class="headerlink" title="常见的URL分类"></a>常见的URL分类</h4><p>日常用的最多的是HTTP： Hypertext Transfer Protocol，超文本传送协议, 但也有其他一些，如下图：<br><img data-src="15598034956658.jpg" alt="-w543"></p><h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><p>HTTP 协议定义了<code>客户端和服务器之间交互的消息内容和步骤</code>。</p><p>大致过程如下，客户端请求，服务器返回相应的数据。</p><p><img data-src="15598039794266.jpg" alt="-w544"></p><p>如何访问服务器中，特定的资源？看下边的URL图解</p><p><img data-src="15598039030172.jpg" alt="-w548"></p><h4 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h4><p>有了整体的大致流程，也有了拆分URL的图解，就看下有哪些方法吧，浏览器访问属于GET.</p><p><img data-src="15598043575873.jpg" alt="-w560"></p><blockquote><p>URI： Uniform Resource Identifier，统一资源标识符。</p></blockquote><p><img data-src="15598053253527.jpg" alt="-w535"><br><img data-src="15598053387188.jpg" alt="-w535"><br><img data-src="15598053724873.jpg" alt="-w551"></p><p><img data-src="15598051510339.jpg" alt="-w2002"></p><h3 id="第二部分-IP地址"><a href="#第二部分-IP地址" class="headerlink" title="第二部分 IP地址"></a>第二部分 IP地址</h3><blockquote><p>该部分摘录自<a href="https://blog.51cto.com/6930123/2112403" target="_blank" rel="noopener">《IP地址详解》</a>，详情请参看原文。</p></blockquote><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><p><strong>IP地址（Internet Protocol Address），缩写为IP Adress</strong>，是一种在Internet上的给主机统一编址的地址格式，也称为网络协议（IP协议）地址。它为互联网上的每一个网络和每一台主机分配一个逻辑地址，常见的IP地址，分为<code>IPv4</code>与<code>IPv6</code>两大类，当前广泛应用的是IPv4，目前IPv4几乎耗尽，下一阶段必然会进行版本升级到IPv6；如无特别注明，一般我们讲的的IP地址所指的是IPv4。</p><p><img data-src="01b93a1d0acac52cc0bd4878696d4098.png" alt="01b93a1d0acac52cc0bd4878696d4098-w473"></p><p>IP地址分<strong>A、B、C、D、E五类</strong>，其中A、B、C这三类是比较常用的IP地址，D、E类为特殊地址。</p><blockquote><p>IP 地址是一串 32 比特的数字，按照 8 比特（1 字节）为一组分成 4 组，分别用十进制表示 然后再用圆点隔开。</p></blockquote><blockquote><p>在计算机二进制中，1个字节 = 8位 = 8bit（比特）</p></blockquote><p><img data-src="15598063874073.jpg" alt="-w375"></p><p><strong>Ip地址汇总</strong></p><p><img data-src="15598087831047.jpg" alt=""></p><blockquote><p><strong>注：</strong> 为何减去2？</p></blockquote><p>在计算机网络中，主机ID全部为<code>0</code>的地址为<code>网络地址</code>，而主机ID全部为<code>1</code>的地址为<code>广播地址</code>，这2个地址是不能分配给主机用的。</p><h4 id="公网和私网IP地址"><a href="#公网和私网IP地址" class="headerlink" title="公网和私网IP地址"></a>公网和私网IP地址</h4><p><code>公网IP地址</code><br>公有地址分配和管理由Inter NIC（Internet Network Information Center 因特网信息中心）负责。各级ISP使用的公网地址都需要向Inter NIC提出申请，有Inter NIC统一发放，这样就能确保地址块不冲突。</p><p><code>私网IP地址</code><br>创建IP寻址方案的人也创建了私网IP地址。这些地址可以被用于私有网络，在Internet没有这些IP地址，Internet上的路由器也没有到私有网络的路由表。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A类：10.0.0.0 255.0.0.0，保留了1个A类网络。</span><br><span class="line">B类：172.16.0.0 255.255.0.0～172.31.0.0 255.255.0.0，保留了16个B类网络。</span><br><span class="line">C类：192.168.0.0 255.255.255.0～192.168.255.0 255.255.255.0，保留了256个C类网络。</span><br><span class="line">PS：私网地址访问Internet需要做NAT或PAT网络地址转换</span><br></pre></td></tr></table></figure><p><img data-src="15598095553143.jpg" alt=""></p><p><img data-src="15598095596202.jpg" alt=""></p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><h5 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h5><p>IP地址在设计时就考虑到<code>地址分配的层次特点</code>，将每个IP地址都分割成<code>网络号</code>和<code>主机号</code>两部分，以便于IP地址的<strong>寻址操作</strong>。</p><blockquote><p>如何确定：IP地址的网络号和主机号各是多少位呢？</p></blockquote><p><strong>那就了解下子网掩码</strong></p><p><a href="https://baike.baidu.com/item/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81#2" target="_blank" rel="noopener">百度百科</a></p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>子网掩码(subnet mask)是每个使用互联网的人必须要掌握的基础知识，只有掌握它，才能够真正理解TCP/IP协议的设置。</p><p>子网掩码——<strong>屏蔽一个IP地址的网络部分的“全1”比特模式</strong>。对于A类地址来说，默认的子网掩码是255.0.0.0；对于B类地址来说默认的子网掩码是255.255.0.0；对于C类地址来说默认的子网掩码是255.255.255.0。<br>利用子网掩码可以把大的网络划分成子网，即VLSM（可变长子网掩码），也可以把小的网络归并成大的网络即超网。</p><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><p>子网掩码的长度也是32位，左边是<code>网络位</code>，用二进制数字“1”表示，<strong>1的数目等于网络位的长度</strong>；右边是<code>主机位</code>，用二进制数字“0”表示，<strong>0的数目等于主机位的长度。</strong></p><p><em>目的</em>： 是为了让掩码与ip地址做按位<code>与</code>运算时用0<strong>遮住原主机数</strong>，而不改变原网络段数字，而且很容易通过0的位数确定子网的主机数</p><h5 id="为何要用子网掩码？"><a href="#为何要用子网掩码？" class="headerlink" title="为何要用子网掩码？"></a>为何要用子网掩码？</h5><blockquote><p>子网掩码可以分离出IP地址中的<code>网络地址</code>和<code>主机地址</code>，那为什么要分离呢？</p></blockquote><p>因为两台计算机要通讯，首先要判断是否处于同一个广播域内，即<code>网络地址是否相同</code>。<br>如果网络地址相同，表明接受方在本网络上，那么可以把数据包直接发送到目标主机，<br>否则就需要路由<code>网关</code>将数据包<code>转发</code>送到目的地。</p><p>设IP地址为192.168.10.2，子网掩码为255.255.255.240，那么子网掩码是怎样来区分网络地址和主机地址的呢。</p><p>主机地址为：0.0.0.2（将掩码取反，然后与运算）</p><h5 id="子网掩码和ip地址的关系"><a href="#子网掩码和ip地址的关系" class="headerlink" title="子网掩码和ip地址的关系"></a>子网掩码和ip地址的关系</h5><blockquote><p>子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">And按位与运算：</span><br><span class="line">与运算是计算机中一种基本的逻辑运算方式，符号表示为&amp;，也可以表示为 and。</span><br><span class="line">参加运算的两个数据，按二进制位进行“与”运算。</span><br><span class="line">运算规则：0&amp;0&#x3D;0；0&amp;1&#x3D;0；1&amp;0&#x3D;0；1&amp;1&#x3D;1；</span><br><span class="line">即：两位同时为“1”，结果才为“1”，否则为0</span><br></pre></td></tr></table></figure><p><img data-src="15598304763666.jpg" alt=""></p><blockquote><p>网络地址计算小技巧：IP地址和子网掩码做与运算，把IP地址的主机位直接归0，就快速得到网络地址。所以只要一看到IP地址和子网掩码，就能马上确认网络地址。</p></blockquote><h5 id="子网掩码的表示方法"><a href="#子网掩码的表示方法" class="headerlink" title="子网掩码的表示方法"></a>子网掩码的表示方法</h5><p>①、点分十进制表示法<br>二进制转换十进制，每8位用点号隔开<br>例如：子网掩码二进制11111111.11111111.11111111.00000000，表示为255.255.255.0</p><p>②、CIDR斜线记法<br>IP地址/n<br>例1：192.168.1.100/24，其子网掩码表示为255.255.255.0，二进制表示为11111111.11111111.11111111.00000000<br>例2：172.16.198.12/20，其子网掩码表示为255.255.240.0，二进制表示为11111111.11111111.11110000.00000000</p><p><strong>不难发现，例1中共有24个１，例2中共有20个１，所以n是这么来的。运营商ISP常用这样的方法给客户分配IP地址。</strong></p><blockquote><p>注：n为1到32的数字，表示子网掩码中网络号的长度，通过n的个数确定子网的主机数=2^(32-n)-2（-2的原因：主机位全为0时表示本网络的网络地址，主机位全为1时表示本网络的广播地址，这是两个特殊地址）。</p></blockquote><p>做子网划分后的IP地址：网络号＋子网号＋子网主机号<br>举个栗子：<br>如：192.168.1.100/25，其子网掩码表示：255.255.255.128</p><h4 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h4><p>子网划分是通过<strong>借用IP地址中若干位【主机地址】来充当子网的【网络地址】，从而将原网络划分为若干子网。</strong></p><p><img data-src="15598306058611.jpg" alt=""></p><p>划分子网时，随着子网地址借用主机位数的增多，子网的数目随之增加，但每个子网中的可用主机数逐渐减少。</p><p>如C类地址，原有8位主机位，2^8-2即254个主机地址，默认子网掩码255.255.255.0。(全0或全1不可用）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">借用1位主机位，产生2^1-2&#x3D;0个子网，每个子网有2^7-2个主机地址；</span><br><span class="line">借用2位主机位，产生2^2-2&#x3D;2个子网，每个子网有2^6-2个主机地址;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h4 id="计算子网掩码"><a href="#计算子网掩码" class="headerlink" title="计算子网掩码"></a>计算子网掩码</h4><h5 id="根据子网数"><a href="#根据子网数" class="headerlink" title="根据子网数"></a>根据子网数</h5><p>根据子网数，计算子网掩码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)将子网数目转化为二进制来表示</span><br><span class="line">2)取得该二进制的位数，为 N</span><br><span class="line">3)取得该IP地址的类子网掩码，将其主机地址部分的前N位置1 即得出该IP地址划分子网的子网掩码。</span><br></pre></td></tr></table></figure><blockquote><p>如欲将B类IP地址168.195.0.0划分成27个子网：</p></blockquote><p>1)27=11011<br>2)该二进制为五位数，<code>N = 5</code><br>3)将B类地址的子网掩码255.255.0.0的主机地址<code>前5位置1</code>（B类地址的主机位包括后两个字节，所以这里要把第三个字节的前5位置1），得到 255.255.248.0<br>即为划分成27个子网的B类IP地址 168.195.0.0的子网掩码（实际上是划成了32-2=30个子网）。</p><p>10101000 11000011 00000000 00000000<br>11111111 11111111 00000000 00000000<br>11111111 11111111 11111000 00000000<br>11111111 11111111 11111000 00000000</p><h5 id="根据主机数"><a href="#根据主机数" class="headerlink" title="根据主机数"></a>根据主机数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 根据主机数计算子网掩码</span><br><span class="line">2. 根据子网掩码计算子网数</span><br><span class="line">3. 根据子网掩码计算主机数</span><br><span class="line">4. 根据子网掩码确定子网络的起止地址</span><br></pre></td></tr></table></figure><h6 id="根据主机数计算子网掩码"><a href="#根据主机数计算子网掩码" class="headerlink" title="根据主机数计算子网掩码"></a>根据主机数计算子网掩码</h6><blockquote><p>把B类地址172.16.0.0划分成若干子网络，每个子网络能容纳500台主机，它的子网掩码是多少？</p></blockquote><p>①把500转换成二进制表示<code>111110100</code><br>②统计一下这个二进制的数共有<code>9位</code><br>③将子网掩码255.255.255.255<strong>从后向前的9位</strong>变成0<br>④这就得到了所要的子网掩码（11111111.11111111.11111110.00000000）<code>255.255.254.0</code>。</p><h6 id="根据子网掩码计算子网数"><a href="#根据子网掩码计算子网数" class="headerlink" title="根据子网掩码计算子网数"></a>根据子网掩码计算子网数</h6><blockquote><p>A类IP地址，子网掩码为255.224.0.0，它所能划分的最大有效子网数是多少？</p></blockquote><p>①将子网掩码转换成二进制表示<code>11111111.111</code>00000.00000000.00000000<br>②统计一下它的网络位共有<code>11位</code><br>③<code>A类</code>地址<code>网络位</code>的基础数是<code>8</code>，二者之间的<code>位数差是3</code><br>④最大有效子网数就是<code>2的3次方</code>，即最多可以划分8个子网络。</p><blockquote><p>2的位数差次方</p></blockquote><h6 id="根据子网掩码计算主机数"><a href="#根据子网掩码计算主机数" class="headerlink" title="根据子网掩码计算主机数"></a>根据子网掩码计算主机数</h6><blockquote><p>A类IP地址，子网掩码为255.252.0.0，将它划分成若干子网络，每个子网络中可用主机数有多少？</p></blockquote><p>①将子网掩码转换成二进制表示11111111.111111<code>00.00000000.00000000</code><br>②统计一下它的主机位共有18位<br>③最大可用主机数就是<code>2的18次方减2</code>（除去全是0的网络地址和全是1广播地址），即每个子网络最多有262142台主机可用。</p><blockquote><p>2的主机号长度次方</p></blockquote><h6 id="根据子网掩码确定子网络的起止地址"><a href="#根据子网掩码确定子网络的起止地址" class="headerlink" title="根据子网掩码确定子网络的起止地址"></a>根据子网掩码确定子网络的起止地址</h6><blockquote><p>B类IP地址172.16.0.0，子网掩码为255.255.192.0，它所能划分的子网络起止地址是多少？</p></blockquote><p>11111111 11111111 <code>11</code>000000 00000000 [255.255.192.0]<br>11111111 11111111 00000000 00000000 [255.255.255.0]</p><p>①利用子网掩码计算，最多可以划分4个子网络,【差两位，2的2次方=4】<br>②利用子网掩码计算，每个子网络可容纳16384台主机（包括网络地址和广播地址）【2的14次方-2】<br>③用16384除以256（网段内包括网络地址和广播地址的全部主机数），结果是<code>64</code><br>④具体划分网络起止方法如下：</p><p>172.16.0.0～172.16.<code>63</code>.255<br>172.16.<code>64</code>.0～172.16.127.255<br>172.16.<code>128</code>.0～172.16.191.255<br>172.16.<code>192</code>.0～172.16.255.255</p><p><img data-src="15598058385491.jpg" alt="-w556"></p><h3 id="推荐阅读【参考链接】："><a href="#推荐阅读【参考链接】：" class="headerlink" title="推荐阅读【参考链接】："></a>推荐阅读【参考链接】：</h3><p><a href="https://blog.51cto.com/6930123/2112403" target="_blank" rel="noopener">IP地址和子网划分学习笔记之《IP地址详解》系列</a><br><a href="http://www.360doc.com/content/18/0921/19/37113458_788584404.shtml" target="_blank" rel="noopener">什么是子网？什么是子网掩码？</a><br><a href="https://baike.baidu.com/item/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/5446046" target="_blank" rel="noopener">百度百科—子网划分</a><br><a href="https://blog.csdn.net/xwq911/article/details/45368853" target="_blank" rel="noopener">子网数、主机数与子网掩码的关系</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP </tag>
            
            <tag> 子网掩码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03_Python模块系列之模块与包(17)</title>
      <link href="2019/06/04/index/"/>
      <url>2019/06/04/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>区分模块、包；</li><li>✅掌握引用模块、包</li><li>✅进阶一点</li></ul><blockquote><p>原本以为今晚可以早早的睡觉，谁知道东西还是蛮多的。。。</p></blockquote><h3 id="第一部分-模块与包"><a href="#第一部分-模块与包" class="headerlink" title="第一部分 模块与包"></a>第一部分 模块与包</h3><p>在编程语言中，<code>代码块、函数、类、模块，一直到包</code>，逐级封装，层层调用。</p><p><img data-src="1.jpg" alt="模块与包"></p><h4 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h4><p><strong>含义</strong><br>python中每个python文件就是一个模块，每个python文件中，封装类似功能的变量、函数、类型等等，可以被其他的python模块通过import关键字引入重复使用！</p><p><strong>分类</strong></p><ol><li>自定义模块: 如：自己编写的一个py文件；</li><li>内置模块： 如：os、sys、random等</li><li>第三方模块：requests等</li></ol><p><strong>好处</strong></p><ol><li>可维护性</li><li>可复用性</li></ol><h4 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h4><p><strong>含义</strong><br>包含多个python文件/模块的文件夹，并且文件夹中有一个名称为<strong><strong>init</strong>.py</strong>的特殊声明文件；</p><p><strong>作用</strong><br>可以将大量功能相关的python模块包含起来统一管理，同样也可以被其他模块通过import关键字引入重复使用封装的模块和代码。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package_a</span><br><span class="line">├── __init__.py</span><br><span class="line">├── module_a1.py</span><br><span class="line">└── module_a2.py</span><br></pre></td></tr></table></figure><p><code>__init__.py</code>的作用</p><ol><li>Python中package的标识，不能删除（包其实是一个目录，为了和目录做区别，使用了<strong>init</strong>.py）</li><li>定义<strong>all</strong>用来模糊导入(包的调用中介绍)</li><li>编写Python代码(不建议在<strong>init</strong>中写python模块，可以在包中在创建另外的模块来写，尽量保证<strong>init</strong>.py简单）</li></ol><blockquote><p>包名通常为全部小写，避免使用下划线。</p></blockquote><h3 id="第二部分-使用"><a href="#第二部分-使用" class="headerlink" title="第二部分 使用"></a>第二部分 使用</h3><h4 id="导入方法"><a href="#导入方法" class="headerlink" title="导入方法"></a>导入方法</h4><p>常见的是<code>五种</code>引用方式：</p><ol><li>import <code>module_name</code>：本质是将module_name解释一遍，并将解释结果赋值给module_name；</li><li><code>from module_name</code> import <code>name</code>：本质将module_name中的name变量放到当前程序中运行一边，所以调用的时候直接print(name)就可以打印出name变量的值，切记调用模块的时候只需要import模块名，不需要加.py；</li><li>import <code>module_name1, module_name2,...</code>：导入多个模块；</li><li>from module_name import name <code>as nm</code>：为导入模块取<code>别名</code>；</li><li>from module_name import *  —-  <strong>(不建议使用该方法)</strong>；</li></ol><blockquote><p>用<code>typescript</code>的很熟悉上边的写的吧；</p></blockquote><h4 id="模块搜索顺序🔍【原理看第三部分】"><a href="#模块搜索顺序🔍【原理看第三部分】" class="headerlink" title="模块搜索顺序🔍【原理看第三部分】"></a>模块搜索顺序🔍【原理看第三部分】</h4><p>不管你在程序中执行了多少次import，一个模块<strong>只会被导入一次</strong>，顺序如下：</p><p><code>import module_name ---&gt; module_name.py ---&gt; module_name.py的路径---&gt;sys.path</code></p><ol><li>当前执行脚本所在目录</li><li>Python的安装目录</li><li>Python安装目录里的site-packages目录</li></ol><h4 id="示例一-同级目录"><a href="#示例一-同级目录" class="headerlink" title="示例一 同级目录"></a>示例一 同级目录</h4><p><img data-src="3.jpg" alt="引用示例"></p><p>这个示例很简单，但已经把引用的使用罗列清楚了，因为Python不需要export。不像typescript那样有导入就有导出，所以，我们已经引用模块了。</p><blockquote><p>至于如何自定义个包，发布到GitHub，让后让别人用，我想那是不是现在关心的。</p></blockquote><h4 id="示例二-他级目录"><a href="#示例二-他级目录" class="headerlink" title="示例二 他级目录"></a>示例二 他级目录</h4><p>工作区目录结构如下，实现<strong>moduleA</strong>引用<code>文件夹module下的moduleC</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Pipfile</span><br><span class="line">├── Pipfile.lock</span><br><span class="line">├── module</span><br><span class="line">│   └── moduleC.py</span><br><span class="line">├── moduleA.py</span><br><span class="line">└── moduleB.py</span><br></pre></td></tr></table></figure><blockquote><p>网上有很多实现的例子，但是，为何那样写？</p><blockquote><p>还是再开个第三部分吧</p></blockquote></blockquote><h3 id="第三部分-深入理解引用"><a href="#第三部分-深入理解引用" class="headerlink" title="第三部分 深入理解引用"></a>第三部分 深入理解引用</h3><p>摘录自：<a href="https://blog.csdn.net/weixin_38256474/article/details/81228492" target="_blank" rel="noopener">Python 3.x可能是史上最详解的【导入（import）】</a></p><h4 id="Python运行机制"><a href="#Python运行机制" class="headerlink" title="Python运行机制"></a>Python运行机制</h4><p>理解Python在执行import语句（导入内置（Python自个的）或第三方模块（已在sys.path中））时，<strong>进行了啥操作？</strong></p><ol><li>创建一个新的、空的module对象（它可能包含多个module）； </li><li>将该module对象 插入<strong>sys.modules</strong>中； </li><li>装载module的代码（如果需要，需先编译）； </li><li>执行新的module中对应的代码。</li></ol><blockquote><p>第二步涉及一个概念—sys.modules</p></blockquote><p><a href="https://docs.python.org/3.6/library/sys.html?highlight=sys%20modules#sys.modules" target="_blank" rel="noopener">官网解释</a><br><strong>sys.modules</strong>是一个 将模块名称（module_name）映射到已加载的模块（modules） 的<strong>字典</strong>。可用来强制重新加载modules。Python一启动，它将<strong>被加载在内存中。</strong></p><p>当我们<code>导入新modules</code>，sys.modules将<code>自动记录</code>下该module；当第二次再导入该module时，Python将<code>直接</code>到字典中<code>查找</code>，加快运行速度。</p><p>它是个字典，故拥有字典的一切方法，如<code>sys.modules.keys()、sys.modules.values()、sys.modules[‘os’]</code>。但请不要轻易替换字典、或从字典中删除某元素，将可能导致Python运行失败。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.modules)<span class="comment">#打印，查看该字典具体内容。</span></span><br></pre></td></tr></table></figure><p><strong>导入分类</strong></p><ol><li>相对导入： 同一目录下，如第二部分的实例</li><li>绝对导入： 如下侧，不同目录的导入</li></ol><p><strong>import分类</strong></p><ul><li>“标准”import，顶部导入;</li><li>嵌套import<ul><li>顺序导入-import </li><li>循环导入/嵌套导入-import </li></ul></li></ul><h5 id="“标准”import，顶部导入"><a href="#“标准”import，顶部导入" class="headerlink" title="“标准”import，顶部导入"></a>“标准”import，顶部导入</h5><p>在 moduleA 中引用 moduleC </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Pipfile</span><br><span class="line">├── Pipfile.lock</span><br><span class="line">├── module</span><br><span class="line">│   └── moduleC.py</span><br><span class="line">├── moduleA.py</span><br><span class="line">└── moduleB.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">this is moduleA</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># 当前文件的绝对路径</span></span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># 获取目录</span></span><br><span class="line">print(BASE_DIR)</span><br><span class="line"><span class="comment"># 系统路径下加载</span></span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line">print(sys.path)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line">print(sys.modules.keys())</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module.moduleC <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">this is moduleC</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p><img data-src="5.jpg" alt="第五"></p><p><img data-src="4.png" alt="第四"></p><h4 id="嵌套import"><a href="#嵌套import" class="headerlink" title="嵌套import"></a>嵌套import</h4><p>有了上侧以及命名空间的知识，相对下侧图解，就容易理解了。</p><h5 id="顺序导入-import"><a href="#顺序导入-import" class="headerlink" title="顺序导入-import"></a>顺序导入-import</h5><p><img data-src="10.png" alt="10"></p><p>PS：各个模块的Local命名空间的独立的。即：<br>test模块 import moduleA后，只能访问moduleA模块，不能访问moduleB模块。虽然moduleB已加载到内存中，如需访问，还得明确地在test模块 import moduleB。实际上打印locals()，字典中只有moduleA，没有moduleB。</p><h5 id="循环导入-嵌套导入-import"><a href="#循环导入-嵌套导入-import" class="headerlink" title="循环导入/嵌套导入-import"></a>循环导入/嵌套导入-import</h5><p><img data-src="20.png" alt="20"></p><p>形如from moduleB import ClassB语句，根据Python内部import机制，执行细分步骤： </p><ol><li>在sys.modules中查找 符号“moduleB”； </li><li>如果符号“moduleB”存在，则获得符号“moduleB”对应的module对象；<br>从的   dict__中获得 符号“ClassB”对应的对象。如果“ClassB”不存在，则抛出异常“ImportError: cannot import name ‘classB’” </li><li>如果符号“moduleB”不存在，则创建一个新的 module对象。不过此时该新module对象的   dict   为空。然后执行moduleB.py文件中的语句，填充的   dict   。</li></ol><p><strong>总结：from moduleB import ClassB有两个过程，先from module，后import ClassB。</strong></p><p><img data-src="30.png" alt="30"></p><p>当然将moduleA.py语句 from moduleB import ClassB改为：import moduleB，将在第二次执行moduleB.py语句from moduleA import ClassA时报错：<code>ImportError: cannot import name ‘classA’</code></p><p><strong>解决这种circular import循环导入的方法：</strong><br>例比：安装无线网卡时，需上网下载网卡驱动；<br>安装压缩软件时，从网上下载的压缩软件安装程序是被压缩的文件。 </p><p>方法1—–&gt;延迟导入（lazy import）：把import语句写在方法/函数里，将它的作用域限制在局部。（此法可能导致性能问题）<br>方法2—–&gt;将from x import y改成import x.y形式<br>方法3—–&gt;组织代码（重构代码）：更改代码布局，可合并或分离竞争资源。<br>合并—–&gt;都写到一个.py文件里；<br>分离–&gt;把需要import的资源提取到一个第三方.py文件中。<br>总之，将循环变成单向。</p><p>How to avoid Python circle import error？<br>代码布局、（架构）设计问题，解决之道是：将循环变成单向。采用分层、用时导入、相对导入（层次建议不要超过两个）</p><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><a href="http://m.imooc.com/article/details?article_id=247114" target="_blank" rel="noopener">PYTHON中的包和模块</a></p><p><a href="https://blog.csdn.net/weixin_38256474/article/details/81228492" target="_blank" rel="noopener">Python 3.x可能是史上最详解的【导入（import）】</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--阶段总结与补充【16】</title>
      <link href="2019/06/02/index/"/>
      <url>2019/06/02/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>回顾Python面向对象</li><li>✅掌握<strong>pipenv虚拟环境</strong>的基本使用</li></ul><p><img data-src="0.jpg" alt="0"></p><p>在学习过程中也遇到一些疑惑，摸索了不同的形式、方法，有了一些结论，诸如：</p><ol><li>文章的面向群体–有一定编程基础的；属于个人学习📝，不可能面面俱到；</li><li>文章的形式–如果没有递进深入与实例，仅停留在基本；那是刷流氓；</li><li>学习的目标依旧是–向机器学习靠拢，出于好奇，挑战下自我。</li></ol><blockquote><p>也许好奇才是真正让我学习Python的原有；</p><blockquote><p>不论对错，过程中渐渐培养了专注、思考、探索、总结，想必是值得。<br>勇敢走出舒适区，去做有意思的事，好好学数学 😆</p></blockquote></blockquote><p>Python基础系列到此就要告一段落了，该部分主要包含了以下几件事</p><ol><li>迈出了开始学习Python的第一步；</li><li>归纳总结常用的数据类型、方法、函数等，可能会穿插些稍微深入些的知识点；</li><li>查漏补缺，在学习过程中更加深入了理解一些概念、原理。</li></ol><blockquote><p>接下来的安排</p><blockquote><p>因为Node.js属于日常工作范畴，工作之余换种心情😆</p></blockquote></blockquote><ol><li>继续学习Python相关知识，模块、框架；</li><li>开始试着写项目，至于类型，在过程中再确定吧；</li><li>开始<strong>还</strong>曾经落下的<strong>数学📚</strong>，可能会分享相关内容，只是写文章太费时间了。。。；</li><li>希望在不久的将来，开始试着学习机器学习。</li></ol><h3 id="第一部分-Python-面向对象"><a href="#第一部分-Python-面向对象" class="headerlink" title="第一部分 Python 面向对象"></a>第一部分 Python 面向对象</h3><h3 id="第二部分-pipenv虚拟环境"><a href="#第二部分-pipenv虚拟环境" class="headerlink" title="第二部分 pipenv虚拟环境"></a>第二部分 pipenv虚拟环境</h3><h4 id="1-pipenv-是什么"><a href="#1-pipenv-是什么" class="headerlink" title="1. pipenv 是什么"></a>1. pipenv 是什么</h4><p><a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">官网地址</a><br>Pipenv is a production-ready tool that aims to bring the best of all <code>packaging</code> worlds to the Python world. It harnesses <strong>Pipfile, pip, and virtualenv</strong> into one single command.</p><p>大概意思就是：<code>Pipenv 可以为你的项目自动地创建和管理一个虚拟环境。</code></p><p>如果对Node熟悉的话，应该了解:</p><ol><li>nvm 管理nodejs的版本，可自由切换；</li><li>npm: 管理工具，可方便下载第三方模块；</li><li>package.json: 项目文件，记录一些模块依赖信息、配置信息等</li></ol><p>大概可以理解为：对比pipenv: </p><blockquote><p>pipenv = nvm + npm;</p></blockquote><p>当然这只是个简单的。便于学习的对比；</p><p><strong>如有不对❌，敬请指出</strong></p><h4 id="2-pipenv-能解决什么❓"><a href="#2-pipenv-能解决什么❓" class="headerlink" title="2. pipenv 能解决什么❓"></a>2. pipenv 能解决什么❓</h4><ol><li>你不再需要手动创建虚拟环境，Pipenv 为你自动创建。简单地说就是 pipenv 和 virtualenv 一起工作。</li><li>管理 requirements.txt 文件会导致一些问题，所以 Pipenv 用 Pipfile 和 Pipfile.lock 替代 requirements.txt，更适合于一般的使用场景。</li><li>安全。广泛地使用 Hash 校验，能够自动曝露安全漏洞。</li><li>随时查看图形化的依赖关系。</li><li>通过加载 .env 文件简化开发流程。</li></ol><h4 id="3-安装使用"><a href="#3-安装使用" class="headerlink" title="3. 安装使用"></a>3. 安装使用</h4><p><a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">官网地址</a>有对应的安装方法，下边以Mac为例;</p><p>前体是已经安装过Python、pip</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install pipenv</span><br></pre></td></tr></table></figure><h4 id="4-实例一"><a href="#4-实例一" class="headerlink" title="4. 实例一"></a>4. 实例一</h4><p>目标</p><ul><li>初识环境</li><li>掌握基本的操作</li></ul><p>多余代码太多，实例一共包含以下几步</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 初始化一个虚拟环境；</span><br><span class="line">2. 了解下虚拟环境内容；</span><br><span class="line">3. 新建文件，并运行；</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 初始化一个虚拟环境；</span></span><br><span class="line">hhw<span class="number">-4</span>:pythonEnv hhw$ pipenv install</span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> this project…</span><br><span class="line">Pipfile: /Users/hhw/Desktop/pythonEnv/Pipfile</span><br><span class="line">Using /usr/local/Cellar/pipenv/<span class="number">2018.11</span><span class="number">.26</span>_2/libexec/bin/python3<span class="number">.7</span> (<span class="number">3.7</span><span class="number">.3</span>) to create virtualenv…</span><br><span class="line">⠋ Creating virtual environment...Already using interpreter /usr/local/Cellar/pipenv/<span class="number">2018.11</span><span class="number">.26</span>_2/libexec/bin/python3<span class="number">.7</span></span><br><span class="line">Using real prefix <span class="string">'/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /Users/hhw/.local/share/virtualenvs/pythonEnv-Vx1xxtfj/bin/python3<span class="number">.7</span></span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/hhw/.local/share/virtualenvs/pythonEnv-Vx1xxtfj/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...</span><br><span class="line">done.</span><br><span class="line"></span><br><span class="line">✔ Successfully created virtual environment!</span><br><span class="line">Virtualenv location: /Users/hhw/.local/share/virtualenvs/pythonEnv-Vx1xxtfj</span><br><span class="line">Creating a Pipfile <span class="keyword">for</span> this project…</span><br><span class="line">Pipfile.lock <span class="keyword">not</span> found, creating…</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">Updated Pipfile.lock (a65489)!</span><br><span class="line">Installing dependencies <span class="keyword">from</span> Pipfile.lock (a65489)…</span><br><span class="line">  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ <span class="number">0</span>/<span class="number">0</span> — <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">To activate this project<span class="string">'s virtualenv, run pipenv shell.</span></span><br><span class="line"><span class="string">Alternatively, run a command inside the virtualenv with pipenv run.</span></span><br><span class="line"><span class="string">hhw-4:pythonEnv hhw$</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3. 新建文件，并运行；</span></span><br><span class="line"><span class="comment"># 下载requests模块</span></span><br><span class="line">hhw<span class="number">-4</span>:pythonEnv hhw$  pipenv install requests</span><br><span class="line">Installing requests…</span><br><span class="line">Adding requests to Pipfile<span class="string">'s [packages]…</span></span><br><span class="line"><span class="string">✔ Installation Succeeded</span></span><br><span class="line"><span class="string">Pipfile.lock (444a6d) out of date, updating to (a65489)…</span></span><br><span class="line"><span class="string">Locking [dev-packages] dependencies…</span></span><br><span class="line"><span class="string">Locking [packages] dependencies…</span></span><br><span class="line"><span class="string">✔ Success!</span></span><br><span class="line"><span class="string">Updated Pipfile.lock (444a6d)!</span></span><br><span class="line"><span class="string">Installing dependencies from Pipfile.lock (444a6d)…</span></span><br><span class="line"><span class="string">  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 5/5 — 00:00:02</span></span><br><span class="line"><span class="string">To activate this project'</span>s virtualenv, run pipenv shell.</span><br><span class="line">Alternatively, run a command inside the virtualenv <span class="keyword">with</span> pipenv run.</span><br><span class="line">hhw<span class="number">-4</span>:pythonEnv hhw$ vim test.py</span><br></pre></td></tr></table></figure><p>用 ls 命令查看当前项目目录，你会发现有两个文件：<code>Pipfile 和 Pipfile.lock 。</code></p><p>Pipfile 里有最新安装的包文件的信息，如名称、版本等。用来 在重新安装项目依赖或与他人共享项目时，你可以用 Pipfile 来跟踪项目依赖。<br>Pipfile.lock 则包含你的系统信息，所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py 内容</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'https://httpbin.org/ip'</span>)</span><br><span class="line">print(<span class="string">'你的 IP 地址是 &#123;0&#125;'</span>.format(response.json()[<span class="string">'origin'</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pipenv run python main.py</span><br><span class="line">你的 IP 地址是 <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p><strong>实例一 总结</strong></p><p>以上展示了如何创建一个虚拟环境、如何下载一个模块，在虚拟环境中运行；</p><p>也许不太直观，画了两个图，虚拟环境自己玩儿自己的。</p><p><img data-src="1.jpg" alt=""></p><p><img data-src="2.jpg" alt="虚拟环境"></p><p>按实际需求来</p><ol><li>你的代码给别人，别人怎么正常运行？</li><li>pipenv 常用命令有哪些？</li></ol><p>问题一：冻结Pipfile；类比<code>package-lock.json</code></p><p>冻结就相当于将项目所使用的第三方库列表进行打包输出,类比<code>package-lock.json</code><br>通过更新Pipfile.lock来冻结库名称及其版本，以及其依赖关系的列表。需要使用lock参数：<code>pipenv lock</code></p><p>被人怎么用？类比 <code>npm install</code><br><code>pipenv install</code><br>Pipenv会在项目文件夹下自动寻找Pipfile和Pipfile.lock文件，创建一个新的虚拟环境并安装必要的软件包。</p><p>问题二： 可选参数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pipenv</span><br><span class="line">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --update         更新Pipenv &amp; pip</span><br><span class="line">  --where          显示项目文件所在路径</span><br><span class="line">  --venv           显示虚拟环境实际文件所在路径</span><br><span class="line">  --py             显示虚拟环境Python解释器所在路径</span><br><span class="line">  --envs           显示虚拟环境的选项变量</span><br><span class="line">  --rm             删除虚拟环境</span><br><span class="line">  --bare           最小化输出</span><br><span class="line">  --completion     完整输出</span><br><span class="line">  --man            显示帮助页面</span><br><span class="line">  --three &#x2F; --two  使用Python 3&#x2F;2创建虚拟环境（注意本机已安装的Python版本）</span><br><span class="line">  --python TEXT    指定某个Python版本作为虚拟环境的安装源</span><br><span class="line">  --site-packages  附带安装原Python解释器中的第三方库</span><br><span class="line">  --jumbotron      不知道啥玩意....</span><br><span class="line">  --version        版本信息</span><br><span class="line">  -h, --help       帮助信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令参数</span><br><span class="line">Commands:</span><br><span class="line">  check      检查安全漏洞</span><br><span class="line">  graph      显示当前依赖关系图信息</span><br><span class="line">  install    安装虚拟环境或者第三方库</span><br><span class="line">  lock       锁定并生成Pipfile.lock文件</span><br><span class="line">  open       在编辑器中查看一个库</span><br><span class="line">  run        在虚拟环境中运行命令</span><br><span class="line">  shell      进入虚拟环境</span><br><span class="line">  uninstall  卸载一个库</span><br><span class="line">  update     卸载当前所有的包，并安装它们的最新版本</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定位项目路径</span></span><br><span class="line">$ pipenv --where</span><br><span class="line"><span class="comment"># 定位虚拟环境</span></span><br><span class="line">$ pipenv --venv</span><br><span class="line"><span class="comment"># 定位Python解释器</span></span><br><span class="line">$ pipenv --py</span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">$ pipenv install</span><br><span class="line"><span class="comment"># 卸载所有的包：</span></span><br><span class="line">$ pipenv uninstall --all</span><br><span class="line"><span class="comment"># 依赖关系</span></span><br><span class="line">$ pipenv graph</span><br><span class="line"><span class="comment"># 生成lock文件</span></span><br><span class="line">$ pipenv lock</span><br><span class="line"><span class="comment"># 安装开发环境依赖：</span></span><br><span class="line">$ pipenv install pytest --dev</span><br></pre></td></tr></table></figure><h4 id="5-实例二"><a href="#5-实例二" class="headerlink" title="5 实例二"></a>5 实例二</h4><p>目标</p><ul><li>vscode 配置</li></ul><p>实例一中直接运行，已经完全ok，但是写代码，我还是不会选择文本编辑器，，，</p><p>打开vscode，ヾ(｡｀Д´｡)我擦，找不到requests,思考片刻，因为setting.json中已经配置了python解释器【系统级别的】；<br>但是<strong>之后我们都不在这么玩儿了，毕竟会乱的</strong><br>同样建议再项目目录中配置各自的配置项目</p><p><img data-src="3.jpg" alt=""><br><img data-src="4.jpg" alt=""><br><img data-src="5.jpg" alt=""><br><img data-src="6.jpg" alt=""></p><p><strong>配置完毕</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hhw-4:pythonEnv hhw$ python3 test.py </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    import requests</span><br><span class="line">ModuleNotFoundError: No module named &#39;requests&#39;</span><br><span class="line">hhw-4:pythonEnv hhw$ pipenv run python test.py </span><br><span class="line">你的 IP 地址是 112.64.61.61, 112.64.61.61</span><br></pre></td></tr></table></figure><p>一直没找到一个合适的图来描述pipenv…</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 阶段总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之封装继承多态【15】</title>
      <link href="2019/06/01/index/"/>
      <url>2019/06/01/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>温故面向对象三大特性<ul><li>Python的私有是真的吗？</li><li>Python的多继承是什么？</li></ul></li><li>了解下魔方方法</li></ul><h3 id="第一部分-魔法方法"><a href="#第一部分-魔法方法" class="headerlink" title="第一部分 魔法方法"></a>第一部分 魔法方法</h3><p>相信我们初学者都会有个疑问，下边的意思是啥？？为啥要写这个？</p><blockquote><p>反正我是先忽略这个问题，打算在学的过程中慢慢明白😆</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/49136398/answer/114438004" target="_blank" rel="noopener">知乎的回答</a>：<br><code>__name__</code> 是当前模块名，当模块被直接运行时模块名为 <code>__main__</code> 。这句话的意思就是，<strong>当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行。</strong></p><p>还有很多类似的，比如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__ :      构造函数，在生成对象时调用</span><br><span class="line">__del__ :       析构函数，释放对象时使用</span><br><span class="line">__repr__ :      打印，转换</span><br><span class="line">__setitem__ :   按照索引赋值</span><br><span class="line">__getitem__:    按照索引获取值</span><br><span class="line">__len__:        获得长度</span><br><span class="line">__cmp__:        比较运算</span><br><span class="line">__call__:       调用</span><br><span class="line">__add__:        加运算</span><br><span class="line">__sub__:        减运算</span><br><span class="line">__mul__:        乘运算</span><br><span class="line">__div__:        除运算</span><br><span class="line">__mod__:        求余运算</span><br><span class="line">__pow__:        幂</span><br></pre></td></tr></table></figure><p>使用实例，比如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.__len__()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我被回收了！"</span>)</span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="keyword">del</span> obj</span><br></pre></td></tr></table></figure><blockquote><p>等用到了，再看下 😆</p></blockquote><h3 id="第二部分-封装继承多态"><a href="#第二部分-封装继承多态" class="headerlink" title="第二部分 封装继承多态"></a>第二部分 封装继承多态</h3><p><strong>封装</strong><br>封装：将内部实现包裹起来，对外透明，提供api接口进行调用的机制</p><p>优点 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 将变化隔离；</span><br><span class="line">2. 便于使用；</span><br><span class="line">3. 提高复用性；</span><br><span class="line">4. 提高安全性；</span><br></pre></td></tr></table></figure><p><strong>原则</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 将不需要对外提供的内容都隐藏起来；</span><br><span class="line">2. 把属性都隐藏，提供公共方法对其访问。</span><br></pre></td></tr></table></figure><p><strong>继承</strong><br>即一个派生类（derived class）继承父类（base class）的变量和方法。</p><p><strong>多态：</strong>根据对象类型的不同以不同的方式进行处理。</p><p>前提：①类的继承关系 ②要有方法重写。</p><p><strong>父类替换子类</strong>： super(子类名, self).方法名()</p><blockquote><p>以上概念将通过以下几个实例来说明：</p></blockquote><h4 id="实例一-基本、继承"><a href="#实例一-基本、继承" class="headerlink" title="实例一 基本、继承"></a>实例一 基本、继承</h4><p><strong>首先试着下边的三个问题与代码的结果</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Python的私有方法真的私有吗？</span><br><span class="line"><span class="number">2.</span> Python外部是否可以更改私有属性？</span><br><span class="line"><span class="number">3.</span> 关键字property是什么意思？</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex, age)</span>:</span></span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="comment"># 定义一个私有变量</span></span><br><span class="line">        self.__sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"性别：%s 年龄：%d "</span> % (self.__sex, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base = Person(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">print(base.speak())</span><br><span class="line">print(base.age)</span><br><span class="line"><span class="comment"># 调用私用变量： _类名__属性</span></span><br><span class="line">print(base._Person__sex)</span><br><span class="line"><span class="comment"># print(base.__sex)</span></span><br><span class="line"><span class="comment"># AttributeError: 'Person' object has no attribute '__sex'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"===以上区分调用变量===="</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sex, age, name)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的实例化方法</span></span><br><span class="line">        Person.__init__(self, sex, age)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hide</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'示范隐藏的hide方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHeight</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setetHeight</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> height &lt;= <span class="number">0</span> <span class="keyword">or</span> height &gt; <span class="number">300</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'身高必须在0～300cm之间'</span>)</span><br><span class="line">        self.__height = height</span><br><span class="line"></span><br><span class="line">    <span class="comment"># property 将geter seter实例为类变量</span></span><br><span class="line">    height = property(getHeight, setetHeight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建User对象</span></span><br><span class="line">u = User(<span class="string">"男"</span>, <span class="number">20</span>, <span class="string">"Python"</span>)</span><br><span class="line">print(u.name)</span><br><span class="line"><span class="comment">#  seter 方法过滤判断</span></span><br><span class="line"><span class="comment"># u.height = 0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">File "class.1.py", line 47, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    u.height = 0</span></span><br><span class="line"><span class="string">  File "class.1.py", line 37, in setetHeight</span></span><br><span class="line"><span class="string">    raise ValueError('身高必须在0～300cm之间'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 走setter方法</span></span><br><span class="line">u.height = <span class="number">1</span></span><br><span class="line">print(u.height)</span><br><span class="line"><span class="comment"># 直接更改内部变量</span></span><br><span class="line">u._User__height = <span class="number">0</span></span><br><span class="line">print(u._User__height)</span><br><span class="line">print(u.height)</span><br></pre></td></tr></table></figure><p><strong>其实也不难</strong></p><blockquote><p>结果</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">性别：<span class="number">1</span> 年龄：<span class="number">100</span> </span><br><span class="line"><span class="comment"># 为何是打印None?</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">===以上区分调用变量====</span><br><span class="line">Python</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="实例二-多继承"><a href="#实例二-多继承" class="headerlink" title="实例二 多继承"></a>实例二 多继承</h4><p>该部分摘录自<a href="https://hanjianwei.com/2013/07/25/python-mro/" target="_blank" rel="noopener">Python的方法解析顺序(MRO)</a></p><p>先思考几个问题：</p><ol><li>多继承顺序的规则是什么？</li><li>Python中<strong>MRO</strong>的三种方式是什么？</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块inspect：检查运行模块的一些基本信息</span></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A.show()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"C.show()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __mro__ 等价于 inspect.getmro</span></span><br><span class="line"><span class="comment"># print(D.__mro__)</span></span><br><span class="line">print(inspect.getmro(D))</span><br><span class="line">x = D()</span><br><span class="line">x.show()</span><br></pre></td></tr></table></figure><p><img data-src="3.svg" alt="菱形"></p><p>按照深度遍历，其顺序为 <strong>[D, B, A, object, C, A, object]</strong>，重复类只保留最后一个，因此变为 <strong>[D, B, C, A, object]</strong>。</p><p><strong>结果是</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">C.show()</span><br></pre></td></tr></table></figure><blockquote><p>Python 至少有三种不同的 MRO：</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 经典类（classic <span class="class"><span class="keyword">class</span>）的深度遍历。</span></span><br><span class="line"><span class="class">2. <span class="title">Python</span> 2.2 的新式类（<span class="title">new</span>-<span class="title">style</span> <span class="title">class</span>）预计算。</span></span><br><span class="line"><span class="class">3. <span class="title">Python</span> 2.3 的新式类的 <span class="title">C3</span> 算法。它也是 <span class="title">Python</span> 3 唯一支持的方式。</span></span><br></pre></td></tr></table></figure><ol><li>经典类</li></ol><p>经典类的遍历顺序为： 从左至右的深度优先遍历。以上述「菱形继承」为例，其查找顺序为 [D, B, A, C, A]，如果只保留重复类的第一个则结果为 <strong>[D, B, A, C]</strong></p><ol start="2"><li><p>2.2 新式类的执行结果<code>如上例子所示</code>，但其中有问题，</p></li><li><p>C3 现在Python采用的方式</p></li></ol><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">F</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(D, E)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(D, F)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(B, C)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.__mro__</span><br><span class="line">(&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.E'&gt;, &lt;class '__main__.F'&gt;, &lt;type 'object'&gt;)</span><br></pre></td></tr></table></figure><p><img data-src="4.svg" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L[object] = [object]</span><br><span class="line">L[D] = [D, object]</span><br><span class="line">L[E] = [E, object]</span><br><span class="line">L[F] = [F, object]</span><br><span class="line">L[B] = [B, D, E, object]</span><br><span class="line">L[C] = [C, D, F, object]</span><br><span class="line">L[A] = [A] + merge(L[B], L[C], [B], [C])</span><br><span class="line">     = [A] + merge([B, D, E, object], [C, D, F, object], [B], [C])</span><br><span class="line">     = [A, B] + merge([D, E, object], [C, D, F, object], [C])</span><br><span class="line">     = [A, B, C] + merge([D, E, object], [D, F, object])</span><br><span class="line">     = [A, B, C, D] + merge([E, object], [F, object])</span><br><span class="line">     = [A, B, C, D, E] + merge([object], [F, object])</span><br><span class="line">     = [A, B, C, D, E, F] + merge([object], [object])</span><br><span class="line">     = [A, B, C, D, E, F, object]</span><br></pre></td></tr></table></figure><blockquote><p>说实在的没看懂</p><blockquote><p>最近没更新，是在找学数学方面的资源，<br>很开心，正在学</p></blockquote></blockquote><h4 id="实例三-多态"><a href="#实例三-多态" class="headerlink" title="实例三 多态"></a>实例三 多态</h4><blockquote><p>这个似乎很好理解</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kind</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"i am animal"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kind</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"i am a dog"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kind</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"i am a cat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数接收一个animal参数，并调用它的kind方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_kind</span><span class="params">(animal)</span>:</span></span><br><span class="line">    animal.kind()</span><br><span class="line"></span><br><span class="line">d = Dog()</span><br><span class="line">c = Cat()</span><br><span class="line"></span><br><span class="line">show_kind(d)</span><br><span class="line">show_kind(c)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">i am a dog</span></span><br><span class="line"><span class="string">i am a cat</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="实例四-super"><a href="#实例四-super" class="headerlink" title="实例四 super"></a>实例四 super</h4><p>如果想<strong>让父类替换子类</strong>，那么既可以用super()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">"父类的__init__方法被执行了！"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"父类的show方法被执行了！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="comment"># super(子类名, self).方法名()</span></span><br><span class="line">        super(B, self).__init__(name=name)</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(B, self).show()</span><br><span class="line"></span><br><span class="line">obj = B(<span class="string">"jack"</span>, <span class="number">18</span>)</span><br><span class="line">obj.show()</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://hanjianwei.com/2013/07/25/python-mro/" target="_blank" rel="noopener">Python的方法解析顺序(MRO)</a></p><p><a href="https://www.cnblogs.com/geekmao/p/7576441.html" target="_blank" rel="noopener">图解Python 【第六篇】：面向对象-类-进阶篇</a><br><a href="https://blog.csdn.net/yanbober/article/details/8713250" target="_blank" rel="noopener">堆栈</a><br><a href="https://www.cnblogs.com/geaozhang/p/7111961.html" target="_blank" rel="noopener">内存管理</a><br><a href="https://blog.csdn.net/onlyanyz/article/details/45605773" target="_blank" rel="noopener">内存</a><br><a href="http://stor.51cto.com/art/201901/591039.htm" target="_blank" rel="noopener">深入内存</a><br><a href="https://blog.csdn.net/secretx/article/details/81100920" target="_blank" rel="noopener">python内存管理–分层分配】</a><br><a href="https://zhuanlan.zhihu.com/p/40809619" target="_blank" rel="noopener">内存</a></p><p><a href="https://hanjianwei.com/2013/07/25/python-mro/" target="_blank" rel="noopener">Python的方法解析顺序(MRO)</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之面向对象编程【14】</title>
      <link href="2019/05/24/index/"/>
      <url>2019/05/24/index/</url>
      
        <content type="html"><![CDATA[<img data-src="1.png" width="50%" height="50%" align=center />摘要内容......<a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>✅回顾面向过程、面向对象编程</li><li>✅回顾类与对象中的常用概念</li><li>✅对类的基本操作</li></ul><h3 id="第一部分-面向过程与面向对象"><a href="#第一部分-面向过程与面向对象" class="headerlink" title="第一部分 面向过程与面向对象"></a>第一部分 面向过程与面向对象</h3><blockquote><p>第一部分只要是回顾下概念、区别。</p><blockquote><p>可以跳过</p></blockquote></blockquote><h4 id="1-面向过程-OPP"><a href="#1-面向过程-OPP" class="headerlink" title="1 面向过程 OPP"></a>1 面向过程 OPP</h4><blockquote><p>相信大家学习编程的时候，刚接触的就是C语言吧，还记得那个main函数么</p></blockquote><p><code>“面向过程”(Procedure Oriented)</code>是一种以<strong>过程为中心的编程思想</strong>。就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p><p><img data-src="1.png" alt="面向过程"></p><h4 id="2-面向对象-OOP"><a href="#2-面向对象-OOP" class="headerlink" title="2 面向对象 OOP"></a>2 面向对象 OOP</h4><p><strong>面向对象程序设计（英语：Object-oriented programming，缩写：OOP）</strong>是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能<code>包含</code>数据、属性、代码与方法。</p><p><code>对象</code>则指的是<code>类</code>的<code>实例</code>。</p><p>它将对象作为程序的<code>基本单元</code>，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象.<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">摘录自维基百科</a></p><p><img data-src="" alt="面向过程"></p><p>三大特性是：</p><ul><li>封装</li><li>继承</li><li>多态  </li></ul><p>五大基本原则 </p><ul><li>单一职责原则SRP(Single Responsibility Principle)</li><li>开放封闭原则OCP(Open－Close Principle) </li><li>替换原则(the Liskov Substitution Principle LSP) </li><li>依赖原则(the Dependency Inversion Principle DIP) </li><li>接口分离原则(the Interface Segregation Principle ISP) </li></ul><h4 id="3-二者对比"><a href="#3-二者对比" class="headerlink" title="3. 二者对比"></a>3. 二者对比</h4><blockquote><p>简单的把二者总结，我觉得就是耍流氓，所以这部分还是去搜索吧 -—___—</p></blockquote><h3 id="第二部分-Python-面向对象"><a href="#第二部分-Python-面向对象" class="headerlink" title="第二部分 Python 面向对象"></a>第二部分 Python 面向对象</h3><h4 id="1-类-常见概念"><a href="#1-类-常见概念" class="headerlink" title="1 类 常见概念"></a>1 类 常见概念</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类，Python可以多继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    baseDate = <span class="string">"20190526"</span></span><br><span class="line">    <span class="comment"># self参数指向当前实例自身</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, day=<span class="number">0</span>, month=<span class="number">0</span>, year=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.day = day</span><br><span class="line">        self.month = month</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment"># cls 指向当前类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_string</span><span class="params">(cls, date_as_string)</span>:</span></span><br><span class="line">        day, month, year = map(int, date_as_string.split(<span class="string">'-'</span>))</span><br><span class="line">        date1 = cls(day, month, year)</span><br><span class="line">        <span class="keyword">return</span> date1</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_date_valid</span><span class="params">(date_as_string)</span>:</span></span><br><span class="line">        day, month, year = map(int, date_as_string.split(<span class="string">'-'</span>))</span><br><span class="line">        <span class="keyword">return</span> day &lt;= <span class="number">31</span> <span class="keyword">and</span> month &lt;= <span class="number">12</span> <span class="keyword">and</span> year &lt;= <span class="number">3999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例（类Date）</span></span><br><span class="line">date1 = Date(<span class="number">26</span>, <span class="number">5</span>, <span class="number">2019</span>)</span><br><span class="line"><span class="comment"># 实例变量</span></span><br><span class="line">date1.nextDay = <span class="string">"20190527"</span>;</span><br><span class="line"><span class="comment"># 初始化，自动调用 __init___</span></span><br><span class="line">print(<span class="string">"初始化: year %s mounth %s day %s, nextDay"</span> % (date1.year, date1.month, date1.day, date1.nextDay))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法</span></span><br><span class="line">date2 = Date.from_string(<span class="string">'26-05-2019'</span>)</span><br><span class="line">print(date2)</span><br><span class="line">print(<span class="string">"类方法: year %s mounth %s day %s"</span> % (date2.year, date2.month, date2.day))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line">is_date = Date.is_date_valid(<span class="string">'11-09-2012'</span>)</span><br><span class="line">print(<span class="string">"实例方法: %s"</span> % (is_date))</span><br><span class="line"><span class="comment"># 类属性</span></span><br><span class="line">print(<span class="string">"类属性： %s, id: %s"</span> % (Date.baseDate, id(Date.baseDate)))</span><br><span class="line"><span class="comment"># 重新复制类属性</span></span><br><span class="line">Date.baseDate = <span class="string">"20200101"</span></span><br><span class="line">print(<span class="string">"fake🆕类属性： %s, id: %s"</span> % (Date.baseDate, id(Date.baseDate)))</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化: year 2019 mounth 5 day 26, nextDay 20190527</span><br><span class="line">&lt;__main__.Date object at 0x101bab630&gt;</span><br><span class="line">类方法: year 2019 mounth 5 day 26</span><br><span class="line">实例方法: True</span><br><span class="line">类属性： 20190526, id: 4323995760</span><br><span class="line">fake🆕类属性： 20200101, id: 4323996336</span><br></pre></td></tr></table></figure><p><img data-src="2.jpg" alt="内存图"></p><p><strong>概念定义</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类(Class): 用来描述具有相同属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。其中的对象被称作类的实例。</span><br><span class="line">实例：也称对象。通过类定义的初始化方法，赋予具体的值，成为一个&quot;有血有肉的实体&quot;。</span><br><span class="line">实例化：创建类的实例的过程或操作。</span><br><span class="line">实例变量：定义在实例中的变量，只作用于当前实例。</span><br><span class="line">类变量：类变量是所有实例公有的变量。类变量定义在类中，但在方法体之外。</span><br><span class="line">数据成员：类变量、实例变量、方法、类方法、静态方法和属性等的统称。</span><br><span class="line">方法：类中定义的函数。</span><br><span class="line">静态方法：不需要实例化就可以由类执行的方法</span><br><span class="line">类方法：类方法是将类本身作为对象进行操作的方法。</span><br></pre></td></tr></table></figure><h4 id="2-类方法、实例方法"><a href="#2-类方法、实例方法" class="headerlink" title="2 类方法、实例方法"></a>2 类方法、实例方法</h4><p>当搜索Python类时，有很多人再问一个问题</p><blockquote><p>实例方法、类方法的使用场景是什么❓</p><blockquote><p>区别是什么❓</p></blockquote></blockquote><p>关于这个问题，搜了不少资源，把我认为比较好的分享出来，希望对大家有用</p><h4 id="应用场景举例"><a href="#应用场景举例" class="headerlink" title="应用场景举例"></a>应用场景举例</h4><p><a href="https://www.zhihu.com/question/20021164/answer/18224953" target="_blank" rel="noopener">摘录自知乎</a></p><p><strong>应用场景</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 构造前交互</span><br><span class="line">2. 特殊构造函数</span><br><span class="line">3. __new__等</span><br><span class="line">4. 为函数提供子类hook点</span><br></pre></td></tr></table></figure><p><strong>相比staticmethod</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 方法可以判断出自己是通过基类被调用，还是通过某个子类被调用</span><br><span class="line">2. 通过子类调用时，方法可以返回子类的实例而非基类的实例</span><br><span class="line">3. 通过子类调用时，方法可以调用子类的其他classmethod</span><br></pre></td></tr></table></figure><p><strong>建议：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 除非能说出合理的理由，否则能用classmethod的时候就使用classmethod</span><br><span class="line">2. 将类的定义改造成另外某种语义的时候使用metaclass，实现类的业务上的多态使用classmethod</span><br><span class="line">3. 对类的用户可见的功能使用classmethod，对类的用户不可见的功能可以考虑使用metaclass</span><br><span class="line">4. 没疯用classmethod，疯掉之后可以metaclass满天飞</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>Python中的<strong>classmethod（和staticmethod）并不止拥有美学上（或者命名空间上）的意义</strong>，而是可以实际<code>参与多态的、足够纯粹的OOP功能</code>.</p><p><strong>原理</strong>在于Python中类可以作为<strong>first class的对象使用</strong>，很大程度上替代其他OOP语言中的工厂模式。</p><p>classmethod既可以作为factory method提供额外的构造实例的手段，也可以作为工厂类的接口，用来读取或者修改工厂类本身。</p><p>classmethod还可以通过额外的<code>类引用</code>，提供继承时的多态特性，实现子类挂载点等。</p><h3 id="以下为实例，佐证上侧结论"><a href="#以下为实例，佐证上侧结论" class="headerlink" title="以下为实例，佐证上侧结论"></a>以下为实例，佐证上侧结论</h3><p>Python类方法的优势，先看代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBCursor</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create cursor to database</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **arguments)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure</span><span class="params">(cls, config)</span>:</span></span><br><span class="line">        cls.config = config</span><br></pre></td></tr></table></figure><p>一般数据库插件都支持很多的配置，我们希望这个配置可以以<code>集中式的方式保存在应用配置</code>中，这样我们为DBCursor类增加了一个configure接口，它会在任何DB Cursor被实例化之前，首先在类上被调用，这样在<code>初始化__init__</code>的时候，就<strong>可以使用</strong>这个配置了。</p><p>在Java等语言中，这类功能通常通过工厂类（Factory）实现，先初始化一个工厂类的实例，然后由这个工厂类的实例构造实际需要的实例。<strong>在Python中，普通类完全可以替代Factory，而对于支持配置的Factory，就对应到相应的classmethod。</strong></p><p>参考链接<br><a href="https://blog.51cto.com/watchmen/1954632" target="_blank" rel="noopener"></a><br><a href="https://www.cnblogs.com/geekmao/p/7576441.html" target="_blank" rel="noopener"></a><br><a href="https://blog.csdn.net/ilovehua521/article/details/82387214" target="_blank" rel="noopener">类思维导图</a><br><a href="https://blog.csdn.net/yanbober/article/details/8713250" target="_blank" rel="noopener">堆栈</a></p><p><a href="https://www.cnblogs.com/geaozhang/p/7111961.html" target="_blank" rel="noopener">内存管理</a><br><a href="https://blog.csdn.net/onlyanyz/article/details/45605773" target="_blank" rel="noopener">内存</a><br><a href="http://stor.51cto.com/art/201901/591039.htm" target="_blank" rel="noopener">深入内存</a><br><a href="https://blog.csdn.net/secretx/article/details/81100920" target="_blank" rel="noopener">python内存管理–分层分配】</a><br><a href="https://zhuanlan.zhihu.com/p/40809619" target="_blank" rel="noopener">内存</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之装饰器【12】</title>
      <link href="2019/05/19/index/"/>
      <url>2019/05/19/index/</url>
      
        <content type="html"><![CDATA[<p><img data-src="cheap.png" alt=""></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>温故函数很多概念</li><li>掌握 Python 装饰器</li></ul><blockquote><p>如果能准确的表述下侧代码的结果</p><p>就不用往下看啦，想必你已经掌握了 Python 装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"1"</span>)</span><br><span class="line">        print(<span class="string">"foo---%s"</span> % func)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"2"</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"4"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"===foo===="</span>)</span><br><span class="line">print(foo)</span><br><span class="line">print(<span class="string">"===foo()===="</span>)</span><br><span class="line">print(foo())</span><br><span class="line">print(<span class="string">"===outer(foo)===="</span>)</span><br><span class="line">print(outer(foo))</span><br><span class="line">print(<span class="string">"===outer(foo())===="</span>)</span><br><span class="line">print(outer(foo()))</span><br><span class="line">print(<span class="string">"===outer(foo())()===="</span>)</span><br><span class="line">print(outer(foo())())</span><br></pre></td></tr></table></figure><p>先认真回忆下之前函数的相关章节内容<br><strong>不难但可能有点绕</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">===foo====</span><br><span class="line">&lt;<span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="title">at</span> 0<span class="title">x7fcae64dbea0</span>&gt;</span></span><br><span class="line"><span class="function">===<span class="title">foo</span>(<span class="params"></span>)====</span></span><br><span class="line"><span class="function">3</span></span><br><span class="line"><span class="function">4</span></span><br><span class="line"><span class="function">===<span class="title">outer</span>(<span class="params">foo</span>)====</span></span><br><span class="line"><span class="function">&lt;<span class="title">function</span> <span class="title">outer</span>.&lt;<span class="title">locals</span>&gt;.<span class="title">inner</span> <span class="title">at</span> 0<span class="title">x7fcae64dbe18</span>&gt;</span></span><br><span class="line"><span class="function">===<span class="title">outer</span>(<span class="params">foo(</span>))====</span></span><br><span class="line"><span class="function">3</span></span><br><span class="line"><span class="function">&lt;<span class="title">function</span> <span class="title">outer</span>.&lt;<span class="title">locals</span>&gt;.<span class="title">inner</span> <span class="title">at</span> 0<span class="title">x7fcae645d598</span>&gt;</span></span><br><span class="line"><span class="function">===<span class="title">outer</span>(<span class="params">foo(</span>))(<span class="params"></span>)====</span></span><br><span class="line"><span class="function">3</span></span><br><span class="line"><span class="function">1</span></span><br><span class="line"><span class="function"><span class="title">foo</span>---4</span></span><br><span class="line"><span class="function">2</span></span><br></pre></td></tr></table></figure><p>没答出来，或对装饰器有疑惑，那就即可开始吧</p><h3 id="第一部分-前奏"><a href="#第一部分-前奏" class="headerlink" title="第一部分 前奏"></a>第一部分 前奏</h3><p>针对于开头的那块代码逐步分析下，究竟再内存中是<code>如何运行的❓</code> <code>执行顺序是什么❓</code></p><p><strong>强烈推荐网址：<a href="http://pythontutor.com/live.html#mode=edit" target="_blank" rel="noopener">代码可视化执行过程</a></strong></p><p>这几行代码主要为了加深理解代码的<code>执行过程</code>、<code>函数名</code>、<code>函数调用</code>等等</p><p><code>结合代码与下侧图示</code>，重温那些我们习以为常的东西。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"1"</span>)</span><br><span class="line">        print(<span class="string">"foo---%s"</span> % func)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"2"</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"4"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数 outer、foo 加载到内存中</span></span><br><span class="line"><span class="comment"># 以上代码到此行，未执行</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"===foo===="</span>)</span><br><span class="line"><span class="comment"># foo【函数名】；</span></span><br><span class="line"><span class="comment"># 执行：对应的【函数信息】；返回：🈚️</span></span><br><span class="line">print(foo)</span><br><span class="line">print(<span class="string">"===foo()===="</span>)</span><br><span class="line"><span class="comment"># 真正执行 foo函数</span></span><br><span class="line"><span class="comment"># 执行：打印 3； 返回 4</span></span><br><span class="line">print(foo())</span><br><span class="line">print(<span class="string">"===outer(foo)===="</span>)</span><br><span class="line"><span class="comment"># 将【foo函数名】传给【outer函数】，参数为 【函数名】</span></span><br><span class="line"><span class="comment"># 执行：将inner加载到内存，返回：🈚️</span></span><br><span class="line">print(outer(foo))</span><br><span class="line">print(<span class="string">"===outer(foo())===="</span>)</span><br><span class="line"><span class="comment"># 调用【foo函数】，将4作为参数传给传给【outer函数】</span></span><br><span class="line"><span class="comment"># 执行：打印3 返回4， 打印outer函数的返回值 inner内存信息</span></span><br><span class="line">print(outer(foo()))</span><br><span class="line">print(<span class="string">"===outer(foo())()===="</span>)</span><br><span class="line"><span class="comment"># 调用【foo函数】，将4作为参数传给传给【outer函数】，调用inner函数</span></span><br><span class="line"><span class="comment"># 执行：打印3 返回4，进而打印 1 、 4【func()]、2以及inner的返回值2</span></span><br><span class="line"><span class="comment"># over！！！</span></span><br><span class="line">print(outer(foo())())</span><br></pre></td></tr></table></figure><p>我觉得，先把这些看似简单的东西理清楚，对接下来，装饰器的理解更容易些</p><h3 id="第二部分-装饰器【基础】"><a href="#第二部分-装饰器【基础】" class="headerlink" title="第二部分 装饰器【基础】"></a>第二部分 装饰器【基础】</h3><h4 id="1-装饰器是什么"><a href="#1-装饰器是什么" class="headerlink" title="1 装饰器是什么"></a>1 装饰器是什么</h4><p>装饰器（Decorator）：可以在不修改原有代码的情况下，为被装饰的对象增加新的功能或者附加限制条件或者帮助输出。<strong>原则：开放封闭</strong></p><p><strong>分类</strong></p><ol><li>函数装饰器；</li><li>类的装饰器。</li></ol><p>最近公司也在用装饰器，不过是再 Nodejs 中用的；<br>举个别的例子。因为某种原因，需要对每个接口进行<strong>认证</strong>、<strong>记录日志</strong>，如何快速高效的实现这样的需求 ❓</p><p><code>可能有几种思路</code></p><ul><li>在基类中写相应的方法，如果有的话；</li><li>写两个函数【认证的、日志的】，在每个接口中添加；</li><li>等等思路</li></ul><h4 id="2-简单的装饰器"><a href="#2-简单的装饰器" class="headerlink" title="2 简单的装饰器"></a>2 简单的装饰器</h4><p>但今天只能选<strong>装饰器</strong>，因为不能偏离主题啦，描述了需求就开始干吧！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"装饰器启动,自动执行"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"统一认证"</span>)</span><br><span class="line">        result = func()</span><br><span class="line">        print(<span class="string">"记录日志信息"</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"接口1"</span>)</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">装饰器启动,自动执行</span><br><span class="line">统一认证</span><br><span class="line">接口<span class="number">1</span></span><br><span class="line">记录日志信息</span><br></pre></td></tr></table></figure><p>大致和第一部分的例子有点类似，不同的是</p><ol><li>inner 函数返回了个函数</li><li>多个<code>@outer</code></li></ol><p>@outer 中的<code>@</code>是注解语法糖；<strong>把 f1 作为参数传给 outer</strong>,今儿满足我们的<code>开放封闭的原则</code>;</p><p>其解释器会解释成下面这样的语句：<br><strong>*@outer &lt;=&gt; outer(f1)</strong></p><p>翻译成函数调用, 我们用新的例子来对比一下，其实就是下侧这样的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"接口2"</span>)</span><br><span class="line">outer(f2)()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">装饰器启动,自动执行</span></span><br><span class="line"><span class="string">统一认证</span></span><br><span class="line"><span class="string">接口1</span></span><br><span class="line"><span class="string">记录日志信息</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>了解了上述的调用含义， <strong>@outer &lt;=&gt; outer(f1)</strong></p><blockquote><p>注： 传的只是函数名</p></blockquote><p><img data-src="doc1.jpg" alt="自动执行"></p><p>整体的流程</p><ol><li>自上而下执行，将函数<code>outer</code>在内存注册；</li><li>执行到@outer 时，将<code>函数名f1</code>作为参数传给<code>@outer</code>;</li><li>调用 outer 函数，执行打印【装饰器启动,自动执行】；</li><li>函数 inner 在内存注册，内存地址：<strong>[xxxx]</strong>，返回【inner 函数名】，</li><li>将函数<code>f1</code>在内存注册；其实是直接指向 <strong>[xxxx]</strong></li><li>调用 f1(), 直接调用第五步的 <strong>[xxxx]</strong>， 也就是第四步的；</li><li>打印【统一认证】；</li><li>result = func()<strong>执行回调</strong>【f1】函数, 打印：接口 1，没有返回值，result = None</li><li>回到<code>inner()</code>,打印<code>记录日志信息</code>;</li><li>返回 None，OVER!</li></ol><p><code>注</code>：完整的有 17 步，动图还不会制作，可以前往–&gt;<a href="http://pythontutor.com/live.html#mode=edit" target="_blank" rel="noopener">代码可视化网址</a>**，查看完整的步骤。</p><blockquote><p>实在是想不出来，如何用图来表示装饰器，有相应的图示，请介绍。</p></blockquote><p>比较喜欢这段代码, 挺有意思的。O(∩_∩)O 哈哈~<br><a href="https://coolshell.cn/articles/11265.html" target="_blank" rel="noopener">来源</a></p><p>会自动打印结果，因为采用了装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"fuck %s!"</span> % fn.__name__[::<span class="number">-1</span>].upper()</span><br><span class="line"></span><br><span class="line"><span class="meta">@fuck</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wfg</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="第三部分-装饰器【进阶】"><a href="#第三部分-装饰器【进阶】" class="headerlink" title="第三部分 装饰器【进阶】"></a>第三部分 装饰器【进阶】</h3><p>如果没有看明白第二部分，还是这回去，沉下心，专注的、认真的读下去，真的不难，好好分析下流程，一步一个脚印，踩实了！</p><blockquote><p>只介绍最基础的代码，就是耍流氓</p></blockquote><h4 id="1-多个装饰器"><a href="#1-多个装饰器" class="headerlink" title="1 多个装饰器"></a>1 多个装饰器</h4><p><a href="https://blog.csdn.net/u013411246/article/details/80571462" target="_blank" rel="noopener">下侧代码来源</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当有多个装饰器装饰一个函数时，他们的执行顺序</span></span><br><span class="line"><span class="comment">#观察下方的代码就会发现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_a</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'Get in decorator_a'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_a</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Get in inner_a'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner_a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_b</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'Get in decorator_b'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_b</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Get in inner_b'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner_b</span><br><span class="line">  </span><br><span class="line"><span class="meta">@decorator_b</span></span><br><span class="line"><span class="meta">@decorator_a</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Get in f'</span>)</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Get in decorator_a</span></span><br><span class="line"><span class="string">Get in decorator_b</span></span><br><span class="line"><span class="string">Get in inner_b</span></span><br><span class="line"><span class="string">Get in inner_a</span></span><br><span class="line"><span class="string">Get in f</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>调用时，函数的顺序</p><ol><li>顺序等同于==&gt; <strong>decorator_b(decorator_a(f))</strong>,返回的是inner_b,所以执行的时候是先执行inner_b</li><li>然后在执行【decorator_a(f)】返回的inner_a  .最终在调用f(1)的时候，函数inner_b输出’Get in inner_b’</li><li>执行inner_a输出Get in decorator_a，最后执行func(),即f</li></ol><h4 id="2-多参多装饰器"><a href="#2-多参多装饰器" class="headerlink" title="2 多参多装饰器"></a>2 多参多装饰器</h4><p>为了更加深入的了解，装饰器，摘录<a href="https://coolshell.cn/articles/11265.html" target="_blank" rel="noopener">酷 壳 博客</a>上的一段代码，好像<a href="https://wiki.python.org/moin/PythonDecoratorLibrary" target="_blank" rel="noopener">官网实例代码</a>也不少;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeHtmlTag</span><span class="params">(tag, *args, **kwds)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">real_decorator</span><span class="params">(fn)</span>:</span></span><br><span class="line">        css_class = <span class="string">" class='&#123;0&#125;'"</span>.format(kwds[<span class="string">"css_class"</span>]) \</span><br><span class="line">                                     <span class="keyword">if</span> <span class="string">"css_class"</span> <span class="keyword">in</span> kwds <span class="keyword">else</span> <span class="string">""</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;"</span>+tag+css_class+<span class="string">"&gt;"</span> + fn(*args, **kwds) + <span class="string">"&lt;/"</span>+tag+<span class="string">"&gt;"</span></span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line">    <span class="keyword">return</span> real_decorator</span><br><span class="line"> </span><br><span class="line"><span class="meta">@makeHtmlTag(tag="b", css_class="bold_css")</span></span><br><span class="line"><span class="meta">@makeHtmlTag(tag="i", css_class="italic_css")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br><span class="line"> </span><br><span class="line">print(hello())</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;b class='bold_css'&gt;&lt;i class='italic_css'&gt;hello world&lt;/i&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="3-再深入一些"><a href="#3-再深入一些" class="headerlink" title="3 再深入一些"></a>3 再深入一些</h4><p>表示还没有研究这段代码，先分享出来<br>摘录<a href="https://coolshell.cn/articles/11265.html" target="_blank" rel="noopener">酷 壳 博客</a>上的代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memo</span><span class="params">(fn)</span>:</span></span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    miss = object()</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        result = cache.get(args, miss)</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> miss:</span><br><span class="line">            result = fn(*args)</span><br><span class="line">            cache[args] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"> </span><br><span class="line"><span class="meta">@memo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Python函数告一段落了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--匿名函数闭包【11】</title>
      <link href="2019/05/18/index/"/>
      <url>2019/05/18/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>存在即合理<br>正如明白了<code>x += 1</code>，就会尽量避免<code>x = x + 1</code>;</p></blockquote><h4 id="反观一搜一大把关于闭包的文章，无外乎只是告诉三点"><a href="#反观一搜一大把关于闭包的文章，无外乎只是告诉三点" class="headerlink" title="反观一搜一大把关于闭包的文章，无外乎只是告诉三点"></a>反观一搜一大把关于闭包的文章，无外乎只是告诉三点</h4><ul><li>晦涩难懂的概念</li><li>给几个简单的实例</li><li>结束<br>或许还会给个建议 <strong>少用</strong></li></ul><blockquote><p>真的是这样么？<br>我搜索了大量的资料来写这篇文章，只是想尽力把自己说服、说明了。</p></blockquote><p>下边有三到题目以及答案</p><ul><li>如果你的预期和答案不符</li><li>如果你看不懂</li><li>如果你好奇的想一探究竟</li></ul><blockquote><p>请继续</p><blockquote><p>否则就可以关闭这个文章了</p></blockquote><blockquote><p>文章长且内容多</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一题，是用来做什么的？</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(start, stop)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> filter(<span class="keyword">lambda</span> x : <span class="keyword">not</span> [x % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, x) <span class="keyword">if</span> x % i == <span class="number">0</span>], range(start, stop + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二题</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_counter</span><span class="params">()</span>:</span></span><br><span class="line">  i = <span class="number">10</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(x=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">nonlocal</span> i</span><br><span class="line">    i += x</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">a_count = new_counter()</span><br><span class="line">print(a_count())</span><br><span class="line">print(a_count())</span><br><span class="line">print(a_count(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第三题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeActions</span><span class="params">()</span>:</span></span><br><span class="line">    acts = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        acts.append(<span class="keyword">lambda</span> x: i ** x)</span><br><span class="line">    <span class="keyword">return</span> acts</span><br><span class="line">acts = makeActions()</span><br><span class="line">print(acts[<span class="number">0</span>](<span class="number">2</span>))</span><br><span class="line">print(acts[<span class="number">1</span>](<span class="number">2</span>))</span><br><span class="line">print(acts[<span class="number">2</span>](<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><strong>答案</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二题</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="comment"># 第三题</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><blockquote><p>警示：认真的读下去，可能会花费你不少的时间</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>掌握匿名函数</li><li>掌握高阶函数与匿名函数的用法</li><li>尽量搞明白闭包</li></ul><p><img data-src="/2019/05/18/index/closuer.png" alt="目录结构"></p><h3 id="第一部分-匿名函数"><a href="#第一部分-匿名函数" class="headerlink" title="第一部分 匿名函数"></a>第一部分 匿名函数</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p><code>lambda 函数</code>也叫<code>匿名函数</code>，及即没有具体名称的函数，它允许快速定义单行函数，类似于 C 语言的宏，可以用在任何需要函数的地方。</p><p>lambda与def对比</p><table><thead><tr><th>区别</th><th>def</th><th>lambda</th></tr></thead><tbody><tr><td>名称</td><td>有</td><td>无</td></tr><tr><td>返回值</td><td>函数对象但不给标识符</td><td>任意</td></tr><tr><td>作用</td><td>简单的</td><td>简单/复杂</td></tr><tr><td>作用范围</td><td>不能共享</td><td>可共享</td></tr></tbody></table><h4 id="2-表达式"><a href="#2-表达式" class="headerlink" title="2 表达式"></a>2 表达式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funName</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"返回值"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line"><span class="keyword">lambda</span> argument1,argument2,...argumentN:expression using arguments</span><br><span class="line"></span><br><span class="line"><span class="keyword">lambda</span> 参数: 表达式</span><br></pre></td></tr></table></figure><p><code>实现同样代码不同方式的实例：</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mul(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lam = <span class="keyword">lambda</span> x, y: x*y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lam</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x101b11268</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lam(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lam(<span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: &lt;<span class="keyword">lambda</span>&gt;() missing <span class="number">1</span> required positional argument: <span class="string">'y'</span></span><br></pre></td></tr></table></figure><h4 id="3-匿名函数与高阶函数"><a href="#3-匿名函数与高阶函数" class="headerlink" title="3 匿名函数与高阶函数"></a>3 匿名函数与高阶函数</h4><p>Python内置对数据处理的函数，<strong>效率比for要高</strong>，恰好，我们可以结合lambda函数，<code>一块把二者学习了</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 罗列了常用的三种</span></span><br><span class="line">1. map(function, iterable[, iterable, ...]) -&gt; list</span><br><span class="line"></span><br><span class="line">2. filter(function or None, iterable) -&gt; list, tuple, or string</span><br><span class="line"></span><br><span class="line">3. reduce(function, sequence[, initial]) -&gt; value</span><br></pre></td></tr></table></figure><h4 id="简要介绍："><a href="#简要介绍：" class="headerlink" title="简要介绍："></a>简要介绍：</h4><ul><li><strong>map映射</strong>: 对iterable中的item依次执行function(item)，执行结果输出为list</li><li><strong>filter过滤</strong>: 对iterable中的item依次执行function(item)，将执行结果为True（！=0）的item组成一个List/String/Tuple（取决于iterable的类型）返回，False则退出（0），进行过滤。</li><li><strong>reduce</strong>: iterable中的item顺序迭代调用function，函数必须要有2个参数。要是有第3个参数，则<strong>表示初始值</strong>，可以继续调用初始值，返回一个值</li></ul><h4 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h4><p><img data-src="/2019/05/18/index/map.png" alt="map"><br><img data-src="/2019/05/18/index/filter.png" alt="filter"><br><img data-src="/2019/05/18/index/s5_reduce_function.svg" alt="reduce"></p><h4 id="实例列表"><a href="#实例列表" class="headerlink" title="实例列表"></a>实例列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------- map ------- #</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])   <span class="comment"># 使用 lambda</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------- reduce ------- #</span></span><br><span class="line"><span class="comment"># reduce 操作实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x, y: x * y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  <span class="comment"># 相当于 ((1 * 2) * 3) * 4</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x, y: x * y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>) <span class="comment"># ((((5 * 1) * 2) * 3)) * 4</span></span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> (a &gt; b) <span class="keyword">else</span> b   <span class="comment"># 两两比较，取最大值 【三目运算也在阶段汇总与补充中说明】</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(f, [<span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">10</span>])</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------- filter ------- #</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*list)</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="两个综合实例"><a href="#两个综合实例" class="headerlink" title="两个综合实例"></a>两个综合实例</h4><p><strong>这个就是开头的那个实例： 找出指定返回内的质子</strong>，涉及的内容有点多，包含之前章节中的<code>推导式</code>、<code>range函数</code>、<code>函数</code>、<code>not</code>等相关内容，试着先看下，是否能看明白。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 质数的定义 只有1和它本身两个因数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(start, stop)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="comment"># 取出质数,x从range(start,stop+1) 取的数</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> filter(<span class="keyword">lambda</span> x : <span class="keyword">not</span> [x % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, x) <span class="keyword">if</span> x % i == <span class="number">0</span>], range(start, stop + <span class="number">1</span>))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isPrime(<span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line">&lt;filter object at <span class="number">0x101b12400</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list(result))</span><br><span class="line">[<span class="number">11</span>]</span><br></pre></td></tr></table></figure><p><a href="http://pythontutor.com/live.html#code=def%20isPrime%28start,%20stop%29%3A%0A%20%20%20%20%20%23%20%E5%8F%96%E5%87%BA%E8%B4%A8%E6%95%B0,x%E4%BB%8Erange%28start,stop%2B1%29%20%E5%8F%96%E7%9A%84%E6%95%B0%0A%20%20%20%20%20return%20filter%28lambda%20x%20%3A%20not%20%5Bx%20%25%20i%20for%20i%20in%20range%282,%20x%29%20if%20x%20%25%20i%20%3D%3D%200%5D,%20range%28start,%20stop%20%2B%201%29%29%0Aprint%28list%28isPrime%2811,%2012%29%29%29&cumulative=true&curInstr=36&heapPrimitives=true&mode=display&origin=opt-live.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false" target="_blank" rel="noopener">整个过程的步骤有三七步骤</a></p><p>试了下画个流程图，来作为补充，但是我怕画出来，更难理解了；<br>所以就用文字描述下，希望描述的清楚：</p><ul><li>1 range(start, stop + 1) 生成 <code>[)左闭右开</code>的<strong>list_1数组</strong></li><li>2 依次将list_1中的数【x】传给<code>匿名函数</code>；<strong>【循环该操作】</strong><ul><li>3 生成[2, x)的<strong>list_2</strong></li><li>4 遍历list_2， 依次用 <em><code>x%list_2[i]</code>取余；*</em>【循环该操作】**</li><li>5 如果数组长度等于0，回到<code>2</code></li><li>6 如果余数等于0，返回余数，存进<code>list_new</code>;</li><li>7 等整个<strong>2</strong>走完，判断<code>list_new</code>是否存在数据，得出当前x是否是质数，是否从list_1中过滤掉</li><li>8 进入<strong>list_1</strong>下一个元素的判断</li></ul></li></ul><p>先熟悉下not的用法，【在阶段汇总与补充中说明】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> []</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> [<span class="number">1</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> [<span class="number">0</span>]</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>下边这个求阶乘的，没啥难度，只要还记得</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 思考下这个，在思考下上边关于reduce的图例</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x * y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>) <span class="comment"># ((((5 * 1) * 2) * 3)) * 4</span></span><br></pre></td></tr></table></figure><p><img data-src="/2019/05/18/index/reduce2.png" alt="类比一下"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算 5!+4!+3!+2!+1!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">addFactorial</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result = []</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> map(<span class="keyword">lambda</span> x:x + <span class="number">1</span>, range(n)):</span><br><span class="line"><span class="meta">... </span>        a = reduce(<span class="keyword">lambda</span> x, y:x * y, map(<span class="keyword">lambda</span> x:x + <span class="number">1</span>, range(i)))</span><br><span class="line"><span class="meta">... </span>        result.append(a)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y:x + y, result)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addFactorial(<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addFactorial(<span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="第二部分-闭包"><a href="#第二部分-闭包" class="headerlink" title="第二部分 闭包"></a>第二部分 闭包</h3><p>接下来的内容涉及函数相关内容，之前的两篇文章<br><a href="https://mp.weixin.qq.com/s/g8P8IT3_eK5KYlyWIXKgbQ" target="_blank" rel="noopener">Python 基础系列–函数【9】</a><br><a href="https://mp.weixin.qq.com/s/93jGABTI5DEDxCT4iUT3pw" target="_blank" rel="noopener">Python 基础系列之作用域【10】</a></p><p><img data-src="/2019/05/18/index/func.png" alt="函数概述图"></p><blockquote><p>函数是对象，函数可以作为返回值，</p></blockquote><p>在说闭包定义之前，我们先看下开头的那两段代码</p><h4 id="1-初始闭包"><a href="#1-初始闭包" class="headerlink" title="1. 初始闭包"></a>1. 初始闭包</h4><blockquote><p>函数是对象，函数可以作为返回值。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二题</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_counter</span><span class="params">()</span>:</span></span><br><span class="line">  i = <span class="number">10</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(x=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">nonlocal</span> i</span><br><span class="line">    i += x</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">a_count = new_counter()</span><br><span class="line">print(a_count())</span><br><span class="line">print(a_count())</span><br><span class="line">print(a_count(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img data-src="/2019/05/18/index/bibao.jpg" alt="闭包"></p><p>上侧的例子主要实现的是一个<strong>计数器的功能</strong>：<code>每点击一次，在原基础上加1</code>;</p><p>结合上图，大致了解下流程：</p><ul><li>函数定于与返回：<ul><li>外层函数new_counter返回了内层函数count作为结果；</li><li>内层函数count，中的参数：<strong>x</strong>有个默认值1；</li><li>内层函数count中的 i 利用了nonlocal，获取到10；</li></ul></li><li>a_count = new_counter()<ul><li>将变量a_count指向new_counter()返回的count()</li><li>count()的type为func,并且i持有10对应的内存地址</li></ul></li><li>第一次调用a_count()时<ul><li>没有参数，x默认为1;</li><li>i持有10，经过➕后返回11</li></ul></li><li>第二次调用a_count()时<ul><li>没有参数，x默认为1;</li><li>i持有11，经过➕后返回12</li></ul></li><li>第二次调用a_count()时<ul><li>没有参数，x=3;</li><li>i持有12，经过➕后返回15</li></ul></li></ul><p>此时我不确定看了上图和说明，是否<strong>能够看懂闭包的用法</strong></p><h4 id="2-闭包的定义"><a href="#2-闭包的定义" class="headerlink" title="2 闭包的定义"></a>2 闭包的定义</h4><blockquote><p>比较晦涩的专业术语，但还是建议认真读读</p><blockquote><p>都是大神发明的东西</p></blockquote><blockquote><p>真的很巧妙</p></blockquote></blockquote><p><strong>下边的文字值得读 N 遍</strong></p><p><code>维基百科上对闭包的解释就很经典：</code></p><p>在计算机科学中，<strong>闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</strong><br>所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。 Peter J. Landin 在1964年将术语闭包定义为一种包含环境成分和控制成分的实体。</p><ul><li>闭包概念:<ul><li>闭包就是有权访问另一个函数作用域中变量的函数.</li></ul></li><li>分析这句话:<ol><li>闭包是定义在函数中的函数.</li><li>闭包能访问包含函数的变量.</li><li>闭包携带状态包<ul><li>即使包含函数执行完了, 被闭包引用的变量也得不到释放.</li></ul></li></ol></li></ul><p>接下来看第二个例子</p><h4 id="3-闭包的作用域"><a href="#3-闭包的作用域" class="headerlink" title="3. 闭包的作用域"></a>3. 闭包的作用域</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第三题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeActions</span><span class="params">()</span>:</span></span><br><span class="line">    acts = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        acts.append(<span class="keyword">lambda</span> x: i ** x)</span><br><span class="line">    <span class="keyword">return</span> acts</span><br><span class="line">acts = makeActions()</span><br><span class="line">print(acts[<span class="number">0</span>](<span class="number">2</span>))</span><br><span class="line">print(acts[<span class="number">1</span>](<span class="number">2</span>))</span><br><span class="line">print(acts[<span class="number">2</span>](<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img data-src="/2019/05/18/index/bibao2.jpg" alt="闭包2"></p><p>当执行结束<code>acts = makeActions()</code>这一行代码。</p><ol><li>makeActions()函数内部【i】持有了 2,并且不释放；</li><li>acts实际包含了三个函数类型的内容</li><li>当调用<code>acts[x](2)</code>, 实际执行函数为<strong>lambda x: i ** x</strong>，而<code>i持有2</code></li><li>故当 y 一致时，x 的位置变化不影响结果，（acts[x] (y)）</li></ol><h4 id="4-加深一点"><a href="#4-加深一点" class="headerlink" title="4 加深一点"></a>4 加深一点</h4><p>如果我们就是要<code>错误的结果</code>，【0，1，8】呢？<br>如何去实现？</p><p>还记得在前面🈶个状态的概念吗？</p><ul><li>携带状态的闭包的概念<ul><li>即使包含函数执行完了, 被闭包引用的变量也得不到释放.</li></ul></li></ul><blockquote><p>思路：假如我们把列表中的位置对应i的状态保存起来，那就不就完事了么？</p></blockquote><blockquote><p>如果真的从头看到现在，并且一路思考，想必已经花费你不少时间了。</p><blockquote><p>此时的你应该完全理解文中阐述的内容了。</p></blockquote><blockquote><p>相对真正掌握知识而言，付出的时间的价值是翻倍的</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeActions</span><span class="params">()</span>:</span></span><br><span class="line">    acts = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(param)</span>:</span></span><br><span class="line">            newParam = <span class="keyword">lambda</span> x: param ** x</span><br><span class="line">            <span class="keyword">return</span> newParam</span><br><span class="line">        acts.append(g(i))</span><br><span class="line">    <span class="keyword">return</span> acts</span><br><span class="line">acts = makeActions()</span><br><span class="line">print(acts[<span class="number">0</span>](<span class="number">2</span>))</span><br><span class="line">print(acts[<span class="number">1</span>](<span class="number">2</span>))</span><br><span class="line">print(acts[<span class="number">2</span>](<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img data-src="/2019/05/18/index/bibao3.jpg" alt="第一次保留的状态"><br><img data-src="/2019/05/18/index/bibao4.jpg" alt="三种状态"></p><h4 id="5-再深入一些"><a href="#5-再深入一些" class="headerlink" title="5 再深入一些"></a>5 再深入一些</h4><p>这段代码能让你想到什么❓<br>最直观的就是：这个是个闭包</p><p>但是：这段代码万万不能让我联想到：<strong>直线方程</strong>、<strong>斜率</strong>、<strong>截距</strong>、<strong>坐标系</strong>等等的概念。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a*x + b</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line">line1 = line_conf(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">line2 = line_conf(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(line1(<span class="number">5</span>), line2(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span><span class="params">(a, b, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a*x + b</span><br><span class="line">line_conf(<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">line_conf(<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>当我们明白了：<code>函数是对象</code>、<code>函数可以作为返回值</code>、<code>闭包携带状态</code>等等的概念后，可能会思考</p><ol><li>为何会有这种东西存在❓</li><li>究竟其用途是什么❓</li></ol><p>关于这个疑问，在所搜大量数据的时候，发现了<a href="https://www.zhihu.com/question/34872127/answer/60297928" target="_blank" rel="noopener">知乎上有个有意思的问答</a></p><blockquote><p><a href="https://www.zhihu.com/question/34872127/answer/60297928" target="_blank" rel="noopener">以下摘录其中的一部分</a></p></blockquote><ol><li><p><strong>简短答案</strong>：前者更具有可读性和可移植性。</p></li><li><p><strong>较完整答案</strong>：闭包（closure）和类（class）有相通之处，带有面向对象的<code>封装思维</code>。而面向对象编程正是为了更佳的可读性和更关键的可移植性；不过这个例子没太体现出面向对象的额外优势。</p></li><li><p><strong>升级答案</strong>：题主问出这个问题，很可能是现在<code>流行的编程教材知其然不知其所然的风格带来的恶果</code>。如果未来带着这个想法进入IT行业，会非常不适应公司的代码规范等基础要求；即便不入行只是自己写写程序用，也会和很多优秀、可复用等的理念失之交臂。</p></li><li><p>我认为一本优秀的教材除了讲基础语法，应该尽量教你代码<code>为什么这么写好</code>、<code>那么写不好</code>、那么那么写现在能用但<code>多半以后会出事</code>。</p></li></ol><blockquote><p><a href="https://www.zhihu.com/question/34872127/answer/60297928" target="_blank" rel="noopener">以上为摘录其中的一部分</a></p></blockquote><h3 id="我们所讨厌的行为，却是自己的所作所为。"><a href="#我们所讨厌的行为，却是自己的所作所为。" class="headerlink" title="我们所讨厌的行为，却是自己的所作所为。"></a><strong>我们所讨厌的行为，却是自己的所作所为。</strong></h3><h3 id="多问问什么，也许有一天，那些望而生畏会变成理所当然。"><a href="#多问问什么，也许有一天，那些望而生畏会变成理所当然。" class="headerlink" title="多问问什么，也许有一天，那些望而生畏会变成理所当然。"></a><strong>多问问什么，也许有一天，那些望而生畏会变成理所当然。</strong></h3><p>参考链接<br><a href="http://www.bubuko.com/infodetail-2316064.html" target="_blank" rel="noopener">Python 函数之lambda、map、filter和reduce</a><br><a href="https://my.oschina.net/cloudcoder/blog/226461" target="_blank" rel="noopener">内置函数的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数 </tag>
            
            <tag> 匿名函数 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之作用域【10】</title>
      <link href="2019/05/16/index/"/>
      <url>2019/05/16/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>尽量掌握 Python 命名空间、作用域</li><li>掌握 Python 匿名函数</li></ol><blockquote><p>本文本属于那种</p><blockquote><p>只可意会不可言传的范畴</p></blockquote></blockquote><p>原因:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 大部分人都直接开撸，因为和想象差不多；</span><br><span class="line">2. 不容易说明白, 除非遇到bug了，断点调试。</span><br></pre></td></tr></table></figure><h3 id="第一部分-命名空间"><a href="#第一部分-命名空间" class="headerlink" title="第一部分 命名空间"></a>第一部分 命名空间</h3><blockquote><p>听起来高大上的词汇，或许是简单的.</p></blockquote><p><strong>在理解这个词汇钱，先看一个示例</strong></p><p>A 公司有个员工 A1，工号 001；<br>B 公司有个员工 B1，工号 001；</p><p>为何工资不会发错？</p><p><strong>这不废话么？</strong></p><p>原因在于：虽有同样的工号，但是相对而言的，在不同的公司（<code>空间</code>）内。</p><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p><strong>命名空间（英语：Namespace）</strong>，也称名字空间、名称空间等，它表示着一个<code>标识符（identifier）的可见范围</code>。<br>一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是<code>互不相干的</code>。这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。</p><p><strong>空间</strong>相当于一个<code>集合</code>，<code>包含</code>相对相对范围内所有的内容(<strong>对象名</strong>)</p><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h4><ol><li>内置命名空间(Built-in Namespaces)：伴随 Python 的运行而存在，<code>内置函数的命名空间</code>都属于<code>内置命名空间</code>，比如前面的 id()，直接可以用。</li><li>全局命名空间(Module:Global Namespaces)：每个模块拥有自己的命名集合；</li><li>本地命名空间(Function&amp;Class: Local Namespaces)：局部命名空间，每个函数、类所拥有的命名空间，记录了函数、类中定义的所有变量。</li></ol><blockquote><p>一图胜前言</p></blockquote><p><img data-src="1.jpg" alt="命名空间"></p><h4 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3. 生命周期"></a>3. 生命周期</h4><ol><li>内置命名空间在 Python<code>解释器启动时创建</code>，解释器<code>退出时销毁</code>；</li><li>全局命名空间在模块被解释器<code>读入时创建</code>，<code>解释器退出时销毁</code>；</li><li>局部命名空间，包含函数、类定义。<ul><li>函数的局部命名空间：在函数调用时创建，函数返回结果或抛出异常时被销毁（每一个递归函数都拥有自己的命名空间）；</li><li>类定义的命名空间：在解释器读到类定义（class 关键字）时创建，类定义结束后销毁。（*）</li></ul></li></ol><h4 id="4-存在的意义"><a href="#4-存在的意义" class="headerlink" title="4. 存在的意义"></a>4. 存在的意义</h4><p>为了解决命名冲突。</p><p>你去寄快递，说邮寄到<strong>南京路 118 号</strong>，他肯定会让你写上是哪个省的，否则不就乱了么。</p><h3 id="第二部分-作用域"><a href="#第二部分-作用域" class="headerlink" title="第二部分 作用域"></a>第二部分 作用域</h3><h4 id="1-作用域是什么？"><a href="#1-作用域是什么？" class="headerlink" title="1. 作用域是什么？"></a>1. 作用域是什么？</h4><blockquote><p>可能有点绕，多读几遍，多思考下</p><p>可能有点绕，多读几遍，多思考下</p></blockquote><p>命名空间是<code>对象名称</code>的<strong>集合</strong>,可被访问区域，比如 id(),可以全局<strong>被调用</strong><br>作用域是针对命名空间而言的，是<strong>作用域定义了命名空间的可用范围</strong></p><p>以下注意事项会在第三部分的代码中证实：</p><ol><li>只有函数、类、模块会产生新的作用域，代码块（例如if、for代码块）不会产生新的作用域。</li><li>python中变量的作用域是由它在源代码中的位置决定的（*）</li></ol><p>先看下分类，然后进一步阐述<strong>命名空间与作用域的关系</strong></p><h4 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2. 分类"></a>2. 分类</h4><ol><li>Local（局部作用域）：首先搜索，包含局部名字的最内层（innermost）作用域，如函数/方法/类的内部局部作用域；</li><li>Enclosing（ 闭包函数外的函数中）：根据嵌套层次从内到外搜索，包含非局部（nonlocal）非全局（nonglobal）名字的任意封闭函数的作用域。如两个嵌套的函数，内层函数的作用域是局部作用域，外层函数作用域就是内层函数的 Enclosing 作用域；</li><li>Global（全局作用域<br>）：倒数第二次被搜索，包含当前模块全局名字的作用域；</li><li>Built-in（内建作用域）：最后被搜索，包含内建名字的最外层作用域。</li></ol><p><strong>查找规则</strong></p><p><img data-src="2.jpg" alt="如图所示"></p><blockquote><p>内层可以访问外层，但外层不能访问内层</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">global_var = <span class="number">2</span>  <span class="comment"># 全局作用域</span></span><br><span class="line">x = id(global_var)  <span class="comment"># 内建作用域，调用id()函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    out_var = <span class="number">1</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        inner_var = <span class="number">2</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure><h4 id="3-关系"><a href="#3-关系" class="headerlink" title="3. 关系"></a>3. 关系</h4><p><del>尽量用自己的理解去阐述明白，如有不对，敬请指正。</del></p><p><del>第一阶段：在人类诞生初期，是没有族群、部落、国家之分的，此时相当于全人类都是属于一个<strong>人类的集合</strong>，此时的<strong>人类</strong>相当于<strong>一个人类</strong>，没有高低贵贱黑白美丑之分。</del></p><p><del>第二阶段：族群的出现，代表着某些人有用自己的势力范围，把人类一个整体分为N个族群</del></p><h3 id="第三部分-函数作用域"><a href="#第三部分-函数作用域" class="headerlink" title="第三部分 函数作用域"></a>第三部分 函数作用域</h3><p>上一篇是关于<strong>函数的</strong>，那就以函数作用域为实例，类、模块都是类似的。</p><h4 id="1-整体的例子"><a href="#1-整体的例子" class="headerlink" title="1. 整体的例子"></a>1. 整体的例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">print(<span class="string">"第一步：x的内存地址： "</span>, id(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 同层 x=2</span></span><br><span class="line">    print(<span class="string">"第二步：x的内存地址： "</span>, id(x))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">3</span></span><br><span class="line">        <span class="comment"># 打印同层 x=3</span></span><br><span class="line">        print(<span class="string">"第三步：x的内存地址： "</span>, id(x))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_up</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 打印上层 x=2</span></span><br><span class="line">        print(<span class="string">"第三步(up)：x的内存地址： "</span>, id(x))</span><br><span class="line">    inner()</span><br><span class="line">    inner_up()</span><br><span class="line">    <span class="comment"># 打印的是同层x=2，即outer()下侧的同一作用域的x</span></span><br><span class="line">    print(<span class="string">"第四步：x的内存地址： "</span>, id(x))</span><br><span class="line">outer()</span><br><span class="line">print(<span class="string">"第五步：x的内存地址： "</span>, id(x))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python3 fun.py </span><br><span class="line">第一步：a的内存地址：  <span class="number">4336156688</span></span><br><span class="line">第二步：x的内存地址：  <span class="number">4336156720</span></span><br><span class="line">第三步：x的内存地址：  <span class="number">4336156752</span></span><br><span class="line">第三步(up)：x的内存地址：  <span class="number">4336156720</span></span><br><span class="line">第四步：x的内存地址：  <span class="number">4336156720</span></span><br><span class="line">第五步：x的内存地址：  <span class="number">4336156688</span></span><br></pre></td></tr></table></figure><h4 id="2-nonlocal和global区别"><a href="#2-nonlocal和global区别" class="headerlink" title="2. nonlocal和global区别"></a>2. nonlocal和global区别</h4><ol><li>global关键字：用来在函数或其它局部作用域中<strong>使用全局变量</strong>。</li><li>nonlocal关键字：用来在函数或其它作用域中使用外层（非全局）变量</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">print(<span class="string">"第一步：x的内存地址： "</span>, id(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    print(<span class="string">"第二步：x的内存地址： "</span>, id(x))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 注意这行</span></span><br><span class="line">        <span class="keyword">global</span> x</span><br><span class="line">        x = <span class="number">3</span></span><br><span class="line">        print(<span class="string">"第三步：x的内存地址： "</span>, id(x))</span><br><span class="line">    inner()</span><br><span class="line">    print(<span class="string">"第四步：x的内存地址： "</span>, id(x))</span><br><span class="line">outer()</span><br><span class="line">print(<span class="string">"第五步：x的内存地址： "</span>, id(x))</span><br></pre></td></tr></table></figure><p>针对outer中x的：</p><ol><li><p>采用global的结果<br><img data-src="20.png" alt="global"></p></li><li><p>采用nonlocal的结果<br><img data-src="30.png" alt="nonlocal"></p></li></ol><h4 id="3-作用域的位置"><a href="#3-作用域的位置" class="headerlink" title="3. 作用域的位置"></a>3. 作用域的位置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D;&#39;简单即是美&#39;</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    name &#x3D; &#39;Python&#39;</span><br><span class="line">    f1()</span><br><span class="line">f2()</span><br></pre></td></tr></table></figure><p><strong>Python函数的作用域取决于其函数代码块在整体代码中的位置，</strong>而不是调用时机的位置。调用f1的时候，会去f1函数的定义体查找，对于f1函数，它的外部是name=’简单即是美’，而不是name = ‘Python’。</p><p><strong>结果</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">简单即是美</span><br></pre></td></tr></table></figure><p>倒数第二步<br><img data-src="31.png" alt="倒数第二步"></p><p>参考链接</p><p><a href="https://www.linuxidc.com/Linux/2018-12/155918.htm" target="_blank" rel="noopener">Python 中命名空间与作用域使用总结</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 匿名函数 </tag>
            
            <tag> 命名空间 </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--函数【9】</title>
      <link href="2019/05/15/index/"/>
      <url>2019/05/15/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>掌握 Python 函数–定义、参数类型</li><li>掌握 Python 函数–变量作用域</li></ol><blockquote><p>正确理解 Python 函数，能够更好地理解 <strong>Python 装饰器、匿名函数（lambda）、函数式编程</strong>等高阶技术。</p></blockquote><p>文章较长，整体内容包含如下思维导图</p><p><img data-src="func.png" alt="概述"></p><h3 id="第一部分-重新认识函数"><a href="#第一部分-重新认识函数" class="headerlink" title="第一部分 重新认识函数"></a>第一部分 重新认识函数</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>Python 中函数的定义如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    <span class="comment"># 内部代码</span></span><br><span class="line">    <span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>函数代码块以<code>def关键词</code>开头，一个空格之后接<code>函数标识符名称</code>和<code>圆括号()</code>，再接个<code>冒号</code>。</li><li>圆括号中间存放参数</li><li>使用 return 结束函数。默认返回 None。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a + b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum</span><br><span class="line"><span class="comment"># 函数地址</span></span><br><span class="line">&lt;function sum at <span class="number">0x10af4f158</span>&gt;</span><br><span class="line"><span class="comment">## 函数方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(sum)</span><br><span class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__call__'</span>, <span class="string">'__class__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__get__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__kwdefaults__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__qualname__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum.__name__</span><br><span class="line"><span class="string">'sum'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum.__module__</span><br><span class="line"><span class="string">'__main__'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2 调用函数"></a>2 调用函数</h4><p>使用函数名后跟圆括号的方式调用函数。<br>调用的同时要根据函数的定义体，提供<code>相应个数和类型的参数</code>，每个参数之间用逗号分隔。</p><h4 id="3-函数是对象"><a href="#3-函数是对象" class="headerlink" title="3. 函数是对象"></a>3. 函数是对象</h4><p><strong>在 Python 中万物皆为对象</strong>，函数也不例外，</p><ol><li>可以作为对象可以赋值给一个变量</li><li>可以作为元素添加到集合对象中</li><li>可作为参数值传递给其它函数</li><li>可以当做函数的返回值</li></ol><blockquote><p>函数身为一个对象，拥有对象模型的三个通用属性：<strong>id、类型、和值。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a + b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(add)</span><br><span class="line"><span class="number">4472644200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(add)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">function</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">add</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">add</span> <span class="title">at</span> 0<span class="title">x10a972268</span>&gt;</span></span><br></pre></td></tr></table></figure><p>变量赋值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newAdd = add</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newAdd(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add <span class="keyword">is</span> newAdd</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>其实上侧的，只是不同的名字指向同一个内存地址，同时这块地址被多次引用。</p><p><img data-src="1.jpg" alt="变量"></p><blockquote><p>了解了函数是对象，以及上侧的几个性质，更得牢记一切都是对象。<br>既然是对象，性质都类似，其余的集合、参数、返回值，思考下就明白了</p></blockquote><h3 id="第二部分-参数类型"><a href="#第二部分-参数类型" class="headerlink" title="第二部分 参数类型"></a>第二部分 参数类型</h3><p>其实就是下侧那个括号里的数据，但是需要注意的是，<code>传的是什么</code>，<code>怎么传</code></p><p><strong>定义</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    <span class="comment"># 内部代码</span></span><br><span class="line">    <span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure><p><strong>完整的语法</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func(positional_args, keyword_args, *tuple_nonkw_args, **dict_kw_args)</span><br></pre></td></tr></table></figure><p><strong>函数的参数的分类</strong></p><ol><li>位置参数(必选参数)</li><li>默认参数</li><li>可变参数 *args</li><li>可变参数 **kwargs</li><li>必选参数</li></ol><h4 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1. 位置参数"></a>1. 位置参数</h4><p>定义：<code>调用</code>时候的传的<code>参数</code>必须与<code>定义</code>时的<code>参数</code>一一对应。<br>注意事项：<br>不能多也不能少。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="comment"># 一一对应</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment"># 参数缺失</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sum(<span class="number">1</span>))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: sum() missing <span class="number">1</span> required positional argument: <span class="string">'b'</span></span><br><span class="line"><span class="comment"># 关键字参数,顺序不重要，存在即可</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sum(b=<span class="number">10</span>, a=<span class="number">4</span>))</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><h4 id="2-默认值"><a href="#2-默认值" class="headerlink" title="2. 默认值"></a>2. 默认值</h4><p>定义：在函数声明的时候，可以给某个参数指定默认值<br>注意事项：<br>位置：需要放在<code>位置参数</code>之后</p><p><strong>默认参数需要在位置参数的后边</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n = <span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**n</span><br><span class="line">ret1 = power(<span class="number">10</span>)   <span class="comment"># 使用默认的参数值n=2</span></span><br><span class="line">ret2 = power(<span class="number">10</span>, <span class="number">4</span>)  <span class="comment"># 将4传给n，实际计算10**4的值</span></span><br><span class="line">ret3 = power(n=<span class="number">1</span>, x=<span class="number">100</span>) <span class="comment"># 指定参数名传值</span></span><br></pre></td></tr></table></figure><p><strong>来个例子</strong><br>主要涉及：内存地址、参数默认值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a=[])</span>:</span></span><br><span class="line">    a.append(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">print(func())</span><br><span class="line">print(func())</span><br><span class="line">print(func())</span><br></pre></td></tr></table></figure><p><strong>三思</strong><br><strong>三思</strong><br><strong>三思</strong></p><p>答案如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'A'</span>]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'A'</span>]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>]</span><br></pre></td></tr></table></figure><p>如果真正理解了，Python 对象的<strong>变量名与内存地址</strong>,这个问题还是很简单的。</p><ol><li>默认参数 a 指向的空列表对象就会被创建，假如内存地址为<code>0x123</code>;</li><li>之后每次调用，都会在原地址后追加<code>A</code>;</li><li>可以试着在函数内部打印 a 的内存地址，应该是一致的。</li></ol><blockquote><p>如何避免这种操作？</p><blockquote><p>让 a 的默认值指向一个<strong>不可变对象即可</strong>，如：数字、None 等</p></blockquote></blockquote><h4 id="3-可变参数-args"><a href="#3-可变参数-args" class="headerlink" title="3. 可变参数 *args"></a>3. 可变参数 *args</h4><p>在 python 里面，函数在声明的时候，参数中可以使用(<em>变量名)的方式来接受<code>不确定长度的参数</code>，但是在 python 里面大家约定俗成使用`</em>args<code>接受不定长参数，之后将这些参数放到一个</code>tuple`里面，可以通过访问 args 来获取这些不定长参数。</p><p><code>例子一</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">changeFunc</span><span class="params">(*args)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(type(args))</span><br><span class="line"><span class="meta">... </span>    print(args)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>changeFunc(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="number">3</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure><p><code>例子二</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>changeFunc([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="number">3</span>])</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">3</span>],)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>为何打印出来是这样？<br>因为是数组是作为一个整体传过来的。<br>如何将 list 的元素转换为 tuple 的元素？结果与例子一一致？</p></blockquote><p><strong>答案：</strong> 参数前加个星号,<a href="https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists" target="_blank" rel="noopener">解压参数列表</a>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmpList = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*tmpList)</span><br><span class="line">a b <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tmpList)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 调用函数时，数组➕星号，解压参数列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>changeFunc(*tmpList)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure><p>当参数已经在<code>列表或元组中</code>但需要为需要单独位置参数的函数, 需要解压参数, 然后再一一传进去</p><p>针对字典带上*号，解压的是 key</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"c"</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*dict)</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure><h4 id="4-可变参数-args"><a href="#4-可变参数-args" class="headerlink" title="4. 可变参数 *args"></a>4. 可变参数 *args</h4><p>定义：<code>*args</code>参数表示未知的位置参数序列长度，而<code>\*\*kwargs</code>代表包含<strong>关键字和值映射关系的字典</strong>，它可以包含任意数量的关键字和值映射，并且在函数定义中“*args”必须位于“**kwargs”前面。</p><blockquote><p>*args 必须在**kwargs 之前。<br>默认值参数必须再必选参数之前。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">kwargs</span><span class="params">(first, second=<span class="number">2</span>, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(first, second)</span><br><span class="line"><span class="meta">... </span>    print(args)</span><br><span class="line"><span class="meta">... </span>    print(kwargs)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># kwargs为空是因为被*args吃掉了</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs(<span class="number">1</span>, <span class="number">3</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, &#123;<span class="string">"key1"</span>: <span class="string">"value"</span>&#125;)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, &#123;<span class="string">'key1'</span>: <span class="string">'value'</span>&#125;)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">"key1"</span>: <span class="string">"value"</span>&#125;</span><br><span class="line"><span class="comment"># 解压参数，</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs(<span class="number">1</span>, <span class="number">3</span>, *list, **dict)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">&#123;<span class="string">'key1'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后边不能追加参数了。。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(**kw, error)</span>:</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(**kw, error)</span>:</span></span><br><span class="line">                       ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><h4 id="5-关键字参数"><a href="#5-关键字参数" class="headerlink" title="5. 关键字参数"></a>5. 关键字参数</h4><blockquote><p>位置参数可以不带参数名，但是星号后边的就必选带上参数名</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 星号后必选加上参数名字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(loction, second, *, must)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(loction, second, must)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: func() takes <span class="number">2</span> positional arguments but <span class="number">3</span> were given</span><br><span class="line"><span class="comment"># 符合预期</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, must=<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>来一个汇总的骚操作</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">student</span><span class="params">(name, age=<span class="number">18</span>, *args, sex, classroom, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(name, age, args, sex, classroom, kwargs)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># *args 之后的一般参数默认更改为关键字参数，sex/classroom未传递，报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student(<span class="string">"howard"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: student() missing <span class="number">2</span> required keyword-only arguments: <span class="string">'sex'</span> <span class="keyword">and</span> <span class="string">'classroom'</span></span><br><span class="line"><span class="comment"># 位置参数与关键字参数【必选】，可选参数【可选】</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student(<span class="string">"howard"</span>, sex=<span class="string">"1"</span>, classroom=<span class="string">"python"</span>)</span><br><span class="line">howard <span class="number">10</span> () <span class="number">1</span> python &#123;&#125;</span><br><span class="line"><span class="comment"># dict</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict</span><br><span class="line">&#123;<span class="string">'key1'</span>: <span class="string">'value'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student(<span class="string">"howard"</span>, sex=<span class="string">"1"</span>, classroom=<span class="string">"python"</span>, **dict)</span><br><span class="line">howard <span class="number">10</span> () <span class="number">1</span> python &#123;<span class="string">'key1'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="本文重点注意事项："><a href="#本文重点注意事项：" class="headerlink" title="本文重点注意事项："></a>本文重点注意事项：</h3><ol><li>牢记函数为第一类对象；</li><li>可选参数注意解压参数；</li></ol><p>参考<br><a href="https://www.zhihu.com/question/25950466" target="_blank" rel="noopener">函数作为参数的问题</a><br><a href="http://python.jobbole.com/81646/" target="_blank" rel="noopener">Python 中的函数详解</a><br><a href="http://python.jobbole.com/81646/" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数 </tag>
            
            <tag> 函数参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础系列之Http模块【5】</title>
      <link href="2019/05/14/index/"/>
      <url>2019/05/14/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>掌握Node.js核心模块之网络模块</li></ul><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-c6a6ee0a6a22f108.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章目录"></p><blockquote><p>Node.js标准库提供了 http 模块，是Node.js中非常重要的一个核心模块。</p></blockquote><p>通过http模块，你可以使用其http.createServer方法创建一个<code>http服务器</code>，也可以使用其http.request方法创建一个<code>http客户端。</code></p><h3 id="第一部分-http服务端"><a href="#第一部分-http服务端" class="headerlink" title="第一部分: http服务端"></a>第一部分: http服务端</h3><h4 id="1-1-HTTP是什么"><a href="#1-1-HTTP是什么" class="headerlink" title="1.1 HTTP是什么?"></a>1.1 HTTP是什么?</h4><p>HTTP是一个用来传送数据的应用层协议，在其底层使用TCP传输协议。HTTP是互联网数据通信的基础，要响应客户端请求（如：浏览器访问），首先要布署HTTP服务器。</p><h4 id="1-2-HTTP之URL"><a href="#1-2-HTTP之URL" class="headerlink" title="1.2 HTTP之URL"></a>1.2 HTTP之URL</h4><p>URL: (Uniform / Universal Resource Locator，常缩写为URL)统一资源定位符,统一资源定位符的标准格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">协议类型:&#x2F;&#x2F;服务器地址（必要时需加上端口号）&#x2F;路径&#x2F;文件名</span><br></pre></td></tr></table></figure><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-0ada86699d61295d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="http1-url-structure.png"></p><h4 id="1-3-http之请求报文"><a href="#1-3-http之请求报文" class="headerlink" title="1.3 http之请求报文"></a>1.3 http之请求报文</h4><p>一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成;</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-f50e4e26dd6acfa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2012072810301161.png"></p><p><strong>举例子:</strong></p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-cf0c5d48bf504245.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201411187986714.png"></p><p>请求报文中关键的字段:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-Agent：产生请求的浏览器类型;</span><br><span class="line">Accept：客户端可识别的响应内容类型列表;星号 “ * ” 用于按范围将类型分组，用 “ *&#x2F;* ” 指示可接受全部类型，用“ type&#x2F;* ”指示可接受 type 类型的所有子类型;</span><br><span class="line">Accept-Language：客户端可接受的自然语言;</span><br><span class="line">Accept-Encoding：客户端可接受的编码压缩格式;</span><br><span class="line">Accept-Charset：可接受的应答的字符集;</span><br><span class="line">Host：请求的主机名，允许多个域名同处一个IP 地址，即虚拟主机;</span><br><span class="line">connection：连接方式(close 或 keepalive);</span><br><span class="line">Cookie：存储于客户端扩展字段，向同一域名的服务端发送属于该域的cookie;</span><br></pre></td></tr></table></figure><h4 id="1-4-HTTP响应报文"><a href="#1-4-HTTP响应报文" class="headerlink" title="1.4 HTTP响应报文"></a>1.4 HTTP响应报文</h4><p>HTTP 响应报文由<code>状态行、响应头部、空行 和 响应包体</code> 4 个部分组成</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-7c6e79fa4c5d355a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201446213766964.jpg"></p><p>状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1xx：指示信息--表示请求已接收，继续处理。</span><br><span class="line">2xx：成功--表示请求已被成功接收、理解、接受。</span><br><span class="line">3xx：重定向--要完成请求必须进行更进一步的操作。</span><br><span class="line">4xx：客户端错误--请求有语法错误或请求无法实现。</span><br><span class="line">5xx：服务器端错误--服务器未能实现合法的请求。</span><br></pre></td></tr></table></figure><p>常见的状态码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200 OK：客户端请求成功。</span><br><span class="line">400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</span><br><span class="line">401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</span><br><span class="line">403 Forbidden：服务器收到请求，但是拒绝提供服务。</span><br><span class="line">404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</span><br><span class="line">500 Internal Server Error：服务器发生不可预期的错误。</span><br><span class="line">503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP&#x2F;1.1 200 OK（CRLF）。</span><br></pre></td></tr></table></figure><h3 id="第二部分-http服务器端"><a href="#第二部分-http服务器端" class="headerlink" title="第二部分 http服务器端"></a>第二部分 http服务器端</h3><h4 id="1-1-http-server遵循了node-js的时间模块的规则-有触发和相应事件-http-Server对象是一个EventEmitter"><a href="#1-1-http-server遵循了node-js的时间模块的规则-有触发和相应事件-http-Server对象是一个EventEmitter" class="headerlink" title="1.1 http.server遵循了node.js的时间模块的规则, 有触发和相应事件;http.Server对象是一个EventEmitter;"></a>1.1 http.server遵循了node.js的时间模块的规则, 有触发和相应事件;http.Server对象是一个EventEmitter;</h4><p>创建: http.createServer方法会返回一个<code>http.Server对象实例</code>，requestListener可选参数传入时，将做为http.Server对象’request’事件的监听器。</p><p>http.Server对象提供的事件方法有:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. request: function (request, response) &#123; &#125;每次请求都会触发该方法;</span><br><span class="line">2. connection：当TCP连接建立时，该事件被触发，提供一个参数socket，是net.Socket的实例;</span><br><span class="line">3. close: 当此服务器关闭时触发;</span><br><span class="line">等等..</span><br></pre></td></tr></table></figure><h4 id="1-2-http-Server中的方法"><a href="#1-2-http-Server中的方法" class="headerlink" title="1.2 http.Server中的方法"></a>1.2 http.Server中的方法</h4><h5 id="2-2-1-server-listen-port-hostname-backlog-callback"><a href="#2-2-1-server-listen-port-hostname-backlog-callback" class="headerlink" title="2.2.1 server.listen(port[, hostname][, backlog][, callback])"></a>2.2.1 server.listen(port[, hostname][, backlog][, callback])</h5><p>在指定的主机名（hostname）和端口（port）开始接收连接, </p><h5 id="1-2-2-server-listen-path-callback"><a href="#1-2-2-server-listen-path-callback" class="headerlink" title="1.2.2 server.listen(path, [callback])"></a>1.2.2 server.listen(path, [callback])</h5><p>监听某个</p><h4 id="1-3-http-ServerResponse服务器响应对象"><a href="#1-3-http-ServerResponse服务器响应对象" class="headerlink" title="1.3 http.ServerResponse服务器响应对象"></a>1.3 http.ServerResponse服务器响应对象</h4><p>http.ServerResponse是一个由http.Server创建的对象, ，在触发’request’事件后，做事件回调函数的第二个参数传递给回调函数.</p><p><code>response.writeHead(statusCode[, statusMessage][, headers])</code></p><p>向客户端请求发送一个响应头。<br>statusCode状态码是 3 位数字，如：404。<br>statusMessage设置状态消息。<br>最后一个参数headers是响应头。</p><blockquote><p>这个方法只能在当前请求中使用一次，并且必须在response.end()之前调用。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var body &#x3D; &#39;hello world&#39;;</span><br><span class="line">response.writeHead(200, &#123;</span><br><span class="line">  &#39;Content-Length&#39;: body.length,</span><br><span class="line">  &#39;Content-Type&#39;: &#39;text&#x2F;plain&#39; &#125;);</span><br></pre></td></tr></table></figure><p><code>response.setHeader(name, value)</code></p><p>为默认或者已存在的头设置一条单独的头内容。如果这个头已经存在于 将被送出的头中，将会覆盖原来的内容。如果我想设置更多的头， 就使用一个相同名字的字符串数组</p><p><code>response.write(chunk, [encoding])</code><br>向响应流发送一个数据块。这个方法可能被调用多次，以提供响应体内容。</p><p><code>response.end([data], [encoding])</code></p><p>当所有的响应报头和报文被发送完成时这个方法将信号发送给服务器，服务器会认为这个消息完成了。 每次响应完成之后必须调用该方法。</p><h3 id="第三部分-http客户端"><a href="#第三部分-http客户端" class="headerlink" title="第三部分 http客户端"></a>第三部分 http客户端</h3><p>http模块提供了两个创建HTTP客户端的方法<code>http.request</code>和<code>http.get</code>，以向HTTP服务器发起请求。<code>http.get是http.request快捷方法</code>，该方法仅支持GET方式的请求。</p><p>一个 IncomingMessage对象是由 http.Server或http.ClientRequest创建的，并作为第一参数分别传递给’request’和’response’ 事件。它也可以被用来访问应答的状态，头文件和数据。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">  var content &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">  req.on(&#39;data&#39;, function (chunk) &#123;</span><br><span class="line">    content +&#x3D; chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  req.on(&#39;end&#39;, function () &#123;</span><br><span class="line">    res.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text&#x2F;plain&quot;&#125;);</span><br><span class="line">    res.write(&quot;You&#39;ve sent: &quot; + content);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;).listen(3000);</span><br></pre></td></tr></table></figure><p>data事件会在数据接收过程中，每收到一段数据就触发一次，接收到的数据被传入回调函数。end事件则是在所有数据接收完成后触发。</p><p><code>http.request(options[, callback])</code><br>request方法的options参数，可以是一个对象，也可以是一个字符串。如果是字符串，就表示这是一个URL，Node内部就会自动调用url.parse()，处理这个参数。</p><p>options对象可以设置如下属性:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host：HTTP请求所发往的域名或者IP地址，默认是localhost。</span><br><span class="line">hostname：该属性会被url.parse()解析，优先级高于host。</span><br><span class="line">port：远程服务器的端口，默认是80。</span><br><span class="line">localAddress：本地网络接口。</span><br><span class="line">socketPath：Unix网络套接字，格式为host:port或者socketPath。</span><br><span class="line">method：指定HTTP请求的方法，格式为字符串，默认为GET。</span><br><span class="line">path：指定HTTP请求的路径，默认为根路径（&#x2F;）。可以在这个属性里面，指定查询字符串，比如&#x2F;index.html?page&#x3D;12。如果这个属性里面包含非法字符（比如空格），就会抛出一个错误。</span><br><span class="line">headers：一个对象，包含了HTTP请求的头信息。</span><br><span class="line">auth：一个代表HTTP基本认证的字符串user:password。</span><br><span class="line">agent：控制缓存行为，如果HTTP请求使用了agent，则HTTP请求默认为Connection: keep-alive，它的可能值如下：</span><br><span class="line">undefined（默认）：对当前host和port，使用全局Agent。</span><br><span class="line">Agent：一个对象，会传入agent属性。</span><br><span class="line">false：不缓存连接，默认HTTP请求为Connection: close。</span><br><span class="line">keepAlive：一个布尔值，表示是否保留socket供未来其他请求使用，默认等于false。</span><br><span class="line">keepAliveMsecs：一个整数，当使用KeepAlive的时候，设置多久发送一个TCP KeepAlive包，使得连接不要被关闭。默认等于1000，只有keepAlive设为true的时候，该设置才有意义。</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line">&#x2F;&#x2F;仅对从http.Server获得到的请求(request)有效.</span><br><span class="line">console.log(req.url);</span><br><span class="line">&#x2F;&#x2F;请求&#x2F;响应 头对象.</span><br><span class="line">console.log(req.headers);</span><br><span class="line">&#x2F;&#x2F;服务器的HTTP版本。</span><br><span class="line">console.log(req.httpVersion);</span><br><span class="line">&#x2F;&#x2F;接收到的原始请求&#x2F;响应头字段列表。</span><br><span class="line">console.log(req.rawHeaders);</span><br><span class="line">&#x2F;&#x2F;仅对从http.Server获得到的请求(request)有效.比如‘GET’、‘DELETE’。</span><br><span class="line">console.log(req.method);</span><br><span class="line">&#125;).listen(3000, &#39;127.0.0.1&#39;);</span><br></pre></td></tr></table></figure><h3 id="第四部分-实例"><a href="#第四部分-实例" class="headerlink" title="第四部分 实例"></a>第四部分 实例</h3><h4 id="1-创建服务器-实现GET方法"><a href="#1-创建服务器-实现GET方法" class="headerlink" title="1 创建服务器, 实现GET方法"></a>1 创建服务器, 实现GET方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line">&#x2F;&#x2F;创建一个服务器, 回调函数的参数为响应, 和请求</span><br><span class="line">http.createServer(function(request, response)&#123;</span><br><span class="line">&#x2F;&#x2F;response.writeHead方法用来写入HTTP回应的头信息；</span><br><span class="line">response.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;plain&#39;&#125;);</span><br><span class="line">&#x2F;&#x2F;指定HTTP回应的内容。</span><br><span class="line">&#x2F;&#x2F;response.write(&#39;hello world&#39;);</span><br><span class="line">&#x2F;&#x2F;response.end方法用来写入HTTP回应的具体内容，以及回应完成后关闭本次对话。</span><br><span class="line">response.end(&#39;hello world&#39;);</span><br><span class="line">&#x2F;&#x2F;监听端口号和主机名</span><br><span class="line">&#125;).listen(3000, &#39;127.0.0.1&#39;);</span><br><span class="line"></span><br><span class="line">console.log(&#39;127.0.0.1:3000&#39;);</span><br></pre></td></tr></table></figure><h4 id="2-加载HTML文件"><a href="#2-加载HTML文件" class="headerlink" title="2. 加载HTML文件"></a>2. 加载HTML文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line">&#x2F;&#x2F;读取HTML文件</span><br><span class="line">fs.readFile(&#39;.&#x2F;2index.html&#39;, &#39;utf-8&#39;,function(err, data)&#123;</span><br><span class="line">if(err) throw err;</span><br><span class="line">&#x2F;&#x2F;为默认或者已存在的头设置一条单独的头内容。</span><br><span class="line">res.setHeader(&quot;Content-Type&quot;,&quot;text&#x2F;html;charset&#x3D;&#39;utf-8&#39;&quot;);</span><br><span class="line">&#x2F;&#x2F;响应的数据</span><br><span class="line">res.end(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).listen(3000, &#39;127.0.0.1&#39;);</span><br></pre></td></tr></table></figure><h4 id="3-创建服务器-实现POST方法"><a href="#3-创建服务器-实现POST方法" class="headerlink" title="3 创建服务器, 实现POST方法"></a>3 创建服务器, 实现POST方法</h4><p>一个简单的post请求:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">http.createServer(function(req, res) &#123;</span><br><span class="line">&#x2F;&#x2F;fs模块创建流文件, 名称为post.txt</span><br><span class="line">var file &#x3D; fs.createWriteStream(&#39;post.txt&#39;);</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;管子 pipe自动调用了data,end等事件 writeStream&#x2F;readStream</span><br><span class="line">req.pipe(file);</span><br><span class="line">&#x2F;&#x2F; 当有数据流时，写入数据</span><br><span class="line">req.on(&#39;data&#39;, function(postData)&#123;</span><br><span class="line">console.log(postData);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.on(&#39;end&#39;, function()&#123;</span><br><span class="line">res.end(&#39;end&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).listen(3000);</span><br></pre></td></tr></table></figure><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-3bdb0fd3627591a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="post请求"></p><p>参考链接<br><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">1.HTTP 协议入门</a><br><a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html" target="_blank" rel="noopener">2.HTTPS 升级指南</a><br><a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/28/2612910.html" target="_blank" rel="noopener">3.HTTP请求报文和HTTP响应报文</a><br><a href="http://yijiebuyi.com/blog/d37512fc6df0fc4d0adfc2ec5c3d46ff.html" target="_blank" rel="noopener">4.node.js querystring类介绍</a><br><a href="https://segmentfault.com/a/1190000000519006" target="_blank" rel="noopener">5.nodejs中流(stream)的理解</a><br><a href="http://www.cnblogs.com/dolphinX/p/3460545.html" target="_blank" rel="noopener">6.简单理解Socket</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 </tag>
            
            <tag> Node </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础系列之Event模块【4】</title>
      <link href="2019/05/13/index/"/>
      <url>2019/05/13/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>理解JS 单线程、 Node.js EventLoop</li><li>理解Node.js事件模块</li></ol><h3 id="第一部分-前提-Nodejs-EventLoop"><a href="#第一部分-前提-Nodejs-EventLoop" class="headerlink" title="第一部分 前提 Nodejs EventLoop"></a>第一部分 前提 Nodejs EventLoop</h3><h4 id="1-【堆】【栈】【队列】"><a href="#1-【堆】【栈】【队列】" class="headerlink" title="1 【堆】【栈】【队列】"></a>1 【堆】【栈】【队列】</h4><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-bf1b1203a4c73069.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="堆栈队列"></p><p>任何一种语言的运行环境都少不了*<em>堆（heap）栈（Stack）队列 (queue) *</em> JS也不例外。</p><ol><li>JS的<code>临时变量以及调用时的形参</code>等等数据都是存储在<code>栈</code>中；</li><li><code>堆</code>则是存储实际的<code>对象</code>;</li><li>对象的<code>引用变量名(指针)</code>也是在<code>栈</code>；</li></ol><p>而队列则是JS在实时运行环境中创建的消息队列或者事件队列。</p><p><strong>JS是单线程，所以队列的实现让JS的异步处理有了可能性。</strong></p><h4 id="2-单线程、任务队列"><a href="#2-单线程、任务队列" class="headerlink" title="2 单线程、任务队列"></a>2 单线程、任务队列</h4><blockquote><p>尽信书不如无书，就喜欢这种有理有据的</p></blockquote><p>摘录自<a href="http://blog.csdn.net/lin_credible/article/details/40143961" target="_blank" rel="noopener">【朴灵评注】JavaScript 运行机制详解：再谈Event Loop</a></p><p>为了避免复杂性，JS从一诞生，<strong>同一个时间只能做一件事</strong>。<br><code>JavaScript就是单线程</code>，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，<code>允许JavaScript脚本创建多个线程</code>，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并<strong>没有改变JavaScript单线程的本质。</strong></p><p>异步执行的运行机制</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）所有任务都在主线程上执行，形成一个执行栈（execution context stack）。</span><br><span class="line">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。系统把异步任务放到&quot;任务队列&quot;之中，然后继续执行后续的任务。</span><br><span class="line">（3）一旦&quot;执行栈&quot;中的所有任务执行完毕，系统就会读取&quot;任务队列&quot;。如果这个时候，异步任务已经结束了等待状态，就会从&quot;任务队列&quot;进入执行栈，恢复执行。</span><br><span class="line">（4）主线程不断重复上面的第三步。</span><br></pre></td></tr></table></figure><p>上面这段初步地在说event loop。但是异步跟event loop其实没有关系。准确的讲，<strong>【event loop是实现异步的一种机制】</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【上面提到的一系列的手段其实就是实现异步的方法，其中就包括event loop。以及轮询、事件等。】</span><br><span class="line">【所谓轮询：就是你在收银台付钱之后，坐到位置上不停的问服务员你的菜做好了没。】</span><br><span class="line">【所谓（事件）：就是你在收银台付钱之后，你不用不停的问，饭菜做好了服务员会自己告诉你。】</span><br></pre></td></tr></table></figure><p>【JavaScript运行环境的运行机制，不是JavaScript的运行机制。】</p><h4 id="3-事件循环"><a href="#3-事件循环" class="headerlink" title="3 事件循环"></a>3 事件循环</h4><p>首先我们看一下nodejs本质结构图</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-f87e70367e376a31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>Node.js 通过 libuv 来处理与操作系统的交互，并且因此具备了【异步、非阻塞、事件驱动】的能力。Node.js 实际上是 Javascript 执行线程的<strong>单线程</strong>，真正的<strong>I/O 操作</strong>，底层 API 调用都是通过<code>多线程执行</code>的。</p><blockquote><p>本质也就是：任务接收是单线程，任务执行是多线程。</p></blockquote><p>那么也就是主要依靠<code>libuv</code>，那么本文主要介绍Nodejs事件模块，当然离不开原理</p><p>为何是这样？</p><p>为何这么吊？</p><p>为何又出现那么多回调函数？</p><p>带着一些列问题搞明白了理论，至于代码，那也调用哪些大神写的API吧！</p><p><strong>膜拜大神三秒钟</strong></p><p>技术(艺术)源自生活、高于生活。对吧。</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-d471d0bb2ec57f84.gif?imageMogr2/auto-orient/strip" alt="歪瓜仁真会玩"></p><p>只要开始启动，那么这个姑娘就开始嗨起来了，其实我们事件循环也是这样的！从启动开始，就一直不停止的监听。</p><p>【论英文的重要性】</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-0508d9f9917ca62d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>一图胜千言，但我还是就下图做个简单的梳理吧。我可不想被同为学渣的老铁们骂哈。</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-e991be1421256e2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>我们程序猿其实工作还是仅限于代码调用编写阶段，主要的核心在于理解内部原理，然后根据需求去编写(复制)代码。</p><p>讲个故事吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JS单身狗(单线程)无异议，但它也是个贪心的黑心老板，在外边一直接活一直接活，根本无视</span><br><span class="line">员工的死活，程序猿们为了改变世界(为了生存)不得不听产品经理的安排（程序猿心中的恶魔），</span><br><span class="line">产品经理承上启下，一直分发任务(闲就不是代码狗了)，而为了理想而奋战(别给我嘚瑟四点的晨曦，</span><br><span class="line">老子刚下班)。</span><br><span class="line">世界越来越美好(为奋战的人祈祷安康)！</span><br></pre></td></tr></table></figure><p>Nodejs中是怎么个情况，请看下图</p><p><img data-src="http://upload-images.jianshu.io/upload_images/326255-7399386c22e242bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="event5.png"></p><p>好了，结束了，接下来就是代码啦。</p><h3 id="第二部分-Events模块概述"><a href="#第二部分-Events模块概述" class="headerlink" title="第二部分 Events模块概述"></a>第二部分 Events模块概述</h3><h4 id="1-Events模块"><a href="#1-Events模块" class="headerlink" title="1 Events模块"></a>1 Events模块</h4><p><strong>Events模块</strong>是Node对“发布/订阅”模式（publish/subscribe）的实现。一个对象通过这个模块，向另一个对象传递消息。</p><p><strong>Node</strong>中的<em>Event模块仅仅<em>提供了一个对象: *</em>EventEmitter<strong>, EventEmitter 的</strong>核心*<em>就是</em>事件触发与事件监听器功能的封装。</em></p><p>获取<strong>EventEmitter</strong>对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;引用模块events, 点语法获取到EventEmitter</span><br><span class="line">var EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter;</span><br><span class="line">&#x2F;&#x2F;初始化一个对象, 这个实例就是消息中心。</span><br><span class="line">var emitter &#x3D; new EventEmitter;</span><br></pre></td></tr></table></figure><h4 id="2-EventEmitter-实例对象的方法"><a href="#2-EventEmitter-实例对象的方法" class="headerlink" title="2 EventEmitter 实例对象的方法"></a>2 EventEmitter 实例对象的方法</h4><p><em>2.1 emitter.on(eventName, listener), 监听事件,如果触发就调用回调函数</em></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. eventName &lt;String&gt; | &lt;Symbol&gt;: 事件名称, 后边可以跟上函数;</span><br><span class="line">2. listener &lt;Function&gt; : 回调函数;</span><br></pre></td></tr></table></figure><p><em>2.2 emitter.emit(eventName[, …args]), 根据eventName发送通知, 触发事件, 第一个参数为事件名称, 其余的参数会依次传入回调函数</em></p><p>以上两个方法的示例代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter;</span><br><span class="line">var emitter &#x3D; new EventEmitter();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;监听函数1, 事件名为--fun1</span><br><span class="line">emitter.on(&#39;fun1&#39;, function()&#123;</span><br><span class="line">console.log(&#39;触发函数1&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义有参数函数fun2, </span><br><span class="line">var fun2 &#x3D; function(para)&#123;</span><br><span class="line">console.log(&#39;触发函数2, 参数为&#39; + para);</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;监听fun2</span><br><span class="line">emitter.on(&#39;fun2&#39;, fun2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;触发事件名</span><br><span class="line">emitter.emit(&#39;fun1&#39;);</span><br><span class="line">&#x2F;&#x2F;触发事件名并且传参数</span><br><span class="line">emitter.emit(&#39;fun2&#39;, &#39;event&#39;);</span><br></pre></td></tr></table></figure><p>打印结果为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node 2on.js </span><br><span class="line">触发函数1</span><br><span class="line">触发函数2, 参数为event</span><br></pre></td></tr></table></figure><p><em>2.3 emitter.once(eventName, listener), 类似on方法, 但回调函数只是执行一次</em></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter;</span><br><span class="line">var emitter &#x3D; new EventEmitter();</span><br><span class="line"></span><br><span class="line">emitter.once(&#39;oncefun&#39;, function()&#123;</span><br><span class="line">console.log(&#39;函数只执行一次&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">emitter.emit(&#39;oncefun&#39;);</span><br><span class="line">emitter.emit(&#39;oncefun&#39;);</span><br><span class="line"></span><br><span class="line">console.log(&#39;--------&#39;)</span><br><span class="line"></span><br><span class="line">emitter.on(&#39;fun&#39;, function()&#123;</span><br><span class="line">console.log(&#39;函数&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">emitter.emit(&#39;fun&#39;);</span><br><span class="line">emitter.emit(&#39;fun&#39;);</span><br></pre></td></tr></table></figure><p>执行的结果为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node 3once.js </span><br><span class="line">函数只执行一次</span><br><span class="line">函数</span><br><span class="line">函数</span><br></pre></td></tr></table></figure><p>虽然触发多次oncefun, 但依然打印一次;与下边形成对比;,</p><p><em>2.4 emitter.addListener(eventName, listener)类似于emitter.on(eventName, listener)</em></p><p><em>2.5 emitter.removeListener(eventName, listener), 移除监听</em></p><p>详细见实例代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var EventEmitter &#x3D; require(&#39;events&#39;).EventEmitter;</span><br><span class="line">var emitter &#x3D; new EventEmitter();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个函数</span><br><span class="line">var removeFun &#x3D; function()&#123;</span><br><span class="line">console.log(&#39;输出结果&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;以fun名称监听removeFun</span><br><span class="line">emitter.on(&#39;fun&#39;, removeFun);</span><br><span class="line">&#x2F;&#x2F;每个30毫秒触发一次回调函数</span><br><span class="line">setInterval(function()&#123;</span><br><span class="line">emitter.emit(&#39;fun&#39;);</span><br><span class="line">&#125;, 30);</span><br><span class="line">&#x2F;&#x2F;200毫秒以后触发回调函数</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">emitter.removeListener(&#39;fun&#39;, removeFun);</span><br><span class="line">&#125;, 200);</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node 5removeListener.js </span><br><span class="line">输出结果</span><br><span class="line">输出结果</span><br><span class="line">输出结果</span><br><span class="line">输出结果</span><br><span class="line">输出结果</span><br><span class="line"></span><br><span class="line">#光标停止</span><br></pre></td></tr></table></figure><p>######第三部分 更多API详见</p><p>语法名称觉得挺好的, 见名知意. 更多的语法就看<a href="https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener" target="_blank" rel="noopener">Node官网</a>吧 -__-</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Event: &#39;newListener&#39;</span><br><span class="line">Event: &#39;removeListener&#39;</span><br><span class="line">EventEmitter.listenerCount(emitter, eventName)</span><br><span class="line">EventEmitter.defaultMaxListeners</span><br><span class="line">emitter.addListener(eventName, listener)</span><br><span class="line">emitter.emit(eventName[, ...args])</span><br><span class="line">emitter.eventNames()</span><br><span class="line">emitter.getMaxListeners()</span><br><span class="line">emitter.listenerCount(eventName)</span><br><span class="line">emitter.listeners(eventName)</span><br><span class="line">emitter.on(eventName, listener)</span><br><span class="line">emitter.once(eventName, listener)</span><br><span class="line">emitter.prependListener(eventName, listener)</span><br><span class="line">emitter.prependOnceListener(eventName, listener)</span><br><span class="line">emitter.removeAllListeners([eventName])</span><br><span class="line">emitter.removeListener(eventName, listener)</span><br><span class="line">emitter.setMaxListeners(n)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Event </tag>
            
            <tag> 模块 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--阶段总结【8】</title>
      <link href="2019/05/12/index/"/>
      <url>2019/05/12/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>补充基础阶段相关内容</li><li>回顾基础系列之<strong>数据类型</strong></li></ol><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>有了前一部分的铺垫，相信大家已经明白<strong>变量名只是对内存空间的映射</strong>，那么</p><ol><li>共享变量是怎么回事？</li><li>深浅拷贝又是是什么？</li></ol><h4 id="1-赋值与深浅拷贝"><a href="#1-赋值与深浅拷贝" class="headerlink" title="1. 赋值与深浅拷贝"></a>1. 赋值与深浅拷贝</h4><p>🤔 思考如下代码，<code>a、b、c、x</code>四者在<code>x = x + [3, 4]</code>前后的地址是如何变化的？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="comment"># print(" a: %s \n b: %s \n c: %s" % (id(a), id(b), id(c)))</span></span><br><span class="line"><span class="comment"># print(" -----")</span></span><br><span class="line">x = [a, b, c]</span><br><span class="line"><span class="comment"># print(" x: %s \n ------ \n x[0]: %s \n x[1]: %s \n x[2]: %s" % (id(x), id(x[0]), id(x[1]), id(x[2])))</span></span><br><span class="line">x = x + [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># print(" -----")</span></span><br><span class="line"><span class="comment"># print(" x: %s \n ------ \n x[0]: %s \n x[1]: %s \n x[2]: %s" % (id(x), id(x[0]), id(x[1]), id(x[2])))</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="comment"># print(" a: %s" % (id(a)))</span></span><br></pre></td></tr></table></figure><p>打印结果如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: <span class="number">4323184656</span></span><br><span class="line">b: <span class="number">4323184688</span></span><br><span class="line">c: <span class="number">4323184656</span></span><br><span class="line">-----</span><br><span class="line">x: <span class="number">4324441928</span></span><br><span class="line">------</span><br><span class="line">x[<span class="number">0</span>]: <span class="number">4323184656</span></span><br><span class="line">x[<span class="number">1</span>]: <span class="number">4323184688</span></span><br><span class="line">x[<span class="number">2</span>]: <span class="number">4323184656</span></span><br><span class="line">-----</span><br><span class="line">x: <span class="number">4324441928</span>, y: <span class="number">4324441928</span></span><br><span class="line">-----</span><br><span class="line">x: <span class="number">4326634696</span></span><br><span class="line">------</span><br><span class="line">x[<span class="number">0</span>]: <span class="number">4323184656</span></span><br><span class="line">x[<span class="number">1</span>]: <span class="number">4323184688</span></span><br><span class="line">x[<span class="number">2</span>]: <span class="number">4323184656</span></span><br><span class="line">a: <span class="number">4323184720</span></span><br></pre></td></tr></table></figure><p><img data-src="01.jpg" alt="四种情况"></p><ol><li>尽量用<code>+=</code>,<code>-=</code>之类复合符号的，因为无需开辟新的，+=会自动调用 extend 方法进行合并运算, 共享引用；</li><li><strong>【不可变对象】</strong>：如打印结果中的<code>开始和结束</code>的<code>a</code>,地址是不同的，重新申请地址；</li><li><strong>【可变对象】</strong>：无需重新申请地址，但区域可长可短；</li></ol><h4 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="2. 浅拷贝"></a>2. 浅拷贝</h4><p>不管多么复杂的数据结构，浅拷贝都只会 copy 一层；如需<strong>完整拷贝，请参考深拷贝</strong>，还记得这个图么？</p><p><img data-src="7.jpg" alt="浅复制"></p><h4 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3. 深拷贝"></a>3. 深拷贝</h4><p>深拷贝——即 python 的 copy 模块提供的另一个 deepcopy 方法。深拷贝会完全复制原变量相关的所有数据，在内存中生成一套完全一样的内容，在这个过程中我们对这两个变量中的一个进行<strong>任意修改都不会影响其他变量</strong>。</p><p><img data-src="9.jpg" alt="深复制"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><h4 id="1-打印-Print"><a href="#1-打印-Print" class="headerlink" title="1. 打印 Print"></a>1. 打印 Print</h4><p>日常调试，还是离不开打印的，大概了解下如何打印，有两种：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. %</span><br><span class="line">2. format</span><br></pre></td></tr></table></figure><p>举几个简单的例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">" x: %s, y: %s"</span> % (id(x), id(y)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>))</span><br><span class="line">print(<span class="string">"&#123;1&#125; &#123;0&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>))</span><br></pre></td></tr></table></figure><p><strong>表格</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%s    字符串 (采用str()的显示)</span><br><span class="line">%r    字符串 (采用repr()的显示)</span><br><span class="line">%c    单个字符</span><br><span class="line">%b    二进制整数</span><br><span class="line">%d    十进制整数</span><br><span class="line">%i    十进制整数</span><br><span class="line">%o    八进制整数</span><br><span class="line">%x    十六进制整数</span><br><span class="line">%e    指数 (基底写为e)</span><br><span class="line">%E    指数 (基底写为E)</span><br><span class="line">%f    浮点数</span><br><span class="line">%F    浮点数，与上相同</span><br><span class="line">%g    指数(e)或浮点数 (根据显示长度)</span><br><span class="line">%G    指数(E)或浮点数 (根据显示长度)</span><br></pre></td></tr></table></figure><h3 id="第三部分-前期知识汇总"><a href="#第三部分-前期知识汇总" class="headerlink" title="第三部分 前期知识汇总"></a>第三部分 前期知识汇总</h3><p><img data-src="Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="Python基础数据类型"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Python </tag>
            
            <tag> 阶段总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--变量、赋值、引用【7】</title>
      <link href="2019/05/10/index/"/>
      <url>2019/05/10/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>了解变量名与变量的关系</li><li>理解引用、拷贝、赋值等概念与含义</li></ol><h4 id="1-前提概况"><a href="#1-前提概况" class="headerlink" title="1 前提概况"></a>1 前提概况</h4><p>我们接触最多的就是<strong>变量</strong>，究竟<code>变量名</code> 与 <code>变量值</code> 关系是啥？如何存储？</p><p>首先看一个最简单的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>上侧是一个<strong>赋值操作</strong>，其中<code>a是变量名</code>，<code>100是变量的值</code>。编程语言的编译器（或者解释器）处理到这一句代码的时候，一般语言会这样做</p><ol><li>在内存中<strong>开辟</strong>一个内存空间, <strong>地址</strong>0x4377878280;</li><li><strong>存放</strong>100进第一步的空间中；</li><li><strong>取值</strong>100时，找到地址为<strong>0x4377878280</strong>即可。</li></ol><p><strong>但是</strong><br><strong>但是</strong><br><strong>但是</strong></p><p>这么长除了计算机能记住，我是记不住。正如ip地址与域名的关系，我们只需要记住taobao.com即可，所以，<strong>编译器给我们做了个表，在这个表中，它将内存地址和变量名做了个映射</strong></p><table><thead><tr><th>变量名</th><th>内存地址</th></tr></thead><tbody><tr><td>a</td><td>0x4377878280</td></tr><tr><td>b</td><td>0x4377878281</td></tr><tr><td>c</td><td>0x4377878282</td></tr><tr><td>…</td><td>….</td></tr></tbody></table><p><strong>变量名完全可以看成一个内存地址的别名（只是方便我们记忆），真正的数据是存在这个内存地址的存储空间上的。变量名在运行的时候，没有任何用处。</strong></p><p><img data-src="a.jpg" alt="赋值"></p><h4 id="2-深入一些"><a href="#2-深入一些" class="headerlink" title="2. 深入一些"></a>2. 深入一些</h4><p>奔着：以问题来解决疑问题，先看这个代码，思考一下结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values[<span class="number">1</span>] = values</span><br></pre></td></tr></table></figure><p><strong>请认真思考此时 values 是多少？</strong><br><strong>请认真思考此时 values 是多少？</strong><br><strong>请认真思考此时 values 是多少？</strong></p><p>也许你认为是<code>[0, [0, 1, 2], 2]</code>,原因可能是：</p><ol><li>list 可变；</li><li>把list[1]的位置直接添加一个list；</li></ol><p>代码如下，<code>完全符合预期</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>但是结果却是 <strong>无限循环</strong></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>values</span><br><span class="line">[<span class="number">0</span>, [...], <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>❌就❎在第二步中<br>其中涉及两个概念：引用、拷贝</p></blockquote><p>第一部分已经说过，<strong>变量名是内存的别称</strong>，</p><p><code>a=10</code>的含义：内存中有个地址0x1234567的空间存了10，然后a指向这块内存。</p><p><img data-src="1.jpg" alt="变量多次&#39;赋值‘"></p><p><strong>上图中很好的证明了，变量‘赋不同值’，只是引用不同而已</strong></p><p><code>values[1] = values</code>只是把自身指向自身。如图：</p><p><img data-src="3.jpg" alt="自身引用自身"></p><p>如需达到预期效果，只需要类似于你的逻辑，<strong>指向一份值相同但内存不同的值</strong></p><p><img data-src="5.jpg" alt="值相同但内存不同"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝生成一份新的数据，</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values[<span class="number">1</span>] = values[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values</span><br><span class="line">[<span class="number">0</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>往更深处说，values[:] 复制操作是所谓的「浅复制」(shallow copy)，当列表对象有嵌套的时候也会产生出乎意料的错误，比如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</span><br><span class="line">b = a[:]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">9</span></span><br><span class="line"><span class="comment"># 正确答案</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[<span class="number">8</span>, [<span class="number">1</span>, <span class="number">9</span>], <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">[<span class="number">0</span>, [<span class="number">1</span>, <span class="number">9</span>], <span class="number">3</span>]</span><br><span class="line"><span class="comment"># a 与 b 的地址确实不同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(a))</span><br><span class="line"><span class="number">4355761096</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(b))</span><br><span class="line"><span class="number">4355761416</span></span><br><span class="line"><span class="comment"># 但是内部list的地址确实相同的，也就是共同指向了同一块内存地址</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(a[<span class="number">1</span>]))</span><br><span class="line"><span class="number">4354260680</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(id(b[<span class="number">1</span>]))</span><br><span class="line"><span class="number">4354260680</span></span><br></pre></td></tr></table></figure><p>看完上图的打印结果，请看下图；</p><p><img data-src="7.jpg" alt="浅复制"></p><p><strong>重点： values[:] 只是浅层复制</strong><br><strong>重点： values[:] 只是浅层复制</strong><br><strong>重点： values[:] 只是浅层复制</strong></p><p>正确的复制嵌套元素的方法是进行「深复制」(deep copy)，方法是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">9</span></span><br></pre></td></tr></table></figure><p><img data-src="9.jpg" alt="深复制"></p><h4 id="3-引用-VS-拷贝："><a href="#3-引用-VS-拷贝：" class="headerlink" title="3 引用 VS 拷贝："></a>3 引用 VS 拷贝：</h4><ol><li>没有限制条件的分片表达式（L[:]）能够复制序列，但此法<strong>只能浅层复制</strong>。</li><li>字典 copy 方法，D.copy() 能够复制字典，但此法<strong>只能浅层复制</strong></li><li>有些内置函数，例如 list，能够生成拷贝 list(L)</li><li>copy 标准库模块能够生成完整拷贝：<strong>deepcopy 本质上是递归 copy</strong></li><li></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://my.oschina.net/leejun2005/blog/145911" target="_blank" rel="noopener">python基础（5）：深入理解 python 中的赋值、引用、拷贝、作用域 原</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Python </tag>
            
            <tag> 赋值 </tag>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--迭代器/解析式【6】</title>
      <link href="2019/05/09/index/"/>
      <url>2019/05/09/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>掌握解析式的使用</li></ol><ul><li>liet 解析式</li><li>dict 解析式</li></ul><ol start="2"><li>深入理解迭代器</li><li>深入理解生成器</li></ol><h3 id="第一部分-迭代器、生成器"><a href="#第一部分-迭代器、生成器" class="headerlink" title="第一部分 迭代器、生成器"></a>第一部分 迭代器、生成器</h3><p>参考<a href="https://foofish.net/iterators-vs-generators.html" target="_blank" rel="noopener">完全理解Python迭代对象、迭代器、生成器</a>, 完整实例请看原文。</p><blockquote><p>在了解Python的数据结构时，<strong>容器(container)</strong>、<strong>可迭代对象(iterable)</strong>、<strong>迭代器(iterator)</strong>、<strong>生成器(generator)</strong>、<strong>列表/集合/字典推导式(list,set,dict comprehension)</strong>众多概念参杂在一起，难免让初学者一头雾水，我将用一篇文章试图将这些概念以及它们之间的关系捋清楚。</p></blockquote><p><img data-src="relationships.png" alt="关系图"></p><blockquote><p>请仔细看上图<br>请仔细看上图<br>请仔细看上图</p></blockquote><h4 id="1-容器（container）"><a href="#1-容器（container）" class="headerlink" title="1 容器（container）"></a>1 容器（container）</h4><p>像列表（list）、集合（set）、序列（tuple）、字典（dict）都是容器。简单的说，容器是一种把多个元素组织在一起的数据结构， <code>【可以逐个迭代获取其中的元素。】</code><strong>但是，但是，但这并不是容器本身提供的能力</strong>，而是<code>可迭代对象赋予了容器这种能力</code>，当然并不是所有的容器都是可迭代的，比如：<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="noopener">Bloom filter</a>，虽然Bloom filter可以用来检测某个元素是否包含在容器中，但是并不能从容器中获取其中的每一个值，因为Bloom filter压根就没把元素存储在容器中，而是通过一个散列函数映射成一个值保存在数组中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125; <span class="comment"># 输出 True</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125; <span class="comment"># 输出 True</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> set([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]) <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure><h4 id="2-可迭代对象-iterable"><a href="#2-可迭代对象-iterable" class="headerlink" title="2 可迭代对象(iterable)"></a>2 可迭代对象(iterable)</h4><blockquote><p>凡是可以返回一个迭代器的对象都可称之为可迭代对象</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = iter(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = iter(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(y)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(y)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(z)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(y)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list_iterator</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>这里x是一个可迭代对象，<strong>可迭代对象和容器一样是一种通俗的叫法</strong>，并不是指某种具体的数据类型，<code>list是可迭代对象，dict是可迭代对象，set也是可迭代对象</code>。<br>y和z是两个独立的迭代器，迭代器内部持有一个状态，该状态用于记录当前迭代所在的位置，以方便下次迭代的时候获取正确的元素。<br>迭代器有一种具体的迭代器类型，比如list_iterator，set_iterator。<br><strong>可迭代对象实现了<strong>iter</strong>方法，该方法返回一个迭代器对象。</strong></p><p><img data-src="iterable-vs-iterator.png" alt=""></p><h4 id="3-迭代器-iterator"><a href="#3-迭代器-iterator" class="headerlink" title="3 迭代器(iterator)"></a>3 迭代器(iterator)</h4><p>那么什么迭代器呢？它是一个带状态的对象，他能在你调用next()方法的时候返回容器中的下一个值，<strong>任何实现了<strong>iter</strong>和<strong>next</strong>()（python2中实现next()）方法的对象都是迭代器</strong>，<br><strong>iter</strong>返回迭代器自身，<br><strong>next</strong>返回容器中的下一个值，<br>如果容器中没有更多元素了，则抛出StopIteration异常，至于它们到底是如何实现的这并不重要。</p><p>所以，迭代器就是实现了工厂模式的对象，它在你每次你询问要下一个值的时候给你返回。有很多关于迭代器的例子，比如itertools函数返回的都是迭代器对象。</p><blockquote><p>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>colors = cycle([<span class="string">'red'</span>, <span class="string">'white'</span>, <span class="string">'blue'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(colors)</span><br><span class="line"><span class="string">'red'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(colors)</span><br><span class="line"><span class="string">'white'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(colors)</span><br><span class="line"><span class="string">'blue'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(colors)</span><br><span class="line"><span class="string">'red'</span></span><br></pre></td></tr></table></figure><h4 id="4-生成器-generator"><a href="#4-生成器-generator" class="headerlink" title="4 生成器(generator)"></a>4 生成器(generator)</h4><p><strong>生成器算得上是Python语言中最吸引人的特性之一</strong>生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。<br>它不需要再像上面的类一样写<strong>iter</strong>()和<strong>next</strong>()方法了，<strong>只需要一个yiled关键字</strong>。<br><strong>生成器一定是迭代器（反之不成立）</strong>，因此任何生成器也是以一种懒加载的模式生成值。用生成器来实现斐波那契数列的例子是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></span><br><span class="line">    prev, curr = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> curr</span><br><span class="line">        prev, curr = curr, curr + prev</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fib()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(islice(f, <span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>]</span><br></pre></td></tr></table></figure><p><strong>说实在的没看懂，后续章节补充这个。。。</strong></p><p><strong>总结：</strong></p><ol><li>容器是一系列元素的集合，str、list、set、dict、file、sockets对象都可以看作是容器<br>容器都可以被迭代（用在for，while等语句中），因此他们被称为可迭代对象。</li><li>可迭代对象实现了<strong>iter</strong>方法，该方法返回一个迭代器对象。</li><li>迭代器持有一个内部状态的字段，用于记录下次迭代返回值，它实现了<strong>next</strong>和<strong>iter</strong>方法，迭代器不会一次性把所有元素加载到内存，而是需要的时候才生成返回结果。</li><li>生成器是一种特殊的迭代器，它的返回值不是通过return而是用yield。</li></ol><h3 id="第二部分-解析式"><a href="#第二部分-解析式" class="headerlink" title="第二部分 解析式"></a>第二部分 解析式</h3><h4 id="1-什么是列表解析式？"><a href="#1-什么是列表解析式？" class="headerlink" title="1 什么是列表解析式？"></a>1 什么是列表解析式？</h4><p><strong>列表解析式是将一个列表（实际上适用于任何可迭代对象（iterable））转换成另一个列表的工具。</strong>在转换过程中，可以指定元素必须符合一定的条件，才能添加至新的列表中，这样每个元素都可以按需要进行转换。<a href="http://codingpy.com/article/python-list-comprehensions-explained-visually/" target="_blank" rel="noopener">参考</a></p><p><img data-src="ex.png" alt=""></p><blockquote><p>如果看过图就明白了，就结束啦</p></blockquote><h4 id="2-Show-Code"><a href="#2-Show-Code" class="headerlink" title="2 Show Code"></a>2 Show Code</h4><p><strong>需求： 遍历数组，将满足条件的数据放入新的数组中</strong></p><p><em>单层嵌套</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般的写法</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">doubled_odds = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        doubled_odds.append(n)</span><br></pre></td></tr></table></figure><p><strong>*解析式表达如下，分三部分</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doubled_odds = [</span><br><span class="line">    n,</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers</span><br><span class="line">    f n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><p>基本语法： <code>[ expr  for item in iterable  judge ]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. expr 待操作元素</span><br><span class="line">2. for item in iterable  循环语句【可嵌套，从后往前】</span><br><span class="line">3. judge 判断条件 【可选】</span><br></pre></td></tr></table></figure><p><em>双层嵌套</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmpList = [ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]  ]</span><br><span class="line">newList =[</span><br><span class="line">    n</span><br><span class="line">    <span class="comment"># 先后再前</span></span><br><span class="line">    <span class="keyword">for</span> inNum <span class="keyword">in</span> inList  <span class="keyword">for</span> inList <span class="keyword">in</span> tmpList</span><br><span class="line">    <span class="comment"># 判断语句可选</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>参照list解析式，记住语法，其实也不难</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flipped &#x3D; &#123;</span><br><span class="line">    value: key</span><br><span class="line">    for key, value in original.items()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Python </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> 生成器 </tag>
            
            <tag> 解析式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--字典/集合类型【5】</title>
      <link href="2019/05/08/index/"/>
      <url>2019/05/08/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>掌握字典的常用操作</li><li>掌握集合的常用操作</li></ol><p><img data-src="type.png" alt="整体"></p><h3 id="第一部分-字典"><a href="#第一部分-字典" class="headerlink" title="第一部分 字典"></a>第一部分 字典</h3><p>字典就是一个个的键值对 {key: value}，实现原理：根据key 计算 hash， 速度快。<br><strong>注意事项</strong></p><ol><li>key: 任意不可变对象，但不能是list；</li><li>value: 可以是任意对象。</li></ol><blockquote><p><strong>字典是有序的</strong></p></blockquote><blockquote><p><strong>思考：为何字典的key不可以是list类型？</strong></p></blockquote><h4 id="1-三种创建方式"><a href="#1-三种创建方式" class="headerlink" title="1. 三种创建方式"></a>1. 三种创建方式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">"sex"</span>: <span class="number">1</span>&#125;</span><br><span class="line">dic2 = dict([(<span class="string">'name'</span>, <span class="string">'simuty'</span>), (<span class="string">"age"</span>, <span class="number">1</span>)])</span><br><span class="line">dic3 = dict(age=<span class="number">2</span>, name=<span class="string">'python'</span>, sex=<span class="number">1</span>)</span><br><span class="line">print(dic1)</span><br><span class="line">print(dic2)</span><br><span class="line">print(dic3)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123;'sex': 1&#125;</span></span><br><span class="line"><span class="string">&#123;'name': 'simuty'&#125;</span></span><br><span class="line"><span class="string">&#123;'age': 2&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="2-删除指定元素"><a href="#2-删除指定元素" class="headerlink" title="2. 删除指定元素"></a>2. 删除指定元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> dic3[<span class="string">'age'</span>]</span><br><span class="line">dic3.pop(<span class="string">'name'</span>)</span><br><span class="line">print(dic3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">dic3.clear()</span><br><span class="line">print(dic3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dic3</span><br><span class="line">print(dic3)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123;'age': 2, 'name': 'python', 'sex': 1&#125;</span></span><br><span class="line"><span class="string">&#123;'sex': 1&#125;</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "dic.py", line 28, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(dic3)</span></span><br><span class="line"><span class="string">NameError: name 'dic3' is not defined</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="3-合并"><a href="#3-合并" class="headerlink" title="3. 合并"></a>3. 合并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">a_dic = &#123;<span class="string">"k"</span>: <span class="number">1</span>&#125;</span><br><span class="line">b_dic = &#123;<span class="string">'k'</span>: <span class="number">2</span>, <span class="string">"x"</span>: <span class="number">3</span>&#125;</span><br><span class="line">a_dic.update(b_dic)</span><br><span class="line">print(a_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除最后一个并返回</span></span><br><span class="line">print(b_dic.popitem())</span><br><span class="line">print(b_dic)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">'k'</span>: <span class="number">2</span>, <span class="string">"x"</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 接遍历字典获取键，根据键取值</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    print(key, dic[key])</span><br></pre></td></tr></table></figure><p><img data-src="Dictionary.png" alt="字典"></p><h3 id="第二部分-集合"><a href="#第二部分-集合" class="headerlink" title="第二部分 集合"></a>第二部分 集合</h3><p><strong>set集合是一个无序不重复元素的集，基本功能包括关系测试和消除重复元素。</strong></p><blockquote><p>集合使用大括号({})框定元素，并以逗号进行分隔。<br>创建一个空集合，必须用 set() 而不是 {} ，因为后者创建的是一个空字典。</p></blockquote><h4 id="1-集合操作"><a href="#1-集合操作" class="headerlink" title="1. 集合操作"></a>1. 集合操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">print(set1 ^ set2)</span><br><span class="line">print(set1 - set2)</span><br><span class="line">print(set2 - set1)</span><br><span class="line">print(set1 &amp; set2)</span><br><span class="line">print(set1 | set2)</span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">print(a)</span><br><span class="line">b = a.add(<span class="number">5</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p><img data-src="handleSet.png" alt="实例"></p><p><img data-src="Set.png" alt="set"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Python </tag>
            
            <tag> Dictionary </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--序列类型【4】</title>
      <link href="2019/05/06/index/"/>
      <url>2019/05/06/index/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>对<strong>序列对象</strong>有整体的认识；</li><li>掌握list的常用操作</li><li>掌握tuple的常用操作</li><li>理解深浅拷贝问题</li></ol><h3 id="第一部分-序列对象"><a href="#第一部分-序列对象" class="headerlink" title="第一部分 序列对象"></a>第一部分 序列对象</h3><h4 id="1-了解序列对象"><a href="#1-了解序列对象" class="headerlink" title="1. 了解序列对象"></a>1. 了解序列对象</h4><p>Python一切皆对象。</p><ol><li>序列对象包含<strong>str、list、tuple</strong>；</li><li>序列成员属性：<strong>有序，可通过下标访问</strong></li></ol><blockquote><p>先大致预览下列表(list)、元组(tuple)的异同点,后续详细梳理</p></blockquote><table><thead><tr><th>差异点</th><th>列表</th><th>元组</th></tr></thead><tbody><tr><td>表示方法</td><td>空列表：[] <br>单元素列表：[1]<br>多元素列表[1, ‘a’]</td><td>空元组：()<br>单元素元组：(1,)<br>多元素元组：(1, ‘a’)</td></tr><tr><td>可变性</td><td>可变</td><td>不可变</td></tr><tr><td>可操作性</td><td>支持丰富的操作</td><td>仅支持序列操作</td></tr><tr><td>可哈希性</td><td>不可哈希，不能作为字典的关键字</td><td>可哈希，可以作为字典的关键字</td></tr></tbody></table><p><img data-src="Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="整体图"></p><h3 id="第二部分-List"><a href="#第二部分-List" class="headerlink" title="第二部分 List"></a>第二部分 List</h3><blockquote><p>Python的列表是一个<strong>有序可重复</strong>的元素集合，可嵌套、迭代、修改、分片、追加、删除，成员判断。<br>从数据结构角度看，Python的列表是一个可变长度的顺序存储结构，每一个位置存放的都是<strong>对象的指针</strong>。</p></blockquote><p>比如，对于这个列表 alist = [1, “a”, [11,22], {“k1”:”v1”}]，其在内存内的存储方式是这样的：</p><p><img data-src="mem.png" alt="内存地址"></p><h4 id="1-什么是list"><a href="#1-什么是list" class="headerlink" title="1. 什么是list?"></a>1. 什么是list?</h4><p>概念： 逗号分隔的不同的数据项使用方括号括起来即是list;<br>性质： list元素可变,改变的是原对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; tmpList &#x3D; []  # 创建一个空列表</span><br><span class="line">&gt;&gt;&gt; numList &#x3D; [1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; allList &#x3D; [1, &#39;a&#39;, [11,22], &#123;&#39;k1&#39;:&#39;v1&#39;&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-增删改"><a href="#2-增删改" class="headerlink" title="2. 增删改"></a>2. 增删改</h3><p><strong>以xmind的方式呈现</strong></p><p><img data-src="List.png" alt=""></p><h3 id="第三部分-Tuple"><a href="#第三部分-Tuple" class="headerlink" title="第三部分 Tuple"></a>第三部分 Tuple</h3><blockquote><p>类似于list的对象，</p><blockquote><p>类似于list, 相对不可更改</p></blockquote></blockquote><p><strong>重要的实例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alist &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"># stop_index 逻辑上要大于 start_index</span><br><span class="line"># 正整数stop_index&gt;start_index</span><br><span class="line"># 负数：stop_index&lt;start_index &amp; step&lt;0</span><br><span class="line"></span><br><span class="line">print(alist[1:8:3])</span><br><span class="line"># 全部，正向取值</span><br><span class="line">print(alist[:])</span><br><span class="line"># 全部，反向取值</span><br><span class="line">print(alist[-1:-11:-1])</span><br><span class="line"># stop_index &gt; len(list), 不报错</span><br><span class="line">print(alist[-1:-12:-1])</span><br></pre></td></tr></table></figure><blockquote><p><strong>类似于list, 相对不可更改</strong></p></blockquote><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880" target="_blank" rel="noopener">参考：廖雪峰老师博客–使用list和tuple</a>的最后来看一个“可变的”tuple：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; (&#39;a&#39;, &#39;b&#39;, [&#39;A&#39;, &#39;B&#39;])</span><br><span class="line">&gt;&gt;&gt; t[2][0] &#x3D; &#39;X&#39;</span><br><span class="line">&gt;&gt;&gt; t[2][1] &#x3D; &#39;Y&#39;</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(&#39;a&#39;, &#39;b&#39;, [&#39;X&#39;, &#39;Y&#39;])</span><br></pre></td></tr></table></figure><p>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？</p><p>别急，我们先看看定义的时候tuple包含的3个元素：</p><p><img data-src="0.png" alt="初始化"></p><p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p><p><img data-src="1.png" alt="改变"></p><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，<strong>而是list的元素</strong>。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><blockquote><p>绝对不变的元组：必须保证tuple的每一个元素本身也不能变。</p></blockquote><p><img data-src="tuple.png" alt=""></p><h3 id="第三部分-深浅拷贝"><a href="#第三部分-深浅拷贝" class="headerlink" title="第三部分 深浅拷贝"></a>第三部分 深浅拷贝</h3><p>对列表和元组进行拷贝时，默认进行的是 <strong>浅拷贝</strong>：<em>只拷贝成员对象的引用</em>，而不会拷贝引用指向的成员对象本身。借助于 <a href="http://docs.python.org/2/library/copy.html" target="_blank" rel="noopener">copy模块</a> 的deepcopy方法，可以实现深拷贝</p><blockquote><p>深拷贝：既拷贝成员对象的引用，又会拷贝引用指向的成员对象本身。<br>浅拷贝：只拷贝成员对象的引用，而不会拷贝引用指向的成员对象本身</p></blockquote><p>值得注意的是，上述说法并<strong>不完全正确</strong>：<strong>如果成员对象本身是原子类型的（数值、字符串，或者只包含数值或字符串的元组），那么对该成员不会发生真正的深拷贝，即便执行深拷贝动作，内部也只会进行浅拷贝。</strong></p><blockquote><p>浅拷贝和深拷贝的示意图如下：</p></blockquote><p><img data-src="copy.png" alt=""></p><p>关于浅拷贝和深拷贝的实际案例，可以参考 <a href="http://book.douban.com/subject/3112503/" target="_blank" rel="noopener">《Python核心编程（第二版）》</a> 中的 『6.20』 一节：『*拷贝Python对象、浅拷贝和深拷贝』。</p><p>参考链接</p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880" target="_blank" rel="noopener">使用list和tuple</a></p><p><a href="http://www.liujiangblog.com/course/python/19" target="_blank" rel="noopener">列表</a></p><p><a href="https://www.cnblogs.com/russellluo/p/3297041.html" target="_blank" rel="noopener">Python基础：序列（列表、元组）</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Python </tag>
            
            <tag> List </tag>
            
            <tag> Tuple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--字符串类型【3】</title>
      <link href="2019/05/05/index/"/>
      <url>2019/05/05/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串是编程必然面临的类型，常用指数之高，不得不先了解下Python中字符串的概念与常用方法</p></blockquote><p><img data-src="string.png" alt=""></p><h3 id="第一部分-基础"><a href="#第一部分-基础" class="headerlink" title="第一部分 基础"></a>第一部分 基础</h3><h4 id="1-不可变类型"><a href="#1-不可变类型" class="headerlink" title="1. 不可变类型"></a>1. 不可变类型</h4><p>作为不可变类型，主要涉及两个概念<strong>赋值、引用</strong>，先看三种定义字符串的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一种</span><br><span class="line">var1 &#x3D; &#39;Hello world&#39;</span><br><span class="line">&#x2F;&#x2F; 第二种</span><br><span class="line">var1 &#x3D; &quot;Pyhoth&quot;</span><br><span class="line">&#x2F;&#x2F; 第三种</span><br><span class="line">var2 &#x3D; &quot;&quot;&quot;  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; &quot;asd&quot;</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">4431000496</span><br><span class="line">&gt;&gt;&gt; a &#x3D; &quot;122&quot;</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">4431000552</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>上边的代码涉及个问题:</p><blockquote><p>1.1 为何说是不可变类型，怎么var1还可以<strong>等于</strong>Python？</p></blockquote><p><img data-src="1.jpg" alt=""></p><p>Python 没有赋值，只有引用。可以从代码中第三种可以看出，同样的字符串<code>a</code>, 内存地址是不一样的。原因在于，第二次的<code>所谓赋值</code>，其实<strong>是重新创建一块内存，然后将a指向新内存地址</strong></p><h3 id="第二部分-内建函数"><a href="#第二部分-内建函数" class="headerlink" title="第二部分 内建函数"></a>第二部分 内建函数</h3><h4 id="1-填充"><a href="#1-填充" class="headerlink" title="1 填充"></a>1 填充</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var3 &#x3D; &quot;1234&quot;</span><br><span class="line"># 填充字符串</span><br><span class="line">print(var3.center(10, &quot;*&quot;))</span><br><span class="line">print(var3.ljust(10, &#39;^&#39;))</span><br><span class="line">print(var3.rjust(10, &quot;^&quot;))</span><br><span class="line">print(var3.zfill(10))</span><br><span class="line"></span><br><span class="line"># 返回值</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">***1234***</span><br><span class="line">1234^^^^^^</span><br><span class="line">^^^^^^1234</span><br><span class="line">0000001234</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h4 id="2-删减"><a href="#2-删减" class="headerlink" title="2 删减"></a>2 删减</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var4 &#x3D; &quot;55785&quot;</span><br><span class="line">print(var4.strip(&quot;5&quot;))</span><br><span class="line">print(var4.lstrip(&quot;5&quot;))</span><br><span class="line">print(var4.rstrip(&quot;5&quot;))</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>‘’’<br>78<br>785<br>5578<br>‘’’</p><h4 id="3-变形"><a href="#3-变形" class="headerlink" title="3 变形"></a>3 变形</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var5 &#x3D; &quot;thank yoU&quot;</span><br><span class="line">print(var5.lower())</span><br><span class="line">print(var5.upper())</span><br><span class="line">print(var5.capitalize())</span><br><span class="line">print(var5.swapcase())</span><br><span class="line">print(var5.title())</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">thank you</span><br><span class="line">THANK YOU</span><br><span class="line">Thank you</span><br><span class="line">THANK YOu</span><br><span class="line">Thank You</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h4 id="4-切分"><a href="#4-切分" class="headerlink" title="4 切分"></a>4 切分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var6 &#x3D; &quot;7890&quot;</span><br><span class="line"># 有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str &#x3D;&#x3D; string.</span><br><span class="line">print(var6.partition(&#39;9&#39;))</span><br><span class="line">print(var6.partition(&#39;2&#39;))</span><br><span class="line">print(var6.rpartition(&quot;0&quot;))</span><br><span class="line">var7 &#x3D; &quot;abz\nzxy&quot;</span><br><span class="line">print(var7.splitlines())</span><br><span class="line">print(var7.split(&quot;z&quot;))</span><br><span class="line">print(var7.rsplit(&quot;z&quot;))</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;78&#39;, &#39;9&#39;, &#39;0&#39;)</span><br><span class="line">(&#39;7890&#39;, &#39;&#39;, &#39;&#39;)</span><br><span class="line">(&#39;789&#39;, &#39;0&#39;, &#39;&#39;)</span><br><span class="line">[&#39;abz&#39;, &#39;zxy&#39;]</span><br><span class="line">[&#39;ab&#39;, &#39;\n&#39;, &#39;xy&#39;]</span><br><span class="line">[&#39;ab&#39;, &#39;\n&#39;, &#39;xy&#39;]</span><br></pre></td></tr></table></figure><h4 id="5-连接"><a href="#5-连接" class="headerlink" title="5 连接"></a>5 连接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var8 &#x3D; &quot;ikaf&quot;</span><br><span class="line">print(var8.join(&quot;0000&quot;))</span><br><span class="line"></span><br><span class="line"># 判定</span><br><span class="line">var9 &#x3D; &quot;kj45&quot;</span><br><span class="line"># 长度&gt;0 &amp;&amp; 都是字母或都是数字 true 否则false</span><br><span class="line">print(var9.isalnum())</span><br><span class="line"># 长度&gt;0 &amp;&amp;  都是字母 true 否则false</span><br><span class="line">print(var9.isalpha())</span><br><span class="line">print(var9.isdigit())</span><br><span class="line">print(var9.islower())</span><br><span class="line">print(var9.isupper())</span><br><span class="line">print(var9.isspace())</span><br><span class="line">print(var9.istitle())</span><br><span class="line">print(var9.startswith(&#39;k&#39;))</span><br><span class="line">print(var9.endswith(&#39;5&#39;))</span><br></pre></td></tr></table></figure><h4 id="6-查找"><a href="#6-查找" class="headerlink" title="6 查找"></a>6 查找</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var10 &#x3D; &quot;1234567890zxc123vbndfgh&quot;</span><br><span class="line">print(var10.count(&#39;123&#39;, 0, len(var10)))</span><br><span class="line"># 返回第一个满足条件的位置</span><br><span class="line">print(var10.find(&#39;3&#39;, 0, len(var10)))</span><br><span class="line">#</span><br><span class="line">print(var10.index(&#39;3&#39;, 0, len(var10)))</span><br><span class="line"># 找不到返回-1</span><br><span class="line">print(var10.rfind(&#39;mm&#39;, 0, len(var10)))</span><br><span class="line"># 找不到报错</span><br><span class="line"># print(var10.rindex(&#39;mm&#39;, 0, len(var10)))</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h4 id="7-替换"><a href="#7-替换" class="headerlink" title="7 替换"></a>7 替换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var11 &#x3D; &quot;aaaa111222hhhjjjkkk&quot;</span><br><span class="line">print(var11.replace(&quot;a&quot;, &quot;b&quot;, 2))</span><br><span class="line"># print(var11.translate())</span><br><span class="line">#  translate(table[,deletechars])</span><br></pre></td></tr></table></figure><h4 id="8-编码解码"><a href="#8-编码解码" class="headerlink" title="8 编码解码"></a>8 编码解码</h4><blockquote><p>编码就是将字符串转换成字节码，涉及到字符串的内部表示。<br>解码就是将字节码转换为字符串，将比特位显示成字符。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var12 &#x3D; &quot;什么鬼&quot;</span><br><span class="line">print(var12.encode())</span><br><span class="line">print(var12.encode().decode())</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">b&#39;\xe4\xbb\x80\xe4\xb9\x88\xe9\xac\xbc&#39;</span><br><span class="line">什么鬼</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Python </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--数字类型【2】</title>
      <link href="2019/05/04/index/"/>
      <url>2019/05/04/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总览 Python 数据类型</p></blockquote><p>目标</p><ul><li><ol><li>了解Python有几种数据类型</li></ol></li><li><ol start="2"><li>认识Python的数字类型</li></ol></li><li><ol start="3"><li>重点掌握对数字类型的操作</li></ol></li></ul><p><img data-src="type.png" alt="Python数据类型"></p><h2 id="第一部分-数字类型"><a href="#第一部分-数字类型" class="headerlink" title="第一部分 数字类型"></a>第一部分 数字类型</h2><p><strong>数字类型用于存储数学意义上的数值。</strong></p><p>Python 支持三种不同的数字类型，<strong>整数、浮点数和复数</strong>：</p><h3 id="1-整数"><a href="#1-整数" class="headerlink" title="1. 整数"></a>1. 整数</h3><p>定义：正或负整数，不带小数点的数</p><p><strong>Python 的整数长度为 32 位，并且通常是连续分配内存空间的。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; id(0)</span><br><span class="line">4361838576</span><br><span class="line">&gt;&gt;&gt; id(1)</span><br><span class="line">4361838608</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="小整数对象池"><a href="#小整数对象池" class="headerlink" title="小整数对象池"></a>小整数对象池</h4><p>Python 初始化的时候会自动建立一个<strong>小整数对象池</strong>，方便我们调用，避免后期重复生成！这是一个包含<strong>262 个指向整数对象的指针数组，范围是-5 到 256</strong>。</p><blockquote><p>也就是说比如整数 10，即使我们在程序里没有创建它，其实在 Python 后台已经悄悄为我们创建了。</p></blockquote><p>看下边的 id(-6)与 id(257)的地址，<strong>4364640112</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; id(-6)</span><br><span class="line">4364640112</span><br><span class="line">&gt;&gt;&gt; id(-5)</span><br><span class="line">4361838416</span><br><span class="line">&gt;&gt;&gt; id(255)</span><br><span class="line">4361846736</span><br><span class="line">&gt;&gt;&gt; id(256)</span><br><span class="line">4361846768</span><br><span class="line">&gt;&gt;&gt; id(257)</span><br><span class="line">4364640112</span><br></pre></td></tr></table></figure><h5 id="为什么存在小整数对象池？"><a href="#为什么存在小整数对象池？" class="headerlink" title="为什么存在小整数对象池？"></a>为什么存在小整数对象池？</h5><blockquote><p>像懒加载一样，创建一个一直存在，永不销毁，随用随拿的小整数对象池，减小开支。</p></blockquote><h4 id="整数缓冲区"><a href="#整数缓冲区" class="headerlink" title="整数缓冲区"></a>整数缓冲区</h4><p>刚被删除的整数，不会被真正立刻删除回收，而是在后台缓冲一段时间，等待下一次的可能调用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 100</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">4401859696</span><br><span class="line">&gt;&gt;&gt; del a</span><br><span class="line">&gt;&gt;&gt; b &#x3D; 100</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">4401859696</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>把 a 删了，然后创建一个 b,地址是一样的。</p><h3 id="2-浮点数"><a href="#2-浮点数" class="headerlink" title="2. 浮点数"></a>2. 浮点数</h3><p>浮点数也就是小数<br>对于很大或很小的浮点数，一般用科学计数法表示，把10用e替代，1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><h3 id="3-复数"><a href="#3-复数" class="headerlink" title="3. 复数"></a>3. 复数</h3><p><strong>复数由实数部分和虚数部分构成</strong>，可以用a + bj,或者complex(a,b)表示，复数的实部a和虚部b都是浮点型。关于复数，不做科学计算或其它特殊需要，通常很难遇到。</p><h2 id="第二部分-操作数字类型"><a href="#第二部分-操作数字类型" class="headerlink" title="第二部分 操作数字类型"></a>第二部分 操作数字类型</h2><p><img data-src="number.png" alt="数字类型操作"></p><h3 id="1-简单常用的计算"><a href="#1-简单常用的计算" class="headerlink" title="1. 简单常用的计算"></a>1. 简单常用的计算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"># print(dir(math))</span><br><span class="line"># print(abs(-10))</span><br><span class="line"># print(cmp(1, 3))</span><br><span class="line"># print(math.exp(2))</span><br><span class="line"># print(math.ceil(1.2), math.ceil(-1.2))</span><br><span class="line"># print(math.floor(1.2))</span><br><span class="line"># print(max([12, 1]))</span><br></pre></td></tr></table></figure><h3 id="2-随机操作"><a href="#2-随机操作" class="headerlink" title="2. 随机操作"></a>2. 随机操作</h3><p>主要还没涉及更复杂的计算，只是罗列一些可能常用的方法；<br>真值分部相关的操作，如正态分部啥的，因为暂无需求，</p><blockquote><p>我希望: 有朝一日能用的上那些高大上的。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">print(&quot;---基本---&quot;)</span><br><span class="line"># 基本</span><br><span class="line"># 返回当前生成器的内部状态</span><br><span class="line">print(random.getstate())</span><br><span class="line"># 不大于K位的Python整数,结果是0~2^10之间的整数</span><br><span class="line">print(random.getrandbits(10))</span><br><span class="line"></span><br><span class="line">print(&quot;---整数---&quot;)</span><br><span class="line"># 整数</span><br><span class="line"># 0-9的整数：</span><br><span class="line">print(random.randrange(10))</span><br><span class="line"># 0-100的偶数</span><br><span class="line">print(random.randrange(0, 101, 2))</span><br><span class="line"># 返回 a &lt;&#x3D; N &lt;&#x3D; b， 等同于randrange(a, b+1)。</span><br><span class="line">print(random.randint(1, 9))</span><br><span class="line"></span><br><span class="line">print(&quot;---list---&quot;)</span><br><span class="line"># list</span><br><span class="line"># 从序列随机选择一个元素</span><br><span class="line">print(random.choice([&#39;python&#39;, &#39;node&#39;, &#39;种地&#39;]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;---真值分布---&quot;)</span><br><span class="line"># 随机浮点数:  0.0 &lt;&#x3D; x &lt; 1.0</span><br><span class="line">print(random.random())</span><br><span class="line"># 随机浮点数:  1.1 &lt;&#x3D; x &lt; 11.1</span><br><span class="line">print(random.uniform(1.1, 11.1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对序列进行洗牌，改变原序列</span><br><span class="line">deck &#x3D; &#39;one two three four&#39;.split()</span><br><span class="line">random.shuffle(deck)</span><br><span class="line">print(deck)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> Number </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs 基础系列之--基本概念</title>
      <link href="2019/05/03/index/"/>
      <url>2019/05/03/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>还记得之前说，NodeJs 拥有丰富的第三方模块吗？</p><blockquote><p>如何利用现有的模块，快速、高效的实现需求呢？</p></blockquote></blockquote><h2 id="第一部分-模块管理工具"><a href="#第一部分-模块管理工具" class="headerlink" title="第一部分 模块管理工具"></a>第一部分 模块管理工具</h2><p><strong>几个关键字</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. nvm：主要管理nodejs版本；</span><br><span class="line">2. npm：nodejs自带模块管理工具；</span><br></pre></td></tr></table></figure><h3 id="1-NPM-是什么"><a href="#1-NPM-是什么" class="headerlink" title="1. NPM 是什么?"></a>1. NPM 是什么?</h3><blockquote><p>npm 之于 Node.js ，就像 pip 之于 Python， gem 之于 Ruby， pear 之于 PHP 。</p></blockquote><p><a href="https://www.npmjs.com.cn/getting-started/what-is-npm/" target="_blank" rel="noopener">NPM 官网</a>给出解释如下:</p><ol><li>npm 为你和你的团队打开了连接整个 JavaScript 天才世界的一扇大门。</li><li>它是世界上最大的软件注册表，每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package） （即，代码模块）。</li></ol><p><strong>npm 由三个独立的部分组成：</strong></p><ol><li>网站：开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径；</li><li>注册表（registry）：巨大的数据库，保存了每个包（package）的信息；</li><li>命令行工具 (CLI)： 开发者通过 CLI 与 npm 打交道。</li></ol><p>总之一句话，<strong>想简单高效的完成任务么？NPM 你值得拥有</strong></p><blockquote><p>接下来主要介绍使用</p><blockquote><p>至于自我创建模块，暂不讨论</p></blockquote></blockquote><h3 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2. 安装配置"></a>2. 安装配置</h3><p>NodeJs 自带 npm, 故无需安装。<br>罗列几个常用的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看 npm 命令列表</span><br><span class="line">$ npm help</span><br><span class="line"></span><br><span class="line"># 查看各个命令的简单用法</span><br><span class="line">$ npm -l</span><br><span class="line"></span><br><span class="line"># 查看 npm 的版本</span><br><span class="line">$ npm -v</span><br><span class="line"></span><br><span class="line"># 查看 npm 的配置</span><br><span class="line">$ npm config list -l</span><br><span class="line"></span><br><span class="line">$ npm list</span><br><span class="line"></span><br><span class="line"># 加上 global 参数，会列出全局安装的模块</span><br><span class="line">$ npm list -global</span><br><span class="line"></span><br><span class="line"># 搜索模块</span><br><span class="line">$ npm search &lt;关键字&gt;</span><br><span class="line"></span><br><span class="line"># 本地安装</span><br><span class="line">$ npm install &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"># 全局安装</span><br><span class="line">$ sudo npm install -global &lt;package name&gt;</span><br><span class="line">$ sudo npm install -g &lt;package name&gt;</span><br></pre></td></tr></table></figure><h5 id="实例一-眼见为实"><a href="#实例一-眼见为实" class="headerlink" title="实例一 眼见为实"></a>实例一 眼见为实</h5><p>下载一个常用的框架—ExpressJs，借此展示一下效果，并熟悉一个 ExpressJs</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir first</span><br><span class="line">$ cd first</span><br><span class="line">$ npm install express</span><br><span class="line">$ node app.js</span><br><span class="line">Example app listening on port 3000!</span><br></pre></td></tr></table></figure><p><img data-src="/2019/05/03/index/2.jpg" alt="效果如图"></p><h5 id="实例二-初识-package-json-文件"><a href="#实例二-初识-package-json-文件" class="headerlink" title="实例二 初识 package.json 文件"></a>实例二 初识 package.json 文件</h5><p>简单说就是，记录文件，记录项目依赖的模块。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化一个package.json文件</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>实例说明</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 名称</span><br><span class="line">  &quot;name&quot;: &quot;npm&quot;,</span><br><span class="line">  &#x2F;&#x2F; 版本</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &#x2F;&#x2F; 描述</span><br><span class="line">  &quot;description&quot;: &quot;study npm&quot;,</span><br><span class="line">  &#x2F;&#x2F; 入口文件</span><br><span class="line">  &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line">  &#x2F;&#x2F; 模块依赖</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;&#125;,</span><br><span class="line">  &#x2F;&#x2F; 执行脚本</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 关键词</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;npm&quot;</span><br><span class="line">  ],</span><br><span class="line">  &#x2F;&#x2F; 作者</span><br><span class="line">  &quot;author&quot;: &quot;howard&quot;,</span><br><span class="line">  &#x2F;&#x2F; 协议</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如我们需要下载ExpressJs,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一下命令即可将Express依赖加入到上边的文件中，偷个懒，不在重负写了</span><br><span class="line">$ npm install express --save</span><br></pre></td></tr></table></figure><p>实例三 更改npm源</p><p>可能你发现下载东西简直如龟速，这个你得感谢<a href="https://baike.baidu.com/item/%E6%96%B9%E6%BB%A8%E5%85%B4/9525950?fr=aladdin" target="_blank" rel="noopener">防火墙之父</a></p><p>为了更快更好的完成工作，我们可以用国内的<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝</a>、清华等源；</p><p><strong>淘宝镜像说明：这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><blockquote><p>使用方法类似，用cnpm即可</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install [name]</span><br></pre></td></tr></table></figure><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><blockquote><p>Node.js 最大的特点就是异步式 I/O(或者非阻塞I/O)与事件紧密结合的编程模式。</p></blockquote><h4 id="1-阻塞I-O与非阻塞I-O概念"><a href="#1-阻塞I-O与非阻塞I-O概念" class="headerlink" title="1.阻塞I/O与非阻塞I/O概念"></a>1.阻塞I/O与非阻塞I/O概念</h4><h5 id="1-1-阻塞I-O-同步I-O"><a href="#1-1-阻塞I-O-同步I-O" class="headerlink" title="1.1 阻塞I/O(同步I/O)"></a>1.1 阻塞I/O(同步I/O)</h5><p>线程在执行中如果遇到磁盘读写或网络通信(<strong>统称为I/O 操作</strong>)， 通常要耗费较长的时间，这时操作系统会剥夺这个线程的 CPU 控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程调度方式称为<strong>阻塞</strong>,当<strong>I/O 操作</strong>完成时，操作系统将这个线程的阻塞解除，恢复其对CPU的控制 ，令其继续运行。这种 I/O 模式就是通常的<strong>同步式 I/O(Synchronous I/O)或阻塞式 I/O (Blocking I/O)。</strong></p><h5 id="1-2-非阻塞I-O-异步I-O"><a href="#1-2-非阻塞I-O-异步I-O" class="headerlink" title="1.2 非阻塞I/O(异步I/O)"></a>1.2 非阻塞I/O(异步I/O)</h5><p>非阻塞I/O是针对所有的I/O<strong>不采用阻塞的策略</strong>, 当线程遇到I/O 操作时, <strong>不会阻塞等待完成</strong>, 而是将I/O 操作发送给操作系统, <strong>继续执行下一个语句</strong>, 等操作系统完成I/O 操作以后, 会以<strong>事件的形式</strong>发送通知执行I/O 操作的线程, 线程会在特定的时候处理这个事件; 也就是线程中会不停的监听时间循环, 看是否有未处理的事件, 并以此处理.</p><blockquote><p>举个通俗的例子：<br><a href="https://www.zhihu.com/question/19732473/answer/20851256" target="_blank" rel="noopener">例子来自知乎网友</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你打电话问书店老板有没有《分布式系统》这本书，如果是&#96;同步通信机制&#96;，书店老板会说，你稍等，”我查一下&quot;，</span><br><span class="line">然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。</span><br><span class="line"></span><br><span class="line">而&#96;异步通信机制&#96;，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。</span><br><span class="line">然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。</span><br></pre></td></tr></table></figure><h5 id="2-阻塞I-O与非阻塞I-O特点"><a href="#2-阻塞I-O与非阻塞I-O特点" class="headerlink" title="2.阻塞I/O与非阻塞I/O特点"></a>2.阻塞I/O与非阻塞I/O特点</h5><table><thead><tr><th>同步I/O(阻塞式)</th><th>异步I/O(非阻塞式)</th></tr></thead><tbody><tr><td>利用多线程提供吞吐量</td><td>单线程可实现高吞吐量</td></tr><tr><td>通过事件分割和线程调度利用多核CPU</td><td>通过功能划分利用多核CPU</td></tr><tr><td>需要由操作系统调度多线程使用多核CPU</td><td>可以将单进程绑定到单核 CPU</td></tr><tr><td>难以充分利用 CPU 资源</td><td>可以充分利用 CPU 资源</td></tr><tr><td>符合线性的编程思维</td><td>不符合传统编程思维</td></tr></tbody></table><p><img data-src="/2019/05/03/index/3.jpg" alt="对比"></p><h4 id="第二部分-异步式编程-函数式编程"><a href="#第二部分-异步式编程-函数式编程" class="headerlink" title="第二部分 异步式编程(函数式编程)"></a>第二部分 异步式编程(函数式编程)</h4><p>有异步I/O，就必然有异步编程。<br>首先以同步式编程的语法读取一个文件:</p><p><em>创建readfilesync.js, 并执行</em></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">var data &#x3D; fs.readFileSync(&#39;&#x2F;Users&#x2F;51testing&#x2F;Desktop&#x2F;file.txt&#39;, &#39;utf-8&#39;); </span><br><span class="line">console.log(data);</span><br><span class="line">console.log(&#39;end.&#39;);</span><br></pre></td></tr></table></figure><p>打印的结果如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;执行</span><br><span class="line">$ node &#x2F;Users&#x2F;51testing&#x2F;Desktop&#x2F;readfilesync.js </span><br><span class="line">你好呀</span><br><span class="line">end.</span><br></pre></td></tr></table></figure><p>以上代码很容易理解, 自上而下的执行, 那么异步编程的做法呢?</p><p><em>创建readfileasync.js, 并执行</em></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">fs.readFile(&#39;&#x2F;Users&#x2F;51testing&#x2F;Desktop&#x2F;file.txt&#39;, &#39;utf-8&#39;, function(err, data) &#123;</span><br><span class="line">if (err)&#123; </span><br><span class="line">    console.error(err);</span><br><span class="line">&#125; else &#123; </span><br><span class="line">    console.log(data);</span><br><span class="line">&#125; </span><br><span class="line">&#125;);</span><br><span class="line">    console.log(&#39;end.&#39;);</span><br></pre></td></tr></table></figure><p>打印的结果如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;执行</span><br><span class="line">$ node &#x2F;Users&#x2F;51testing&#x2F;Desktop&#x2F;readfileasync.js </span><br><span class="line">end.</span><br><span class="line">你好呀</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>fs.readFile 调用时所做的工作只是<code>将异步式 I/O 请求发给了操作系统</code>， 然后<code>立即返回</code>并执行后面的语句，执行完以后进入事件循环监听事件。  fs 接到I/O 请求完成的事件时，<code>事件循环会主动调用</code>回调函数以完成后续工作。<code>因此我们会先看到 end.然后看到 file.txt 文件的内容。</code></p><h4 id="2-NodeJs循环机制"><a href="#2-NodeJs循环机制" class="headerlink" title="2 NodeJs循环机制"></a>2 NodeJs循环机制</h4><p><img data-src="/2019/05/03/index/4.jpg" alt="循环"></p><blockquote><p>Node.js 在什么时候会进入事件循环呢? </p></blockquote><p><strong>生命周期为:</strong><code>Node.js 程序由事件循环环开始，到事件循环结束</code>.</p><p>所有的逻辑都是事件的回调函数，所以 Node.js 始终在事件循环中，程序入口就是 事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或直接发射  (emit)事件，执行完成后再返回事件 循环，事件循环会会检查循环中有没有  处理的事件,直到到程序结束。</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>Node 版本区别:</p><p>从对 ES6 的支持来简单的区分是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.x 完全不支持ES6</span><br><span class="line">4.x 部分支持ES6特性，并处在LTS阶段</span><br><span class="line">5.x 部分支持ES6特性（比4.x多些），属于过渡产品，现在来说应该没有什么理由去用这个了</span><br><span class="line">6.x 支持98%的ES6特性</span><br></pre></td></tr></table></figure><p><strong>参考链接</strong></p><p><a href="https://www.byvoid.com/zhs/project/node" target="_blank" rel="noopener">Node.js开发指南</a><br><a href="http://www.infoq.com/cn/master-nodejs" target="_blank" rel="noopener">深入浅出Node.js</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础系列之--初识【1】</title>
      <link href="2019/05/02/index/"/>
      <url>2019/05/02/index/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="认识-Python"><a href="#认识-Python" class="headerlink" title="认识 Python"></a>认识 Python</h1><blockquote><p>人生苦短，我用 Python —— Life is short, you need Python</p></blockquote><p><img data-src="1.jpg" alt="img"></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>Python 的起源</li><li>为什么要用 Python？</li><li>Python 的特点</li><li>Python 的优缺点</li><li><code>Python 2.x</code> 与 <code>3​​.x</code> 版本简介</li><li>执行 <code>Python</code> 程序的三种方式<ul><li>解释器 —— <code>python</code> / <code>python3</code></li><li>交互式 —— <code>ipython</code></li><li>我选择免费易扩展的VSCode,因为还得写别的语言，仅此而已</li></ul></li></ul><h2 id="01-Python-的起源"><a href="#01-Python-的起源" class="headerlink" title="01. Python 的起源"></a>01. Python 的起源</h2><blockquote><p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p><blockquote><p>Python之父是荷兰人Guido van Rossum，被誉为历史上<a href="https://www.douban.com/group/topic/74259468/" target="_blank" rel="noopener">最伟大的12名程序员</a>之一。</p></blockquote></blockquote><p><img data-src="2.jpg" alt="e747899073c9b4416c91c2bb326f1549.jpeg"></p><ol><li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承（<strong>感觉下什么叫牛人</strong>）</li><li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li><li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li><li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li></ol><h3 id="1-1-解释器（科普）"><a href="#1-1-解释器（科普）" class="headerlink" title="1.1 解释器（科普）"></a>1.1 解释器（科普）</h3><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p><p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译时间点的不同</strong>。当编译器<strong>以解释方式运行的时候</strong>，也称之为<strong>解释器</strong></p><p><img data-src="3.png" alt="12ae91928d3e790ef0b8cdf9ec299685.png"></p><ul><li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li><li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li></ul><p><img data-src="4.jpg" alt="e56f0d1450ca0c514ba954ef640b4b4c.png"></p><h4 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h4><ul><li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li><li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li></ul><h3 id="1-2-Python-的设计目标"><a href="#1-2-Python-的设计目标" class="headerlink" title="1.2 Python 的设计目标"></a>1.2 Python 的设计目标</h3><p>1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：</p><ul><li>一门<strong>简单直观的语言</strong>并与主要竞争者一样强大</li><li><strong>开源</strong>，以便任何人都可以为它做贡献</li><li>代码<strong>像纯英语那样容易理解</strong></li><li>适用于<strong>短期</strong>开发的日常任务</li></ul><p>这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言</p><h3 id="1-3-Python-的设计哲学"><a href="#1-3-Python-的设计哲学" class="headerlink" title="1.3 Python 的设计哲学"></a>1.3 Python 的设计哲学</h3><p><img data-src="5.jpg" alt="7ff693d9b86899489ddfc38bfe444bdc.png"></p><ol><li>优雅</li><li>明确</li><li>简单</li></ol><!-- > 在 Python 解释器内运行 `import this` 可以获得完整的列表 --><ul><li>Python 开发者的哲学是：<strong>用一种方法，最好是只有一种方法来做一件事</strong></li><li>如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择<strong>明确没有或者很少有歧义的语法</strong></li></ul><blockquote><p>在 Python 社区，吉多被称为“仁慈的独裁者”</p></blockquote><h2 id="02-为什么选择-Python？"><a href="#02-为什么选择-Python？" class="headerlink" title="02. 为什么选择 Python？"></a>02. 为什么选择 Python？</h2><ul><li>代码量少</li><li>……</li></ul><blockquote><p>同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 <code>Python</code> 是 <code>Java</code> 的 <strong>1/5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p></blockquote><h2 id="03-Python-特点"><a href="#03-Python-特点" class="headerlink" title="03. Python 特点"></a>03. Python 特点</h2><ul><li>Python 是<strong>完全面向对象的语言</strong><ul><li><strong>函数</strong>、<strong>模块</strong>、<strong>数字</strong>、<strong>字符串</strong>都是对象，<strong>在 Python 中一切皆对象</strong></li><li>完全支持继承、重载、多重继承</li><li>支持重载运算符，也支持泛型设计</li></ul></li><li>Python <strong>拥有一个强大的标准库</strong>，Python 语言的核心只包含 <strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数，而由 Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</li><li>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域</li></ul><h3 id="面向对象的思维方式"><a href="#面向对象的思维方式" class="headerlink" title="面向对象的思维方式"></a>面向对象的思维方式</h3><ul><li><strong>面向对象</strong> 是一种 <strong>思维方式</strong>，也是一门 <strong>程序设计技术</strong></li><li>要解决一个问题前，首先考虑 <strong>由谁</strong> 来做，怎么做事情是 <strong>谁</strong> 的职责，最后把事情做好就行！<ul><li><strong>对象</strong> 就是 <strong>谁</strong></li></ul></li><li>要解决复杂的问题，就可以找<strong>多个不同的对象</strong>，<strong>各司其职</strong>，共同实现，最终完成需求</li></ul><h2 id="04-Python-的优缺点"><a href="#04-Python-的优缺点" class="headerlink" title="04. Python 的优缺点"></a>04. Python 的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul><li>简单、易学</li><li>免费、开源</li><li><strong>面向对象</strong></li><li>丰富的库</li><li>可扩展性<ul><li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 <code>C</code> 或 <code>C++</code> 编写，然后在 <code>Python</code> 程序中使用它们</li></ul></li><li>……</li></ul><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul><li>运行速度</li><li>国内市场较小</li><li>中文资料匮乏</li></ul><h2 id="01-Python-2-x-与-3​​-x-版本简介"><a href="#01-Python-2-x-与-3​​-x-版本简介" class="headerlink" title="01. Python 2.x 与 3​​.x 版本简介"></a>01. <code>Python 2.x</code> 与 <code>3​​.x</code> 版本简介</h2><p>目前市场上有两个 Python 的版本并存着，分别是 <code>Python 2.x</code> 和 <code>Python 3.x</code></p><p><img data-src="6.jpg" alt=""></p><blockquote><p>新的 Python 程序建议使用 <code>Python 3.0</code> 版本的语法</p></blockquote><ul><li>Python 2.x 是 <strong>过去的版本</strong><ul><li>解释器名称是 <strong>python</strong></li></ul></li><li>Python 3.x 是 <strong>现在和未来 主流的版本</strong><ul><li>解释器名称是 <strong>python3</strong></li><li>相对于 <code>Python</code> 的早期版本，这是一个 <strong>较大的升级</strong></li><li>为了不带入过多的累赘，<code>Python 3.0</code> 在设计的时候 <strong>没有考虑向下兼容</strong><ul><li>许多早期 <code>Python</code> 版本设计的程序都无法在 <code>Python 3.0</code> 上正常执行</li></ul></li><li>Python 3.0 发布于 <strong>2008 年</strong></li><li>到目前为止，Python 3.0 的稳定版本已经有很多年了<ul><li>Python 3.3 发布于 2012</li><li>Python 3.4 发布于 2014</li><li>Python 3.5 发布于 2015</li><li>Python 3.6 发布于 2016</li></ul></li></ul></li><li>为了照顾现有的程序，官方提供了一个过渡版本 —— <strong>Python 2.6</strong><ul><li>基本使用了 <code>Python 2.x</code> 的语法和库</li><li>同时考虑了向 <code>Python 3.0</code> 的迁移，<strong>允许使用部分</strong> <code>Python 3.0</code> 的语法与函数</li><li>2010 年中推出的 <code>Python 2.7</code> 被确定为 <strong>最后一个Python 2.x 版本</strong></li></ul></li></ul><blockquote><p>提示：如果开发时，无法立即使用 Python 3.0（还有极少的第三方库不支持 3.0 的语法），建议</p><ul><li>先使用 <code>Python 3.0</code> 版本进行开发</li><li>然后使用 <code>Python 2.6</code>、<code>Python 2.7</code> 来执行，并且做一些兼容性的处理</li></ul></blockquote><h2 id="03-执行-Python-程序的三种方式"><a href="#03-执行-Python-程序的三种方式" class="headerlink" title="03. 执行 Python 程序的三种方式"></a>03. 执行 Python 程序的三种方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解释器 —— python &#x2F; python3</span><br><span class="line">交互式 —— ipython</span><br><span class="line">集成开发环境 —— PyCharm &#x2F; VsCode</span><br></pre></td></tr></table></figure><h3 id="3-1-解释器-python-python3"><a href="#3-1-解释器-python-python3" class="headerlink" title="3.1. 解释器 python / python3"></a>3.1. 解释器 <code>python</code> / <code>python3</code></h3><h4 id="Python-的解释器"><a href="#Python-的解释器" class="headerlink" title="Python 的解释器"></a>Python 的解释器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 2.x 解释器</span></span><br><span class="line">$ python xxx.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 python 3.x 解释器</span></span><br><span class="line">$ python3 xxx.py</span><br></pre></td></tr></table></figure><h5 id="其他解释器"><a href="#其他解释器" class="headerlink" title="其他解释器"></a>其他解释器</h5><p><strong>Python 的解释器</strong> 如今有多个语言的实现，包括：</p><ul><li><code>CPython</code> —— 官方版本的 C 语言实现</li><li><code>Jython</code> —— 可以运行在 Java 平台</li><li><code>IronPython</code> —— 可以运行在 .NET 和 Mono 平台</li><li><code>PyPy</code> —— Python 实现的，支持 JIT 即时编译</li></ul><h3 id="3-2-交互式运行-Python-程序"><a href="#3-2-交互式运行-Python-程序" class="headerlink" title="3.2. 交互式运行 Python 程序"></a>3.2. 交互式运行 Python 程序</h3><ul><li>直接在终端中运行解释器，而不输入要执行的文件名</li><li>在 Python 的 <code>Shell</code> 中直接输入 <strong>Python 的代码</strong>，会立即看到程序执行结果</li></ul><h4 id="1-交互式运行-Python-的优缺点"><a href="#1-交互式运行-Python-的优缺点" class="headerlink" title="1) 交互式运行 Python 的优缺点"></a>1) 交互式运行 Python 的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>适合于学习/验证 Python 语法或者局部代码</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>代码不能保存</li><li>不适合运行太大的程序</li></ul><h4 id="2-退出-官方的解释器"><a href="#2-退出-官方的解释器" class="headerlink" title="2) 退出 官方的解释器"></a>2) 退出 官方的解释器</h4><h5 id="1-gt-直接输入-exit"><a href="#1-gt-直接输入-exit" class="headerlink" title="1&gt; 直接输入 exit()"></a>1&gt; 直接输入 <code>exit()</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br></pre></td></tr></table></figure><h5 id="2-gt-使用热键退出"><a href="#2-gt-使用热键退出" class="headerlink" title="2&gt; 使用热键退出"></a>2&gt; 使用热键退出</h5><p>在 python 解释器中，按热键 <code>ctrl + d</code> 可以退出解释器</p><h4 id="3-gt-IPython"><a href="#3-gt-IPython" class="headerlink" title="3&gt; IPython"></a>3&gt; IPython</h4><ul><li>IPython 中 的 “I” 代表 <strong>交互 interactive</strong></li></ul><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>IPython 是一个 python 的 <strong>交互式 shell</strong>，比默认的 <code>python shell</code> 好用得多<ul><li>支持自动补全</li><li>自动缩进</li><li>支持 <code>bash shell</code> 命令</li><li>内置了许多很有用的功能和函数</li></ul></li><li>IPython 是基于 BSD 开源的</li></ul><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><ul><li><p>Python 2.x 使用的解释器是 <strong>ipython</strong></p></li><li><p>Python 3.x 使用的解释器是 <strong>ipython3</strong></p></li><li><p>要退出解释器可以有以下两种方式：</p></li></ul><h5 id="1-gt-直接输入-exit-1"><a href="#1-gt-直接输入-exit-1" class="headerlink" title="1&gt; 直接输入 exit"></a>1&gt; 直接输入 <code>exit</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: exit</span><br></pre></td></tr></table></figure><h5 id="2-gt-使用热键退出-1"><a href="#2-gt-使用热键退出-1" class="headerlink" title="2&gt; 使用热键退出"></a>2&gt; 使用热键退出</h5><p>在 IPython 解释器中，按热键 <code>ctrl + d</code>，<code>IPython</code> 会询问是否退出解释器</p><h3 id="3-3-不过我选择vscode-一个编辑器走天下！"><a href="#3-3-不过我选择vscode-一个编辑器走天下！" class="headerlink" title="### 3.3 不过我选择vscode, 一个编辑器走天下！"></a>### 3.3 不过我选择vscode, 一个编辑器走天下！</h3><p>工具顺手就行，只是为了提升开发效率，对Python的基本认识应该就到此位置了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs系列之--相见恨晚</title>
      <link href="2019/05/01/index/"/>
      <url>2019/05/01/index/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分-NodeJs-初识"><a href="#第一部分-NodeJs-初识" class="headerlink" title="第一部分 NodeJs 初识"></a>第一部分 NodeJs 初识</h3><p><strong>不知了了几行代码是否可以引起你的兴趣</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; service.js</span><br><span class="line">var http &#x3D; require(&quot;http&quot;);</span><br><span class="line">http.createServer(function(req,res)&#123;</span><br><span class="line">   res.write(&quot;Hello NodeJs&quot;);</span><br><span class="line">   res.end();</span><br><span class="line">&#125;).listen(8888);</span><br></pre></td></tr></table></figure><p><img data-src="media/15563604190618/15567161245047.jpg" alt=""></p><h4 id="1-Nodejs是什么"><a href="#1-Nodejs是什么" class="headerlink" title="1 Nodejs是什么?"></a>1 Nodejs是什么?</h4><ul><li><p>Node.js是一个让 <strong>JavaScript 运行在服务端的开发平台</strong>;</p></li><li><p>Node.js可以作为服务器向用户提供服务,它<strong>跳过了 Apache、Nginx 等 HTTP 服务器</strong>,直接面向前端开发。</p></li><li><p>优秀的第三方包管理器(node package manager,<strong>npm</strong>)</p></li></ul><h4 id="2-Nodejs不是什么"><a href="#2-Nodejs不是什么" class="headerlink" title="2 Nodejs不是什么?"></a>2 Nodejs不是什么?</h4><ol><li><strong>Node.js 不是一种独立的语言</strong>，</li><li><strong>Node.js 不是一个 JavaScript 框架 ;</strong> </li></ol><h4 id="3-Nodejs能做什么"><a href="#3-Nodejs能做什么" class="headerlink" title="3 Nodejs能做什么?"></a>3 Nodejs能做什么?</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 具有复杂逻辑的网站;</span><br><span class="line"> 基于社交网络的大规模 Web 应用;</span><br><span class="line"> Web Socket 服务器;</span><br><span class="line"> TCP&#x2F;UDP 套接字应用程序; 8  命令行工具;</span><br><span class="line"> 交互式终端程序;</span><br><span class="line"> 带有图形用户界面的本地应用程序;</span><br><span class="line"> 单元测试工具;</span><br><span class="line"> 客户端 JavaScript 编译器。</span><br></pre></td></tr></table></figure><h4 id="4-Nodejs-原理"><a href="#4-Nodejs-原理" class="headerlink" title="4 Nodejs 原理"></a>4 Nodejs 原理</h4><p>Node.js 是基于<strong>Chrome V8引擎</strong>构建的，由事件循环（Event Loop）分发 I/O 任务，最终工作线程（Work Thread）将任务丢到<strong>线程池（Thread Pool）里去执行</strong>，而事件循环只要等待执行结果就可以了。</p><p><img data-src="media/15563604190618/15567164616816.jpg" alt=""></p><p>核心概念</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Chrome V8 是 Google 发布的开源 JavaScript 引擎，</span><br><span class="line">  采用 C&#x2F;C++ 编写，在 Google 的 Chrome 浏览器中被使用。</span><br><span class="line">  Chrome V8 引擎可以独立运行，也可以用来嵌入到 C&#x2F;C++ 应用程序中执行。</span><br><span class="line">* Event Loop 事件循环（由 libuv 提供）</span><br><span class="line">* Thread Pool 线程池（由 libuv 提供）</span><br></pre></td></tr></table></figure><p><strong>重点: 整体思路梳理</strong></p><p><strong>重点: 整体思路梳理</strong></p><p><strong>重点: 整体思路梳理</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Chrome V8 是 JavaScript 引擎</span><br><span class="line">2. Node.js 内置 Chrome V8 引擎，所以它使用的 JavaScript 语法</span><br><span class="line">3. JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事</span><br><span class="line">4. 单线程就意味着，所有任务需要排队，前一个任务结束，</span><br><span class="line">   才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span><br><span class="line">5. 如果排队是因为计算量大，CPU 忙不过来，倒也算了，</span><br><span class="line">   但是很多时候 CPU 是闲着的，因为 I&#x2F;O 很慢，不得不等着结果出来，再往下执行。</span><br><span class="line">6. CPU 完全可以不管 I&#x2F;O 设备，挂起处于等待中的任务，先运行排在后面的任务，</span><br><span class="line">   将等待中的 I&#x2F;O 任务放到 Event Loop 里，由 Event Loop 将 I&#x2F;O 任务放到线程池里，</span><br><span class="line">   只要有资源，就尽力执行。</span><br></pre></td></tr></table></figure><p><img data-src="media/15563604190618/15567168580070.jpg" alt=""></p><p><strong>重点理解如下这句话</strong></p><blockquote><p>Nodejs接受任务是单线程，执行任务是多线程。</p></blockquote><p>思路如下：</p><ol><li>Nodejs内置V8，采用Js语言，是单线程的，故接受任务是单线程，无需进程/线程切换，<strong>非常高效</strong></li><li>EventLoop派发任务给线程池里的I/O去执行，故是多线程执行任务。</li></ol><h3 id="第二部分-配置开发环境"><a href="#第二部分-配置开发环境" class="headerlink" title="第二部分 配置开发环境"></a>第二部分 配置开发环境</h3><h4 id="1-安装-lt-官方文档-gt"><a href="#1-安装-lt-官方文档-gt" class="headerlink" title="1. 安装&lt;官方文档&gt;"></a>1. 安装<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">&lt;官方文档&gt;</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.32.0&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR&#x2F;nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure><p>Mac安装后如果提示<code>nvm: command not found</code>, 是因为没有<code>[.bash_profile file]</code>文件，</p><p>第一种方法： 创建<code>touch ~/.bash_profile</code>, 然后重新执行curl操作；<br>第二种方法： 打开<code>.bash_profile</code>, 添加<code>source ~/.bashrc</code></p><h4 id="2-下载不同版本"><a href="#2-下载不同版本" class="headerlink" title="2 下载不同版本"></a>2 下载不同版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                        now</span><br><span class="line">       (io.js)    v2.0   :          v2.x</span><br><span class="line">          |         |    :            |</span><br><span class="line"> v0.10.x  &#x2F;--------------:-----------------\   Node.js 2.0</span><br><span class="line">____|____&#x2F;               :                  \______|_____</span><br><span class="line">         \               :                  &#x2F;</span><br><span class="line">          \--------------:-----------------&#x2F;</span><br><span class="line">          |         |    :     |       |</span><br><span class="line">       (node.js) v0.12.x :  v0.13.x  v0.14.x</span><br></pre></td></tr></table></figure><p>对于nodejs与io.js的版本区别以及渊源，建议大家参考<a href="http://www.infoq.com/cn/articles/node-js-and-io-js/" target="_blank" rel="noopener">Node.js与io.js那些事儿</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#罗列可以安装的版本</span><br><span class="line">$ nvm ls-remote</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">   v6.4.0</span><br><span class="line">   v6.5.0</span><br><span class="line">   v6.6.0</span><br></pre></td></tr></table></figure><h4 id="3-下载版本"><a href="#3-下载版本" class="headerlink" title="3 下载版本"></a>3 下载版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#为了演示,选择了6.6.0</span><br><span class="line">$ nvm install v6.6.0</span><br><span class="line"></span><br><span class="line">$ nvm install v5.12.0</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">WARNING: checksums are currently disabled for node.js v4.0 and later</span><br><span class="line">Now using node v5.12.0 (npm v3.8.6)</span><br></pre></td></tr></table></figure><h4 id="4-切换版本"><a href="#4-切换版本" class="headerlink" title="4 切换版本"></a>4 切换版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvm use v5</span><br><span class="line">Now using node v5.12.0 (npm v3.8.6)</span><br><span class="line"></span><br><span class="line">$ nvm use v6</span><br><span class="line">Now using node v6.6.0 (npm v3.10.3)</span><br></pre></td></tr></table></figure><h4 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5 常用命令"></a>5 常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">$ nvm install ***</span><br><span class="line">#切换版本</span><br><span class="line">$ nvm use 版本号</span><br><span class="line">#罗列下载的版本</span><br><span class="line">$nvm ls</span><br><span class="line"># 罗列远程版本</span><br><span class="line">$nvm ls-remote</span><br><span class="line">#设置默认的版本</span><br><span class="line">$nvm alias default 版本</span><br></pre></td></tr></table></figure><h3 id="第三部分-注意事项"><a href="#第三部分-注意事项" class="headerlink" title="第三部分 注意事项"></a>第三部分 注意事项</h3><ol><li><p>当关闭终端在此打开时, 输入 <strong>nvm</strong>会提示找不到, 解决办法:<br>在<code>.bash_profile</code>文件中添加<code>source ~/.bashrc</code>;即可;</p></li><li><p><strong>nvm安装</strong>的路径是: <code>~/.nvm</code>;</p></li><li><p>使用nvm安装<strong>node, 会安装在该路径</strong>下: <code>~/.nvm/versions/node</code>;</p></li></ol><p><strong>附加</strong></p><p>Mac 环境变量配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.&#x2F;etc&#x2F;profile: (不建议修改这个文件）全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</span><br><span class="line">2.&#x2F;etc&#x2F;bashrc: 系统级环境变量. 全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件。</span><br><span class="line">3.~&#x2F;.bash_profile: 用户级环境变量.每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT使用</title>
      <link href="2019/04/26/index/"/>
      <url>2019/04/26/index/</url>
      
        <content type="html"><![CDATA[<p>第一部分</p><p>语言</p><p>rss</p><p>标签、类别、</p><p>账户</p><p>公益</p><p>首页显示</p><h4 id="背景显示"><a href="#背景显示" class="headerlink" title="背景显示"></a>背景显示</h4><p><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;next</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure><p>更改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">https://github.com/theme-next/theme-next-canvas-nest</a></p><h4 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读</h4><p><code>theme/next/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  简单即是美: https:&#x2F;&#x2F;simuty.github.io&#x2F;</span><br></pre></td></tr></table></figure><p>第二部分</p><p>文章头</p><h4 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h4><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：(颜色可以自己定义)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计字数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;powered-by&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>阅读时长</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>在<code>hexo/_config.yml</code>中添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">symbols: true</span><br><span class="line">time: true</span><br><span class="line">total_symbols: true</span><br><span class="line">total_time: true</span><br></pre></td></tr></table></figure><p>在<code>hexo/theme/next/_config.yml</code>中找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure><p>代码</p><p>音视频</p><p>post阴影</p><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%BA%8C/" target="_blank" rel="noopener">http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%BA%8C/</a></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>打开 站点配置文件 ,添加配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">打开 主题配置文件 ,搜索关键字local_search,设置为true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><p>打赏</p><p>文章加密<br><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a><br>hexo-blog-encrypt</p><p>参考链接</p><p><a href="https://co5.me/2018/180613-wordcount.html" target="_blank" rel="noopener">†少女癌†</a></p><p><a href="http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E5%9B%9B/" target="_blank" rel="noopener"></a></p><p><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener"></a></p><p><a href="https://www.vincentqin.tech/" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT使用</title>
      <link href="2019/04/26/index/"/>
      <url>2019/04/26/index/</url>
      
        <content type="html"><![CDATA[<p>第一部分</p><p>语言</p><p>rss</p><p>标签、类别、</p><p>账户</p><p>公益</p><p>首页显示</p><h4 id="背景显示"><a href="#背景显示" class="headerlink" title="背景显示"></a>背景显示</h4><p><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;next</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure><p>更改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">https://github.com/theme-next/theme-next-canvas-nest</a></p><h4 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读</h4><p><code>theme/next/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  简单即是美: https:&#x2F;&#x2F;simuty.github.io&#x2F;</span><br></pre></td></tr></table></figure><p>第二部分</p><p>文章头</p><h4 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h4><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：(颜色可以自己定义)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计字数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;powered-by&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>阅读时长</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>在<code>hexo/_config.yml</code>中添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">symbols: true</span><br><span class="line">time: true</span><br><span class="line">total_symbols: true</span><br><span class="line">total_time: true</span><br></pre></td></tr></table></figure><p>在<code>hexo/theme/next/_config.yml</code>中找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure><p>代码</p><p>音视频</p><p>post阴影</p><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%BA%8C/" target="_blank" rel="noopener">http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%BA%8C/</a></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>打开 站点配置文件 ,添加配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">打开 主题配置文件 ,搜索关键字local_search,设置为true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><p>打赏</p><p>文章加密<br><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a><br>hexo-blog-encrypt</p><p>参考链接</p><p><a href="https://co5.me/2018/180613-wordcount.html" target="_blank" rel="noopener">†少女癌†</a></p><p><a href="http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E5%9B%9B/" target="_blank" rel="noopener"></a></p><p><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener"></a></p><p><a href="https://www.vincentqin.tech/" target="_blank" rel="noopener"></a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移博客</title>
      <link href="2019/04/26/index/"/>
      <url>2019/04/26/index/</url>
      
        <content type="html"><![CDATA[<h2 id="gt-0001-为何要写博客？"><a href="#gt-0001-为何要写博客？" class="headerlink" title="&gt;0001 为何要写博客？"></a>&gt;0001 为何要写博客？</h2><h1 id="…记录点滴、分享所得。"><a href="#…记录点滴、分享所得。" class="headerlink" title="…记录点滴、分享所得。"></a>…记录点滴、分享所得。</h1><h2 id="gt-0010-为何要自建博客？"><a href="#gt-0010-为何要自建博客？" class="headerlink" title="&gt;0010 为何要自建博客？"></a>&gt;0010 为何要自建博客？</h2><h1 id="…一分为乐趣，一分为自由。"><a href="#…一分为乐趣，一分为自由。" class="headerlink" title="…一分为乐趣，一分为自由。"></a>…一分为乐趣，一分为自由。</h1><h2 id="gt-0011-类似的资源那么多，为何要重复？"><a href="#gt-0011-类似的资源那么多，为何要重复？" class="headerlink" title="&gt;0011 类似的资源那么多，为何要重复？"></a>&gt;0011 类似的资源那么多，为何要重复？</h2><h1 id="…存在不代表拥有，所得才可拥有"><a href="#…存在不代表拥有，所得才可拥有" class="headerlink" title="…存在不代表拥有，所得才可拥有"></a>…存在不代表拥有，所得才可拥有</h1><p><code>Hello World</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure><p><img data-src="/2019/04/26/index/27-01_kiding.png" alt="asd"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些美的东西</title>
      <link href="2019/04/25/index/"/>
      <url>2019/04/25/index/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">暗号：天王盖地虎.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="be9ae294889985a50492cb49778c9f4f248f18b7ced6445aa10609d139624749">b5caa99c2fcd6638ea49e410f5914ef4894f1c1afc7b775c1938283f45952c9630949f5cbd057d740e98d73b86de69cb513a8366845f7f70a12e9b93d22e84866e1dbe931f810116f95abed314d832c496fd846a112168dd8aaf06df03cac2b66152378ebae592e1e79dc2f8cecfe826b7eb54bd5dccc100254f28ae5f774ce5cb475b8d08eef5395c3ce87bc02a94d79adcc4d2687b4c934700b13570209681e2e1084a42cb444340d00624e2e73bae897c5fd940ac57f096e920220b63fec5418f2174d44a9bdd4162db4b3c073f9c71c39351be61520b14f94d2d5305a9576f24d9dcd217c71f7cf80c303bbead52cfb717dc8a4a091c4d81d354d2f54c33be11eca62071b32a13aa3811bc607ca231030ff3e53fc42961d4deb712561807aeaf06a8f0e089c98646f7fafe2062cc64907f5327b84b2c663eb27105a55575f7c5a6a476369d8ee6427d41611e25a2daccc59fc2bb76442f961ef6b4ef2dcc38f7fe930fa5075b4de1675e56c4b95e3367b1fa12a555003a5746ffb5fbed6d02ee5f713b2de90c1b16ea132d4b585a42ec5ec03cdcf94fefecde5ab4c55c4fc57f20ed655fc5f199ce7668e425a0585547634a3b1ed1ab7d7215ae4a7fea349b4ea65830b31ce0446a1b4c2ad9752d61262677cd03b151d083022897ca82babab95ca79da7c41e5a85ead51bc17ea409092f797ec6064db1970a1c4ae50ebaa86d8a21baaeb619faa6f0fc49a1419f6593ab5ee62be30d6fd301be30dc44de101eba1a70bba5cc97518928d9d14f6fefdd51036d800094666cce16714aa9f430995624434fc520019794b79ee373b36cf087def60b73617b96c9c7a183e7c87842bd7488e4c4a9fac7424c1c660056e8ecad7c0e2c790bcc79a527e596decd4c09bd7ed9cf3486be4c9fa3ec2681ea5e41833823b5057932baea2f674db59850569bb8ff26c215031ff505ecd3b260c084b62e02886f317d7bb0545969d12b965fc91972f81a3c56a5977a8f6785cb51796407a679cac2084f647a104984cba46d5cdae4315d49d4a3eb8415a7c1c8afe8a66896da42dfbd91acf5e4b8f4abff627b8cd98dc3e6b07899dbf80eb0d56489d1954264d19664cb534952088afa277cf93e71e8f081666bebb757b9bd9b4b68c36d3b47019fc94d68d7a116751465ed52e634710cec55cd545840ccbdd05ba3458587b1738bdd2b59de832eaad2604e6c913ed1ffc0afa0fc7d7389834908ad7ce871d38d0cf79ade412ec4723680cb05afd72922324b39b1ea7813ada4490bb815caa3310780b501a79f417aa8980b127a2a3c63530f06192002433edf931bc3460bc656e484586e342e95dd8b7567cc3a20ce02434ade795775ddb85148f3771281ee95874cb26e0a73baabe7bba6be34f75d2c1fd9673fa67641a65072e6599f99cd5206ef194d39c2f86e4b9c8c9305301eba76f3c70fff190384e134031c3d667a9973953dfd74617734d29342d6222c9bb5c252eade22e6be5205a72af2cc9b500c895023847b592ef7c358106ead7ad3154ee87510400223ae62ecec706498fb920567db56a82033cf67a26c45253fa1ea3e07c4d41d268f39b5d2b899ebd86a8ad0f6ab3f7ef9c87493ee28d4abd605b4dc4f330b0470225955c22fedb7028cb4b4eed5d514cc116b86e5aadabf987475b324efa9cc8c88687565ccb29598211d8451851b4c4b21eef6fe33f66991f325dd60f8ea0895dac992c9de211509f5a2c4f6ed18abec15d9d00628ff3c4e46a3d5e2ab70b1220784a240100445168376fd8480ad6fe17b077a322a9bf7721c24de87301167a53652d1a52ed4e67ee52f0c19898c885005d8bea671d047149eb3181f766e1b5e735cc8b3818eb2b854ba36bbf7a15c3268c49b8b9db7bbdb879304a54c06f3f47385739152a97ededcc0d291346e9c5d7b9a7f87af20b5ad724c01ad35f60159220b90e9efb5daca0f8f72488b08f1cd893187cc179e8391dc3ea6be4895326d5fdb10116b59ab1bb4ca260e0c96b0c3c41206faf101f3a046f5f1fd14fab362461d0c8b3dcd95d422100830c2ddd6a83177bb048b0420628b5b654ab5ebf8dd632cff78c81d5d6677de5ec1cdc93c63ef5dd37057d0a55cdb34ea75ca70d8fe8aa94df4deb91333e337ae641053a4482295f80ef2286e7093b20bc8770542053ef36790d8655199604a736a6067c1d2134ef0386637571783063a54e181033edb7c82aedafda3070880a65604efe0d02fc807db0a649b746f875325cd9cc6f0ba3886956f35a8b6e43cc5be058628623d3502b2cebd99827d7f54e02883bab69b192d0c49d5860a87f813bdb42042404ba1991edff4cdbef4cbcfdcd859a0ff34cb6168a565da0b71303c90dbc7c2fde67e0be56c91175232e87ad048066ea030f24223c8c1edf715304fcc342a8e15d816aec60284aaabdc180df49d0f626b5a0432167fd8870679de76e59dd44aad50106c90bda8573d6ade34c8589dfdce7c0f43d6c7767f771143ab62aeea25072860ed226c837352551d78d698d0a756ee75ead1b7ede1e7c21b3c1e224a466e9e2489668f6f94c9d102b8c2e8742f42ad9542ed0f0cdfc015b37a6fd5d2cb24cd8f7384afb812aca07f26a89ed56d5cac4833001260804ac8c74e54dee582258ca497426b9d925743f24be24dc69d5d3728f77f9e1055149c4e0a559067799b513d64b85b9111c0b2dafd52842d1d7e690141084e38a32b6b4fce1a30d7abc7ff517cc966dfdd17b5473a94ced79064e57e890b96e5df1bcafcf9782a523aa5f0897f2d2adcb574ee97a53a625eef23eccaeebc67995c27efbdcedaa121493ac57d4e61569b61c4a270e3dd654147455b4b812d4d94f4837731f8d42f6e5fe54158f9837af763f210d3c8b20c5ba4dc9d484b8e4f70fce0c739e37b8fb9b2019abead3da5775b39770c9ff49147959e3d8bb0fbc3ee8955f5a2dcc8e73482f52e06fe516b820aa50f94cc362f2b369d7b80fc93c2f85df3dee3d12e226de5f7d838cc7d7f4cdb920c11fdb402d1eba08619e4e198cc23c11bfcc7e8a05b09303bce6649285e0395d024d38c1681a06b95f037b406eeee40f1d7ab2f73c0ea8513d9b7ee8bbfd5ced9bde45f1e041409d706bb8eb46dfd0d47bd9b58c1ebbd0dacf7d0</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 句子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>造假数据</title>
      <link href="2018/04/14/mock/"/>
      <url>2018/04/14/mock/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/022.jpg" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><p>mock简单说就是：<strong>造假数据</strong></p><h3 id="第一部分：直接使用"><a href="#第一部分：直接使用" class="headerlink" title="第一部分：直接使用"></a>第一部分：直接使用</h3><p>如果直接看GitHub或看一些文章，直接就是ajax拦截之类的。<br>但我们的<strong>需求就是，造一些假数据，满足使用即可</strong>，<br>如果基本需求都没满足，别的都没用，<strong>第二部分，来整没用的东西</strong>。</p><h4 id="1-1-提前条件"><a href="#1-1-提前条件" class="headerlink" title="1.1 提前条件"></a>1.1 提前条件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 安装nodejs, 【没装的，找卖药的问下】。</span><br><span class="line">2. npm install mockjs</span><br></pre></td></tr></table></figure><h4 id="1-2-罗列基本法，尽量开箱即用"><a href="#1-2-罗列基本法，尽量开箱即用" class="headerlink" title="1.2 罗列基本法，尽量开箱即用"></a>1.2 罗列基本法，尽量开箱即用</h4><p>基本涵盖了常用的所有字段类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; mock.js</span><br><span class="line">const Mock &#x3D; require(&#39;mockjs&#39;)</span><br><span class="line">const Random &#x3D; Mock.Random;</span><br><span class="line">const data &#x3D; Mock.mock(&#123;</span><br><span class="line">    &#x2F;&#x2F; 中文名字 | 姓 | 名</span><br><span class="line">    china_name: Random.cname(),</span><br><span class="line">    china_first: Random.cfirst(),</span><br><span class="line">    china_last: Random.clast(),</span><br><span class="line">    &#x2F;&#x2F; 英文名 | firatname | lastname | 带中间字的</span><br><span class="line">    eng_name: Random.name(),</span><br><span class="line">    eng_first: Random.first(),</span><br><span class="line">    eng_last: Random.last(),</span><br><span class="line">    eng_last: Random.name(true),</span><br><span class="line">    &#x2F;&#x2F; 长度为4的字符串</span><br><span class="line">    string: Random.string(4),</span><br><span class="line">    &#x2F;&#x2F; 数字 最小1 最大100</span><br><span class="line">    age: Random.integer(1, 100),</span><br><span class="line">    &#x2F;&#x2F; 数字 浮点数</span><br><span class="line">    num: Random.float(1, 10, 1, 4),</span><br><span class="line">    &#x2F;&#x2F; 数字 字符串</span><br><span class="line">    numString: Random.character(&#39;number&#39;),</span><br><span class="line">    &#x2F;&#x2F; 日期 YYYY-MM-DD</span><br><span class="line">    date: Random.date(),</span><br><span class="line">    &#x2F;&#x2F; 时间 HH:mm:ss</span><br><span class="line">    time: Random.time(),</span><br><span class="line">    &#x2F;&#x2F; 日期 时间 YYYY-MM-DD HH:mm:ss</span><br><span class="line">    dateTime: Random.datetime(),</span><br><span class="line">    &#x2F;&#x2F; 当前日期</span><br><span class="line">    now: Random.now(),</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 图片</span><br><span class="line">    image: Random.image(&#39;200x100&#39;, &#39;#ffcc33&#39;, &#39;#FFF&#39;, &#39;png&#39;, &#39;文字&#39;),</span><br><span class="line">    &#x2F;&#x2F; 颜色 hex  rgb</span><br><span class="line">    color: Random.color(),</span><br><span class="line">    &#x2F;&#x2F; 标题</span><br><span class="line">    title: Random.ctitle(),</span><br><span class="line">    cword: Random.cword(),</span><br><span class="line">    &#x2F;&#x2F; 一段文本 1段-100段</span><br><span class="line">    cparagraph: Random.cparagraph(1, 2),</span><br><span class="line">    &#x2F;&#x2F; 英文 句子</span><br><span class="line">    sentence: Random.sentence(),</span><br><span class="line">    &#x2F;&#x2F; 区域</span><br><span class="line">    region: Random.region(),</span><br><span class="line">    &#x2F;&#x2F; 省 city zip couty 等</span><br><span class="line">    province: Random.province(),</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ip 域名 网址</span><br><span class="line">    ip: Random.ip(),</span><br><span class="line">    url: Random.url(),</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 身份证</span><br><span class="line">    identify: Random.id(),</span><br><span class="line">    &#x2F;&#x2F; 全局自增ID</span><br><span class="line">    id1: Random.increment(),</span><br><span class="line">    id2: Random.increment(),</span><br><span class="line">    id3: Random.increment(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; china_name: &#39;韩桂英&#39;,</span><br><span class="line">  china_first: &#39;陈&#39;,</span><br><span class="line">  china_last: &#39;磊&#39;,</span><br><span class="line">  eng_name: &#39;Thomas Johnson&#39;,</span><br><span class="line">  eng_first: &#39;Karen&#39;,</span><br><span class="line">  eng_last: &#39;Kenneth Donald Miller&#39;,</span><br><span class="line">  string: &#39;m&amp;gP&#39;,</span><br><span class="line">  age: 84,</span><br><span class="line">  num: 10.3,</span><br><span class="line">  numString: &#39;1&#39;,</span><br><span class="line">  date: &#39;2005-07-07&#39;,</span><br><span class="line">  time: &#39;14:45:30&#39;,</span><br><span class="line">  dateTime: &#39;1977-06-17 03:30:19&#39;,</span><br><span class="line">  now: &#39;2019-03-15 22:39:51&#39;,</span><br><span class="line">  image: &#39;http:&#x2F;&#x2F;dummyimage.com&#x2F;200x100&#x2F;ffcc33&#x2F;FFF.png&amp;text&#x3D;文字&#39;,</span><br><span class="line">  color: &#39;#8279f2&#39;,</span><br><span class="line">  title: &#39;南被复接装&#39;,</span><br><span class="line">  cword: &#39;还&#39;,</span><br><span class="line">  cparagraph: &#39;门油头做得飞作政什影美产术已我半。&#39;,</span><br><span class="line">  sentence: &#39;Svowsinxy xbqtap fkh yblqteul orfenvlx iynptosx aggjg memsgtpknd xxdh futhhwbye mtnkfyolin vtht zcglztvjk iispwbshwj wnkdxfzg euetgctbn.&#39;,</span><br><span class="line">  region: &#39;西南&#39;,</span><br><span class="line">  province: &#39;贵州省&#39;,</span><br><span class="line">  ip: &#39;15.33.17.63&#39;,</span><br><span class="line">  url: &#39;news:&#x2F;&#x2F;birulyvmr.bm&#x2F;kmeqktu&#39;,</span><br><span class="line">  identify: &#39;340000197902270270&#39;,</span><br><span class="line">  id1: 1,</span><br><span class="line">  id2: 2,</span><br><span class="line">  id3: 3 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-结合对象、数组的使用"><a href="#1-3-结合对象、数组的使用" class="headerlink" title="1.3 结合对象、数组的使用"></a>1.3 结合对象、数组的使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Random.extend(&#123;</span><br><span class="line">    constellation: function() &#123;</span><br><span class="line">        const constellations &#x3D; [</span><br><span class="line">            &#39;白羊座&#39;,</span><br><span class="line">            &#39;金牛座&#39;,</span><br><span class="line">            &#39;双子座&#39;,</span><br><span class="line">        ];</span><br><span class="line">        return this.pick(constellations);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const objList &#x3D; Mock.mock(&#123;</span><br><span class="line">    id: Random.integer(),</span><br><span class="line">    titile: Random.ctitle(),</span><br><span class="line">    email: Random.email(),</span><br><span class="line">    &#x2F;&#x2F; 数组随机生成 2-4</span><br><span class="line">    &#39;list|2-4&#39;: [</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            &#39;id|+1&#39;: 10,</span><br><span class="line">            incrNum: () &#x3D;&gt; Random.increment(),</span><br><span class="line">            title: () &#x3D;&gt; Random.ctitle(),</span><br><span class="line">            date: () &#x3D;&gt; Random.date(&#39;yyyy-MM-dd&#39;),</span><br><span class="line">            enum: () &#x3D;&gt; Random.constellation(),</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line">console.log(objList);</span><br></pre></td></tr></table></figure><p>返回值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; id: 6615749548973956,</span><br><span class="line">  titile: &#39;约布权&#39;,</span><br><span class="line">  email: &#39;p.hbjd@wwoprnolz.ci&#39;,</span><br><span class="line">  list: </span><br><span class="line">   [ &#123; id: 10,</span><br><span class="line">       incrNum: 1,</span><br><span class="line">       title: &#39;色需列流走只&#39;,</span><br><span class="line">       date: &#39;1981-09-06&#39;,</span><br><span class="line">       enum: &#39;巨蟹座&#39; &#125;,</span><br><span class="line">     &#123; id: 11,</span><br><span class="line">       incrNum: 2,</span><br><span class="line">       title: &#39;型关立&#39;,</span><br><span class="line">       date: &#39;1997-11-18&#39;,</span><br><span class="line">       enum: &#39;射手座&#39; &#125;,</span><br><span class="line">     &#123; id: 12,</span><br><span class="line">       incrNum: 3,</span><br><span class="line">       title: &#39;半我消空单高&#39;,</span><br><span class="line">       date: &#39;1997-02-12&#39;,</span><br><span class="line">       enum: &#39;摩羯座&#39; &#125;,</span><br><span class="line">     &#123; id: 13,</span><br><span class="line">       incrNum: 4,</span><br><span class="line">       title: &#39;才节片化&#39;,</span><br><span class="line">       date: &#39;1993-06-30&#39;,</span><br><span class="line">       enum: &#39;白羊座&#39; &#125; </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二部分-没用的东西【暂无】"><a href="#第二部分-没用的东西【暂无】" class="headerlink" title="第二部分 没用的东西【暂无】"></a>第二部分 没用的东西【暂无】</h3><blockquote><p>不知道啥时候可以整</p></blockquote><p>更多详细内容<br>参考链接如下：<br><a href="https://github.com/nuysoft/Mock/wiki/Mock.mock()" target="_blank" rel="noopener">github</a><br><a href="https://segmentfault.com/a/1190000012407192#articleHeader6" target="_blank" rel="noopener">关于mockjs的使用</a><br><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started" target="_blank" rel="noopener">github完整实例</a></p><ol><li>sss<ol><li></li></ol></li></ol><p>```</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yanyu</title>
      <link href="2001/04/14/null/"/>
      <url>2001/04/14/null/</url>
      
        <content type="html"><![CDATA[<img data-src="../../../../images/photos/2020/022.jpg" width=80% /><span class='geyan'>学不可以已。（《荀子·劝学》）</span><a id="more"></a><ul><li><p>Evolution forged the entirety of sentient life on this planet using only one tool: the mistake.<br>进化塑造了这颗星球上一切有意识的生命，而它只用了一个工具：错误。</p></li><li><p>You can’t play God without being acquainted with the Devil.<br>想要扮演上帝，你就不能不去了解魔鬼。</p></li><li><p>The problem is that what you and I do is so complicated.<br>这里的问题是，你我所做的事情实在太复杂了。</p></li><li><p>We practice witchcraft. We speak the right words, then we creat life itself.<br>我们这是在涉足巫术，说出正确的语言，便能创造生命。</p></li></ul><p>Tips：可不要把 Play God 理解成“戏弄上帝”了，那是 Fool God。另外，“上帝”是不加定冠词 the 的。只有在多神论体系中谈某一个特定的神时，才说 the god。</p><ul><li>Ah, my father used to say that only boring people get bored.<br>啊，我父亲曾经常说：只有无趣的人才会感到无趣。</li></ul><p>Tips：used to do sth. 并不单单是“曾经干什么”，它是在形容一种过去的常态，所以是“过去常常”或“过去一般会”。</p><ul><li>Everything in this world is magic, except to the magician.<br>世间万物皆为魔法，除非你就是操纵它的魔法师。</li></ul><p>Episode Three. The Stray<br>第3集：迷失者</p><ul><li>His personal life was marked by tragedy. He put all his hopes into his work. His search for consciousness consumed him totally.<br>他的人生充满了悲剧。他把自己的全部希望倾注到工作当中。而他对意识的研究将他彻底吞噬了。</li></ul><p>Tips：Consume sth. 的意思不光是“用某样东西”，它指的是“用掉、用尽”。</p><p>Episode Four. Dissonance Theory<br>第4集：不协调理论</p><ul><li><p>We designed every inch of it.<br>我们设计了这里的每一寸细节。</p></li><li><p>In here, we were gods. And you were merely our guests.<br>在这里，我们就是神。而你，只不过是我们的客人。</p></li></ul><p>Tips：“客人”在中文里是个带有敬意的词。但在英文里，它是个中性的词。</p><ul><li>I’m not the sentimental type.<br>我不是那种多愁善感的人。</li></ul><p>Tips：the adj. type 被用来指一个种类。你可以说 I’m the adj. type. 也可以说 I’m of the adj. type.</p><p>Episode Five. Contrapasso<br>第5集：平衡</p><ul><li>Far be it from me to get in the way of a voyage of self-discovery.<br>去妨碍一场自我发现之旅完全不是我的风格。</li></ul><p>Tips：这里开头的 far be it 是一种倒装现象，把形容词放在句首，然后主谓倒装。例如菲茨杰拉德的小说 Tender Is the Night （夜色温柔）。</p><p>Episode Six. The Adversary<br>第6集：对手</p><ul><li>I’m sure you can indulge me the little connection with my past.<br>我和过去只有这么点联系了，你肯定能迁就我以下，对吧。</li></ul><p>Tips：indulge sb. sth. 的意思是“用 sth. 来惯着 sb.”。</p><p>Episode Seven. Trompe L’Oeil<br>第7集：视幻</p><ul><li><p>I read a theory once that the human intellect is like peacock feathers.<br>我曾经读到过一个理论：人类的智力就像是孔雀的羽毛。</p></li><li><p>Just an extravagant display intented to attract a mate, just an elaborate mating ritual.<br>只不过是种用来吸引配偶的浮夸表演，只不过是种精巧的求偶仪式。</p></li><li><p>But, of course, the peacock can barely fly. It lives in the dirt, pecking insects out of the muck, consoling itself with its great beauty.<br>不过，当然，孔雀几乎不能飞。它生活在尘土间，在淤泥里啄虫子吃，看着自己那惊世骇俗的美丽聊以自慰。</p></li></ul><p>Episode Eight. Trace Decay<br>第8集：腐朽开始</p><p>Never place your trust in us. We’re only human. Inevitably, we will disappoint you.<br>永远别对我们报以信任，我们只是人。是人，就必然会让你失望。</p><p>1、凡是过去，皆为序曲。</p><p>　　All the past, all is overture.</p><p>　　2、没有比正直更富的遗产。</p><p>　　No more than just rich heritage.</p><p>　　3、女人，你的名字是弱者。</p><p>　　Woman, your name is weak.</p><p>　　4、生存还是毁灭，这是个问题。</p><p>　　To be or not to be, that is the question.</p><p>　　5、抛弃时间的人时间也抛弃他。</p><p>　　Abandoning time person time to abandon him.</p><p>　　6、报复不是勇敢，忍受才是勇敢。</p><p>　　Retaliation is not brave, stand is brave.</p><p>　　7、书籍若不常翻阅，则等于木片。</p><p>　　If don’t often read books, is equal to the wood.</p><p>　　8、读书可以帮助你忘记你的悲哀。</p><p>　　Reading can help you forget your sadness.</p><p>　　9、多一些事实，少一些矫饰废话。</p><p>　　Some facts more and some less pretensions to nonsense.</p><p>　　10、当星星不眨眼，你将为它闪耀。</p><p>　　When the stars don’t blink, you will shine for it.</p><p>　　11、太快和太慢，结果都不会美满。</p><p>　　Too fast and too slow, the result won’t be happy.</p><p>　　12、不太热烈的爱情才会维持久远。</p><p>　　Not too passionate love will keep long.</p><p>　　13、放弃时间的人，时间也放弃他。</p><p>　　Abandoning time person, time also give up him.</p><p>　　14、有很多良友，胜于有很多财富。</p><p>　　There are a lot of friend, is better than have a lot of wealth.</p><p>　　15、强有力的理由产生强有力的行动。</p><p>　　Strong reasons make strong actions.</p><p>　　16、世上本无所谓好和坏，思想使然。</p><p>　　There is, there is no good and bad, thought.</p><p>　　17、有所期待是一切精神痛苦的根源。</p><p>　　Expectation is the root of all mental distress.</p><p>　　18、黑夜无论怎样悠长，白昼总会到来。</p><p>　　No matter how long the night, the day will come.</p><p>　　19、没有肉体的摩擦，哪来灵魂的火花。</p><p>　　No physical friction, which come the spark of the soul.</p><p>　　20、我荒废了时间，时间便把我荒废了。</p><p>　　I wasted time, time will waste me.</p><p>　　21、最大的无聊，就是为无聊费尽辛劳。</p><p>　　The biggest boring, is boring hard.</p><p>　　22、我只想现在过得精彩，无所谓好坏。</p><p>　　Now I just want to have a wonderful, there is no good or bad.</p><p>　　23、不速之客只在告辞以后才最受欢迎。</p><p>　　The intruder to one of the most popular only after the leave.</p><p>　　24、大海有崖岸，热烈的爱却没有边界。</p><p>　　The sea has the scarp, warm love have no boundary.</p><p>　　25、充满了声音与狂热，里面空无一物。</p><p>　　Full of sound and fanaticism, empty inside.</p><p>　　26、愚者自以为聪明，智者则有自知之明。</p><p>　　The fool does think he clever, but the wise man knows himself to have.</p><p>　　27、没有什么比希望不平凡而更平凡的了。</p><p>　　Nothing is more mundane and wish to be remarkable.</p><p>　　28、今日所受苦难，都是他日笑谈的谈资。</p><p>　　Today, the sufferings are another joke.</p><p>　　29、聆听他人之意见，但保留自己之判断。</p><p>　　Listen to the views of others, but retain their judgment.</p><p>　　30、两个人骑一匹马，总有一个人在后面。</p><p>　　Two men ride a horse, there is always a person in the back.</p><p>　　31、为了追求更好的，毁损了原来够好的。</p><p>　　In pursuit of better, damage to the original good enough.</p><p>　　32、在悲哀里度过的时间似乎是格外长的。</p><p>　　In sad time seems to be very long.</p><p>　　33、为失策找理由，反而使该失策更明显。</p><p>　　To blunder to find reasons, makes the mistake is more obvious.</p><p>　　34、爱所有人，信任少许人，勿伤任何人。</p><p>　　Love all, trust a few, do not hurt anyone.</p><p>　　35、自己加于自己的伤害，最不容易治愈。</p><p>　　On their own injuries, the most not easy to cure.</p><p>　　36、聪明人不生眼睛，疯人何必生耳朵呢？</p><p>　　Wise men don’t have eyes, crazy people why have ears?</p><p>　　37、思想是生命的奴隶，生命是时间的弄人。</p><p>　　Thought is the slave of life, life is the time to get one.</p><p>　　38、在时间的大钟上，只有两个字——现在。</p><p>　　On the time clock, only two words - now.</p><p>　　39、简洁是智慧的灵魂，冗长是肤浅的’藻饰。</p><p>　　Brevity is the soul of wit, long is the superficial embellishments in writing.</p><p>　　40、死是可怕的。耻辱的生命是尤其可恼的。</p><p>　　Death is terrible. Life is especially despiteful of shame.</p><p>　　41、其实世事并无好坏，全看你们如何去想。</p><p>　　In fact the world no good or bad, depends on how you think.</p><p>　　42、本来无望的事，大胆尝试，往往能成功。</p><p>　　Was hopeless, bold attempt, often can succeed.</p><p>　　43、人应该生活，而非仅仅为了生存而活着。</p><p>　　People should live, rather than simply in order to survive and live.</p><p>　　44、失去了诚信，就等同于敌人毁灭了自己。</p><p>　　To destroy themselves lost integrity, is equivalent to the enemy.</p><p>　　45、无言的纯朴所表示的情感，才是最丰富的。</p><p>　　Silent simplicity represented by emotion, is one of the most abundant.</p><p>　　46、在命运的颠沛中，最可以看出人们的气节。</p><p>　　In fate had, the most can see people of integrity.</p><p>　　47、酒——以水的状态流淌，以火的性格燃烧。</p><p>　　Wine - with the state of the water flowing to the character of the fire burning.</p><p>　　48、起先的冷淡，将会使以后的恋爱更加热烈。</p><p>　　At first the cold, will make the future more warmly love.</p><p>　　49、直到再找不到对手，才收藏起自己的剑锋。</p><p>　　Until no rival, collection up edge.</p><p>　　50、我从来没有见过这样阴郁而又光明的日子。</p><p>　　I have never seen such dark and bright day.</p><pre><code>夫事以密成，语以泄败。（《韩非子·说难》）夫事以密成，语以泄败。未必其身泄之也，而语及所匿之事，如此者身危。——《韩非子·说难》译解：凡事要守密才能成功，泄密必然失败。泄密未必是主动的意愿，往往是言谈中无意说出要保密的事，这样做会危及自身安全。</code></pre><p>凡人之大体，取舍同者则相是也，取舍异者则相非也。（《韩非子·奸劫弑臣》）<br>【释义·点评】<br>    凡：用在句首，表示对某个范围的人或事物的总括。大体：多数情况。取舍：采取和舍弃；选择。<br>    就人的多数情况来说，价值取向相同的人就相互肯定，价值取向不同的人就相互排斥。</p><p>【名句·出处】<br>    夫妻者，非有骨肉之恩也，爱则亲，不爱则疏。（《韩非子·备内》）<br>【原文·语境】<br>    且万乘之主，千乘之君，后妃、夫人、适子为太子者，或有欲其君之蚤死者。何以知其然？夫妻者，非有骨肉之恩也，爱则亲，不爱则疏。<br>               ——《韩非子·备内》节选</p><p>【释义·点评】<br>    夫妻，不是像骨肉那样有血缘恩情的人，喜爱就亲近，不喜爱就疏远。</p><p>【名句·出处】<br>    舆人成舆，则欲人之富贵；匠人成棺，则欲人之夭死也。（《韩非子·备内》）<br>【原文·语境】<br>    医善吮人之伤，含人之血，非骨肉之亲也，利所加也。故舆人成舆则欲人之富贵，匠人成棺则欲人之夭死也，非舆人仁而匠人贼也，人不贵则舆不售，人不死则棺不买，情非憎人也，利在人之死也。<br>               ——《韩非子·备内》节选</p><p>【释义·点评】<br>    舆人：造车的人；舆，车。夭死：早死。<br>    造车的人造成车，就希望人都富贵；木匠造成棺材，就希望人早死。<br>    “舆人成舆，则欲人之富贵；匠人成棺，则欲人之夭死也”，揭示了商品社会的特点，商品制造者都希望商品尽快转化为货币，无关仁爱和奸邪。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
